/*==============================================================================
    Script Information:
    
    * Developed by : ilhamjaya08(Clyne) as Diversity Founder
    * Using Reworked Code by: Ananta Wiguna (Dextry) & Leynardo Yosef (Revelt) & Rachmad Setiawan (sheenidgs).
    * Base Script: South Central Roleplay https://github.com
    * Current Version: 1.3 Deluxe

    Other Credits:

    * Kalcor (Kye) SAMP Developer
    * Y_Less (sscanf, YSI, and other function)
    * BlueG, maddinat0r (a_mysql plugin)
    * Southclaw (Progressbar2, and other function)
    * Emmet_ (Original script)
    * JustMichael (For helping with suggesting improve script performance)
    * Incognito, Zeex, and much more contribution on samp forum.

    

    Copyright(c) 2020 Leynardo Yosef (Revelt) & Rachmad Setiawan (sheenidgs) (All rights reserved).
    Copyright(c) 2022 Ananta Wiguna (Dextry)

    Current Copyright(Â©) 2024 Muhammad Ilham Jaya (ilhamjaya08)

    
==============================================================================*/

/*
Server Update list frp v2.9a Blackjack!

[Actor] Actor robbery sekarang cooldown sampai jam 23:00 ingame time sesudah actor tangannya turun / robbery
[Rope] Penambahan cmd /tie dan /untie untuk "Rope Roleplay" tidak perlu item, yang penting angkat tangan orangnya.
[Elm] Command untuk menyalakan ELM (Faction) '/elm'
[Siren] Penambahan entitas siren /togsiren roof, mid, dashboard dan off
[Weapon] Weaponscrap hanya bisa di blackmarket
[Vehicle Registration] Vehicle Registration bisa tanpa masuk ke dalam kendaraan atau tidak perlu di dalam kendaraan
[Blackjack] Blackjack score color
[Blackjack] Max bet

*/

// textdraw_map di disable oleh ananta
/*==============================================================================
    Library Predefinitions
==============================================================================*/
#pragma compat 1
#pragma compress 0
#pragma dynamic 1_048_576

#include <a_samp>                   //Credits to SA-MP

//Uncomment this if you want to use high-level debug mode
// #define DEBUG_MODE 


/*==============================================================================
    Librarys
==============================================================================*/

#include <Pawn.RakNet>
#include <streamer>                 //by Incognito
#include <sscanf2>                  //by Y_Less fixed by maddinat0r & Emmet_
#include <a_mysql>
#include <gvar>                     //by Incognito
#include <chrono>                   //by Southclaws
#include <crashdetect>
#include <VehicleMatrix>            //by gzxmx94

#include <evf>                      //by Emmet_

#include <YSI\y_timers>             //by Y_Less from YSI
#include <YSI\y_iterate>            //by Y_Less from YSI
#include <YSI\y_hooks>              //by Y_Less from YSI
#include <YSI\y_colours>            //by Y_Less from YSI
#include <YSI\y_vehicledata>        //by Y_Less from YSI

#include <nex-ac>                   //BY Nexus
#include <strlib>                   //by Slice
#include <easyDialog>               //by Emmet_
#include <eSelection>               //by Emmet_
#include <eSelectionv2>             //by Emmet edited by Agus Syahputra
#include <progress2>                //by Southclaws
#include <izcmd>                     //by Zeex
#include <lookup>                   //by Emmet_
#include <evi>                      //by Vince
#include <cb>                       //by Emmet_
//#include <editing>                  //by Pottus
#include <garage_block>             //by Crayder
#include <PreviewModelDialog>       //by Gammix
#include <OPVD>
#include <sampmailjs>
#include <discord-connector>
#include <discord-cmd>

// API
#include "modules\api\StaticLocations.pwn"



#include "modules\core\logger.pwn"
#include "modules/vehicle/compability.pwn"
#include "modules/core/defined.pwn"
#include "modules/core/enums.pwn"
#include "modules/core/variable.pwn"
#include "modules/core/enums_variable.pwn"
#include "modules/core/array.pwn"
#include "modules/core/functions.pwn"
#include "modules/core/server_array.pwn"

#include "modules/player/misc/laptoptxd.pwn"
#include "modules/player/misc/mdctxd.pwn"
#include "modules/player/misc/atmtxd.pwn"

// #include "modules/player/walkstyle.pwn"
#include "modules/misc/swatrope.pwn"

#include "modules\player\animation.pwn"
/*==============================================================================
    Function Prototype
==============================================================================*/
forward OnGameModeInitEx();
forward OnPlayerLogin(playerid);
forward OnPlayerDisconnectEx(playerid, reason);
forward Float:GetVehicleSpeed(vehicleid, bool:kmh = true, Float:velx = 0.0, Float:vely = 0.0, Float:velz = 0.0);
forward OnEconomyLoaded();
forward OnUpdateComponentPrice(old_price, new_price);

static Text3D:gTreatmentText3D;

/*==============================================================================
    Initialising OnGameModeInit
==============================================================================*/

new DCC_Channel:Whitelist;
new DCC_Channel:RefundRoles;
new DCC_Channel:g_Discord_Chat;
main() { 
    DCC_SetBotActivity("Diversity World ");
}

public OnGameModeInit()
{
	#if defined DEBUG_MODE
        printf("[debug] OnGameModeInit()");
	#endif
    g_Discord_Chat = DCC_FindChannelById("1178159505243119757"); // Discord channel ID
    // Untuk mengambil waktu saat ini.
    new
        Timestamp:now = Now() + Hours:7,
        outputTime[128]
    ;


    TimeFormat(now, "[%d/%m/%Y %H:%M:%S]", outputTime);
    printf("[OnGameModeInit] Server started on: %s (UTC+7)", outputTime);

    print("[OnGameModeInit] Initialising 'Main'...");
    OnGameModeInit_Setup();
    #if defined main_OnGameModeInit
        return main_OnGameModeInit();
    #else
        return 1;
    #endif
}
#if defined _ALS_OnGameModeInit
    #undef OnGameModeInit
#else
    #define _ALS_OnGameModeInit
#endif
#define OnGameModeInit main_OnGameModeInit
#if defined main_OnGameModeInit
    forward main_OnGameModeInit();
#endif

#include "modules/core/predefenition.pwn"
#include "modules/core/macros.pwn"

/*==============================================================================
    Server modules
==============================================================================*/
// Economy
#include "modules\server\economy.pwn"

// Job Config
#include "modules\server\job_config.pwn"

//Import System
#include "modules/misc/imports.pwn"

//#include "modules/dynamic/timer/sholattimer.pwn"

// Core Files
#include "modules/dynamic/hunt/core.pwn"
#include "modules/dynamic/corps/core.pwn"
#include "modules/dynamic/actor/core.pwn"
#include "modules/dynamic/veh/core.pwn"
#include "modules/dynamic/gate/core.pwn"
#include "modules/dynamic/lumber/core.pwn"
#include "modules/dynamic/rental/core.pwn"
#include "modules/dynamic/pump/core.pwn"
#include "modules/dynamic/market/core.pwn"
#include "modules/dynamic/cargo/core.pwn"
#include "modules/dynamic/bsmn/core.pwn"
#include "modules/dynamic/tags/core.pwn"
#include "modules/dynamic/dealer/core.pwn"
#include "modules/dynamic/plant/core.pwn"
#include "modules/dynamic/atm/core.pwn"
#include "modules/dynamic/cade/core.pwn"
#include "modules/dynamic/speed/core.pwn"
#include "modules/dynamic/ccp/core.pwn"

/*Vending menu
#include "modules/dynamic/vending/core.pwn"
#include "modules/dynamic/vending/cmd.pwn"
#include "modules/dynamic/vending/callback.pwn"
#include "modules/dynamic/vending/func.pwn"*/

// Business Function
#include "modules\server\business_employee\func.pwn"
// Admin Activity
#include "modules\admin\admin_activities.pwn"

// Admin Duty Times
#include "modules\admin\admin_duty_times.pwn"

// Admin Event
#include "modules\admin\admin_event.pwn"

// #include "modules/player/relation/function.pwn"
#include "modules/player/relation/cmd.pwn"

#include "modules\player\blacklist\core.pwn"
#include "modules\player\blacklist\commands.pwn"

#include "modules/player/weapon/core.pwn"
#include "modules/player/weapon/cmd.pwn"
#include "modules/player/weapon/faction.pwn"

#include "modules/player/coins/core.pwn"
#include "modules/player/vip/core.pwn"

#include "modules/player/vip/cmd.pwn"
#include "modules/player/coins/cmd.pwn"

#include "modules/player/items/boombox.pwn"

#include "modules/player/report/core.pwn"
#include "modules/player/report/cmd.pwn"

#include "modules\player\bodystatus.pwn"
// #include "modules\player\player_pet.pwn"
#include "modules\player\wardrobe.pwn"
#include "modules\player\playermark.pwn"

// Server
#include "modules/server/dmv.pwn"
#include "modules/server/salary.pwn"
#include "modules/server/database.pwn"
#include "modules/server/waypoint.pwn"
#include "modules/server/weather.pwn"


//AFK System
// #include "modules/misc/afksystem.pwn"

//Handbrake
#include "modules/demo/handbreak.pwn"
#include "modules/demo/discord_log.pwn"
#include "modules/demo/character_textdraw.pwn"
#include "modules/demo/loginTextdraws.pwn"
// #include "modules/demo/login_actor.pwn"

#include "modules/dynamic/workshop.pwn"
#include "modules/dynamic/weaponbody.pwn"
#include "modules/dynamic/hunt/cmd.pwn"
#include "modules/dynamic/hunt/action.pwn"

#include "modules/dynamic/veh/vkeys.pwn"
// #include "modules/dynamic/veh/chopshop.pwn"
#include "modules/dynamic/veh/speedradar.pwn"

#include "modules\dynamic\veh\gunrack.pwn"
#include "modules/dynamic/veh/func.pwn"
#include "modules/dynamic/veh/action.pwn"
#include "modules/dynamic/veh/cmd.pwn"



// Main Jobs
#include "modules\jobs\mechanic.pwn"
#include "modules\jobs\farmer.pwn"
#include "modules\jobs\jobskill.pwn"

#include "modules/dynamic/gate/cmd.pwn"
#include "modules/dynamic/gate/action.pwn"

#include "modules/dynamic/lumber/cmd.pwn"
#include "modules/dynamic/lumber/action.pwn"

#include "modules/dynamic/rental/action.pwn"
#include "modules/dynamic/rental/cmd.pwn"

#include "modules/dynamic/pump/action.pwn"
#include "modules/dynamic/pump/cmd.pwn"

#include "modules/dynamic/market/func.pwn"
#include "modules/dynamic/market/cmd.pwn"

#include "modules/dynamic/cargo/action.pwn"
#include "modules/dynamic/cargo/func.pwn"
#include "modules/dynamic/cargo/cmd.pwn"

#include "modules/dynamic/bsmn/action.pwn"
#include "modules/dynamic/bsmn/func.pwn"
#include "modules/dynamic/bsmn/cmd.pwn"

#include "modules/dynamic/tags/impl.pwn"
#include "modules/dynamic/tags/func.pwn"
#include "modules/dynamic/tags/cmd.pwn"

#include "modules/dynamic/dealer/func.pwn"
#include "modules/dynamic/dealer/cmd.pwn"

#include "modules/dynamic/plant/func.pwn"
#include "modules/dynamic/plant/impl.pwn"
#include "modules/dynamic/plant/cmd.pwn"

#include "modules/dynamic/atm/func.pwn"
#include "modules/dynamic/atm/cmd.pwn"

#include "modules/dynamic/fire/core.pwn"
#include "modules/dynamic/fire/function.pwn"
#include "modules/dynamic/fire/callback.pwn"
#include "modules/dynamic/fire/cmd.pwn"

#include "modules\dynamic\vending.pwn"

//===Deadbody===
#include "modules/dynamic/corps/func.pwn"
#include "modules/dynamic/corps/cmd.pwn"
//==============
//Actor
#include "modules/dynamic/actor/func.pwn"
#include "modules/dynamic/actor/callback.pwn"
#include "modules/dynamic/actor/cmd.pwn"

//911 CP
#include "modules/dynamic/ccp/func.pwn"

#include "modules/dynamic/cade/callback.pwn"
#include "modules/dynamic/cade/func.pwn"
#include "modules/dynamic/cade/cmd.pwn"

#include "modules/dynamic/speed/func.pwn"
#include "modules/dynamic/speed/cmd.pwn"

// Misc
#include "modules/misc/housekeys.pwn"
#include "modules/misc/anti_spam.pwn"
#include "modules/misc/prison.pwn"
#include "modules/misc/callsign.pwn"
#include "modules/misc/togsiren.pwn"
#include "modules/misc/druglab.pwn"
#include "modules/vehicle/crashsystem.pwn"

//Airport System
#include "modules/dynamic/airport/airport.pwn"



// Mapping
#include "modules/mapping/glen_park_apartment.pwn"
#include "modules/mapping/bank.pwn"
#include "modules/mapping/playerauction.pwn"
#include "modules/mapping/ship.pwn"
#include "modules/mapping/dermaga.pwn"

//Workshop
#include "modules/mapping/wsglenpark.pwn"

//Gang&Mafia
#include "modules/mapping/gangbase1.pwn"

//Admin
#include "modules/mapping/adminbase.pwn"

//SAFD
//#include "modules/mapping/fireman.pwn"
//#include "modules/mapping/veronafiredepartment.pwn"

//gas station
#include "modules/mapping/gasstationveronaganton.pwn"

//CITY HALL
#include "modules/mapping/ch_lobby.pwn"
#include "modules/mapping/ch_office.pwn"
//#include "modules/mapping/newcityhall.pwn"
#include "modules/mapping/cityhallneww.pwn"

//MEKA
//#include "modules/mapping/interiormeka.pwn"

//PENJARA
#include "modules/mapping/prisonn.pwn"

//MENARA EIFFEL
#include "modules/mapping/eiffel.pwn"

//2024
#include "modules/mapping/newyear.pwn"

//PULAU
#include "modules/mapping/untitledisland.pwn"

//DEALER
#include "modules/mapping/grotti.pwn"

//Social Network
//#include "modules/mapping/socialnetwork.pwn"

//SANNEWS
// #include "modules/mapping/LSNext.pwn"
#include "modules/mapping/sanewsext.pwn"
#include "modules/mapping/LSNlobby.pwn"
#include "modules/mapping/LSNOffice.pwn"
#include "modules/mapping/LSNstudio.pwn"
#include "modules/mapping/newbieschool.pwn"
// #include "modules/mapping/SADOC.pwn"
// #include "modules/mapping/SADOCoffice.pwn"
// #include "modules/mapping/SADOClocker.pwn"

#include "modules/mapping/mechanic.pwn"
#include "modules/mapping/mc_mc.pwn"

//Coffee&bar
#include "modules/mapping/gantonbar.pwn"

#include "modules/mapping/workshop.pwn"
#include "modules/mapping/asghnewint.pwn"
#include "modules/mapping/lspdexterior.pwn"
#include "modules/mapping/lspdretextured.pwn"
//#include "modules/mapping/lspdext.pwn"
#include "modules/mapping/interiorfd.pwn"
#include "modules/mapping/fishfactory.pwn"
#include "modules/mapping/criminalintel.pwn"

// #define NEWS_INTERIOR_MAP 7
#include "modules/mapping/asghext.pwn"
#include "modules/mapping/NewLSBS.pwn"
// #include "modules/mapping/LSNext.pwn"
#include "modules/mapping/Minerext.pwn"
#include "modules/mapping/Bankext.pwn"
#include "modules/mapping/merchedes.pwn"
// #include "modules/mapping/LSNlobby.pwn"
// #include "modules/mapping/LSNOffice.pwn"
// #include "modules/mapping/LSNstudio.pwn"
#include "modules/mapping/SWATint.pwn"
#include "modules/mapping/SWAText.pwn"
#include "modules/mapping/homeless.pwn"

#include "modules/mapping/lspd_lobby.pwn"
#include "modules/mapping/lspd_inside.pwn"
#include "modules/mapping/lspd_jail.pwn"

// #include "modules/mapping/ch_lobby.pwn"
// #include "modules/mapping/ch_office.pwn"

// #include "modules/mapping/fire_dept.pwn"

#include "modules/mapping/houseint.pwn"
#include "modules/mapping/jailmap.pwn"
#include "modules/mapping/newbieschool.pwn"
#include "modules/mapping/toll_gate.pwn"
#include "modules/mapping/LSBSMap.pwn"



// Sidejob
#include "modules/sidejob/trashmaster.pwn"
#include "modules/sidejob/sweeperjob.pwn"
#include "modules/sidejob/bussidejob.pwn"
#include "modules/sidejob/moneytrans.pwn"
#include "modules/sidejob/boxville.pwn"

// Other
#include "modules/demo/anticheat.pwn"
#include "modules/demo/antibike_tapping.pwn"
#include "modules/demo/antibike_hopping.pwn"

#include "modules/player/misc/dmv.pwn"
#include "modules/player/misc/drugs.pwn"
#include "modules/player/misc/speedlimit.pwn"

// Player's Visual
#include "modules/player/visual/speedometer.pwn"
#include "modules/player/visual/hud.pwn"
#include "modules/player/visual/idcard.pwn"

// Server realtime clock
#include "modules\server\realtime_clock.pwn"

#include "modules/core/server_entity.pwn"
// Dynamic
#include "modules\dynamic\apartment.pwn"

// Faction Goverment Feature
// #include "modules\player\faction\gov.pwn"

#include "modules\player\gambling.pwn"

// Admin
#include "modules/admin/core.pwn"
#include "modules/admin/cmd.pwn"
#include "modules/admin/callbacks.pwn"

// Server
#include "modules/server/furniture.pwn"

/*==============================================================================
    Module Script
==============================================================================*/
//#include "modules/demo/fueltruck.pwn"

//#include "modules/dynamic/cargo.pwn"
#include "modules/misc/animations.pwn"
#include "modules/misc/pawnraknet.pwn"
#include "modules/misc/tune.pwn"
#include "modules/player/misc/pauction.pwn"

//#include "modules/misc/weaponsystem.pwn"
//#include "modules/misc/dropweapon.pwn"

#include "modules/misc/vehicle_object.pwn"

#include "modules/core/player_timer.pwn"
#include "modules/core/global_timer.pwn"

/*==============================================================================
    Function
==============================================================================*/
SQL_CheckAccount(playerid)
{
    new query[256];
    format(query, sizeof(query), "SELECT * FROM `accounts` LEFT JOIN `whitelist` ON accounts.ID = whitelist.pID WHERE `Username` = '%s' LIMIT 1;", ReturnName(playerid));
    mysql_tquery(g_iHandle, query, "OnQueryFinished", "ddd", playerid, THREAD_FIND_USERNAME, g_MysqlRaceCheck[playerid]);

    return 1;
}

ClearPlayerChat(playerid, line)
{
    for (new i = 0; i < line; i ++) {
        SendClientMessage(playerid, -1,"");
    }
}

Player_ToggleTelportAntiCheat(playerid, bool:toggle)
{
    if (!IsPlayerConnected(playerid))
    {
        return 0;
    }

    EnableAntiCheatForPlayer(playerid, 2, toggle);
    EnableAntiCheatForPlayer(playerid, 3, toggle);
    EnableAntiCheatForPlayer(playerid, 6, toggle); // Code 6 reason.
    return 1;
}

SetPlayerHunger(playerid, Float:energy)
{
    PlayerData[playerid][pHunger] = energy;

    if(PlayerData[playerid][pHunger] > 100)
        PlayerData[playerid][pHunger] = 100;

    else if(PlayerData[playerid][pHunger] < 0)
        PlayerData[playerid][pHunger] = 0;

    if(!PlayerData[playerid][pTogHud]) 
    {
        new string[25], hudstyle = PlayerData[playerid][pHudStyle];
        switch(hudstyle)
        {
            case 0:
            {
                // format(string, sizeof(string), "%d%%", floatround(PlayerData[playerid][pHunger], floatround_round));
                // PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], string);
                format(string, sizeof(string), "%d%%", floatround(PlayerData[playerid][pHunger], floatround_round));
                PlayerTextDrawSetString(playerid, HUNGER_PERC[playerid], string);
            }
            case 1:
            {
                SetPlayerProgressBarValue(playerid, HungryBar[playerid], PlayerData[playerid][pHunger]);
            }
            case 2:
            {
                format(string, sizeof(string), "%d%%", floatround(PlayerData[playerid][pHunger], floatround_round));
                PlayerTextDrawSetString(playerid, BURGERVALUE_HUD2[playerid], string);
            }
        }
    }
    return 1;
}
SetPlayerRate(playerid, Float:rate)
{
    PlayerData[playerid][pDead] = rate;

    if(PlayerData[playerid][pDead] > 100)
    {
        PlayerData[playerid][pDead] = 100;
    }
    else if(PlayerData[playerid][pDead] < 0)
    {
        PlayerData[playerid][pDead] = 0;
    }
    return 1;
}
SetPlayerEnergy(playerid, Float:energy)
{
    PlayerData[playerid][pEnergy] = energy;

    if(PlayerData[playerid][pEnergy] > 100)
        PlayerData[playerid][pEnergy] = 100;

    else if(PlayerData[playerid][pEnergy] < 0)
        PlayerData[playerid][pEnergy] = 0;

    if(!PlayerData[playerid][pTogHud]) {
        new string[25], hudstyle = PlayerData[playerid][pHudStyle];
        switch(hudstyle)
        {
            case 0:
            {
                // format(string, sizeof(string), "%d%%", floatround(PlayerData[playerid][pEnergy], floatround_round));
                // PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], string);
                format(string, sizeof(string), "%d%%", floatround(PlayerData[playerid][pEnergy], floatround_round));
                PlayerTextDrawSetString(playerid, THIRST_PERC[playerid], string);
            }
            case 1:
            {
                SetPlayerProgressBarValue(playerid, EnergyBar[playerid], PlayerData[playerid][pEnergy]);
            }
            case 2:
            {
                format(string, sizeof(string), "%d%%", floatround(PlayerData[playerid][pEnergy], floatround_round));
                PlayerTextDrawSetString(playerid, DRINKVALUE_HUD2[playerid], string);

            }
        }
    }
    return 1;
}
GetTickCountDifference(newtick, oldtick)
{
    if(oldtick < 0 && newtick >= 0)
        return newtick - oldtick;

    else if(oldtick >= 0 && newtick < 0 || oldtick > newtick)
        return (cellmax - oldtick + 1) - (cellmin - newtick);

    return newtick - oldtick;
}

stock SQL_ReturnID(sql) 
{
    foreach(new i : Player) if(GetPlayerSQLID(i) == sql) {
        return 1;
    }
    return INVALID_PLAYER_ID;
}

SQL_IsLogged(playerid) {
    return (IsPlayerConnected(playerid) && AccountData[playerid][pLogged]);
}

SQL_IsCharacterLogged(playerid)  {
    return (IsPlayerConnected(playerid) && PlayerData[playerid][pLogged]);
}
SetPlayerDrunkLevelEx(playerid, amount, bool:time = true, bool:add = true)
{
    if(time)
    {
        PlayerData[playerid][pDrunkTime] = 300;
    }

    if(add)
    {
        PlayerData[playerid][pDrunk] += amount;
        if(PlayerData[playerid][pDrunk] > 10000)
        {
            ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P" , 4.1, 0, 0, 0, 0, 0, 1);
            PlayerPlaySoundEx(playerid, 7879);
        }
    }

    SetPlayerDrunkLevel(playerid, PlayerData[playerid][pDrunk]);
    return 1;
}
Taxi_GUI(playerid, bool:mode)
{
    if(mode)
    {
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_taxi][0]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_taxi][1]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_taxi][2]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_taxi][3]);
    }
    else
    {
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_taxi][0]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_taxi][1]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_taxi][2]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_taxi][3]);
    }
    return 1;
}

FixText(text[])
{
    new len = strlen(text);
    if(len > 1)
    {
        for (new i = 0; i < len; i++)
        {
            if(text[i] == 92)
            {
                if(text[i+1] == 'n')
                {
                    text[i] = '\n';
                    for (new j = i+1; j < len; j++) text[j] = text[j+1], text[j+1] = 0;
                    continue;
                }
                if(text[i+1] == 't')
                {
                    text[i] = '\t';
                    for (new j = i+1; j < len-1; j++) text[j] = text[j+1], text[j+1] = 0;
                    continue;
                }

                if(text[i+1] == 92)
                {
                    text[i] = 92;
                    for (new j = i+1; j < len-1; j++) text[j] = text[j+1], text[j+1] = 0;
                }
            }
        }
    }
    return 1;
}

ReplaceString(text[])
{
    new replace[128];
    format(replace, sizeof(replace), text);

    strreplace(replace, "(e)", "\n");
    strreplace(replace, "(n)", "\n");
    strreplace(replace, "(b)", "{0049FF}");
    strreplace(replace, "(bl)", "{000000}");
    strreplace(replace, "(w)", "{FFFFFF}");
    strreplace(replace, "(r)", "{FF3333}");
    strreplace(replace, "(g)", "{37DB45}");
    strreplace(replace, "(y)", "{F3FF02}");
    return replace;
}

ColouredText(text[])
{
    new
        pos = -1,
        string[144]
    ;
    strmid(string, text, 0, 128, (sizeof(string) - 16));

    while((pos = strfind(string, "#", true, (pos + 1))) != -1)
    {
        new
            i = (pos + 1),
            hexCount
        ;
        for( ; ((string[i] != 0) && (hexCount < 6)); ++i, ++hexCount)
        {
            if(!(('a' <= string[i] <= 'f') || ('A' <= string[i] <= 'F') || ('0' <= string[i] <= '9')))
            {
                    break;
            }
        }
        if((hexCount == 6) && !(hexCount < 6))
        {
            string[pos] = '{';
            strins(string, "}", i);
        }
    }
    return string;
}

ViewBillboards(playerid)
{
    new
        string[128];

    format(string, sizeof(string), "SELECT * FROM `billboards` ORDER BY `bbID` DESC");
    mysql_tquery(g_iHandle, string, "OnViewBillboards", "d", playerid);
    return 1;
}

AddMissCall(playerid, number)
{
    for(new z = 0; z != 10; z++) if(!strcmp(misscallList[playerid][z], "null")) {
        new
            hour, minute, second;

        gettime(hour, minute, second);
        format(misscallList[playerid][z], 128, "Miss call at: %02d:%02d - by: %s", hour, minute, GetContactNameByNumber(playerid, number));
        return 1;
    }
    return 0;
}

GetMissCallCount(playerid)
{
    new count;
    for(new z = 0; z != 10; z++) if(strcmp(misscallList[playerid][z], "null")) {
        count++;
    }
    return count;
}

ShowMissCallList(playerid)
{
    if(!GetMissCallCount(playerid))
        return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Miss Call List", "There is nothing miss call on your phone.", "Close", "");

    new
        misscall[128];

    for(new z = 0; z != 10; z++) if(strcmp(misscallList[playerid][z], "null")) {
        strcat(misscall, sprintf("%s", misscallList[playerid][z]));
        strcat(misscall, "\n");
    }
    Dialog_Show(playerid, MissCallList, DIALOG_STYLE_LIST, "Miss Call List", misscall, "Clear", "Close");
    return 1;
}


SQL_ReturnEscaped(const string[])
{
    new entry[256];
    mysql_escape_string(string, entry, sizeof(entry));
    return entry;
}

SQL_SaveAccounts(playerid)
{
    if (!AccountData[playerid][pLogged])
        return 0;

    new
        query[1024];

    format(query, sizeof(query), "UPDATE `accounts` SET `IP`='%s',`LeaveIP`='%s',`ReportPoint`='%d',`LoginDate`='%d',`AdminDutyTime`='%d',`AdminAcceptReport`='%d',`AdminDeniedReport`='%d',`AdminAcceptStuck`='%d',`AdminDeniedStuck`='%d',`AdminBanned`='%d',`AdminUnbanned`='%d',`AdminJail`='%d',`AdminAnswer`='%d' WHERE `ID` = '%d'",
        AccountData[playerid][pIP],
        AccountData[playerid][pLeaveIP],
        AccountData[playerid][pReportPoint],
        AccountData[playerid][pLoginDate],
        AccountData[playerid][pAdminDutyTime],
        AccountData[playerid][pAdminAcceptReport],
        AccountData[playerid][pAdminDeniedReport],
        AccountData[playerid][pAdminAcceptStuck],
        AccountData[playerid][pAdminDeniedStuck],
        AccountData[playerid][pAdminBanned],
        AccountData[playerid][pAdminUnbanned],
        AccountData[playerid][pAdminJail],
        AccountData[playerid][pAdminAnswer],
        AccountData[playerid][pID]
    );
    mysql_tquery(g_iHandle, query);

    SQL_SaveCharacter(playerid);
    return 1;
}
SaveToggle(playerid)
{
    if(!PlayerData[playerid][pLogged])
        return 0;

    new
        query[3062];
    format(query, sizeof(query), "UPDATE `characters` SET `pTogOOC` = '%d', `pTogPM` = '%d', `pTogBC` = '%d', `pTogFaction` = '%d', `pTogLogin` = '%d', `pTogAnim` = '%d', `pTogRelation` = '%d' WHERE `ID` = '%d'",
        PlayerData[playerid][pDisableOOC],
        PlayerData[playerid][pDisablePM],
        PlayerData[playerid][pDisableBC],
        PlayerData[playerid][pDisableFaction],
        PlayerData[playerid][pDisableLogin],
        PlayerData[playerid][pDisableAnim],
        PlayerData[playerid][pTogRelation],
        PlayerData[playerid][pID]
    );
    mysql_tquery(g_iHandle, query);
    return 1;
}



SQL_SaveCharacter(playerid)
{
    if(!PlayerData[playerid][pLogged])
        return 0;

    new
        query[4098];

    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !DMV_GetTest(playerid) && !IsPlayerInEvent(playerid))
    {
        PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
        if(PlayerData[playerid][pWorld] < MIN_VIRTUAL_WORLD)
        {
            GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
            PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
        }
        else if(PlayerData[playerid][pWorld] > MIN_VIRTUAL_WORLD && PlayerData[playerid][pWorld] < MAX_VIRTUAL_WORLD)
        {
            PlayerData[playerid][pWorld] = 0;
            PlayerData[playerid][pInterior] = 0;
        }
        GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

        if(!PlayerData[playerid][pKilled] && PlayerData[playerid][pHealth] == 0.0) {
            PlayerData[playerid][pHealth] = 100.0;
        }
    }
    
    Save_PlayerSkill(playerid);

    format(query, sizeof(query), "UPDATE `characters` SET `Created` = '%d', `Gender` = '%d', `Birthdate` = '%s', `Origin` = '%s', `Skin` = '%d', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `Health` = '%.4f', `Interior` = '%d', `World` = '%d', `Hospital` = '%d', `HospitalInt` = '%d', `Cuffed` = '%d', `Tied` = '%d', `Money` = '%d', `BankMoney` = '%d', `OwnsBillboard` = '%d', `JailTime` = '%d', `Muted` = '%d'",
        PlayerData[playerid][pCreated],
        PlayerData[playerid][pGender],
        PlayerData[playerid][pBirthdate],
        PlayerData[playerid][pOrigin],
        PlayerData[playerid][pSkin],
        PlayerData[playerid][pPos][0],
        PlayerData[playerid][pPos][1],
        PlayerData[playerid][pPos][2],
        PlayerData[playerid][pPos][3],
        PlayerData[playerid][pHealth],
        PlayerData[playerid][pInterior],
        PlayerData[playerid][pWorld],
        PlayerData[playerid][pHospital],
        PlayerData[playerid][pHospitalInt],
        PlayerData[playerid][pCuffed],
        PlayerData[playerid][pTied],
        PlayerData[playerid][pMoney],
        PlayerData[playerid][pBankMoney],
        PlayerData[playerid][pOwnsBillboard],
        PlayerData[playerid][pJailTime],
        PlayerData[playerid][pMuted]
    );
    format(query, sizeof(query), "%s, `House` = '%d', `FurnStore` = '%d', `Business` = '%d', `Entrance` = '%d', `Apartment` = '%d', `ApartmentBuilding` = '%d', `Phone` = '%d',`PhoneCredits` = '%d', `Lottery` = '%d', `LotteryB` = '%d', `Hunger` = '%.1f', `DeadTime` = '%.2f', `PlayingHours` = '%d', `Minutes` = '%d', `ArmorStatus` = '%.4f', `Job` = '%d', `JobLeave` = '%d', `Faction` = '%d', `FactionRank` = '%d', `Prisoned` = '%d', `Injured` = '%d', `Warrants` = '%d', `Channel` = '%d', `Bleeding` = '%d', `SpawnPoint` = '%d' WHERE `ID` = '%d'",
        query,
        PlayerData[playerid][pHouse],
        PlayerData[playerid][pFurnStore],
        PlayerData[playerid][pBusiness],
        PlayerData[playerid][pEntrance],
        PlayerData[playerid][pApartment],
        PlayerData[playerid][pApartmentBuilding],
        PlayerData[playerid][pPhone],
        PlayerData[playerid][pCredits],
        PlayerData[playerid][pLottery],
        PlayerData[playerid][pLotteryB],
        PlayerData[playerid][pHunger],
        PlayerData[playerid][pDead],
        PlayerData[playerid][pPlayingHours],
        PlayerData[playerid][pMinutes],
        PlayerData[playerid][pArmorStatus],
        PlayerData[playerid][pJob],
        PlayerData[playerid][pJobLeave],
        PlayerData[playerid][pFactionID],
        PlayerData[playerid][pFactionRank],
        PlayerData[playerid][pPrisoned],
        PlayerData[playerid][pInjured],
        PlayerData[playerid][pWarrants],
        PlayerData[playerid][pChannel],
        PlayerData[playerid][pBleeding],
        PlayerData[playerid][pSpawnPoint],
        PlayerData[playerid][pID]
    );
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "UPDATE `characters` "\
    "SET `Warnings` = '%d', "\
    "`MaskID` = '%d', "\
    "`FactionMod` = '%d', "\
    "`Capacity` = '%d', "\
    "`pScore` = '%d', "\
    "`JailReason`= '%s', "\
    "`JailedBy` = '%s', "\
    "`FactionDuty` = '%d', "\
    "`UndercoverDuty` = '%d', "\
    "`SkinFaction`= '%d', "\
    "`Energy`= '%.1f', "\
    "`SalaryDuty` = '%d', "\
    "`DutyTime` = '%d', "\
    "`MineSalary` = '%d', "\
    "`IDCardExpired` = '%d', "\
    "`FactionSalaryCollected` = %d, "\
    "`FactionSalaryResettedAt` = %d",
        PlayerData[playerid][pWarnings],
        PlayerData[playerid][pMaskID],
        PlayerData[playerid][pFactionMod],
        PlayerData[playerid][pCapacity],
        PlayerData[playerid][pScore],
        SQL_ReturnEscaped(PlayerData[playerid][pJailReason]),
        SQL_ReturnEscaped(PlayerData[playerid][pJailedBy]),
        PlayerData[playerid][pOnDuty],
        PlayerData[playerid][pUndercoverDuty],
        PlayerData[playerid][pSkinFaction],
        PlayerData[playerid][pEnergy],
        PlayerData[playerid][pFactionDuty],
        PlayerData[playerid][pFactionHour],
        PlayerData[playerid][pMineSalary],
        PlayerData[playerid][pIDCardExpired],
        PlayerData[playerid][pFactionSalaryCollected],
        PlayerData[playerid][pFactionSalaryResettedAt]
    );
    format(query, sizeof(query), "%s, `Paycheck` = '%d', `DrivingLicense`='%d', `DrivingLicenseExpired`='%d', `BusinessLicense`='%d', `BusinessLicenseExpired`='%d', `WorkshopLicense`='%d', `WorkshopLicenseExpired`='%d', `FirearmLicense`='%d', `FirearmLicenseExpired`='%d', `LumberLicense`='%d', `LumberLicenseExpired`='%d', `Played`='%d|%d|%d', `DelayTruck`='%d', `TruckLicense`='%d', `TruckLicenseExpired`='%d', `BLSLicense`='%d', `BLSLicenseExpired`='%d' WHERE `ID` = '%d'",
        query,
        PlayerData[playerid][pCanPaycheck],
        PlayerData[playerid][pDrivingLicense],
        PlayerData[playerid][pDrivingLicenseExpired],
        PlayerData[playerid][pBusinessLicense],
        PlayerData[playerid][pBusinessLicenseExpired],
        PlayerData[playerid][pWorkshopLicense],
        PlayerData[playerid][pWorkshopLicenseExpired],
        PlayerData[playerid][pFirearmLicense],
        PlayerData[playerid][pFirearmLicenseExpired],
        PlayerData[playerid][pLumberLicense],
        PlayerData[playerid][pLumberLicenseExpired],
        PlayerData[playerid][pSecond],
        PlayerData[playerid][pMinute],
        PlayerData[playerid][pHour],
        PlayerData[playerid][pDelayTruck],
        PlayerData[playerid][pTruckLicense],
        PlayerData[playerid][pTruckLicenseExpired],
        PlayerData[playerid][pBLSLicense],
        PlayerData[playerid][pBLSLicenseExpired],
        PlayerData[playerid][pID]
    );
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "UPDATE `characters` SET `RegisterDate`='%d', `AdjWep`='%d'", PlayerData[playerid][pRegisterDate], PlayerData[playerid][pHidegun]);
    for (new i = 0; i < MAX_FISH; i ++) {
        format(query, sizeof(query), "%s, `Fish%d` = '%s|%.3f'", query, i, FishName[playerid][i], FishWeight[playerid][i]);
    }

    for (new i = 0; i < MAX_FREQ; i++){
        format(query, sizeof(query), "%s, `Freq%d` = '%d'", query, i, PlayerData[playerid][pFreq][i]);
    }
    
    for (new i = 0; i < 10; i ++) {
        format(query, sizeof(query), "%s, `Damage%d` = '%s'", query, i, damageList[playerid][i]);
    }
    format(query, sizeof(query), "%s, `WoodDelay`='%d', `LumberDelay`='%d', `Badge`='%d', `Cough`='%d', `MigrainTime`='%d', `MigrainRate`='%d', `Fever`='%d', `CoughPills`='%d', `MigrainPills`='%d', `FiverPills`='%d', `UsePills`='%d', `Drunk`='%d', `DrunkTime`='%d' WHERE `ID`='%d'",
        query,
        PlayerData[playerid][pWoodDelay],
        PlayerData[playerid][pLumberDelay],
        PlayerData[playerid][pBadge],
        PlayerData[playerid][pCough],
        PlayerData[playerid][pMigrainTime],
        PlayerData[playerid][pMigrainRate],
        PlayerData[playerid][pFever],
        PlayerData[playerid][pCoughPills],
        PlayerData[playerid][pMigrainPills],
        PlayerData[playerid][pFiverPills],
        PlayerData[playerid][pUsePills],
        PlayerData[playerid][pDrunk],
        PlayerData[playerid][pDrunkTime],
        PlayerData[playerid][pID]);
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "UPDATE `characters` SET `MigrainUsed`='%d', `FeverUsed`='%d', `Garage`='%d',`GunAuthority`='%d',`DMVTime`='%d',`DelayFishing`='%d',`GiveupTime`='%d', `FightStyle`='%d', `PlayerAccent` = '%s' WHERE ID='%d'",
        PlayerData[playerid][pMigrainUsed],
        PlayerData[playerid][pFeverUsed],
        PlayerData[playerid][pGarage],
        PlayerData[playerid][pGunAuthority],
        PlayerData[playerid][pDMVTime],
        PlayerData[playerid][pDelayFishing],
        PlayerData[playerid][pGiveupTime],
        PlayerData[playerid][pFightStyle],
        SQL_ReturnEscaped(PlayerData[playerid][pAccent]),
        PlayerData[playerid][pID]
    );
    mysql_tquery(g_iHandle, query);
    //Relationship Saving
    format(query, sizeof(query), "UPDATE `characters` SET `Status` = '%d', `Love` = '%.2f', `PartnerName` = '%s', `PartnerID` = '%d', `PhoneBattery` = '%.2f', `pBusinessDutyHour` = '%d', `pExperience` = '%d', `Bandage` = '%d', `LiveMode` = '%d', `ParkedVehicle` = '%d', `HudStyle` = '%d' WHERE ID = '%d'",
        PlayerData[playerid][pStatus],
        PlayerData[playerid][pLove],
        PlayerData[playerid][pPartnerName],
        PlayerData[playerid][pPartnerID],
        PlayerData[playerid][pPhoneBattery],
        PlayerData[playerid][pBizDutyHour],
        PlayerData[playerid][pExp],
        PlayerData[playerid][pBandage],
        PlayerData[playerid][pLiveMode],
        PlayerData[playerid][pParkedVehicle],
        PlayerData[playerid][pHudStyle],
        PlayerData[playerid][pID]  
    );
    mysql_tquery(g_iHandle, query);
    return 1;
}

GetInitials(const string[])
{
    new
        ret[32],
        index = 0;

    for (new i = 0, l = strlen(string); i != l; i ++)
    {
        if(('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
        ret[index++] = string[i];
    }
    return ret;
}

IsPlayerInModshop(playerid, Float:range = 3.0)
{
    for(new i = 0; i != sizeof(arrModshop); i++) 
    {
        if(SQL_IsCharacterLogged(playerid) && IsPlayerInRangeOfPoint(playerid, range, arrModshop[i][0], arrModshop[i][1], arrModshop[i][2])) 
        {
            return i;
        }
    }
    return -1;
}

// IsPlayerFalling(playerid)
// {
//     new animlib[32],tmp[32];
//     GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,tmp,32);
//     if( !strcmp(animlib, "FALL") && !IsPlayerInAnyVehicle(playerid) ) return true;
//     return false;
// }
IsPlayerInWater(playerid)
{
    new animlib[32],tmp[32];
    GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,tmp,32);
    if( !strcmp(animlib, "SWIM") && !IsPlayerInAnyVehicle(playerid) ) return true;
    return false;
}

IsVehicleInRangeOfPoint(vehicleid, Float:range, Float:x, Float:y, Float:z)
{
    if(GetVehicleDistanceFromPoint(vehicleid, x, y, z) <= range) {
        return 1;
    }
    return 0;
}


stock Float:DistanceCameraTargetToLocation(Float:fCameraX, Float:fCameraY, Float:fCameraZ, Float:fObjectX, Float:fObjectY, Float:fObjectZ, Float:fVectorX, Float:fVectorY, Float:fVectorZ)
{
    new
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fDistance;

    fDistance = GetDistance(fCameraX, fCameraY, fCameraZ, fObjectX, fObjectY, fObjectZ);

    fX = fVectorX * fDistance + fCameraX;
    fY = fVectorY * fDistance + fCameraY;
    fZ = fVectorZ * fDistance + fCameraZ;

    return floatsqroot((fX - fObjectX) * (fX - fObjectX) + (fY - fObjectY) * (fY - fObjectY) + (fZ - fObjectZ) * (fZ - fObjectZ));
}

stock IsPlayerWithWeapon(playerid,weaponid)
{
    new wd[2][13];
    for(new i; i < 13; i++)
    {
        GetPlayerWeaponData(playerid, i, wd[0][i], wd[1][i]);
        if(weaponid == wd[0][i]) return 1;
    }
    return 0;
}

PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
    if(vehicleid != INVALID_VEHICLE_ID && seatid != 128)
    {
        PlayerData[playerid][pLastVehicle] = vehicleid;
    }

    PutPlayerInVehicle(playerid, vehicleid, seatid);
    return 1;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}

PlayerHasBeanBullets(playerid)
{
    return (GetPlayerWeapon(playerid) == WEAPON_SHOTGUN && PlayerData[playerid][pBeanBullets]);
}
PlayerHasTazer(playerid)
{
    return (GetPlayerWeapon(playerid) == WEAPON_SILENCED && PlayerData[playerid][pTazer]);
}


SetPlayerToFacePlayer(playerid, targetid) {
    new
        Float:x[2],
        Float:y[2],
        Float:z[2],
        Float:angle;

    GetPlayerPos(targetid, x[0], y[0], z[0]);
    GetPlayerPos(playerid, x[1], y[1], z[1]);

    angle = (180.0 - atan2(x[1] - x[0], y[1] - y[0]));
    SetPlayerFacingAngle(playerid, angle + (5.0 * -1));
}

FlashTextDraw(playerid, PlayerText:textid, delay = 500)
{
    PlayerTextDrawHide(playerid, textid);

    SetTimerEx("FlashShowTextDraw", delay, false, "dd", playerid, _:textid);

    return 1;
}

AddFish(playerid, name[], Float:weight)
{
    new maximum_fish, level = GetFishingLevel(playerid);
    
    switch(level)
    {
        case 1: maximum_fish = 10;
        case 2: maximum_fish = 15;
        case 3: maximum_fish = 20;
        default: maximum_fish = 25;
    }

    for(new i = 0; i < maximum_fish; i++) if(!FishWeight[playerid][i]) {
        FishWeight[playerid][i] = weight;
        format(FishName[playerid][i], 32, name);
        SendServerMessage(playerid, "Anda mendapatkan ikan "COL_LIGHTRED"%s "WHITE"dengan berat "YELLOW"%.3f lbs"WHITE". (/myfish untuk melihat ikan yang di dapat).", name, weight);
        PlayerData[playerid][pHunger] -= RandomFloat(5);
        return 1;
    }
    SendServerMessage(playerid, "Anda tidak bisa menampung ikan lagi, atau anda dapat melepas kembali ikan yang didapatkan (/myfish).");
    return 1;
}

TerminateConnection(playerid)
{
    foreach(new id : Player) if(PlayerData[id][pSpectator] == playerid && GetPlayerState(id) == PLAYER_STATE_SPECTATING)
    {
        SendServerMessage(id, "Player %s telah keluar dari server pada saat anda mengawasinya.", ReturnName2(playerid));
        cmd_spectate(id, "off");
    }

    for (new id = 0; id != MAX_DAMAGE; id++) if(DamageData[playerid][id][damageExists]) {
        Damage_Save(playerid, id);
    }

    for (new id = 0; id != MAX_ACC; id++) if(AccData[playerid][id][accExists]) {
        Aksesoris_Save(playerid, id);
    }

    if(PlayerData[playerid][pAdoActive])
    {
        if(IsValidDynamic3DTextLabel(PlayerData[playerid][pAdoTag]))
            DestroyDynamic3DTextLabel(PlayerData[playerid][pAdoTag]);

        PlayerData[playerid][pAdoTag] = Text3D:INVALID_STREAMER_ID;    
    }

    if(PlayerData[playerid][pOnDrag] != INVALID_PLAYER_ID) {
        SendServerMessage(PlayerData[playerid][pOnDrag], "Player yang mengangkatmu keluar dari server.");
        StopDragging(PlayerData[playerid][pOnDrag]);
    }

    if(PlayerHasWeapon(playerid, 41)) {
        ResetWeaponID(playerid, 41);
    }

    if(PlayerData[playerid][pFirstAid]) {
        stop PlayerData[playerid][pAidTimer];
    }

    if(PlayerData[playerid][pShowFooter]) {
        KillTimer(PlayerData[playerid][pFooterTimer]);
    }

    if(PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID) {
        LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
    }

    if(PlayerData[playerid][pFreeze]) {
        stop PlayerData[playerid][pFreezeTimer];
    }

    if(PlayerData[playerid][pPlaceAd]) {
        PlayerData[playerid][pPlaceAd] = 0;
        PlayerData[playerid][pAdvertise][0] = EOS;

        stop PlayerData[playerid][pAdvertiseTimer];
        PlayerData[playerid][pAdvertiseTimer] = Timer:-1;
    }


    foreach (new i : Player)
    {
        if(PlayerData[i][pSTNKUserid] == playerid) {
            PlayerData[i][pSTNKUserid]  = INVALID_PLAYER_ID;
            PlayerData[i][pSTNKPrice]   = 0;
            PlayerData[i][pSTNKVehicle] = 0;
        }
        if(PlayerData[i][pPlateID] == playerid) {
            PlayerData[i][pCustomPlate] = 0;
        }
        if(PlayerData[i][pLastShot] == playerid) {
            PlayerData[i][pLastShot] = INVALID_PLAYER_ID;
        }
        if(PlayerData[i][pHouseSeller] == playerid) {
            PlayerData[i][pHouseSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pHouseOffered] = -1;
        }

        if(PlayerData[i][pVendingSeller] == playerid) {
            PlayerData[i][pVendingSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pVendingOffered] = -1;
        }

        if(PlayerData[i][pApartmentSeller] == playerid) {
            PlayerData[i][pApartmentSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pApartmentOffered] = -1;
        }

        if(PlayerData[i][pBusinessSeller] == playerid) {
            PlayerData[i][pBusinessSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pBusinessOffered] = -1;
        }
        if(PlayerData[i][pBodySeller] == playerid) {
            PlayerData[i][pBodySeller] = INVALID_PLAYER_ID;
            PlayerData[i][pBodyOffered] = -1;
        }
        if(PlayerData[i][pWorkshopSeller] == playerid) {
            PlayerData[i][pWorkshopSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pWorkshopOffered] = -1;
        }
        if(PlayerData[i][pCarSeller] == playerid) {
            PlayerData[i][pCarSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pCarOffered] = -1;
        }
        if(PlayerData[i][pShakeOffer] == playerid) {
            PlayerData[i][pShakeOffer] = INVALID_PLAYER_ID;
            PlayerData[i][pShakeType] = 0;
        }
        if(PlayerData[i][pFriskOffer] == playerid) {
            PlayerData[i][pFriskOffer] = INVALID_PLAYER_ID;
        }
        if(PlayerData[i][pFoodSeller] == playerid) {
            PlayerData[i][pFoodSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pFoodType] = 0;
        }
        if(PlayerData[i][pFactionOffer] == playerid) {
            PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
            PlayerData[i][pFactionOffered] = -1;
        }
        if(PlayerData[i][pMDCPlayer] == playerid) {
            PlayerData[i][pMDCPlayer] = INVALID_PLAYER_ID;
            PlayerData[i][pTrackTime] = 0;
        }
        if(PlayerData[i][pNewsGuest] == playerid) {
            PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
        }
        if(PlayerData[i][pGiveItem] == playerid) {
            PlayerData[i][pGiveItem] = INVALID_PLAYER_ID;
        }
        if(PlayerData[i][pTakeItems] == playerid) {
            PlayerData[i][pTakeItems] = INVALID_PLAYER_ID;
        }
    }
    stop AccountData[playerid][pLoginTimer];
    stop AccountData[playerid][pEmailTimer];
    // stop AFKTimerHolder[playerid];

    SQL_SaveCharacter(playerid);
    SQL_SaveAccounts(playerid);
    ResetNameTag(playerid, false, true);
    InjuredTag(playerid, false, false, true);
    ResetStatistics(playerid);
    return 1;
}

/*IsBleedableWeapon(weaponid)
{
    switch (weaponid) {
        case 4, 8, 9, 22..38: return 1;
    }
    return 0;
}*/

/*CreateBlood(playerid)
{
    new
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);
    SetTimerEx("DestroyBlood", 1500, false, "d", CreateDynamicObject(18668, x, y, z - 1.5, 0.0, 0.0, 0.0));

    return 1;
}
*/

IsPlayerOnPhone(playerid)
{
    if(PlayerData[playerid][pEmergency] > 0 || PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID || PlayerData[playerid][pFactionCall])
        return 1;

    return 0;
}

FlipVehicle(vehicleid)
{
    new
        Float:fAngle;

    GetVehicleZAngle(vehicleid, fAngle);

    SetVehicleZAngle(vehicleid, fAngle);
    SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
}

stock GetWeaponCount(playerid)
{
    new
        count,
        weapon,
        ammo;

    for (new i = 0; i < 12; i ++)
    {
        GetPlayerWeaponData(playerid, i, weapon, ammo);

        if(weapon > 0 && ammo > 0) count++;
    }
    return count;
}

Mechanic_ShowCalls(playerid)
{
    static
        string[2048];

    string[0] = 0;

    foreach (new i : Player) if(PlayerData[i][pMechanicCalled]) {
        format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
    }
    if(!strlen(string)) SendErrorMessage(playerid, "There are no Mechanic calls to accept.");
    else Dialog_Show(playerid, AcceptMechanic, DIALOG_STYLE_LIST, "Mechanic Calls", string, "Accept", "Cancel");

    return 1;
}

Taxi_ShowCalls(playerid)
{
    static
        string[2048];

    string[0] = 0;

    foreach (new i : Player) if(PlayerData[i][pTaxiCalled]) {
        format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
    }
    if(!strlen(string)) SendErrorMessage(playerid, "There are no taxi calls to accept.");
    else Dialog_Show(playerid, AcceptTaxi, DIALOG_STYLE_LIST, "Taxi Calls", string, "Accept", "Cancel");

    return 1;
}

IsShipmentAccepted(businessid)
{
    foreach (new i : Player) if(PlayerData[i][pJob] == JOB_COURIER && PlayerData[i][pShipment] == businessid) {
        return 1;
    }
    return 0;
}

CancelShipment(playerid)
{
    PlayerData[playerid][pShipment] = -1;
    DisableWaypoint(playerid);

    if(PlayerData[playerid][pDeliverShipment])
    {
        PlayerData[playerid][pDeliverShipment] = 0;
        DisablePlayerCheckpoint(playerid);
    }
    return 1;
}
ShowBizJob(playerid)
{
    new
        string[4098],
        count = 0;

    strcat(string, "#\tName\tType\tDistance\n");

    for (new i = 0; i < MAX_BUSINESSES; i ++)
    { 
        if(BusinessData[i][bizExists]) 
        {
            if(Business_EmployeGetCount(i) >= MAX_BUSINESS_EMPLOYEE)
            {
                strcat(string, sprintf("%d\t%s "GREEN"(Full)"WHITE"\t%s\t%.1f\n", i, BusinessData[i][bizName], Business_Type(i), GetPlayerDistanceFromPoint(playerid, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2])));
            }
            else
            {
                strcat(string, sprintf("%d\t%s\t%s\t%.1f\n", i, BusinessData[i][bizName], Business_Type(i), GetPlayerDistanceFromPoint(playerid, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2])));
            }
            count++;
        }
    }
    if(!count) SendErrorMessage(playerid, "There are no business accepting any job at the moment!.");
    else Dialog_Show(playerid, ApplyJob, DIALOG_STYLE_TABLIST_HEADERS, "Yellow Page", string, "Accept", "Cancel");
    return 1;
}
ShowShipments(playerid)
{
    new
        string[4098],
        count = 0;

    strcat(string, "#\tName\tType\tDistance\n");

    for (new i = 0; i < MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && BusinessData[i][bizShipment] && !IsShipmentAccepted(i)) {
        strcat(string, sprintf("%d\t%s\t%s\t%.1f\n", i, BusinessData[i][bizName], Business_Type(i), GetPlayerDistanceFromPoint(playerid, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2])));
        count++;
    }
    if(!count) SendErrorMessage(playerid, "There are no shipments to accept.");
    else Dialog_Show(playerid, AcceptShipment, DIALOG_STYLE_TABLIST_HEADERS, "Shipments", string, "Accept", "Cancel");
    return 1;
}

ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0, bool:checkrecent = false, bool:animloop = true)
{
    if(PlayerData[playerid][pInjured] || GetPlayerDrugeEffect(playerid))
        return SendErrorMessage(playerid, "You can't use animation while injured/drug effect.");
        
    if(checkrecent && RecentAnim[playerid])
    {
        return 0;
    }

    ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

    if(animloop)
    {
        PlayerData[playerid][pLoopAnim] = true;
        ShowPlayerFooter(playerid, "Press ~y~SPRINT~w~ to stop the animation.");   
    }

    return 1;
}

AnimationCheck(playerid)
{
    return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !PlayerData[playerid][pInjured] && !PlayerData[playerid][pKilled] && !PlayerData[playerid][pFreeze] /*&& !PlayerData[playerid][pCuffed]*/ && !PlayerData[playerid][pStunned] && !PlayerData[playerid][pFirstAid] && !PlayerData[playerid][pCrafting]);
}

PreloadAnimations(playerid)
{
    for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
        ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

Garbage_Create(playerid, type)
{
    for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if(!GarbageData[i][garbageExists])
    {
        switch (type) {
            case 1: GarbageData[i][garbageModel] = 1236;
            case 2: GarbageData[i][garbageModel] = 1300;
        }
        GarbageData[i][garbageExists] = true;
        GarbageData[i][garbageCapacity] = 0;

        GetPlayerPos(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);
        GetPlayerFacingAngle(playerid, GarbageData[i][garbagePos][3]);

        switch (type) {
            case 1: {
                GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.8 * floatsin(-GarbageData[i][garbagePos][3], degrees));
                GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.8 * floatcos(-GarbageData[i][garbagePos][3], degrees));
            }
            case 2: {
                GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.0 * floatsin(-GarbageData[i][garbagePos][3], degrees));
                GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.0 * floatcos(-GarbageData[i][garbagePos][3], degrees));
            }
        }
        GarbageData[i][garbageInterior] = GetPlayerInterior(playerid);
        GarbageData[i][garbageWorld] = GetPlayerVirtualWorld(playerid);

        Garbage_Refresh(i);
        mysql_tquery(g_iHandle, "INSERT INTO `garbage` (`garbageCapacity`) VALUES(0)", "OnGarbageCreated", "d", i);
        return i;
    }
    return -1;
}

Garbage_Delete(garbageid)
{
    if(garbageid != -1 && GarbageData[garbageid][garbageExists])
    {
        new
            string[64];

        format(string, sizeof(string), "DELETE FROM `garbage` WHERE `garbageID` = '%d'", GarbageData[garbageid][garbageID]);
        mysql_tquery(g_iHandle, string);

        if(IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
            DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

        GarbageData[garbageid][garbageExists] = false;
        GarbageData[garbageid][garbageCapacity] = 0;
        GarbageData[garbageid][garbageID] = 0;
        GarbageData[garbageid][garbageObject] = INVALID_STREAMER_ID;
    }
    return 1;
}

Garbage_Nearest(playerid)
{
    for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if(GarbageData[i][garbageExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]))
    {
        if(GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
        return i;
    }
    return -1;
}

Garbage_Refresh(garbageid)
{
    if(garbageid != -1 && GarbageData[garbageid][garbageExists])
    {
        if(IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
            DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

        GarbageData[garbageid][garbageObject] = CreateDynamicObject(GarbageData[garbageid][garbageModel], GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], (GarbageData[garbageid][garbageModel] == 1236) ? (GarbageData[garbageid][garbagePos][2] - 0.4) : (GarbageData[garbageid][garbagePos][2] - 0.6), 0.0, 0.0, GarbageData[garbageid][garbagePos][3], GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
    }
    return 1;
}

Garbage_Save(garbageid, bool:all = true)
{
    if(all)
    {
        new query[300];

        format(query, sizeof(query), "UPDATE `garbage` SET `garbageModel` = '%d', `garbageCapacity` = '%d', `garbageX` = '%.4f', `garbageY` = '%.4f', `garbageZ` = '%.4f', `garbageA` = '%.4f', `garbageInterior` = '%d', `garbageWorld` = '%d' WHERE `garbageID` = '%d'",
            GarbageData[garbageid][garbageModel],
            GarbageData[garbageid][garbageCapacity],
            GarbageData[garbageid][garbagePos][0],
            GarbageData[garbageid][garbagePos][1],
            GarbageData[garbageid][garbagePos][2],
            GarbageData[garbageid][garbagePos][3],
            GarbageData[garbageid][garbageInterior],
            GarbageData[garbageid][garbageWorld],
            GarbageData[garbageid][garbageID]
        );
        mysql_tquery(g_iHandle, query);
    }
    else {
        mysql_tquery(g_iHandle, sprintf("UPDATE `garbage` SET `garbageCapacity` = '%d' WHERE `garbageID` = '%d'", GarbageData[garbageid][garbageCapacity], GarbageData[garbageid][garbageID]));
    }
    return 1;
}

Impound_Delete(impoundid)
{
    if(impoundid != -1 && ImpoundData[impoundid][impoundExists])
    {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `impoundlots` WHERE `impoundID` = '%d'", ImpoundData[impoundid][impoundID]));

        if(IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
            DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

        if(IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
            DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

        ImpoundData[impoundid][impoundExists] = false;
        ImpoundData[impoundid][impoundID] = 0;
        ImpoundData[impoundid][impoundText3D] = Text3D:INVALID_STREAMER_ID;
        ImpoundData[impoundid][impoundPickup] = INVALID_STREAMER_ID;
    }
    return 1;
}

stock GetImpoundByID(sqlid)
{
    for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if(ImpoundData[i][impoundExists] && ImpoundData[i][impoundID] == sqlid) {
        return i;
    }
    return -1;
}

Impound_Nearest(playerid)
{
    for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if(ImpoundData[i][impoundExists] && IsPlayerInRangeOfPoint(playerid, 20.0, ImpoundData[i][impoundLot][0], ImpoundData[i][impoundLot][1], ImpoundData[i][impoundLot][2])) {
        return i;
    }
    return -1;
}

Impound_Create(Float:x, Float:y, Float:z)
{
    for (new i = 0; i != MAX_IMPOUND_LOTS; i ++) if(!ImpoundData[i][impoundExists])
    {
        ImpoundData[i][impoundExists] = true;
        ImpoundData[i][impoundLot][0] = x;
        ImpoundData[i][impoundLot][1] = y;
        ImpoundData[i][impoundLot][2] = z;
        ImpoundData[i][impoundRelease][0] = 0.0;
        ImpoundData[i][impoundRelease][1] = 0.0;
        ImpoundData[i][impoundRelease][2] = 0.0;

        mysql_tquery(g_iHandle, "INSERT INTO `impoundlots` (`impoundLotX`) VALUES('0.0')", "OnImpoundCreated", "d", i);
        Impound_Refresh(i);

        return i;
    }
    return -1;
}

Impound_Refresh(impoundid)
{
    if(impoundid != -1 && ImpoundData[impoundid][impoundExists])
    {
        new
        string[64];

        if(IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
            DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

        if(IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
            DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

        format(string, sizeof(string), "[Impound %d]\n"WHITE"/impound to impound a vehicle.", impoundid);
        ImpoundData[impoundid][impoundText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2], 20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
        ImpoundData[impoundid][impoundPickup] = CreateDynamicPickup(1239, 23, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2]);
    }
    return 1;
}

Impound_Save(impoundid)
{
    new
        query[300];

    format(query, sizeof(query), "UPDATE `impoundlots` SET `impoundLotX` = '%.4f', `impoundLotY` = '%.4f', `impoundLotZ` = '%.4f', `impoundReleaseX` = '%.4f', `impoundReleaseY` = '%.4f', `impoundReleaseZ` = '%.4f', `impoundReleaseA` = '%.4f' WHERE `impoundID` = '%d'",
        ImpoundData[impoundid][impoundLot][0],
        ImpoundData[impoundid][impoundLot][1],
        ImpoundData[impoundid][impoundLot][2],
        ImpoundData[impoundid][impoundRelease][0],
        ImpoundData[impoundid][impoundRelease][1],
        ImpoundData[impoundid][impoundRelease][2],
        ImpoundData[impoundid][impoundRelease][3],
        ImpoundData[impoundid][impoundID]
    );
    return mysql_tquery(g_iHandle, query);
}

/*Backpack_Items(playerid, id)
{
    if(id != -1 && BackpackData[id][backpackExists])
    {
        new
        string[MAX_BACKPACK_CAPACITY * 32],
            count = 0;

        for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if(BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
        {
            if(BackpackItems[i][bItemQuantity] == 1) format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);
            else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

            BackpackListed[playerid][count++] = i;
        }
        strcat(string, "Take Backpack");

        PlayerData[playerid][pBackpackLoot] = id;
        Dialog_Show(playerid, BackpackLoot, DIALOG_STYLE_LIST, "Backpack", string, "Select", "Cancel");
    }
    return 1;
}

Backpack_Open(playerid)
{
    new id = GetPlayerBackpack(playerid);

    if(id != -1)
    {
        new
            string[MAX_BACKPACK_CAPACITY * 32],
            count = 0;

        format(string,sizeof(string), "Add Item\n");

        for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if(BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
        {
            if(BackpackItems[i][bItemQuantity] == 1) format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);
            else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

            BackpackListed[playerid][count++] = i;
        }
        Dialog_Show(playerid, Backpack, DIALOG_STYLE_LIST, "My Backpack", string, "Select", "Cancel");
    }
    return 1;
}

Backpack_GetItems(id)
{
    new count;

    for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if(BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id) {
        count++;
    }
    return count;
}

Backpack_GetFreeID()
{
    for (new i = 0; i != MAX_BACKPACKS; i ++) if(!BackpackData[i][backpackExists]) {
        return i;
    }
    return -1;
}

Backpack_Refresh(id)
{
    if(id != -1 && BackpackData[id][backpackExists])
    {
        if(IsValidDynamicObject(BackpackData[id][backpackObject]))
            DestroyDynamicObject(BackpackData[id][backpackObject]);

        if(IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
            DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

        if(!BackpackData[id][backpackPlayer]) {
            BackpackData[id][backpackObject] = CreateDynamicObject(3026, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, -90.0, 0.0, 0.0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
            BackpackData[id][backpackText3D] = CreateDynamic3DTextLabel("[Backpack]\n"WHITE"Press 'N' to view the items.", COLOR_CLIENT | 0xAA, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
        }
    }
    return 1;
}

Backpack_GetItemID(id, name[])
{
    for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if(BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id && !strcmp(BackpackItems[i][bItemName], name, true)) {
        return i;
    }
    return -1;
}

Backpack_GetFreeItem()
{
    for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if(!BackpackItems[i][bItemExists]) {
        return i;
    }
    return -1;
}

Backpack_HasItem(id, name[])
{
    if(id != -1 && BackpackData[id][backpackExists])
        return Backpack_GetItemID(id, name) != -1;

    return 0;
}

Backpack_Count(id, name[])
{
    new itemid;

    if(id != -1 && BackpackData[id][backpackExists])
    {
        itemid = Backpack_GetItemID(id, name);

        if(itemid != -1)
                return BackpackItems[itemid][bItemQuantity];
    }
    return 0;
}

Backpack_Add(id, name[], model, quantity = 1)
{
    new
        query[128];

    if(id != -1 && BackpackData[id][backpackExists])
    {
        new itemid = Backpack_GetItemID(id, name);

        if(itemid != -1)
        {
            format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` + %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
            mysql_tquery(g_iHandle, query);

            return BackpackItems[itemid][bItemQuantity] += quantity;
        }
        else if((itemid = Backpack_GetFreeItem()) != -1)
        {
            format(BackpackItems[itemid][bItemName], 32, name);

            BackpackItems[itemid][bItemBackpack] = id;
            BackpackItems[itemid][bItemExists] = true;
            BackpackItems[itemid][bItemModel] = model;
            BackpackItems[itemid][bItemQuantity] = quantity;

            format(query, sizeof(query), "INSERT INTO `backpackitems` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", BackpackData[id][backpackID], name, model, quantity);
            mysql_tquery(g_iHandle, query, "OnBackpackAdd", "dd", id, itemid);

            return 1;
        }
    }
    return 0;
}

Backpack_Remove(id, name[], quantity = 1)
{
    new
            query[128];

    if(id != -1 && BackpackData[id][backpackExists])
    {
        new itemid = Backpack_GetItemID(id, name);

        if(itemid != -1)
        {
            if(BackpackItems[itemid][bItemQuantity] > 0)
            {
                BackpackItems[itemid][bItemQuantity] -= quantity;
            }
            if(BackpackItems[itemid][bItemQuantity] < 1)
            {
                format(query, sizeof(query), "DELETE FROM `backpackitems` WHERE `itemID` = '%d'", BackpackItems[itemid][bItemID]);
                mysql_tquery(g_iHandle, query);

                BackpackItems[itemid][bItemBackpack] = -1;
                BackpackItems[itemid][bItemExists] = false;
                BackpackItems[itemid][bItemModel] = 0;
                BackpackItems[itemid][bItemQuantity] = 0;
            }
            else
            {
                format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` - %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
                mysql_tquery(g_iHandle, query);
            }
            return 1;
        }
    }
    return 0;
}*/

/*GetHouseBackpack(houseid)
{
    for (new i = 0; i != MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
        return i;
    }
    return -1;
}

GetVehicleBackpack(carid)
{
    for (new i = 0; i != MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == VehicleData[carid][cID]) {
        return i;
    }
    return -1;
}

GetPlayerBackpack(playerid)
{
    for (new i = 0; i != MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists] && BackpackData[i][backpackPlayer] == PlayerData[playerid][pID]) {
        return i;
    }
    return -1;
}

Backpack_Create(playerid)
{
    new id = Backpack_GetFreeID();

    if(id != -1)
    {
        BackpackData[id][backpackExists] = true;
        BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
        BackpackData[id][backpackHouse] = 0;
        BackpackData[id][backpackVehicle] = 0;
        BackpackData[id][backpackPos][0] = 0.0;
        BackpackData[id][backpackPos][1] = 0.0;
        BackpackData[id][backpackPos][2] = 0.0;

        mysql_tquery(g_iHandle, "INSERT INTO `backpacks` (`backpackInterior`) VALUES(0)", "OnBackpackCreated", "d", id);
        return id;
    }
    return -1;
}

Backpack_Delete(id)
{
    if(id != -1 && BackpackData[id][backpackExists])
    {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `backpacks` WHERE `backpackID` = '%d'", BackpackData[id][backpackID]));

        if(IsValidDynamicObject(BackpackData[id][backpackObject]))
            DestroyDynamicObject(BackpackData[id][backpackObject]);

        if(IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
            DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

        BackpackData[id][backpackExists] = false;
        BackpackData[id][backpackID] = 0;
        BackpackData[id][backpackPlayer] = 0;
        BackpackData[id][backpackHouse] = 0;
        BackpackData[id][backpackVehicle] = 0;
    }
    return 1;
}

Backpack_Save(id)
{
    new
        query[256];

    format(query, sizeof(query), "UPDATE `backpacks` SET `backpackPlayer` = '%d', `backpackHouse` = '%d', `backpackVehicle` = '%d', `backpackX` = '%.1f', `backpackY` = '%.1f', `backpackZ` = '%.1f', `backpackInterior` = '%d', `backpackWorld` = '%d' WHERE `backpackID` = '%d'",
        BackpackData[id][backpackPlayer],
        BackpackData[id][backpackHouse],
        BackpackData[id][backpackVehicle],
        BackpackData[id][backpackPos][0],
        BackpackData[id][backpackPos][1],
        BackpackData[id][backpackPos][2],
        BackpackData[id][backpackInterior],
        BackpackData[id][backpackWorld],
        BackpackData[id][backpackID]
    );
    return mysql_tquery(g_iHandle, query);
}*/

stock IsValidObjectModel(modelid)
{
    if(modelid < 0 || modelid > 20000)
        return 0;

    switch (modelid)
    {
        case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
        return 1;
    }
    new const g_arrModelData[] =
    {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
                -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
                127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
             -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
             -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
             -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
             -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
             -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
             -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
             -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
             -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
             2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
             -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
             1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
             2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
             -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
             -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
             -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
             -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
             -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
             -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
             -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
             -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
             33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
             0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
    };
    return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}
cache_get_field_content(row, const field_name[], destination[], max_len = sizeof(destination))
{
    cache_get_value_name(row, field_name, destination, max_len);
}
cache_get_data(&rows, &fields)
{
	cache_get_row_count(rows);//lastupdate
	cache_get_field_count(fields);
	//cache_get_result_count(dest);
}
//cache_get_data(rows,
cache_get_row_int(row, field_idx)
{
	new int_dest;
	cache_get_value_index_int(row, field_idx, int_dest);
	return int_dest;
}
stock Float:cache_get_field_float(row, const field_name[])
{
    new
        str[16];

    cache_get_field_content(row, field_name, str, sizeof(str));
    return floatstr(str);
}

cache_get_field_int(row, const field_name[])
{
    new val;
    cache_get_value_name_int(row, field_name, val);
    return val;
}

Ticket_Add(playerid, suspectid, price, reason[])
{
    new
        string[255];

    for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) if(!TicketData[suspectid][i][ticketExists])
    {
        TicketData[suspectid][i][ticketExists] = true;
        TicketData[suspectid][i][ticketFee] = price;

        format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
        format(TicketData[suspectid][i][ticketReason], 64, reason);
        format(TicketData[suspectid][i][ticketIssuer], 24, ReturnName(playerid, 0));

        format(string, sizeof(string), "INSERT INTO `tickets` (`ID`, `ticketFee`, `ticketDate`, `ticketReason`, `ticketIssuer`) VALUES('%d', '%d', '%s', '%s', '%s')", PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], SQL_ReturnEscaped(reason), TicketData[suspectid][i][ticketIssuer]);
        mysql_tquery(g_iHandle, string, "OnTicketCreated", "dd", suspectid, i);

        return i;
    }
    return -1;
}

Ticket_Remove(playerid, ticketid)
{
    if(ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
    {
        new
        string[90];

        format(string, sizeof(string), "DELETE FROM `tickets` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
        mysql_tquery(g_iHandle, string);
        TicketData[playerid][ticketid][ticketExists] = false;
        TicketData[playerid][ticketid][ticketID] = 0;
        TicketData[playerid][ticketid][ticketFee] = 0;
    }
    return 1;
}

Location_Add(playerid, name[], Float:x, Float:y, Float:z)
{
    new
            query[192];

    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if(!LocationData[playerid][i][locationExists])
    {
        LocationData[playerid][i][locationExists] = true;
        format(LocationData[playerid][i][locationName], 32, name);

        LocationData[playerid][i][locationPos][0] = x;
        LocationData[playerid][i][locationPos][1] = y;
        LocationData[playerid][i][locationPos][2] = z;

        format(query, sizeof(query), "INSERT INTO `gps` (`ID`, `locationName`, `locationX`, `locationY`, `locationZ`) VALUES('%d', '%s', '%.4f', '%.4f', '%.4f')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), x, y, z);
        mysql_tquery(g_iHandle, query, "OnLocationCreated", "dd", playerid, i);

        return i;
    }
    return -1;
}

Location_GetID(playerid, name[])
{
    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if(LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name, true)) {
        return i;
    }
    return -1;
}

Location_Delete(playerid, name[])
{
    new
            query[96];

    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if(LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name))
    {
        LocationData[playerid][i][locationExists] = false;

        LocationData[playerid][i][locationPos][0] = 0.0;
        LocationData[playerid][i][locationPos][1] = 0.0;
        LocationData[playerid][i][locationPos][2] = 0.0;

        format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d' AND `locationID` = '%d'", PlayerData[playerid][pID], LocationData[playerid][i][locationID]);
        mysql_tquery(g_iHandle, query);
        return 1;
    }
    return 0;
}

stock SetPlayerLookAt(playerid, Float:x, Float:y)
{
    new Float:Px, Float:Py, Float: Pa;
    GetPlayerPos(playerid, Px, Py, Pa);
    Pa = floatabs(atan((y-Py)/(x-Px)));
    if(x <= Px && y >= Py) Pa = floatsub(180, Pa);
    else if(x < Px && y < Py) Pa = floatadd(Pa, 180);
    else if(x >= Px && y <= Py) Pa = floatsub(360.0, Pa);
    Pa = floatsub(Pa, 90.0);
    if(Pa >= 360.0) Pa = floatsub(Pa, 360.0);
    SetPlayerFacingAngle(playerid, Pa);
}

stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, time = 500)
{
    if(PlayerData[playerid][pFreeze])
    {
        stop PlayerData[playerid][pFreezeTimer];
        PlayerData[playerid][pFreeze] = 0;
        TogglePlayerControllable(playerid, 1);
    }
    Streamer_ToggleIdleUpdate(playerid,1);
    TogglePlayerControllable(playerid, 0);
    Streamer_UpdateEx(playerid, x, y, z);
    SetCameraBehindPlayer(playerid);
    PlayerData[playerid][pFreeze] = 1;
    SetPlayerPos(playerid, x, y, z + 0.5);
    PlayerData[playerid][pFreezeTimer] = defer SetPlayerToUnfreeze[time](playerid);
    Player_ToggleTelportAntiCheat(playerid, true);
    return 1;
}

/*Function:SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z)
{
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, x, y, z))
        return 0;

    PlayerData[playerid][pFreeze] = 0;
    SetPlayerPos(playerid, x, y, z);
    TogglePlayerControllable(playerid, 1);
    return 1;
}*/

public OnVehicleMod(playerid, vehicleid, componentid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnVehicleMod(PID : %d VID : %d CID : %d)", playerid, vehicleid, componentid);
	#endif
    return 1;
}

SetPlayerInPrison(playerid)
{
    new idx = random(sizeof(prisonArrays)),
        query[255];

    SetPlayerPosEx(playerid, prisonArrays[idx][0], prisonArrays[idx][1], prisonArrays[idx][2] + 0.3);
    SetPlayerFacingAngle(playerid, prisonArrays[idx][3]);

    SetPlayerInterior(playerid, LSPD_JAIL);
    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

    ClearAnimations(playerid);
    TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_prison]);

    format(query, sizeof(query), "UPDATE `warrants` SET `Arrest` = '1' WHERE `Arrest` = '0' AND `Suspect` = '%s' ", ReturnName(playerid));
    mysql_tquery(g_iHandle, query);


    return 1;
}

SpawnPlayerInJail(playerid)
{
    new rand = random(sizeof(arrAdminJail));

    ResetPlayer(playerid);
    ResetNameTag(playerid, true);
    SetPlayerPosEx(playerid, arrAdminJail[rand][0], arrAdminJail[rand][1], arrAdminJail[rand][2]);
    SetPlayerInterior(playerid, 3);
    SetPlayerVirtualWorld(playerid, 100);
    SetPlayerFacingAngle(playerid, arrAdminJail[rand][3]);

    ClearAnimations(playerid);
    TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_prison]);

    return 1;
}

ViewCharges(playerid, name[])
{
    new
        string[128];

    format(string, sizeof(string), "SELECT * FROM `warrants` WHERE `Arrest` = '0' AND `Suspect` = '%s' ORDER BY `ID` DESC", SQL_ReturnEscaped(name));
    mysql_tquery(g_iHandle, string, "OnViewCharges", "ds", playerid, name);
    return 1;
}

AddWarrant(targetid, playerid, const description[])
{
    new
        string[255];

    format(string, sizeof(string), "INSERT INTO `warrants` (`Suspect`, `Username`, `Date`, `Description`, `Arrest`) VALUES('%s', '%s', '%s', '%s', '0')", ReturnName(targetid), ReturnName(playerid), ReturnDate(), SQL_ReturnEscaped(description));
    mysql_tquery(g_iHandle, string);
}


ShowCharacterMenu(playerid)
{
    HideLoginTextdraw(playerid);
    RefrestCharacterListTextDraw(playerid, SelectCharTD[playerid]);
    for(new i = 0; i < 6; i++)
    {
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_character][i]);
    }
    SelectTextDraw(playerid, X11_GREY);
    return 1;
}

Dialog:SelectCharacter(playerid, response, listitem, inputtext[])
{
    if (!response)
        return KickEx(playerid);

    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(AccountData[i][pUsername][0] != EOS)
    {
        if(!strcmp(AccountData[i][pUsername], ReturnName(playerid)) && i != playerid)
        {
            SendServerMessage(playerid, "Seseorang sedang login menggunakan UCP yang sama.");
            KickEx(playerid);
            return 1;
        }
    }

    if (CharacterList[playerid][listitem][0] == EOS)
        return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", WHITE"Enter character name, maximum 24 characters\n\nExample: "GREEN"Ilham_Jaya, Clyne_Oconnor, Alexader_Kimberly.", "Create", "Back");

    PlayerData[playerid][pCharacter] = listitem;
    SetPlayerName(playerid, CharacterList[playerid][listitem]);

    if(!Blacklist_Check(playerid, "Characters", ReturnName(playerid))) {
        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character`='%s' ORDER BY `ID` ASC LIMIT 1;", CharacterList[playerid][PlayerData[playerid][pCharacter]]), "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTERS);
    }
    return 1;
}

Dialog:CreateChar(playerid, response, listitem, inputtext[])
{
    if (!response)
        return ShowCharacterMenu(playerid);

    if (!IsValidRoleplayName(inputtext) || strlen(inputtext) <= 3 && strlen(inputtext) > 24) {
        SendClientMessage(playerid, COLOR_WHITE, "Name must comply with Roleplay rules, eg: Kimberly_Summers, Rein_Styles, Paul_Rostislav");
        return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", WHITE"Enter character name, maximum 24 characters\n\nExample: "GREEN"Tyler_Imanuel, Clyne_Oconnor, Alexader_Kimberly.", "Create", "Back");
    }

    mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character` = '%s' LIMIT 1;", inputtext), "OnCharacterCheck", "is", playerid, inputtext);
    return 1;
}

Function:OnCharacterCheck(playerid, charaname[])
{
    if (!cache_num_rows())
    {
        new create_char[200];

        mysql_format(g_iHandle, create_char, sizeof(create_char), "INSERT INTO `characters` (`Username`, `Character`, `CreateDate`) VALUES ('%s', '%s', '%i')", AccountData[playerid][pUsername], charaname, gettime());
        mysql_tquery(g_iHandle, create_char);

        for (new i; i < MAX_CHARACTERS; i ++) if(CharacterList[playerid][i][0] == EOS) {
            strcat(CharacterList[playerid][i], charaname);
            break;
        }

        ShowCharacterMenu(playerid);
        SendServerMessage(playerid, "Karakter baru telah dibuat, kami akan memuat ulang semua karaktermu.");
        return 1;
    }

    SendClientMessage(playerid, COLOR_WHITE, "Nama tersebut sudah terpakai! Silahkan ganti nama yang lain.");
    Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", WHITE"Enter character name, maximum 24 characters\n\nExample: "GREEN"Ilham_Jaya, Clyne_Oconnor, Alexader_Kimberly.", "Create", "Back");
    return 1;
}

stock GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
    new
        id = -1;

    if((id = House_Inside(playerid)) != -1)
    {
        fX = HouseData[id][housePos][0];
        fY = HouseData[id][housePos][1];
        fZ = HouseData[id][housePos][2];
    }
    else if((id = Business_Inside(playerid)) != -1)
    {
        fX = BusinessData[id][bizPos][0];
        fY = BusinessData[id][bizPos][1];
        fZ = BusinessData[id][bizPos][2];
    }
    else if((id = Entrance_Inside(playerid)) != -1)
    {
        fX = EntranceData[id][entrancePos][0];
        fY = EntranceData[id][entrancePos][1];
        fZ = EntranceData[id][entrancePos][2];
    }
    else GetPlayerPos(playerid, fX, fY, fZ);
    return 1;
}

GetPlayerLocation(playerid)
{
    new
        Float:fX,
        Float:fY,
        Float:fZ,
        string[32],
        id = -1;

    if((id = House_Inside(playerid)) != -1)
    {
        fX = HouseData[id][housePos][0];
        fY = HouseData[id][housePos][1];
        fZ = HouseData[id][housePos][2];
    }
    else if((id = Business_Inside(playerid)) != -1)
    {
        fX = BusinessData[id][bizPos][0];
        fY = BusinessData[id][bizPos][1];
        fZ = BusinessData[id][bizPos][2];
    }
    else if((id = Entrance_Inside(playerid)) != -1)
    {
        fX = EntranceData[id][entrancePos][0];
        fY = EntranceData[id][entrancePos][1];
        fZ = EntranceData[id][entrancePos][2];
    }
    else GetPlayerPos(playerid, fX, fY, fZ);

    format(string, 32, GetLocation(fX, fY, fZ));
    return string;
}

stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
    enum e_ZoneData
    {
        e_ZoneName[32 char],
        Float:e_ZoneArea[6]
    };
    static const g_arrZoneData[][e_ZoneData] =
    {
        {!"The Big Ear",                {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
        {!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
        {!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
        {!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
        {!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
        {!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
        {!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
        {!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
        {!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
        {!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
        {!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
        {!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
        {!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
        {!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
        {!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
        {!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
        {!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
        {!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
        {!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
        {!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
        {!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
        {!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
        {!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
        {!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
        {!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
        {!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
        {!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
        {!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
        {!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
        {!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
        {!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
        {!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
        {!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
        {!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
        {!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
        {!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
        {!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
        {!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
        {!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
        {!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
        {!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
        {!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
        {!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
        {!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
        {!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
        {!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
        {!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
        {!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
        {!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
        {!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
        {!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
        {!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
        {!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
        {!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
        {!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
        {!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
        {!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
        {!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
        {!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
        {!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
        {!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
        {!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
        {!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
        {!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
        {!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
        {!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
        {!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
        {!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
        {!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
        {!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
        {!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
        {!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
        {!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
        {!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
        {!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
        {!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
        {!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
        {!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
        {!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
        {!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
        {!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
        {!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
        {!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
        {!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
        {!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
        {!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
        {!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
        {!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
        {!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
        {!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
        {!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
        {!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
        {!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
        {!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
        {!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
        {!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
        {!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
        {!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
        {!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
        {!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
        {!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
        {!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
        {!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
        {!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
        {!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
        {!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
        {!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
        {!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
        {!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
        {!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
        {!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
        {!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
        {!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
        {!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
        {!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
        {!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
        {!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
        {!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
        {!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
        {!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
        {!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
        {!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
        {!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
        {!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
        {!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
        {!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
        {!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
        {!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
        {!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
        {!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
        {!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
        {!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
        {!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
        {!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
        {!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
        {!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
        {!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
        {!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
        {!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
        {!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
        {!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
        {!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
        {!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
        {!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
        {!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
        {!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
        {!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
        {!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
        {!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
        {!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
        {!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
        {!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
        {!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
        {!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
        {!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
        {!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
        {!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
        {!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
        {!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
        {!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
        {!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
        {!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
        {!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
        {!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
        {!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
        {!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
        {!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
        {!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
        {!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
        {!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
        {!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
        {!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
        {!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
        {!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
        {!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
        {!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
        {!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
        {!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
        {!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
        {!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
        {!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
        {!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
        {!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
        {!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
        {!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
        {!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
        {!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
        {!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
        {!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
        {!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
        {!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
        {!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
        {!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
        {!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
        {!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
        {!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
        {!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
        {!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
        {!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
        {!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
        {!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
        {!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
        {!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
        {!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
        {!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
        {!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
        {!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
        {!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
        {!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
        {!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
        {!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
        {!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
        {!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
        {!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
        {!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
        {!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
        {!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
        {!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
        {!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
        {!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
        {!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
        {!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
        {!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
        {!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
        {!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
        {!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
        {!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
        {!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
        {!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
        {!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
        {!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
        {!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
        {!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
        {!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
        {!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
        {!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
        {!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
        {!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
        {!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
        {!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
        {!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
        {!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
        {!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
        {!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
        {!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
        {!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
        {!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
        {!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
        {!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
        {!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
        {!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
        {!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
        {!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
        {!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
        {!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
        {!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
        {!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
        {!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
        {!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
        {!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
        {!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
        {!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
        {!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
        {!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
        {!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
        {!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
        {!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
        {!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
        {!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
        {!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
        {!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
        {!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
        {!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
        {!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
        {!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
        {!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
        {!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
        {!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
        {!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
        {!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
        {!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
        {!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
        {!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
        {!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
        {!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
        {!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
        {!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
        {!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
        {!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
        {!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
        {!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
        {!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
        {!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
        {!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
        {!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
        {!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
        {!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
        {!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
        {!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
        {!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
        {!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
        {!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
        {!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
        {!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
        {!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
        {!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
        {!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
        {!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
        {!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
        {!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
        {!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
        {!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
        {!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
        {!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
        {!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
        {!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
        {!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
        {!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
        {!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
        {!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
        {!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
        {!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
        {!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
        {!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
        {!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
        {!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
        {!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
        {!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
        {!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
        {!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
        {!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
        {!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
        {!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
        {!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
        {!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
        {!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
        {!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
        {!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
        {!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
        {!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
        {!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
        {!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
        {!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
        {!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
        {!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
        {!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
        {!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
        {!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
        {!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
        {!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
        {!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
        {!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
        {!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
        {!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
        {!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
        {!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
        {!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
        {!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
        {!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
        {!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
        {!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
        {!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
        {!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
        {!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
        {!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
    };
    new
        name[32] = "San Andreas";

    for (new i = 0; i != sizeof(g_arrZoneData); i ++) if((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
        strunpack(name, g_arrZoneData[i][e_ZoneName]);

        break;
    }
    return name;
}

SelectTextDrawEx(playerid, hovercolor)
{
    PlayerTemp[playerid][temp_selecttextdraw] = true;
    SelectTextDraw(playerid, hovercolor);
    return 1;
}

CancelSelectTextDrawEx(playerid)
{
    PlayerTemp[playerid][temp_selecttextdraw] = false;
    CancelSelectTextDraw(playerid);
    return 1;
}

DestroyPlayerTextDraws(playerid)
{
    for(new i; i < sizeof(PlayerTextdraws[]); i++)
    {
        if(Text:PlayerTextdraws[playerid][playerTextraws:i] == Text:INVALID_TEXT_DRAW) continue;
        PlayerTextDrawDestroy(playerid, PlayerText:PlayerTextdraws[playerid][playerTextraws:i]);
        PlayerTextdraws[playerid][playerTextraws:i] = _:INVALID_TEXT_DRAW;
    }
    return 1;
}
DestroyFishingDraw(playerid)
{
	PlayerTextDrawDestroy(playerid, FishingPowerText[playerid]);
	DestroyPlayerProgressBar(playerid, FishingProgressBar[playerid]);
    return 1;
}

ShowClothesTextdraw(playerid)
{
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][0]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][1]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][2]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][3]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][4]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][5]);
    return 1;
}

HideClothesTextdraw(playerid)
{
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][0]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][1]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][2]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][3]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][4]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][5]);

    CancelSelectTextDrawEx(playerid);
    return 1;
}

Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
    new
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(targetid, x, y, z);
    return GetPlayerDistanceFromPoint(playerid, x, y, z);
}

stock IsPlayerArmed(playerid)
{
    new
        weapon,
        ammo;

    for (new i = 0; i < 13; i ++) {
        GetPlayerWeaponData(playerid, i, weapon, ammo);

        if(ammo > 0) {
            switch (weapon) {
                    case 1, 2, 4, 6, 8, 9, 15, 22..38: return 1;
            }
        }
    }
    return 0;
}

stock PlayerPlaySoundCoord(soundid, Float:x, Float:y, Float:z) 
{ // Realistic sound playback
	foreach(new i : Player) 
    {
		if(IsPlayerInRangeOfPoint(i, 100.0, x, y, z))
			PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}

PlayerPlaySoundEx(playerid, sound, forall = 0)
{
    new
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);

    if(forall) return PlayerPlaySound(playerid, sound, x, y, z);

    foreach (new i : Player) if(IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
        PlayerPlaySound(i, sound, x, y, z);
    }
    return 1;
}

CancelCall(playerid)
{
    new targetid = PlayerData[PlayerData[playerid][pCallLine]][pCallLine];
    if(targetid != INVALID_PLAYER_ID)
    {
        if(makeCall[playerid])
        {
            PlayerData[playerid][pCredits] -= kuranginCredits[playerid];
            SendClientMessageEx(playerid, X11_YELLOW_2, "[PHONE]:"WHITE" You use %d Phone Credits, you have %d phone credits now", kuranginCredits[playerid], PlayerData[playerid][pCredits]);
        }
        else
        {
            PlayerData[targetid][pCredits] -= kuranginCredits[targetid];
            SendClientMessageEx(targetid, X11_YELLOW_2, "[PHONE]:"WHITE" You use %d Phone Credits, you have %d phone credits now", kuranginCredits[targetid], PlayerData[targetid][pCredits]);
        }
        makeCall[playerid] = false;
        makeCall[targetid] = false;

        kuranginCredits[playerid] = 0;
        kuranginCredits[targetid] = 0;

        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        SetPlayerSpecialAction(PlayerData[PlayerData[playerid][pCallLine]][pCallLine], SPECIAL_ACTION_NONE);

        PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = INVALID_PLAYER_ID;
        PlayerData[PlayerData[playerid][pCallLine]][pIncomingCall] = 0;

        PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
        PlayerData[playerid][pIncomingCall] = 0;
        
    }
    return 1;
}

stock PlayReloadAnimation(playerid, weaponid)
{
    switch (weaponid)
    {
        case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0);
        case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.0, 0, 0, 0, 0, 0);
        case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
        case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
        case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
        case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.0, 0, 0, 0, 0, 0);
        case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.0, 0, 0, 0, 0, 0);
    }
    return 1;
}

LeaveTaxi(playerid, driverid)
{
    if(driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
    {
        GiveMoney(playerid, -PlayerData[playerid][pTaxiFee]);
        GiveMoney(driverid, PlayerData[playerid][pTaxiFee]);

        SendCustomMessage(playerid, "TAXI","Anda telah membayar "GREEN"%s"WHITE" kepada pengemudi taxi.", FormatNumber(PlayerData[playerid][pTaxiFee]));
        SendCustomMessage(driverid, "TAXI","Anda mendapat bayaran "GREEN"%s"WHITE" dari "YELLOW"%s "WHITE"sebagai penumpang.", FormatNumber(PlayerData[playerid][pTaxiFee]), ReturnName(playerid, 0));

        Log_Save(E_LOG_LEAVE_TAXI, sprintf("[%s] %s turun dari taxi dengan pengemudi %s. Bayaran: %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(driverid, 0), FormatNumber(PlayerData[playerid][pTaxiFee])));

        PlayerData[playerid][pTaxiFee] = 0;
        PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pTaxiRunDistance] = 0;
    }
    return 1;
}

IsFurnitureItem(item[])
{
    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if(!strcmp(g_aFurnitureData[i][e_FurnitureName], item)) {
        return 1;
    }
    return 0;
}

GetFurnitureNameByModel(model)
{
    new
        name[32];

    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if(g_aFurnitureData[i][e_FurnitureModel] == model) {
        strcat(name, g_aFurnitureData[i][e_FurnitureName]);

        break;
    }
    return name;
}

GetAksesorisNameByModel(model)
{
    new
        name[32];

    for (new i = 0; i < sizeof(accList); i ++) if(accList[i][accListModel] == model) {
        strcat(name, accList[i][accListName]);

        break;
    }
    return name;
}
// ToggleRelationDisplay(playerid, toggle = true)
// {
//     if(toggle)
//     {
//         PlayerData[playerid][pTogRelation] = 0;
//         //RelationStatus
//         ShowPlayerProgressBar(playerid, RelationshipProgressBar[playerid][0]);
//         SetPlayerProgressBarValue(playerid, RelationshipProgressBar[playerid][0], PlayerData[playerid][pLove]);
//         PlayerTextDrawShow(playerid, RelationshipTD[playerid][0]);
//         PlayerTextDrawShow(playerid, RelationshipTD[playerid][1]);
//         PlayerTextDrawShow(playerid, RelationshipTD[playerid][2]);
//         PlayerTextDrawShow(playerid, RelationshipTD[playerid][3]);

//     }
//     else
//     {
//         PlayerData[playerid][pTogRelation] = 1;

//         //RelationStatus
//         HidePlayerProgressBar(playerid, RelationshipProgressBar[playerid][0]);
//         PlayerTextDrawHide(playerid, RelationshipTD[playerid][0]);
//         PlayerTextDrawHide(playerid, RelationshipTD[playerid][1]);
//         PlayerTextDrawHide(playerid, RelationshipTD[playerid][2]);
//         PlayerTextDrawHide(playerid, RelationshipTD[playerid][3]);
//     }
//     return 1;    
// }



ToggleGUIDisplay(playerid, toggle = true)
{
    if(toggle)
    {
        PlayerData[playerid][pTogHud] = false;

        new hudstyle = PlayerData[playerid][pHudStyle];
        
        //HBE
        switch(hudstyle)
        {
            case 0:
            {
                ShowHud_0(playerid);
            }
            case 1:
            {
                ShowHud_1(playerid);
            }
            case 2:
            {
                PlayerTextDrawShow(playerid, BOX_HUD2[playerid]);
                PlayerTextDrawShow(playerid, BURGERICON_HUD2[playerid]);
                PlayerTextDrawShow(playerid, BURGERVALUE_HUD2[playerid]);
                PlayerTextDrawShow(playerid, DRINKICON_HUD2[playerid]);
                PlayerTextDrawShow(playerid, DRINKVALUE_HUD2[playerid]);
            }
        }

        //Map Update
        // PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_map]);

        //Time GUI
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_timegui][0]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_timegui][1]);

    }
    else
    {
        new hudstyle = PlayerData[playerid][pHudStyle];

        //HBE
        PlayerData[playerid][pTogHud] = true;
        switch(hudstyle)
        {
            case 0:
            {
                HideHud_0(playerid);
            }
            case 1:
            {
                HideHud_1(playerid);
            }
            case 2:
            {
                PlayerTextDrawHide(playerid, BOX_HUD2[playerid]);
                PlayerTextDrawHide(playerid, BURGERICON_HUD2[playerid]);
                PlayerTextDrawHide(playerid, BURGERVALUE_HUD2[playerid]);
                PlayerTextDrawHide(playerid, DRINKICON_HUD2[playerid]);
                PlayerTextDrawHide(playerid, DRINKVALUE_HUD2[playerid]);
            }
        }
        //Map Update
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_map]);

        //Time GUI
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_timegui][0]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_timegui][1]);

    }
    return 1;
}

SendPlayerToPlayer(playerid, targetid)
{
    new
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(targetid, x, y, z);

    if(IsPlayerInAnyVehicle(playerid))
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 2, z);
        LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
    }
    else
    {
        SetPlayerPosEx(playerid, x + 1, y, z, 750);
    }
    SetPlayerInterior(playerid, GetPlayerInterior(targetid));
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

    PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
    PlayerData[playerid][pBusiness] = PlayerData[targetid][pBusiness];
    PlayerData[playerid][pEntrance] = PlayerData[targetid][pEntrance];
    PlayerData[playerid][pGarage] = PlayerData[targetid][pGarage];
    PlayerData[playerid][pFurnStore] = PlayerData[targetid][pFurnStore];
    PlayerData[playerid][pHospitalInt]  = PlayerData[targetid][pHospitalInt];
    PlayerData[playerid][pApartment] = PlayerData[targetid][pApartment];
    PlayerData[playerid][pApartmentBuilding] = PlayerData[targetid][pApartmentBuilding];
    return 1;
}

SetAccessories(playerid)
{
    if(Inventory_HasItem(playerid, "Backpack")) SetPlayerAttachedObject(playerid, 8, 3026, 1, -0.134207, -0.093048, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
    else RemovePlayerAttachedObject(playerid, 8);
}

GetClosestEntrance(playerid, type)
{
    new
        Float:fDistance[2] = {99999.0, 0.0},
        iIndex = -1
    ;
    for (new i = 0; i < MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists] && EntranceData[i][entranceType] == type && GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
    {
        fDistance[1] = GetPlayerDistanceFromPoint(playerid, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);

        if(fDistance[1] < fDistance[0])
        {
            fDistance[0] = fDistance[1];
            iIndex = i;
        }
    }
    return iIndex;
}

GetClosestJob(playerid, type)
{
    new
        Float:fDistance[2] = {99999.0, 0.0},
        iIndex = -1
    ;
    for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if(JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
    {
        fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]);

        if(fDistance[1] < fDistance[0])
        {
            fDistance[0] = fDistance[1];
            iIndex = i;
        }
    }
    return iIndex;
}

/*GetClosestHospital(playerid)
{
    new
        Float:fDistance[2] = {99999.0, 0.0},
        iIndex = -1
    ;
    for (new i = 0; i < sizeof(arrHospitalSpawn); i ++)
    {
        fDistance[1] = GetPlayerDistanceFromPoint(playerid, arrHospitalSpawn[i][0], arrHospitalSpawn[i][1], arrHospitalSpawn[i][2]);

        if(fDistance[1] < fDistance[0])
        {
            fDistance[0] = fDistance[1];
            iIndex = i;
        }
    }
    return iIndex;
}*/

IsWeaponModel(model) {
    new const g_aWeaponModels[] = {
        0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
        325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
        353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
        367, 368, 368, 371
    };
    for (new i = 0; i < sizeof(g_aWeaponModels); i ++) if(g_aWeaponModels[i] == model) {
        return 1;
    }
    return 0;
}
//Disabled

// GetWeaponModel(weaponid) {
//     new const g_aWeaponModels[] = {
//         0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
//         325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
//         353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
//         367, 368, 368, 371
//     };
//     if(0 < weaponid < 46)
//         return g_aWeaponModels[weaponid];

//     return 0;
// }

DropPlayerItem(playerid, itemid, quantity = 1)
{
    if(itemid == -1 || !InventoryData[playerid][itemid][invExists])
        return 0;

    new
        Float:x,
        Float:y,
        Float:z,
        Float:angle,
        string[32];

    strunpack(string, InventoryData[playerid][itemid][invItem]);

    if(InventoryData[playerid][itemid][invQuantity] < 2)
    {
        if(!strcmp(string, "Cellphone") && PlayerData[playerid][pPhone])
            PlayerData[playerid][pPhone] = 0;
    }
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, angle);

    DropItem(string, ReturnName(playerid, 0), InventoryData[playerid][itemid][invModel], quantity, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), 0, 0, playerid);
    Inventory_Remove(playerid, string, quantity);

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
    SendServerMessage(playerid, "You have "YELLOW"dropped"WHITE" a \"%s\".", string);
    return 1;
}

DropItem(item[], player[], model, quantity, Float:x, Float:y, Float:z, interior, world, weaponid = 0, ammo = 0, playerid = INVALID_PLAYER_ID)
{
    new
        query[400],
        string[255]
    ;

    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if(!DroppedItems[i][droppedModel])
    {
        format(DroppedItems[i][droppedItem], 32, item);
        format(DroppedItems[i][droppedPlayer], 24, player);

        DroppedItems[i][droppedModel] = model;
        DroppedItems[i][droppedQuantity] = quantity;
        DroppedItems[i][droppedWeaponId] = weaponid;
        DroppedItems[i][droppedAmmo] = ammo;
        DroppedItems[i][droppedPos][0] = x;
        DroppedItems[i][droppedPos][1] = y;
        DroppedItems[i][droppedPos][2] = z;

        DroppedItems[i][droppedInt] = interior;
        DroppedItems[i][droppedWorld] = world;

        DroppedItems[i][droppedTime] = gettime();

        if(IsWeaponModel(model)) {
            DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 93.7, 120.0, 120.0, world, interior);
        } else {
            DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, 0.0, world, interior);
        }

        if(strcmp(item, "Kunci Gubuk") != 0)
        {
            format(query, sizeof(query), "INSERT INTO `dropped` (`itemName`, `itemPlayer`, `itemModel`, `itemQuantity`, `itemWeapon`, `itemAmmo`, `itemX`, `itemY`, `itemZ`, `itemInt`, `itemWorld`, `itemTime`) VALUES('%s', '%s', '%d', '%d', '%d', '%d', '%.4f', '%.4f', '%.4f', '%d', '%d', '%d')", item, player, model, quantity, weaponid, ammo, x, y, z, interior, world, DroppedItems[i][droppedTime]);
            mysql_tquery(g_iHandle, query, "OnDroppedItem", "d", i);
        }

        if(DroppedItems[i][droppedModel] == 19632)
        {
            if(playerid != INVALID_PLAYER_ID)
            {
                format(string, sizeof(string), "[ID: %d]\n%s", PlayerData[playerid][pID], DroppedItems[i][droppedItem]);
            }
            else
            {
                format(string, sizeof(string), "[Owner: %s]\n%s", DroppedItems[i][droppedPlayer], DroppedItems[i][droppedItem]);
            }
            DroppedItems[i][droppedLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFAA, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 5, _, _, _, DroppedItems[i][droppedWorld],DroppedItems[i][droppedInt]);
        }
        else
        {
            DroppedItems[i][droppedLabel] = CreateDynamic3DTextLabel(DroppedItems[i][droppedItem], 0xFFFFFFAA, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 5, _, _, _, DroppedItems[i][droppedWorld],DroppedItems[i][droppedInt]);
        }

        return i;
    }
    return -1;
}

Item_Nearest(playerid)
{
    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if(DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]))
    {
        if(GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld])
        return i;
    }
    return -1;
}

Item_SetQuantity(itemid, amount)
{
    new
        string[64];

    if(itemid != -1 && DroppedItems[itemid][droppedModel])
    {
        DroppedItems[itemid][droppedQuantity] = amount;

        format(string, sizeof(string), "UPDATE `dropped` SET `itemQuantity` = %d WHERE `ID` = '%d'", amount, DroppedItems[itemid][droppedID]);
        mysql_tquery(g_iHandle, string);
    }
    return 1;
}

Item_Delete(itemid)
{
    if(itemid != -1 && DroppedItems[itemid][droppedModel])
    {
        DroppedItems[itemid][droppedModel] = 0;
        DroppedItems[itemid][droppedQuantity] = 0;
        DroppedItems[itemid][droppedPos][0] = 0.0;
        DroppedItems[itemid][droppedPos][1] = 0.0;
        DroppedItems[itemid][droppedPos][2] = 0.0;
        DroppedItems[itemid][droppedInt] = 0;
        DroppedItems[itemid][droppedWorld] = 0;
        DroppedItems[itemid][droppedTime] = 0;

        DestroyDynamicObject(DroppedItems[itemid][droppedObject]);
        DestroyDynamic3DTextLabel(DroppedItems[itemid][droppedLabel]);

        DroppedItems[itemid][droppedObject] = INVALID_STREAMER_ID;
        DroppedItems[itemid][droppedLabel] = Text3D:INVALID_STREAMER_ID;

        mysql_tquery(g_iHandle, sprintf("DELETE FROM `dropped` WHERE `ID` = '%d'", DroppedItems[itemid][droppedID]));
    }
    return 1;
}

PickupItem(playerid, itemid)
{
    if(itemid != -1 && DroppedItems[itemid][droppedModel])
    {
        if(Inventory_Add(playerid, DroppedItems[itemid][droppedItem], DroppedItems[itemid][droppedModel], DroppedItems[itemid][droppedQuantity]) == -1)
            return 1;

        Item_Delete(itemid);
    }
    return 1;
}

/*SetFactionMarker(playerid, type, color)
{
        foreach (new i : Player) if(GetFactionType(i) == type) {
            SetPlayerMarkerForPlayer(i, playerid, color);
    }

    PlayerData[playerid][pMarker] = 1;
    SetTimerEx("ExpireMarker", 300000, false, "d", playerid);
    return 1;
}*/

Faction_GetNameID(id)
{
    new name[32] = "None";

    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionExists] && FactionData[i][factionID] == id)
    {
        format(name, 32, FactionData[i][factionName]);
        break;
    }
    return name;
}

Faction_GetName(playerid)
{
    new
        factionid = PlayerData[playerid][pFaction],
        name[32] = "None";

    if(factionid == -1)
        return name;

    format(name, 32, FactionData[factionid][factionName]);
    return name;
}

Faction_GetRank(playerid)
{
    new
        factionid = PlayerData[playerid][pFaction],
        rank[32] = "None";

    if(factionid == -1)
        return rank;

    format(rank, 32, FactionRanks[factionid][PlayerData[playerid][pFactionRank] <= 0 ? 0 : PlayerData[playerid][pFactionRank] - 1]);
    return rank;
}

Arrest_Delete(arrestid)
{
    if(arrestid != -1 && ArrestData[arrestid][arrestExists])
    {
        static
            string[64];

        if(IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
            DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

        if(IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
            DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

        format(string, sizeof(string), "DELETE FROM `arrestpoints` WHERE `arrestID` = '%d'", ArrestData[arrestid][arrestID]);
        mysql_tquery(g_iHandle, string);

        ArrestData[arrestid][arrestExists] = false;
        ArrestData[arrestid][arrestID] = 0;
        ArrestData[arrestid][arrestPickup] = INVALID_STREAMER_ID;
        ArrestData[arrestid][arrestText3D] = Text3D:INVALID_STREAMER_ID;
    }
    return 1;
}

Arrest_Create(Float:x, Float:y, Float:z, interior, world)
{
    for (new i = 0; i < MAX_ARREST_POINTS; i ++) if(!ArrestData[i][arrestExists])
    {
        ArrestData[i][arrestExists] = true;
        ArrestData[i][arrestPos][0] = x;
        ArrestData[i][arrestPos][1] = y;
        ArrestData[i][arrestPos][2] = z;
        ArrestData[i][arrestInterior] = interior;
        ArrestData[i][arrestWorld] = world;

        mysql_tquery(g_iHandle, "INSERT INTO `arrestpoints` (`arrestInterior`) VALUES(0)", "OnArrestCreated", "d", i);
        Arrest_Refresh(i);
        return i;
    }
    return -1;
}

Arrest_Save(arrestid)
{
    static
        query[220];

    format(query, sizeof(query), "UPDATE `arrestpoints` SET `arrestX` = '%.4f', `arrestY` = '%.4f', `arrestZ` = '%.4f', `arrestInterior` = '%d', `arrestWorld` = '%d' WHERE `arrestID` = '%d'",
        ArrestData[arrestid][arrestPos][0],
        ArrestData[arrestid][arrestPos][1],
        ArrestData[arrestid][arrestPos][2],
        ArrestData[arrestid][arrestInterior],
        ArrestData[arrestid][arrestWorld],
        ArrestData[arrestid][arrestID]
    );
    return mysql_tquery(g_iHandle, query);
}

Arrest_Refresh(arrestid)
{
    if(arrestid != -1 && ArrestData[arrestid][arrestExists])
    {
        static
            string[64];

        if(IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
            DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

        if(IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
            DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

        format(string, sizeof(string), "[Arrest %d]\n"WHITE"/arrest to arrest the suspect.", arrestid);

        ArrestData[arrestid][arrestPickup] = CreateDynamicPickup(1247, 23, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
        ArrestData[arrestid][arrestText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 1, ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
    }
    return 1;
}


//-------------------------------------------
ObjectText_Create(playerid, name[], Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, fontcolor = 0xFFFFFFFF, backcolor = 0x000000FF)
{
    static
        string[128];

    for (new i = 0; i != MAX_TEXTOBJECT; i ++) if(!ObjectData[i][oExists])
    {
        ObjectData[i][oExists] = true;
        FixText(name);
        format(ObjectData[i][oText], 255, "%s", name);
        format(ObjectData[i][oFontNames], 24, "Arial");

        ObjectData[i][oPos][0] = x;
        ObjectData[i][oPos][1] = y;
        ObjectData[i][oPos][2] = z;
        ObjectData[i][oPos][3] = rx;
        ObjectData[i][oPos][4] = ry;
        ObjectData[i][oPos][5] = rz;

        ObjectData[i][oModel] = 18244;

        ObjectData[i][oFontColor] = fontcolor;
        ObjectData[i][oBackColor] = backcolor;

        ObjectData[i][oFontSize] = 130;

        ObjectData[i][oInt] = GetPlayerInterior(playerid);
        ObjectData[i][oVw] = GetPlayerVirtualWorld(playerid);

        format(string,sizeof(string),"INSERT INTO `objecttext` (`Vw`) VALUES(%d)",ObjectData[i][oVw]);
        mysql_tquery(g_iHandle, string, "OnObjectCreated", "d", i);

        ObjectText_Refresh(i);
        return i;
    }
    return 1;
}

ObjectText_Save(objectid)
{
    new query[2048];
    format(query, sizeof(query), "UPDATE `objecttext` SET `Text`='%q',`PosX`='%.4f',`PosY`='%.4f',`PosZ`='%.4f',`posRX`='%.4f',`posRY`='%.4f',`posRZ`='%.4f',`Vw`='%d',`Int`='%d',`FontColor`='%d',`BackColor`='%d',`FontSize`='%d',`FontNames`='%s',`Model`='%d' WHERE `ID` = '%d'",
        ObjectData[objectid][oText],
        ObjectData[objectid][oPos][0],
        ObjectData[objectid][oPos][1],
        ObjectData[objectid][oPos][2],
        ObjectData[objectid][oPos][3],
        ObjectData[objectid][oPos][4],
        ObjectData[objectid][oPos][5],
        ObjectData[objectid][oVw],
        ObjectData[objectid][oInt],
        ObjectData[objectid][oFontColor],
        ObjectData[objectid][oBackColor],
        ObjectData[objectid][oFontSize],
        ObjectData[objectid][oFontNames],
        ObjectData[objectid][oModel],
        ObjectData[objectid][oID]
    );
    return mysql_tquery(g_iHandle, query);
}

ObjectText_Refresh(id)
{
    if(id != -1 && ObjectData[id][oExists])
    {
        if(IsValidDynamicObject(ObjectData[id][objectText]))
            DestroyDynamicObject(ObjectData[id][objectText]);

        ObjectData[id][objectText] = CreateDynamicObject(ObjectData[id][oModel], ObjectData[id][oPos][0], ObjectData[id][oPos][1], ObjectData[id][oPos][2], ObjectData[id][oPos][3], ObjectData[id][oPos][4], ObjectData[id][oPos][5], ObjectData[id][oVw], ObjectData[id][oInt], -1, 300, 300);
        SetDynamicObjectMaterialText(ObjectData[id][objectText], 0, ObjectData[id][oText], ObjectData[id][oFontSize], ObjectData[id][oFontNames], 32, 1, ObjectData[id][oFontColor], ObjectData[id][oBackColor], 1);
        ObjectText_Save(id);
    }
    return 1;
}

ObjectText_Delete(id)
{
    if(id != -1 && ObjectData[id][oExists])
    {
        if(IsValidDynamicObject(ObjectData[id][objectText]))
            DestroyDynamicObject(ObjectData[id][objectText]);

        mysql_tquery(g_iHandle, sprintf("DELETE FROM `objecttext` WHERE `ID` = '%d'", ObjectData[id][oID]));

        ObjectData[id][oExists] = false;
        ObjectData[id][oText][0] = EOS;
        ObjectData[id][objectText] = INVALID_STREAMER_ID;
        ObjectData[id][oID] = 0;
    }
    return 1;
}


Function:Garbage_Load()
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_GARBAGE_BINS)
    {
        GarbageData[i][garbageExists] = true;
        GarbageData[i][garbageID] = cache_get_field_int(i, "garbageID");
        GarbageData[i][garbageModel] = cache_get_field_int(i, "garbageModel");
        GarbageData[i][garbageCapacity] = cache_get_field_int(i, "garbageCapacity");
        GarbageData[i][garbagePos][0] = cache_get_field_float(i, "garbageX");
        GarbageData[i][garbagePos][1] = cache_get_field_float(i, "garbageY");
        GarbageData[i][garbagePos][2] = cache_get_field_float(i, "garbageZ");
        GarbageData[i][garbagePos][3] = cache_get_field_float(i, "garbageA");
        GarbageData[i][garbageInterior] = cache_get_field_int(i, "garbageInterior");
        GarbageData[i][garbageWorld] = cache_get_field_int(i, "garbageWorld");

        Garbage_Refresh(i);
    }
    printf("*** [load] garbage data (%d count).", rows);
    return 1;
}

Function:Impound_Load()
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_IMPOUND_LOTS)
    {
        ImpoundData[i][impoundExists] = true;
        ImpoundData[i][impoundID] = cache_get_field_int(i, "impoundID");
        ImpoundData[i][impoundLot][0] = cache_get_field_float(i, "impoundLotX");
        ImpoundData[i][impoundLot][1] = cache_get_field_float(i, "impoundLotY");
        ImpoundData[i][impoundLot][2] = cache_get_field_float(i, "impoundLotZ");
        ImpoundData[i][impoundRelease][0] = cache_get_field_float(i, "impoundReleaseX");
        ImpoundData[i][impoundRelease][1] = cache_get_field_float(i, "impoundReleaseY");
        ImpoundData[i][impoundRelease][2] = cache_get_field_float(i, "impoundReleaseZ");
        ImpoundData[i][impoundRelease][3] = cache_get_field_float(i, "impoundReleaseA");

        Impound_Refresh(i);
    }
    printf("*** [load] impound data (%d count).", rows);
    return 1;
}

/*Function:Backpack_Load()
{
    static
        rows,
        fields,
        str[64];

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_BACKPACKS)
    {
        BackpackData[i][backpackExists] = true;
        BackpackData[i][backpackID] = cache_get_field_int(i, "backpackID");
        BackpackData[i][backpackPlayer] = cache_get_field_int(i, "backpackPlayer");
        BackpackData[i][backpackHouse] = cache_get_field_int(i, "backpackHouse");
        BackpackData[i][backpackVehicle] = cache_get_field_int(i, "backpackVehicle");
        BackpackData[i][backpackPos][0] = cache_get_field_float(i, "backpackX");
        BackpackData[i][backpackPos][1] = cache_get_field_float(i, "backpackY");
        BackpackData[i][backpackPos][2] = cache_get_field_float(i, "backpackZ");
        BackpackData[i][backpackInterior] = cache_get_field_int(i, "backpackInterior");
        BackpackData[i][backpackWorld] = cache_get_field_int(i, "backpackWorld");

        if(!BackpackData[i][backpackPlayer]) {
                Backpack_Refresh(i);
        }
    }
    for (new i = 0; i < MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists]) {
        format(str, sizeof(str), "SELECT * FROM `backpackitems` WHERE `ID` = '%d'", BackpackData[i][backpackID]);

        mysql_tquery(g_iHandle, str, "OnLoadBackpack", "d", i);
    }
    printf("*** [load] backpack data (%d count).", rows);
    return 1;
}*/

Function:Arrest_Load()
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_ARREST_POINTS)
    {
            ArrestData[i][arrestExists] = true;

            ArrestData[i][arrestID] = cache_get_field_int(i, "arrestID");
            ArrestData[i][arrestPos][0] = cache_get_field_float(i, "arrestX");
            ArrestData[i][arrestPos][1] = cache_get_field_float(i, "arrestY");
            ArrestData[i][arrestPos][2] = cache_get_field_float(i, "arrestZ");
            ArrestData[i][arrestInterior] = cache_get_field_int(i, "arrestInterior");
            ArrestData[i][arrestWorld] = cache_get_field_int(i, "arrestWorld");

            Arrest_Refresh(i);
    }
    printf("*** [load] arrest data (%d count).", rows);
    return 1;
}

Function:Faction_Load()
{
    static
        rows,
        fields,
        str[255];

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_FACTIONS)
    {
        FactionData[i][factionExists] = true;
        FactionData[i][factionID] = cache_get_field_int(i, "factionID");

        cache_get_field_content(i, "factionName", FactionData[i][factionName], 32);
        cache_get_field_content(i, "factionWithdraw", FactionData[i][factionWithdraw], MAX_PLAYER_NAME);
        cache_get_field_content(i, "factionDeposit", FactionData[i][factionDeposit], MAX_PLAYER_NAME);
        cache_get_field_content(i, "factionMotd", FactionData[i][factionMotd], 225);

        FactionData[i][factionNumber] = cache_get_field_int(i, "factionNumber");
        FactionData[i][factionColor] = cache_get_field_int(i, "factionColor");
        FactionData[i][factionType] = cache_get_field_int(i, "factionType");
        FactionData[i][factionRanks] = cache_get_field_int(i, "factionRanks");
        FactionData[i][factionLockerPos][0] = cache_get_field_float(i, "factionLockerX");
        FactionData[i][factionLockerPos][1] = cache_get_field_float(i, "factionLockerY");
        FactionData[i][factionLockerPos][2] = cache_get_field_float(i, "factionLockerZ");
        FactionData[i][factionLockerInt] = cache_get_field_int(i, "factionLockerInt");
        FactionData[i][factionLockerWorld] = cache_get_field_int(i, "factionLockerWorld");
        FactionData[i][factionMoney] = cache_get_field_int(i, "factionMoney");
        FactionData[i][factionWithdrawMoney] = cache_get_field_int(i, "factionWithdrawMoney");
        FactionData[i][factionDepositMoney] = cache_get_field_int(i, "factionDepositMoney");
        // FactionData[i][factionStock] = cache_get_field_int(i, "factionStock");

        //Spawning
        FactionData[i][SpawnX] = cache_get_field_float(i, "SpawnX");
        FactionData[i][SpawnY] = cache_get_field_float(i, "SpawnY");
        FactionData[i][SpawnZ] = cache_get_field_float(i, "SpawnZ");
        FactionData[i][SpawnInterior] = cache_get_field_int(i, "SpawnInterior");
        FactionData[i][SpawnVW] = cache_get_field_int(i, "SpawnVW");

        for (new j = 0; j < 8; j ++) {
            format(str, sizeof(str), "factionSkin%d", j + 1);
            FactionData[i][factionSkins][j] = cache_get_field_int(i, str);
        }
        for (new j = 0; j < 10; j ++) {
            format(str, sizeof(str), "factionWeapon%d", j + 1);
            FactionData[i][factionWeapons][j] = cache_get_field_int(i, str);
            format(str, sizeof(str), "factionAmmo%d", j + 1);
            FactionData[i][factionAmmo][j] = cache_get_field_int(i, str);
            format(str, sizeof(str), "factionDurability%d", j + 1);
            FactionData[i][factionDurability][j] = cache_get_field_int(i, str);
            format(str, sizeof(str), "factionGunRank%d", j + 1);
            FactionData[i][factionGunRank][j] = cache_get_field_int(i, str);
            format(str, sizeof(str), "factionSerial%d", j + 1);
            FactionData[i][factionSerial][j] = cache_get_field_int(i, str);
        }
        for (new j = 0; j < 15; j ++) {
            format(str, sizeof(str), "factionRank%d", j + 1);
            cache_get_field_content(i, str, FactionRanks[i][j], 32);
        }

		cache_get_field_content(i, "factionSalary", str, 108);
        sscanf(str, "p<|>ddddddddddddddd", 
        	FactionData[i][factionSalary][0],
			FactionData[i][factionSalary][1],
			FactionData[i][factionSalary][2],
			FactionData[i][factionSalary][3],
			FactionData[i][factionSalary][4],
			FactionData[i][factionSalary][5],
			FactionData[i][factionSalary][6],
			FactionData[i][factionSalary][7],
			FactionData[i][factionSalary][8],
			FactionData[i][factionSalary][9],
			FactionData[i][factionSalary][10],
			FactionData[i][factionSalary][11],
			FactionData[i][factionSalary][12],
			FactionData[i][factionSalary][13],
			FactionData[i][factionSalary][14]
		);

        Faction_Refresh(i);

        // Loaded faction vehicle's
        Vehicle_FactionLoad(FactionData[i][factionID]);
    }
    printf("*** [load] faction data (%d count).", rows);
    return 1;
}

Function:Crate_Load()
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_CRATES)
    {
        CrateData[i][crateExists] = true;
        CrateData[i][crateID] = cache_get_field_int(i, "crateID");
        CrateData[i][crateType] = cache_get_field_int(i, "crateType");
        CrateData[i][cratePos][0] = cache_get_field_float(i, "crateX");
        CrateData[i][cratePos][1] = cache_get_field_float(i, "crateY");
        CrateData[i][cratePos][2] = cache_get_field_float(i, "crateZ");
        CrateData[i][cratePos][3] = cache_get_field_float(i, "crateA");
        CrateData[i][crateInterior] = cache_get_field_int(i, "crateInterior");
        CrateData[i][crateWorld] = cache_get_field_int(i, "crateWorld");
        CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;

        Crate_Refresh(i);
    }
    printf("*** [load] crates data (%d count).", rows);
    return 1;
}

Function:Job_Load()
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_DYNAMIC_JOBS)
    {
        JobData[i][jobExists] = true;
        JobData[i][jobID] = cache_get_field_int(i, "jobID");
        JobData[i][jobType] = cache_get_field_int(i, "jobType");
        JobData[i][jobPos][0] = cache_get_field_float(i, "jobPosX");
        JobData[i][jobPos][1] = cache_get_field_float(i, "jobPosY");
        JobData[i][jobPos][2] = cache_get_field_float(i, "jobPosZ");
        JobData[i][jobInterior] = cache_get_field_int(i, "jobInterior");
        JobData[i][jobWorld] = cache_get_field_int(i, "jobWorld");
        JobData[i][jobPoint][0] = cache_get_field_float(i, "jobPointX");
        JobData[i][jobPoint][1] = cache_get_field_float(i, "jobPointY");
        JobData[i][jobPoint][2] = cache_get_field_float(i, "jobPointZ");
        JobData[i][jobDeliver][0] = cache_get_field_float(i, "jobDeliverX");
        JobData[i][jobDeliver][1] = cache_get_field_float(i, "jobDeliverY");
        JobData[i][jobDeliver][2] = cache_get_field_float(i, "jobDeliverZ");
        JobData[i][jobPointInt] = cache_get_field_int(i, "jobPointInt");
        JobData[i][jobPointWorld] = cache_get_field_int(i, "jobPointWorld");
        JobData[i][jobStock] = cache_get_field_int(i, "jobStock");
        JobData[i][jobPrison] = cache_get_field_int(i, "jobPrison");
        Job_Refresh(i);
    }
    printf("*** [load] job data (%d count).", rows);
    return 1;
}

Function:Entrance_Load()
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_ENTRANCES)
    {
        EntranceData[i][entranceExists] = true;
        EntranceData[i][entranceID] = cache_get_field_int(i, "entranceID");

        cache_get_field_content(i, "entranceName", EntranceData[i][entranceName], 128);
        cache_get_field_content(i, "entrancePass", EntranceData[i][entrancePass], 32);

        EntranceData[i][entranceIcon] = cache_get_field_int(i, "entranceIcon");
        EntranceData[i][entranceLocked] = cache_get_field_int(i, "entranceLocked");
        EntranceData[i][entrancePos][0] = cache_get_field_float(i, "entrancePosX");
        EntranceData[i][entrancePos][1] = cache_get_field_float(i, "entrancePosY");
        EntranceData[i][entrancePos][2] = cache_get_field_float(i, "entrancePosZ");
        EntranceData[i][entrancePos][3] = cache_get_field_float(i, "entrancePosA");
        EntranceData[i][entranceInt][0] = cache_get_field_float(i, "entranceIntX");
        EntranceData[i][entranceInt][1] = cache_get_field_float(i, "entranceIntY");
        EntranceData[i][entranceInt][2] = cache_get_field_float(i, "entranceIntZ");
        EntranceData[i][entranceInt][3] = cache_get_field_float(i, "entranceIntA");
        EntranceData[i][entranceInterior] = cache_get_field_int(i, "entranceInterior");
        EntranceData[i][entranceExterior] = cache_get_field_int(i, "entranceExterior");
        EntranceData[i][entranceExteriorVW] = cache_get_field_int(i, "entranceExteriorVW");
        EntranceData[i][entranceType] = cache_get_field_int(i, "entranceType");
        EntranceData[i][entranceCustom] = cache_get_field_int(i, "entranceCustom");
        EntranceData[i][entranceWorld] = cache_get_field_int(i, "entranceWorld");
        EntranceData[i][entranceVehAble] = cache_get_field_int(i, "entranceVehAble");

        if(EntranceData[i][entranceType] == 3)
            CreateForklifts(i);

        Entrance_Refresh(i);
    }
    printf("*** [load] entrance data (%d count).", rows);
    return 1;
}

Function:ObjectText_Load()
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_TEXTOBJECT)
    {
        ObjectData[i][oExists] = true;
        ObjectData[i][oID] = cache_get_field_int(i, "ID");

        cache_get_field_content(i, "Text", ObjectData[i][oText], 255);
        cache_get_field_content(i, "FontNames", ObjectData[i][oFontNames]);

        ObjectData[i][oVw] = cache_get_field_int(i, "Vw");
        ObjectData[i][oInt] = cache_get_field_int(i, "Int");
        ObjectData[i][oFontColor] = cache_get_field_int(i, "FontColor");
        ObjectData[i][oBackColor] = cache_get_field_int(i, "BackColor");
        ObjectData[i][oFontSize] = cache_get_field_int(i, "FontSize");
        ObjectData[i][oModel] = cache_get_field_int(i, "Model");

        ObjectData[i][oPos][0] = cache_get_field_float(i, "PosX");
        ObjectData[i][oPos][1] = cache_get_field_float(i, "PosY");
        ObjectData[i][oPos][2] = cache_get_field_float(i, "PosZ");
        ObjectData[i][oPos][3] = cache_get_field_float(i, "posRX");
        ObjectData[i][oPos][4] = cache_get_field_float(i, "posRY");
        ObjectData[i][oPos][5] = cache_get_field_float(i, "posRZ");

        ObjectText_Refresh(i);
    }
    printf("*** [load] objecttext data (%d count).", rows);
    return 1;
}

Function:Dropped_Load()
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_DROPPED_ITEMS)
    {
        DroppedItems[i][droppedID] = cache_get_field_int(i, "ID");

        cache_get_field_content(i, "itemName", DroppedItems[i][droppedItem], 32);
        cache_get_field_content(i, "itemPlayer", DroppedItems[i][droppedPlayer], 24);

        DroppedItems[i][droppedModel] = cache_get_field_int(i, "itemModel");
        DroppedItems[i][droppedQuantity] = cache_get_field_int(i, "itemQuantity");
        DroppedItems[i][droppedWeaponId] = cache_get_field_int(i, "itemWeapon");
        DroppedItems[i][droppedAmmo] = cache_get_field_int(i, "itemAmmo");
        DroppedItems[i][droppedPos][0] = cache_get_field_float(i, "itemX");
        DroppedItems[i][droppedPos][1] = cache_get_field_float(i, "itemY");
        DroppedItems[i][droppedPos][2] = cache_get_field_float(i, "itemZ");
        DroppedItems[i][droppedInt] = cache_get_field_int(i, "itemInt");
        DroppedItems[i][droppedWorld] = cache_get_field_int(i, "itemWorld");
        DroppedItems[i][droppedTime] = cache_get_field_int(i, "itemTime");

        if(IsWeaponModel(DroppedItems[i][droppedModel])) {
            DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
        } else {
            DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 0.0, 0.0, 0.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
        }
        DroppedItems[i][droppedLabel] = CreateDynamic3DTextLabel(DroppedItems[i][droppedItem], 0xFFFFFFAA, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 2.5, _, _, _, DroppedItems[i][droppedWorld],DroppedItems[i][droppedInt]);
    }
    printf("*** [load] dropped item data (%d count).", rows);
    return 1;
}
Function:Business_Load()
{
    static
        rows,
        fields,
        str[64];

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_BUSINESSES)
    {
        BusinessData[i][bizExists] = true;
        BusinessData[i][bizID] = cache_get_field_int(i, "bizID");

        cache_get_field_content(i, "bizName", BusinessData[i][bizName], 32);
        cache_get_field_content(i, "bizMessage", BusinessData[i][bizMessage], 128);
        cache_get_field_content(i, "bizLink", BusinessData[i][bizLink], 128);
        cache_get_field_content(i, "bOwnerName", BusinessData[i][bOwnerName], 128);

        BusinessData[i][bizOwner] = cache_get_field_int(i, "bizOwner");
        BusinessData[i][bizType] = cache_get_field_int(i, "bizType");
        BusinessData[i][bizPrice] = cache_get_field_int(i, "bizPrice");
        BusinessData[i][bizPos][0] = cache_get_field_float(i, "bizPosX");
        BusinessData[i][bizPos][1] = cache_get_field_float(i, "bizPosY");
        BusinessData[i][bizPos][2] = cache_get_field_float(i, "bizPosZ");
        BusinessData[i][bizPos][3] = cache_get_field_float(i, "bizPosA");
        BusinessData[i][bizInt][0] = cache_get_field_float(i, "bizIntX");
        BusinessData[i][bizInt][1] = cache_get_field_float(i, "bizIntY");
        BusinessData[i][bizInt][2] = cache_get_field_float(i, "bizIntZ");
        BusinessData[i][bizInt][3] = cache_get_field_float(i, "bizIntA");
        BusinessData[i][bizSpawn][0] = cache_get_field_float(i, "bizSpawnX");
        BusinessData[i][bizSpawn][1] = cache_get_field_float(i, "bizSpawnY");
        BusinessData[i][bizSpawn][2] = cache_get_field_float(i, "bizSpawnZ");
        BusinessData[i][bizSpawn][3] = cache_get_field_float(i, "bizSpawnA");
        BusinessData[i][bizDeliver][0] = cache_get_field_float(i, "bizDeliverX");
        BusinessData[i][bizDeliver][1] = cache_get_field_float(i, "bizDeliverY");
        BusinessData[i][bizDeliver][2] = cache_get_field_float(i, "bizDeliverZ");
        BusinessData[i][bizShipment] = cache_get_field_int(i, "bizShipment");
        BusinessData[i][bizInterior] = cache_get_field_int(i, "bizInterior");
        BusinessData[i][bizExterior] = cache_get_field_int(i, "bizExterior");
        BusinessData[i][bizExteriorVW] = cache_get_field_int(i, "bizExteriorVW");
        BusinessData[i][bizLocked] = cache_get_field_int(i, "bizLocked");
        BusinessData[i][bizVault] = cache_get_field_int(i, "bizVault");
        BusinessData[i][bizProducts] = cache_get_field_int(i, "bizProducts");
        BusinessData[i][bizSeal] = cache_get_field_int(i, "bizSeal");
        BusinessData[i][bizCargo] = cache_get_field_int(i, "bizCargo");
        BusinessData[i][bizWarn] = cache_get_field_int(i, "bizWarn");
        BusinessData[i][bizDurability] = cache_get_field_int(i, "bizDurability");

        for (new j = 0; j < 20; j ++)
        {
            format(str, 32, "bizPrice%d", j + 1);
            BusinessData[i][bizPrices][j] = cache_get_field_int(i, str);
        }

        Business_Refresh(i);
    }
    for (new i = 0; i < MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists])
    {
        if(BusinessData[i][bizType] == 6) {
            mysql_tquery(g_iHandle, sprintf("SELECT * FROM `pumps` WHERE `ID` = '%d'", BusinessData[i][bizID]), "Pump_Load", "d", i);
        }
    }
    printf("*** [load] business data (%d count).", rows);
    return 1;
}
House_CountVehicleSlot(playerid)
{
	new Cache:execute, total = 0, slot;

	execute = mysql_query(g_iHandle, sprintf("SELECT `houseParkingSlot` FROM `houses` WHERE `houseOwner`='%d';", GetPlayerSQLID(playerid)));

	if(cache_num_rows())
	{
        for(new i; i != cache_num_rows(); i++)
        {
            slot = cache_get_field_int(i, "houseParkingSlot");
            total += slot;
        }
    }
	cache_delete(execute);
	return total;
}

// House_CountVehicleSlot(playerid)
// {
//     for(new i; i != MAX_HOUSES; i++)
//     {
//         if(HouseData[i][houseExists] && HouseData[i][houseOwner] == PlayerData[playerid][pID])
//         {
//             new totalslot;
//             totalslot += HouseData[i][houseParkingSlot];

//             return totalslot;
//         }
//     }
//     return 1;
// }
Function:House_Load()
{
    static
        rows,
        fields,
        str[128];

    cache_get_data(rows, fields);

    for (new i = 0; i < rows; i ++) if(i < MAX_HOUSES)
    {
        HouseData[i][houseExists] = true;
        HouseData[i][houseLights] = false;

        HouseData[i][houseID] = cache_get_field_int(i, "houseID");
        HouseData[i][houseOwner] = cache_get_field_int(i, "houseOwner");
        HouseData[i][housePrice] = cache_get_field_int(i, "housePrice");
        HouseData[i][houseSeal] = cache_get_field_int(i, "houseSeal");

        cache_get_field_content(i, "houseAddress", HouseData[i][houseAddress], 32);
        cache_get_field_content(i, "houseOwnerName", HouseData[i][houseOwnerName], 32);

        HouseData[i][housePos][0] = cache_get_field_float(i, "housePosX");
        HouseData[i][housePos][1] = cache_get_field_float(i, "housePosY");
        HouseData[i][housePos][2] = cache_get_field_float(i, "housePosZ");
        HouseData[i][housePos][3] = cache_get_field_float(i, "housePosA");
        HouseData[i][houseInt][0] = cache_get_field_float(i, "houseIntX");
        HouseData[i][houseInt][1] = cache_get_field_float(i, "houseIntY");
        HouseData[i][houseInt][2] = cache_get_field_float(i, "houseIntZ");
        HouseData[i][houseInt][3] = cache_get_field_float(i, "houseIntA");
        HouseData[i][houseInterior] = cache_get_field_int(i, "houseInterior");
        HouseData[i][houseExterior] = cache_get_field_int(i, "houseExterior");
        HouseData[i][houseExteriorVW] = cache_get_field_int(i, "houseExteriorVW");
        HouseData[i][houseLocked] = cache_get_field_int(i, "houseLocked");
        HouseData[i][houseMoney] = cache_get_field_int(i, "houseMoney");
        HouseData[i][houseLastVisited] = cache_get_field_int(i, "houseLastVisited");

        //Parking Spawn House
        HouseData[i][houseParkingSlot]   = cache_get_field_int(i, "houseParkingSlot");
        HouseData[i][houseParkingSlotUsed] = cache_get_field_int(i, "houseParkingSlotUsed");
        HouseData[i][housePacket] = 0;

        for (new house_furniture_id = 0; house_furniture_id < MAX_HOUSE_FURNITURE; house_furniture_id++)
        {
            HouseData[i][furniture][house_furniture_id] = -1;
        }

        House_Refresh(i);
    }
    for (new i = 0; i < MAX_HOUSES; i ++) 
    {
        if(HouseData[i][houseExists]) 
        {
            format(str, sizeof(str), "SELECT * FROM `weapon_houses` WHERE `houseid` = '%d' ORDER BY `slot` ASC LIMIT 5", HouseData[i][houseID]);
            mysql_tquery(g_iHandle, str, "OnLoadWeapon", "d", i);

            format(str, sizeof(str), "SELECT * FROM `housestorage` WHERE `ID` = '%d'", HouseData[i][houseID]);
            mysql_tquery(g_iHandle, str, "OnLoadStorage", "d", i);

            format(str, sizeof(str), "SELECT * FROM `furniture` WHERE `ID` = '%d'", HouseData[i][houseID]);
            mysql_tquery(g_iHandle, str, "OnLoadFurniture", "d", i);

            format(str, sizeof(str), "SELECT * FROM `clothes_wardrobe` WHERE `houseid` = '%d' LIMIT %d", HouseData[i][houseID], MAX_CLOTHES_WARDROBE);
            mysql_tquery(g_iHandle, str, "OnLoadClothes", "d", i);

            format(str, sizeof(str), "SELECT * FROM `accesories_wardrobe` WHERE `houseid` = '%d' LIMIT %d", HouseData[i][houseID], MAX_CLOTHES_WARDROBE);
            mysql_tquery(g_iHandle, str, "OnLoadAccesories", "d", i);
        }
    }
    printf("*** [load] house data (%d count).", rows);
    return 1;
}

static IsVehicleSeatUsed(vehicleid, seat)
{
    foreach (new i : Player) if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
        return 1;
    }
    return 0;
}

static RemoveFromVehicle(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        static
        Float:fX,
        Float:fY,
        Float:fZ;

        GetPlayerPos(playerid, fX, fY, fZ);
        SetPlayerPos(playerid, fX, fY, fZ + 1.5);
    }
    return 1;
}

GetAvailableSeat(vehicleid, start = 1)
{
    new seats = GetVehicleMaxSeats(vehicleid);

    for (new i = start; i < seats; i ++) if(!IsVehicleSeatUsed(vehicleid, i)) {
        return i;
    }
    return -1;
}

GetVehicleFromBehind(vehicleid)
{
    static
        Float:fCoords[7];

    GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
    GetVehicleZAngle(vehicleid, fCoords[3]);

    for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++) if(i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
    {
        if(floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
        return i;
    }
    return INVALID_VEHICLE_ID;
}

SetPlayerInjured(playerid)
{
    new 
        killerid = PlayerData[playerid][pKiller],
        reason = PlayerData[playerid][pKillerReason]
    ;
    if(IsCookingDrug(playerid))
    {
        Cooking_Reset(playerid);
    }
    if(!PlayerData[playerid][pInjured])
    {
        PlayerData[playerid][pInjured] = 1;

        if(PlayerData[playerid][pJobDuty])
            return cmd_jobduty(playerid, "\1");

        if(PlayerData[playerid][pSpectator] != INVALID_PLAYER_ID)
            return cmd_spectate(playerid, "off");
    }
    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
    {
        SendClientMessage(PlayerData[playerid][pCallLine], X11_YELLOW_2, "[PHONE]:"WHITE" The line went dead...");
        CancelCall(playerid);
    }
    if(PlayerData[playerid][pCarryCrate] != -1)
    {
        Crate_Drop(playerid);
    }

    if(PlayerData[playerid][pHudStyle] == 0) Speedometer_Hide(playerid);
    else SpeedometerNew_Hide(playerid);

    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_supply]);
    ResetPlayer(playerid);

    InjuredTag(playerid, true);

    TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
    TextDrawSetString(gServerTextdraws[0], "You_are_injured!_~r~/call_911_~w~or_~r~/giveup");

    if(IsPlayerInAnyVehicle(playerid))
    {
        new Float:x, Float:y, Float:z, vehicleid = GetPlayerVehicleID(playerid);
        if(IsABike(vehicleid) || IsSportBike(vehicleid))
        {
            GetPlayerPos(playerid, x, y, z);
            SetPlayerPos(playerid, x, y, z+0.5);
            ApplyAnimation(playerid, "PED", "CAR_DEAD_LHS",   4.0, 0, 0, 0, 1, 0, 1);
            ApplyAnimation(playerid, "PED", "CAR_DEAD_LHS",   4.0, 0, 0, 0, 1, 0, 1);
        }
        else
        {
            ApplyAnimation(playerid, "PED", "CAR_DEAD_LHS",   4.0, 0, 0, 0, 1, 0, 1);
            ApplyAnimation(playerid, "PED", "CAR_DEAD_LHS",   4.0, 0, 0, 0, 1, 0, 1);
        }
        SetEngineStatus(vehicleid, false);
    }
    else
    {
        ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY",   4.0, 0, 0, 0, 1, 0, 1);
        ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY",   4.0, 0, 0, 0, 1, 0, 1);
    }

    if(killerid != INVALID_PLAYER_ID)
    {
        if(1 <= reason <= 46)
            Log_Save(E_LOG_KILL, sprintf("[%s] %s has killed %s (%s).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), ReturnWeaponName(reason)));

        else
            Log_Save(E_LOG_KILL, sprintf("[%s] %s has killed %s (reason %d).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), reason));

        if(reason == 50 && killerid != INVALID_PLAYER_ID)
            SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s has killed %s by heli-blading.", ReturnName(killerid, 0), ReturnName(playerid, 0));

        if(reason == 29 && killerid != INVALID_PLAYER_ID && GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
            SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s has killed %s by driver shooting.", ReturnName(killerid, 0), ReturnName(playerid, 0));
    }

    if(playerUseRope[playerid] == 1)
    {
        for(new destr2=0;destr2<=ropelength;destr2++)
        {
            DestroyObject(r0pes[playerid][destr2]);
        }
        playerUseRope[playerid] = 0;
        playerVehicleRope[playerid] = 0;
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid,0);
        TogglePlayerControllable(playerid,1);
        DisablePlayerCheckpoint(playerid);
    }

    foreach(new i : Player)
    {
        if(AccountData[i][pAdmin] > 0)
        {
            SendDeathMessageToPlayer(i, killerid, playerid, reason);
        }
    }

    SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" Anda terluka dan membutuhkan pertolongan medis (/call 911 > medics).");
    SendClientMessage(playerid, X11_GREY_60, "USAGE:"WHITE" (( /giveup untuk spawn ke rumah sakit. Tunggu 5 menit agar bisa melakukannya. ))");
    PlayerData[playerid][pGiveupTime] = 300; // 300
    new Float:rand = RandomFloat(60.0, 90.0);
    SetPlayerRate(playerid, rand);
    return 1;
}
stock SetArmour(playerid, Float:armour)
{
    PlayerData[playerid][pArmorStatus] = armour;

    if(PlayerData[playerid][pArmorStatus] > 100)
        PlayerData[playerid][pArmorStatus] = 100;

    else if(PlayerData[playerid][pArmorStatus] <= 0)
        PlayerData[playerid][pArmorStatus] = 0;

    SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
    return 1;
}

stock SetHealth(playerid, Float:health)
{
    if(IsPlayerInEvent(playerid))
        return 0;

    PlayerData[playerid][pHealth] = health;

    if(PlayerData[playerid][pHealth] > 100)
    {
        PlayerData[playerid][pHealth] = 100.0;
        SetPlayerHealth(playerid, 100);
    }
    else if(PlayerData[playerid][pHealth] <= 5)
    {
        PlayerData[playerid][pHealth] = 1;
        SetPlayerHealth(playerid, 1);
        if(!PlayerData[playerid][pInjured])
        {
            SetPlayerInjured(playerid);
        }
    }
    else
    {
        SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
    }
    return 1;
}

timer FirstAidUpdate[1000](playerid, aidkit)
{
    if(PlayerData[playerid][pFirstAid])
    {
        new Float:health = GetHealth(playerid);

        if(!IsPlayerInAnyVehicle(playerid) && GetPlayerAnimationIndex(playerid) != 1508)
            ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

        if(aidkit == 0)
        {
            if(PlayerData[playerid][pDead] >= 95.0)
            {
                ClearAnimations(playerid);
                SendServerMessage(playerid, "Your first aid kit has been used up.");
                SetPlayerRate(playerid, 100.0);

                if(!IsPlayerInAnyVehicle(playerid)) {
                    PlayerData[playerid][pLoopAnim] = true;
                    ShowPlayerFooter(playerid, "Press ~y~SPRINT~w~ to stop the animation.");
                }

                PlayerData[playerid][pFirstAid] = false;
                stop PlayerData[playerid][pAidTimer];
            }
            else 
            {
                SetPlayerRate(playerid, PlayerData[playerid][pDead] + 4.0); 
            }
        }
        else
        {
            if(health >= 95.0)
            {
                ClearAnimations(playerid);
                SendServerMessage(playerid, "Your first aid kit has been used up.");
                SetHealth(playerid, 100.0);

                if(!IsPlayerInAnyVehicle(playerid)) {
                    PlayerData[playerid][pLoopAnim] = true;
                    ShowPlayerFooter(playerid, "Press ~y~SPRINT~w~ to stop the animation.");
                }

                PlayerData[playerid][pFirstAid] = false;
                stop PlayerData[playerid][pAidTimer];
            }
            else 
            {
                SetHealth(playerid, health + 3.0); 
            }
        }
    }
    return 1;
}

Function:OnLoadFurniture(houseid)
{
    static
        rows,
        fields,
        id = -1;

    cache_get_data(rows, fields);

    for (new i = 0; i != rows; i ++) if((id = Furniture_GetFreeID()) != -1) {
        FurnitureData[id][furnitureExists] = true;
        FurnitureData[id][furnitureHouse] = houseid;

        cache_get_field_content(i, "furnitureName", FurnitureData[id][furnitureName], 32);

        FurnitureData[id][furnitureID] = cache_get_field_int(i, "furnitureID");
        FurnitureData[id][furnitureModel] = cache_get_field_int(i, "furnitureModel");
        FurnitureData[id][furnitureUnused] = cache_get_field_int(i, "furnitureUnused");
        FurnitureData[id][furniturePos][0] = cache_get_field_float(i, "furnitureX");
        FurnitureData[id][furniturePos][1] = cache_get_field_float(i, "furnitureY");
        FurnitureData[id][furniturePos][2] = cache_get_field_float(i, "furnitureZ");
        FurnitureData[id][furnitureRot][0] = cache_get_field_float(i, "furnitureRX");
        FurnitureData[id][furnitureRot][1] = cache_get_field_float(i, "furnitureRY");
        FurnitureData[id][furnitureRot][2] = cache_get_field_float(i, "furnitureRZ");
        // Kasih batasan agar tidak buffer overflow.
        if (i < MAX_HOUSE_FURNITURE)
        {
            HouseData[houseid][furniture][i] = id;
        }

        Furniture_Refresh(id);
    }
    return 1;
}

Furniture_GetCount(houseid)
{
    new count;

    for (new i = 0; i < MAX_FURNITURE; i ++)
    {
        if(FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid)
        {
            // SendServerMessage(0, "furnExist: %d | houseid: %d | houseSQLID: %d | houseFurnID: %d | furnHouse: %d | furnSQLID: %d", FurnitureData[i][furnitureExists], houseid, HouseData[houseid][houseID], i, FurnitureData[i][furnitureHouse], FurnitureData[i][furnitureID]);
            count++;
        }
    }
    return count;
}

Furniture_GetFreeID()
{
    for (new i = 0; i != MAX_FURNITURE; i ++)
    {
        if(!FurnitureData[i][furnitureExists])
        {
            return i;
        }
    }
    return -1;
}

Furniture_Update(furnitureid)
{
    if(furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
    {
        if(FurnitureData[furnitureid][furnitureUnused] == 0) {
            Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[furnitureid][furnitureObject], E_STREAMER_X, FurnitureData[furnitureid][furniturePos][0]);
            Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[furnitureid][furnitureObject], E_STREAMER_Y, FurnitureData[furnitureid][furniturePos][1]);
            Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[furnitureid][furnitureObject], E_STREAMER_Z, FurnitureData[furnitureid][furniturePos][2]);
            Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[furnitureid][furnitureObject], E_STREAMER_R_X, FurnitureData[furnitureid][furnitureRot][0]);
            Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[furnitureid][furnitureObject], E_STREAMER_R_Y, FurnitureData[furnitureid][furnitureRot][1]);
            Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[furnitureid][furnitureObject], E_STREAMER_R_Z, FurnitureData[furnitureid][furnitureRot][2]);

            Streamer_SetIntData(STREAMER_TYPE_OBJECT, FurnitureData[furnitureid][furnitureObject], E_STREAMER_WORLD_ID, HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID] + 5000);
            Streamer_SetIntData(STREAMER_TYPE_OBJECT, FurnitureData[furnitureid][furnitureObject], E_STREAMER_INTERIOR_ID, HouseData[FurnitureData[furnitureid][furnitureHouse]][houseInterior]);
        }
    }
    return 1;
}

Furniture_Refresh(furnitureid)
{
    if(furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
    {
        if(IsValidDynamicObject(FurnitureData[furnitureid][furnitureObject]))
            DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);

        if(FurnitureData[furnitureid][furnitureUnused] == 0)
        {
            FurnitureData[furnitureid][furnitureObject] = CreateDynamicObject(
                FurnitureData[furnitureid][furnitureModel],
                FurnitureData[furnitureid][furniturePos][0],
                FurnitureData[furnitureid][furniturePos][1],
                FurnitureData[furnitureid][furniturePos][2],
                FurnitureData[furnitureid][furnitureRot][0],
                FurnitureData[furnitureid][furnitureRot][1],
                FurnitureData[furnitureid][furnitureRot][2],
                HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID] + 5000,
                HouseData[FurnitureData[furnitureid][furnitureHouse]][houseInterior]
            );
        }
    }
    return 1;
}

Furniture_Save(furnitureid)
{
    static
        string[600];

    format(string, sizeof(string), "UPDATE `furniture` SET `furnitureModel` = '%d', `furnitureName` = '%s', `furnitureX` = '%.4f', `furnitureY` = '%.4f', `furnitureZ` = '%.4f', `furnitureRX` = '%.4f', `furnitureRY` = '%.4f', `furnitureRZ` = '%.4f', `furnitureUnused` = '%d' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
        FurnitureData[furnitureid][furnitureModel],
        SQL_ReturnEscaped(FurnitureData[furnitureid][furnitureName]),
        FurnitureData[furnitureid][furniturePos][0],
        FurnitureData[furnitureid][furniturePos][1],
        FurnitureData[furnitureid][furniturePos][2],
        FurnitureData[furnitureid][furnitureRot][0],
        FurnitureData[furnitureid][furnitureRot][1],
        FurnitureData[furnitureid][furnitureRot][2],
        FurnitureData[furnitureid][furnitureUnused],
        HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID],
        FurnitureData[furnitureid][furnitureID]
    );
    return mysql_tquery(g_iHandle, string);
}

Furniture_Add(houseid, name[], modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, unused = 1)
{
    new
        string[64],
        id = Furniture_GetFreeID()
    ;

    if(houseid == -1 || !HouseData[houseid][houseExists])
        return 0;

    if(id >= 0)
    {
        FurnitureData[id][furnitureExists] = true;
        format(FurnitureData[id][furnitureName], 32, name);

        FurnitureData[id][furnitureHouse] = houseid;
        FurnitureData[id][furnitureModel] = modelid;
        FurnitureData[id][furniturePos][0] = x;
        FurnitureData[id][furniturePos][1] = y;
        FurnitureData[id][furniturePos][2] = z;
        FurnitureData[id][furnitureRot][0] = rx;
        FurnitureData[id][furnitureRot][1] = ry;
        FurnitureData[id][furnitureRot][2] = rz;
        FurnitureData[id][furnitureUnused] = unused;

        for (new i = 0; i < MAX_HOUSE_FURNITURE; i++)
        {
            //new furnitureid = HouseData[houseid][furniture][i];
            // SendServerMessage(0, "houseid: %d | house SQL ID: %d | housefurnitureid: %d | furniture SQL ID: %d", houseid, HouseData[houseid][houseID], HouseData[houseid][furniture][i], furnitureid >= 0 ? FurnitureData[furnitureid][furnitureID] : -1);

            if(HouseData[houseid][furniture][i] == -1)
            {
                HouseData[houseid][furniture][i] = id;

                Furniture_Refresh(id);

                format(string, sizeof(string), "INSERT INTO `furniture` (`ID`) VALUES(%d)", HouseData[houseid][houseID]);
                mysql_tquery(g_iHandle, string, "OnFurnitureCreated", "d", id);

                return id;
            }
        }
    }
    return -1;
}

Furniture_Delete(furnitureid)
{
    if(furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
    {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `furniture` WHERE `ID` = '%d' AND `furnitureID` = '%d'", HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID], FurnitureData[furnitureid][furnitureID]));

        FurnitureData[furnitureid][furnitureExists] = false;
        FurnitureData[furnitureid][furnitureModel] = 0;

        // Mengambil ID rumah berdasarkan furniture-nya.
        new houseid = FurnitureData[furnitureid][furnitureHouse];

        // Looping berdasarkan maksimal furniture rumahnya.
        for (new house_furniture = 0; house_furniture < MAX_HOUSE_FURNITURE; house_furniture++)
        {
            // Jika furniture-nya sama dengan yang ada di slot rumahnya, maka perlu dihapus dari array.
            if (HouseData[houseid][furniture][house_furniture] >= 0 && HouseData[houseid][furniture][house_furniture] == furnitureid)
            {
                HouseData[houseid][furniture][house_furniture] = -1;
                break;
            }
        }
        DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);
        FurnitureData[furnitureid][furnitureObject] = INVALID_STREAMER_ID;
    }
    return 1;
}

Function:OnLoadWeapon(houseid)
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);

    for (new i = 0; i != rows; i ++) {
        HouseData[houseid][houseWeapons][i]    = cache_get_field_int(i, "weaponid");
        HouseData[houseid][houseAmmo][i]       = cache_get_field_int(i, "ammo");
        HouseData[houseid][houseDurability][i] = cache_get_field_int(i, "durability");
        HouseData[houseid][houseWeaponSlot][i] = cache_get_field_int(i, "slot");
        HouseData[houseid][houseSerial][i]     = cache_get_field_int(i, "serial");
    }
    return 1;
}

Function:OnLoadStorage(houseid)
{
    static
        rows,
        fields,
        str[32];

    cache_get_data(rows, fields);

    for (new i = 0; i != rows; i ++) if(!HouseStorage[houseid][i][hItemExists]) {
        HouseStorage[houseid][i][hItemExists] = true;
        HouseStorage[houseid][i][hItemID] = cache_get_field_int(i, "itemID");
        HouseStorage[houseid][i][hItemModel] = cache_get_field_int(i, "itemModel");
        HouseStorage[houseid][i][hItemQuantity] = cache_get_field_int(i, "itemQuantity");

        cache_get_field_content(i, "itemName", str, sizeof(str));
        strpack(HouseStorage[houseid][i][hItemName], str, 32 char);
    }
    return 1;
}

/*Function:OnLoadBackpack(id)
{
    static
        rows,
        fields,
        itemid = -1;

    cache_get_data(rows, fields);

    for (new i = 0; i != rows; i ++) if((itemid = Backpack_GetFreeItem()) != -1) {
        BackpackItems[itemid][bItemExists] = true;
        BackpackItems[itemid][bItemBackpack] = id;
        BackpackItems[itemid][bItemID] = cache_get_field_int(i, "itemID");
        BackpackItems[itemid][bItemModel] = cache_get_field_int(i, "itemModel");
        BackpackItems[itemid][bItemQuantity] = cache_get_field_int(i, "itemQuantity");

        cache_get_field_content(i, "itemName", BackpackItems[itemid][bItemName], 32);
    }
    return 1;
}*/

House_Save(houseid)
{
    static
        query[2150];

    format(query, sizeof(query), "UPDATE `houses` SET `houseOwner` = '%d', `housePrice` = '%d', `houseAddress` = '%s', `housePosX` = '%.4f', `housePosY` = '%.4f', `housePosZ` = '%.4f', `housePosA` = '%.4f', `houseIntX` = '%.4f', `houseIntY` = '%.4f', `houseIntZ` = '%.4f', `houseIntA` = '%.4f', `houseInterior` = '%d', `houseExterior` = '%d', `houseExteriorVW` = '%d'",
        HouseData[houseid][houseOwner],
        HouseData[houseid][housePrice],
        SQL_ReturnEscaped(HouseData[houseid][houseAddress]),
        HouseData[houseid][housePos][0],
        HouseData[houseid][housePos][1],
        HouseData[houseid][housePos][2],
        HouseData[houseid][housePos][3],
        HouseData[houseid][houseInt][0],
        HouseData[houseid][houseInt][1],
        HouseData[houseid][houseInt][2],
        HouseData[houseid][houseInt][3],
        HouseData[houseid][houseInterior],
        HouseData[houseid][houseExterior],
        HouseData[houseid][houseExteriorVW]
    );
    format(query, sizeof(query), "%s, `houseParkingSlot` = '%d', `houseParkingSlotUsed` = '%d', `houseSeal` = '%d'",
        query,
        HouseData[houseid][houseParkingSlot],
        HouseData[houseid][houseParkingSlotUsed],
        HouseData[houseid][houseSeal]
        //, `houseParkingPosX` = '%.4f', `houseParkingPosY` = '%.4f', `houseParkingPosZ` = '%.4f', `houseParkingPosRZ` = '%.4f'
        // HouseData[houseid][houseParkingPos][0],
        // HouseData[houseid][houseParkingPos][1],
        // HouseData[houseid][houseParkingPos][2],
        // HouseData[houseid][houseParkingPos][3]
    );
    format(query, sizeof(query), "%s, `houseLocked` = '%d', `houseMoney` = '%d', `houseOwnerName` = '%s', `houseLastVisited` = '%d' WHERE `houseID` = '%d'",
        query,
        HouseData[houseid][houseLocked],
        HouseData[houseid][houseMoney],
        HouseData[houseid][houseOwnerName],
        HouseData[houseid][houseLastVisited],
        HouseData[houseid][houseID]
    );
    return mysql_tquery(g_iHandle, query);
}

House_Inside(playerid)
{
    if(PlayerData[playerid][pHouse] != -1)
    {
        for (new i = 0; i != MAX_HOUSES; i ++) if(HouseData[i][houseExists] && HouseData[i][houseID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseData[i][houseInterior] && GetPlayerVirtualWorld(playerid) > 0) {
            return i;
        }
    }
    return -1;
}

Arrest_Nearest(playerid)
{
    for (new i = 0; i != MAX_ARREST_POINTS; i ++) if(ArrestData[i][arrestExists] && IsPlayerInRangeOfPoint(playerid, 4.0, ArrestData[i][arrestPos][0], ArrestData[i][arrestPos][1], ArrestData[i][arrestPos][2]))
    {
        if(GetPlayerInterior(playerid) == ArrestData[i][arrestInterior] && GetPlayerVirtualWorld(playerid) == ArrestData[i][arrestWorld])
        return i;
    }
    return -1;
}

Crate_Highest(crateid)
{
    new
        Float:height = -1.0,
        id = -1;

    for (new i = 0; i != MAX_CRATES; i ++) if(i != id && CrateData[i][crateExists] && CrateData[i][crateVehicle] == INVALID_VEHICLE_ID && CrateData[i][cratePos][0] == CrateData[crateid][cratePos][0] && CrateData[i][cratePos][1] == CrateData[crateid][cratePos][1] && CrateData[i][cratePos][2] > CrateData[crateid][cratePos][2] && !IsCrateInUse(crateid))
    {
        if(CrateData[i][cratePos][2] > height)
        {
            height = CrateData[i][cratePos][2];
            id = i;
        }
    }
    return id;
}

Crate_Nearest(playerid, Float:radius = 2.5)
{
    if(PlayerData[playerid][pCarryCrate] != -1 && CrateData[PlayerData[playerid][pCarryCrate]][crateExists])
        return PlayerData[playerid][pCarryCrate];

    for (new i = 0; i != MAX_CRATES; i ++) if(CrateData[i][crateExists] && IsPlayerInRangeOfPoint(playerid, radius, CrateData[i][cratePos][0], CrateData[i][cratePos][1], CrateData[i][cratePos][2]))
    {
        if(GetPlayerInterior(playerid) == CrateData[i][crateInterior] && GetPlayerVirtualWorld(playerid) == CrateData[i][crateWorld])
        return i;
    }
    return -1;
}


House_Nearest(playerid)
{
    for (new i = 0; i != MAX_HOUSES; i ++) if(HouseData[i][houseExists] && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]))
    {
        if(GetPlayerInterior(playerid) == HouseData[i][houseExterior] && GetPlayerVirtualWorld(playerid) == HouseData[i][houseExteriorVW])
            return i;
    }
    return -1;
}

ObjectText_Nearest(playerid)
{
    for (new i = 0; i != MAX_TEXTOBJECT; i ++) if(ObjectData[i][oExists] && IsPlayerInRangeOfPoint(playerid, 5, ObjectData[i][oPos][0], ObjectData[i][oPos][1], ObjectData[i][oPos][2]))
    {
        return i;
    }
    return -1;
}

House_Refresh(houseid)
{
    if(houseid != -1 && HouseData[houseid][houseExists])
    {
        new
            Float:x = HouseData[houseid][housePos][0],
            Float:y = HouseData[houseid][housePos][1],
            Float:z = HouseData[houseid][housePos][2],
            int = HouseData[houseid][houseExterior],
            vw  = HouseData[houseid][houseExteriorVW],
            price = HouseData[houseid][housePrice],
            after_inflation_price = Economy_GetAmountAfterInflation(price),
            string[1024]
        ;

        if(!HouseData[houseid][houseOwner])
        {
            format(string, sizeof(string), "[#%d | ID: %d]\n"COL_GREEN"This house for sell\n"WHITE"Address: "YELLOW"%s\n"WHITE"Parking Slot: "YELLOW"%d\n"WHITE"Price: "YELLOW"%s\n"WHITE"Type /buy to purchase", HouseData[houseid][houseID], houseid, GetLocation(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2]), HouseData[houseid][houseParkingSlot], FormatNumber(after_inflation_price));
        }
        else
        {
            if(HouseData[houseid][houseSeal]) format(string, sizeof(string), "[#%d | ID: %d]\n"WHITE"Location "YELLOW"%s\n"WHITE"Parking Slot : %d\n"WHITE"Owned by %s\n"WHITE"This house is sealed by "COL_RED"authority\n"WHITE"Press '"COL_RED"~k~~GROUP_CONTROL_BWD~"WHITE"' to enter", HouseData[houseid][houseID], houseid, GetLocation(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2]), HouseData[houseid][houseParkingSlot], HouseData[houseid][houseOwnerName]);
            else format(string, sizeof(string), "[#%d | ID: %d]\n"WHITE"Location "YELLOW"%s\n"WHITE"Parking Slot : %d\n"WHITE"Owned by %s\n"WHITE"Press '"COL_RED"~k~~GROUP_CONTROL_BWD~"WHITE"' to enter", HouseData[houseid][houseID], houseid, GetLocation(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2]), HouseData[houseid][houseParkingSlot], HouseData[houseid][houseOwnerName]);
        }

        if(IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
        {
            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, HouseData[houseid][houseText3D], E_STREAMER_X, x);
            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, HouseData[houseid][houseText3D], E_STREAMER_Y, y);
            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, HouseData[houseid][houseText3D], E_STREAMER_Z, z);

            Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, HouseData[houseid][houseText3D], E_STREAMER_WORLD_ID, vw);
            Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, HouseData[houseid][houseText3D], E_STREAMER_INTERIOR_ID, int);

            UpdateDynamic3DTextLabelText(HouseData[houseid][houseText3D], X11_TURQUOISE_1, string);
        }
        else
        {
            HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, X11_TURQUOISE_1, x, y, z+0.5, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw, int);
        }

        if(IsValidDynamicPickup(HouseData[houseid][housePickup]))
        {
            Streamer_SetFloatData(STREAMER_TYPE_PICKUP, HouseData[houseid][housePickup], E_STREAMER_X, x);
            Streamer_SetFloatData(STREAMER_TYPE_PICKUP, HouseData[houseid][housePickup], E_STREAMER_Y, y);
            Streamer_SetFloatData(STREAMER_TYPE_PICKUP, HouseData[houseid][housePickup], E_STREAMER_Z, z);

            Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[houseid][housePickup], E_STREAMER_WORLD_ID, vw);
            Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[houseid][housePickup], E_STREAMER_INTERIOR_ID, int);
        }
        else
        {
            HouseData[houseid][housePickup] = CreateDynamicPickup(1273, 23, x, y, z+0.2, vw, int);
        }

        if(IsValidDynamicCP(HouseData[houseid][houseCheckpoint]))
        {
            Streamer_SetFloatData(STREAMER_TYPE_CP, HouseData[houseid][houseCheckpoint], E_STREAMER_X, x);
            Streamer_SetFloatData(STREAMER_TYPE_CP, HouseData[houseid][houseCheckpoint], E_STREAMER_Y, y);
            Streamer_SetFloatData(STREAMER_TYPE_CP, HouseData[houseid][houseCheckpoint], E_STREAMER_Z, z);

            Streamer_SetIntData(STREAMER_TYPE_CP, HouseData[houseid][houseCheckpoint], E_STREAMER_WORLD_ID, vw);
            Streamer_SetIntData(STREAMER_TYPE_CP, HouseData[houseid][houseCheckpoint], E_STREAMER_INTERIOR_ID, int);

        }
        else
        {
            HouseData[houseid][houseCheckpoint] = CreateDynamicCP(x, y, z, 1, _, _, _, 3);
        }
    }
    return 1;
}

House_RefreshAll()
{
    for (new i = 0; i < MAX_HOUSES; i ++)
    {
        House_Refresh(i);
    }
}

stock FactionMember_GetCount(factionid, bool:type = false)
{
    new count = 0;

    foreach(new i : Player) if(PlayerData[i][pFaction] == factionid)
    {
        if(type && PlayerData[i][pOnDuty]) count++;
        else if(!type) count++;
    }
    return count;
}

FactionMember_GetTypeCount(faction_type, bool:type = false)
{
    new count = 0;

    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionExists] && FactionData[i][factionType] == faction_type)
    {
        foreach(new id : Player) if(PlayerData[id][pFaction] == i)
        {
            if(type && PlayerData[id][pOnDuty]) count++;
            else if(!type) count++;
        }
        break;
    }
    return count;
}

House_GetCount(playerid)
{
    new
        count = 0;

    for (new i = 0; i != MAX_HOUSES; i ++) if(HouseData[i][houseExists] && House_IsOwner(playerid, i, false))
    {
        count++;
    }
    return count;
}

Business_GetCount(playerid)
{
    new
        count = 0;

    for (new i = 0; i != MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && Business_IsOwner(playerid, i))
    {
        count++;
    }
    return count;
}

static IsNearFactionLocker(playerid)
{
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1)
        return 0;

    if(IsPlayerInRangeOfPoint(playerid, 3.0, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2]) && GetPlayerInterior(playerid) == FactionData[factionid][factionLockerInt] && GetPlayerVirtualWorld(playerid) == FactionData[factionid][factionLockerWorld])
    {
        return 1;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1886.6283,-2202.7998,13.6401) || IsPlayerInRangeOfPoint(playerid, 3.0, 1190.5789,-1663.1620,791.0681))
    {
        return 1;
    }
    return 0;
}

stock GetFactionByID(sqlid)
{
    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
        return i;

    return -1;
}

SetFaction(playerid, id)
{
    if(id != -1 && FactionData[id][factionExists])
    {
        PlayerData[playerid][pFaction] = id;
        PlayerData[playerid][pFactionID] = FactionData[id][factionID];
    }
    return 1;
}

SetFactionColor(playerid)
{
    new factionid = PlayerData[playerid][pFaction];

    if(factionid != -1)
        return SetPlayerColor(playerid, RemoveAlpha(FactionData[factionid][factionColor]));

    return 0;
}

Faction_Update(factionid)
{
    if(factionid != -1 || FactionData[factionid][factionExists])
    {
        foreach (new i : Player) if(PlayerData[i][pFaction] == factionid)
        {
            if(GetFactionType(i) == FACTION_GANG || (GetFactionType(i) != FACTION_GANG && PlayerData[i][pOnDuty]))
                SetFactionColor(i);
        }
    }
    return 1;
}

Faction_Refresh(factionid)
{
    if(factionid != -1 && FactionData[factionid][factionExists])
    {
        if(FactionData[factionid][factionLockerPos][0] != 0.0 && FactionData[factionid][factionLockerPos][1] != 0.0 && FactionData[factionid][factionLockerPos][2] != 0.0)
        {
            static
                string[128];

            if(IsValidDynamicPickup(FactionData[factionid][factionPickup]))
                DestroyDynamicPickup(FactionData[factionid][factionPickup]);

            if(IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
                DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

            FactionData[factionid][factionPickup] = CreateDynamicPickup(1239, 23, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);

            format(string, sizeof(string), "Locker: [%d]\n%s\n"WHITE"/flocker to access the locker", factionid, FactionData[factionid][factionName]);
            FactionData[factionid][factionText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 1, FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);
        }
    }
    return 1;
}

Faction_Save(factionid)
{
    static
        query[4098];
    format(query, sizeof(query), "UPDATE `factions` SET `factionSalary` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `factionID` = '%d'",
        FactionData[factionid][factionSalary][0],
        FactionData[factionid][factionSalary][1],
        FactionData[factionid][factionSalary][2],
        FactionData[factionid][factionSalary][3],
        FactionData[factionid][factionSalary][4],
        FactionData[factionid][factionSalary][5],
        FactionData[factionid][factionSalary][6],
        FactionData[factionid][factionSalary][7],
        FactionData[factionid][factionSalary][8],
        FactionData[factionid][factionSalary][9],
        FactionData[factionid][factionSalary][10],
        FactionData[factionid][factionSalary][11],
        FactionData[factionid][factionSalary][12],
        FactionData[factionid][factionSalary][13],
        FactionData[factionid][factionSalary][14],
        FactionData[factionid][factionID]
    );
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "UPDATE `factions` SET `factionName` = '%s', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d', `factionLockerX` = '%.4f', `factionLockerY` = '%.4f', `factionLockerZ` = '%.4f', `factionLockerInt` = '%d', `factionLockerWorld` = '%d', `SpawnX` = '%f', `SpawnY` = '%f', `SpawnZ` = '%f', `SpawnInterior` = '%d', `SpawnVW` = '%d', `factionNumber` = '%d'",
        SQL_ReturnEscaped(FactionData[factionid][factionName]),
        FactionData[factionid][factionColor],
        FactionData[factionid][factionType],
        FactionData[factionid][factionRanks],
        FactionData[factionid][factionLockerPos][0],
        FactionData[factionid][factionLockerPos][1],
        FactionData[factionid][factionLockerPos][2],
        FactionData[factionid][factionLockerInt],
        FactionData[factionid][factionLockerWorld],
        FactionData[factionid][SpawnX],
        FactionData[factionid][SpawnY],
        FactionData[factionid][SpawnZ],
        FactionData[factionid][SpawnInterior],
        FactionData[factionid][SpawnVW],
        FactionData[factionid][factionNumber]
    );
    for (new i = 0; i < 10; i ++)
    {
        if(i < 8) format(query, sizeof(query), "%s, `factionSkin%d` = '%d', `factionWeapon%d` = '%d', `factionAmmo%d` = '%d', `factionGunRank%d` = '%d', `factionDurability%d` = '%d', `factionSerial%d` = '%d'", query, i + 1, FactionData[factionid][factionSkins][i], i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i], i + 1, FactionData[factionid][factionGunRank][i], i + 1, FactionData[factionid][factionDurability][i], i + 1, FactionData[factionid][factionSerial][i]);
        else format(query, sizeof(query), "%s, `factionWeapon%d` = '%d', `factionAmmo%d` = '%d', `factionGunRank%d` = '%d', `factionDurability%d` = '%d', `factionSerial%d` = '%d'", query, i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i], i + 1, FactionData[factionid][factionGunRank][i], i + 1, FactionData[factionid][factionDurability][i], i + 1, FactionData[factionid][factionSerial][i]);
    }

    format(query, sizeof(query), "%s, `factionMoney` = '%d', `factionWithdraw`='%s', `factionWithdrawMoney`='%d', `factionDeposit`='%s', `factionDepositMoney`='%d', `factionMotd`='%s' WHERE `factionID` = '%d'",
        query,
        FactionData[factionid][factionMoney],
        FactionData[factionid][factionWithdraw],
        FactionData[factionid][factionWithdrawMoney],
        FactionData[factionid][factionDeposit],
        FactionData[factionid][factionDepositMoney],
        SQL_ReturnEscaped(FactionData[factionid][factionMotd]),
        FactionData[factionid][factionID]
    );
    
    return mysql_tquery(g_iHandle, query);
}
static Faction_SaveSalary(factionid)
{
    static
        query[1000];

    format(query, sizeof(query), "UPDATE `factions` SET `factionSalary` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `factionID` = '%d'",
        FactionData[factionid][factionSalary][0],
        FactionData[factionid][factionSalary][1],
        FactionData[factionid][factionSalary][2],
        FactionData[factionid][factionSalary][3],
        FactionData[factionid][factionSalary][4],
        FactionData[factionid][factionSalary][5],
        FactionData[factionid][factionSalary][6],
        FactionData[factionid][factionSalary][7],
        FactionData[factionid][factionSalary][8],
        FactionData[factionid][factionSalary][9],
        FactionData[factionid][factionSalary][10],
        FactionData[factionid][factionSalary][11],
        FactionData[factionid][factionSalary][12],
        FactionData[factionid][factionSalary][13],
        FactionData[factionid][factionSalary][14],
        FactionData[factionid][factionID]
    );
    return mysql_tquery(g_iHandle, query);
}
static Faction_SaveRanks(factionid)
{
    static
        query[1000];

    format(query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%s', `factionRank2` = '%s', `factionRank3` = '%s', `factionRank4` = '%s', `factionRank5` = '%s', `factionRank6` = '%s', `factionRank7` = '%s', `factionRank8` = '%s', `factionRank9` = '%s', `factionRank10` = '%s', `factionRank11` = '%s', `factionRank12` = '%s', `factionRank13` = '%s', `factionRank14` = '%s', `factionRank15` = '%s' WHERE `factionID` = '%d'",
        SQL_ReturnEscaped(FactionRanks[factionid][0]),
        SQL_ReturnEscaped(FactionRanks[factionid][1]),
        SQL_ReturnEscaped(FactionRanks[factionid][2]),
        SQL_ReturnEscaped(FactionRanks[factionid][3]),
        SQL_ReturnEscaped(FactionRanks[factionid][4]),
        SQL_ReturnEscaped(FactionRanks[factionid][5]),
        SQL_ReturnEscaped(FactionRanks[factionid][6]),
        SQL_ReturnEscaped(FactionRanks[factionid][7]),
        SQL_ReturnEscaped(FactionRanks[factionid][8]),
        SQL_ReturnEscaped(FactionRanks[factionid][9]),
        SQL_ReturnEscaped(FactionRanks[factionid][10]),
        SQL_ReturnEscaped(FactionRanks[factionid][11]),
        SQL_ReturnEscaped(FactionRanks[factionid][12]),
        SQL_ReturnEscaped(FactionRanks[factionid][13]),
        SQL_ReturnEscaped(FactionRanks[factionid][14]),
        FactionData[factionid][factionID]
    );
    return mysql_tquery(g_iHandle, query);
}

Faction_Delete(factionid)
{
    if(factionid != -1 && FactionData[factionid][factionExists])
    {
        new
            string[64];

        format(string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
        mysql_tquery(g_iHandle, string);

        format(string, sizeof(string), "UPDATE `characters` SET `Faction` = '-1' WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
        mysql_tquery(g_iHandle, string);

        Vehicle_FactionDelete(FactionData[factionid][factionID]);

        foreach (new i : Player)
        {
            if(PlayerData[i][pFaction] == factionid) {
                PlayerData[i][pFaction] = -1;
                PlayerData[i][pFactionID] = -1;
                PlayerData[i][pFactionRank] = -1;
            }
            if(PlayerData[i][pFactionEdit] == factionid) {
                PlayerData[i][pFactionEdit] = -1;
            }
        }
        if(IsValidDynamicPickup(FactionData[factionid][factionPickup]))
            DestroyDynamicPickup(FactionData[factionid][factionPickup]);

        if(IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
            DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

        FactionData[factionid][factionExists] = false;
        FactionData[factionid][factionType] = 0;
        FactionData[factionid][factionID] = 0;
        FactionData[factionid][factionPickup] = INVALID_STREAMER_ID;
        FactionData[factionid][factionText3D] = Text3D:INVALID_STREAMER_ID;
    }
    return 1;
}

GetFactionType(playerid)
{
    if(PlayerData[playerid][pFaction] == -1)
        return 0;

    return (FactionData[PlayerData[playerid][pFaction]][factionType]);
}

stock GetFactionSQLID(playerid)
{
    if(PlayerData[playerid][pFaction] == -1)
        return 0;

    return (FactionData[PlayerData[playerid][pFaction]][factionID]);
}

Faction_ShowRanks(playerid, factionid)
{
    if(factionid != -1 && FactionData[factionid][factionExists])
    {
        static
            string[640];

        string[0] = 0;

        for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
            format(string, sizeof(string), "%sRank %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

        PlayerData[playerid][pFactionEdit] = factionid;
        Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Change", "Cancel");
    }
    return 1;
}
Faction_ShowSalary(playerid, factionid)
{
    if(factionid != -1 && FactionData[factionid][factionExists])
    {
        static
            string[640];

        string[0] = 0;

        for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
            format(string, sizeof(string), "%sRank %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

        PlayerData[playerid][pFactionEdit] = factionid;
        Dialog_Show(playerid, EditSalary, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Change", "Cancel");
    }
    return 1;
}


Faction_Create(name[], type)
{
    for (new i = 0; i != MAX_FACTIONS; i ++) if(!FactionData[i][factionExists])
    {
        format(FactionData[i][factionName], 128, name);

        FactionData[i][factionExists] = true;
        if(type == FACTION_GANG || type == FACTION_LEGAL)
           FactionData[i][factionColor] = X11_TURQUOISE_1;
        else
           FactionData[i][factionColor] = 0xFFFFFF00;

        FactionData[i][factionType] = type;
        FactionData[i][factionRanks] = 5;

        FactionData[i][factionLockerPos][0] = 0.0;
        FactionData[i][factionLockerPos][1] = 0.0;
        FactionData[i][factionLockerPos][2] = 0.0;
        FactionData[i][factionLockerInt] = 0;
        FactionData[i][factionLockerWorld] = 0;

        for (new j = 0; j < 8; j ++) {
            FactionData[i][factionSkins][j] = 0;
        }
        for (new j = 0; j < 10; j ++) {
            FactionData[i][factionWeapons][j] = 0;
            FactionData[i][factionAmmo][j] = 0;
            FactionData[i][factionDurability][j] = 0;
            FactionData[i][factionSerial][j] = 0;
        }
        for (new j = 0; j < 15; j ++) {
            format(FactionRanks[i][j], 32, "Rank %d", j + 1);
        }
        mysql_tquery(g_iHandle, "INSERT INTO `factions` (`factionType`) VALUES(0)", "OnFactionCreated", "d", i);
        return i;
    }
    return -1;
}

Crate_Refresh(crateid)
{
    if(crateid != -1 && CrateData[crateid][crateExists])
    {
        static
            string[128];

        if(IsValidDynamicObject(CrateData[crateid][crateObject]))
            DestroyDynamicObject(CrateData[crateid][crateObject]);

        if(IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
            DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

        CrateData[crateid][crateObject] = CreateDynamicObject(964, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2], 0.0, 0.0, CrateData[crateid][cratePos][3], CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);

        if(CrateData[crateid][crateType] != 6) {
            format(string, sizeof(string), "[Crate %d]\n"WHITE"%s Parts (press 'H' to pickup)", crateid, Crate_GetType(CrateData[crateid][crateType]));
        }
        else {
            format(string, sizeof(string), "[Crate %d]\n"WHITE"Drug Seeds (press 'H' to pickup)", crateid);
        }
        CrateData[crateid][crateText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2] + 0.5, 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);
    }
    return 1;
}

Crate_Delete(crateid)
{
    if(crateid != -1 && CrateData[crateid][crateExists])
    {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `crates` WHERE `crateID` = '%d'", CrateData[crateid][crateID]));

        if(IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
            DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

        if(IsValidDynamicObject(CrateData[crateid][crateObject]))
            DestroyDynamicObject(CrateData[crateid][crateObject]);

        foreach (new i : Player) if(PlayerData[i][pCarryCrate] == crateid) {
            PlayerData[i][pCarryCrate] = -1;

            RemovePlayerAttachedObject(i, JOB_SLOT);
            SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
        }
        CrateData[crateid][crateExists] = false;
        CrateData[crateid][crateID] = 0;
        CrateData[crateid][crateVehicle] = INVALID_VEHICLE_ID;

        CrateData[crateid][crateText3D] = Text3D:INVALID_STREAMER_ID;
        CrateData[crateid][crateObject] = INVALID_STREAMER_ID;
    }
    return 1;
}

Crate_Drop(playerid, Float:radius = 0.0)
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle,
        id = -1;

    if((id = PlayerData[playerid][pCarryCrate]) != -1 && CrateData[id][crateExists])
    {
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        if(radius != 0.0) {
            x += radius * floatsin(-angle, degrees);
            y += radius * floatcos(-angle, degrees);
        }
        CrateData[id][cratePos][0] = x;
        CrateData[id][cratePos][1] = y;
        CrateData[id][cratePos][2] = z - 0.9;
        CrateData[id][cratePos][3] = angle;
        CrateData[id][crateInterior] = GetPlayerInterior(playerid);
        CrateData[id][crateWorld] = GetPlayerVirtualWorld(playerid);

        Crate_Refresh(id);
        Crate_Save(id);
    }
    PlayerData[playerid][pCarryCrate] = -1;
    RemovePlayerAttachedObject(playerid, JOB_SLOT);
    return 1;
}

Crate_Save(crateid)
{
    static
        query[255];

    format(query, sizeof(query), "UPDATE `crates` SET `crateType` = '%d', `crateX` = '%.4f', `crateY` = '%.4f', `crateZ` = '%.4f', `crateA` = '%.4f', `crateInterior` = '%d', `crateWorld` = '%d' WHERE `crateID` = '%d'",
        CrateData[crateid][crateType],
        CrateData[crateid][cratePos][0],
        CrateData[crateid][cratePos][1],
        CrateData[crateid][cratePos][2],
        CrateData[crateid][cratePos][3],
        CrateData[crateid][crateInterior],
        CrateData[crateid][crateWorld],
        CrateData[crateid][crateID]
    );
    return mysql_tquery(g_iHandle, query);
}

Crate_GetType(type)
{
    static
        str[24];

    switch (type) {
        case 1: str = "Melee";
        case 2: str = "Pistol";
        case 3: str = "SMG";
        case 4: str = "Shotgun";
        case 5: str = "Rifle";
        case 6: str = "Drug Seeds";
        default: str = "None";
    }
    return str;
}

Crate_Create(playerid, type, Float:x, Float:y, Float:z, Float:a)
{
    for (new i = 0; i != MAX_CRATES; i ++) if(!CrateData[i][crateExists])
    {
        if(Crate_Nearest(playerid, 2.5) != -1) {
            z = floatsub(z, 0.1);
        }
        CrateData[i][crateExists] = true;
        CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
        CrateData[i][crateType] = type;
        CrateData[i][cratePos][0] = x;
        CrateData[i][cratePos][1] = y;
        CrateData[i][cratePos][2] = z - 0.9;
        CrateData[i][cratePos][3] = a;

        CrateData[i][crateInterior] = GetPlayerInterior(playerid);
        CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

        mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
        Crate_Refresh(i);
        return i;
    }
    return -1;
}

Job_Save(jobid)
{
    static
        query[512];

    format(query, sizeof(query), "UPDATE `jobs` SET `jobType` = '%d', `jobPosX` = '%.4f', `jobPosY` = '%.4f', `jobPosZ` = '%.4f', `jobInterior` = '%d', `jobWorld` = '%d', `jobPointX` = '%.4f', `jobPointY` = '%.4f', `jobPointZ` = '%.4f', `jobDeliverX` = '%.4f', `jobDeliverY` = '%.4f', `jobDeliverZ` = '%.4f', `jobPointInt` = '%d', `jobPointWorld` = '%d', `jobStock`='%d', `jobPrison`='%d' WHERE `jobID` = '%d'",
        JobData[jobid][jobType],
        JobData[jobid][jobPos][0],
        JobData[jobid][jobPos][1],
        JobData[jobid][jobPos][2],
        JobData[jobid][jobInterior],
        JobData[jobid][jobWorld],
        JobData[jobid][jobPoint][0],
        JobData[jobid][jobPoint][1],
        JobData[jobid][jobPoint][2],
        JobData[jobid][jobDeliver][0],
        JobData[jobid][jobDeliver][1],
        JobData[jobid][jobDeliver][2],
        JobData[jobid][jobPointInt],
        JobData[jobid][jobPointWorld],
        JobData[jobid][jobStock],
        JobData[jobid][jobPrison],
        JobData[jobid][jobID]
    );
    return mysql_tquery(g_iHandle, query);
}

Job_GetName(type)
{
    static
        str[24];

    switch (type)
    {
        case 1: str = "Trucker";
        case 2: str = "Mechanic";
        case 3: str = "Taxi Driver";
        case 4: str = "Cargo Unloader";
        case 5: str = "Miner";
        case 6: str = "Food Vendor";
        case 7: str = "Package Sorter";
        case 8: str = "Arms Dealer";
        case 9: str = "Lumberjack";
        case 10: str = "Hauler";
        case 11: str = "Farmer";
        default: str = "None";
    }
    return str;
}

Billboard_Save(bbid)
{
    static query[2048];
    format(query, sizeof(query), "UPDATE `billboards` SET `bbName` = '%s', `bbMessage` = '%s', `bbOwner` = '%d', `bbPrice` = '%d', `bbRange` = '%d', `bbPosX` = '%.4f', `bbPosY` = '%.4f', `bbPosZ` = '%.4f' WHERE `bbID` = '%d'",
        SQL_ReturnEscaped(BillBoardData[bbid][bbName]),
        SQL_ReturnEscaped(BillBoardData[bbid][bbMessage]),
        BillBoardData[bbid][bbOwner],
        BillBoardData[bbid][bbPrice],
        BillBoardData[bbid][bbRange],
        BillBoardData[bbid][bbPos][0],
        BillBoardData[bbid][bbPos][1],
        BillBoardData[bbid][bbPos][2],
        BillBoardData[bbid][bbID]
    );
    return mysql_tquery(g_iHandle, query);
}

Billboard_Refresh(bizid)
{
    if(bizid != -1 && BillBoardData[bizid][bbExists])
    {
        if(IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
            DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

        static
            string[128];

        if(!BillBoardData[bizid][bbOwner]) {
            format(string, sizeof(string), "[%i] - [%s]\n%s", bizid, FormatNumber(BillBoardData[bizid][bbPrice]), BillBoardData[bizid][bbName]);
            BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
        }
        else if(BillBoardData[bizid][bbOwner]) {
            format(string, sizeof(string), "[%i]\n%s\n%s", bizid, BillBoardData[bizid][bbName], BillBoardData[bizid][bbMessage]);
            BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
        }
    }
    return 1;
}

Billboard_Create(playerid, price)
{
    static
        Float:x,
        Float:y,
        Float:z;

    if(GetPlayerPos(playerid, x, y, z))
    {
        for (new i = 0; i != MAX_BILLBOARDS; i ++)
        {
            if(!BillBoardData[i][bbExists])
            {
                BillBoardData[i][bbExists] = true;
                BillBoardData[i][bbOwner] = 0;
                BillBoardData[i][bbPrice] = price;
                BillBoardData[i][bbRange] = 10;

                format(BillBoardData[i][bbName], 32, "Unnamed Billboard");

                BillBoardData[i][bbPos][0] = x;
                BillBoardData[i][bbPos][1] = y;
                BillBoardData[i][bbPos][2] = z;

                Billboard_Refresh(i);
                mysql_tquery(g_iHandle, "INSERT INTO `billboards` (`bbOwner`) VALUES(0)", "OnBillboardCreated", "d", i);
                return i;
            }
        }
    }
    return -1;
}

Billboard_Delete(bizid)
{
    if(bizid != -1 && BillBoardData[bizid][bbExists])
    {
        new
        string[82];

        format(string, sizeof(string), "DELETE FROM `billboards` WHERE `bbID` = '%d'", BillBoardData[bizid][bbID]);
        mysql_tquery(g_iHandle, string);

        if(IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
            DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

        BillBoardData[bizid][bbExists] = false;
        BillBoardData[bizid][bbOwner] = 0;
        BillBoardData[bizid][bbID] = 0;

        BillBoardData[bizid][bbText3D] = Text3D:INVALID_STREAMER_ID;
    }
    return 1;
}

Job_Refresh(jobid)
{
    if(jobid != -1 && JobData[jobid][jobExists])
    {
        for (new i = 0; i < 3; i ++) {
            if(IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
                DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

            if(IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
                DestroyDynamicPickup(JobData[jobid][jobPickups][i]);

        }
        if(IsValidDynamicMapIcon(JobData[jobid][jobIcon]))
            DestroyDynamicMapIcon(JobData[jobid][jobIcon]);

        new
            strings[200];

        if(JobData[jobid][jobType] == JOB_MINER) {
            format(strings, sizeof(strings),"[Mining]\n"WHITE"Type "YELLOW"/mine "WHITE"to begin mining\nStone stock : %d.", JobData[jobid][jobStock]);
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel(strings, COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

            JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Mining]\n"WHITE"Deliver your mining rocks at this spot.", COLOR_CLIENT, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]+0.5, 7.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
            JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
        }
        else if(JobData[jobid][jobType] == JOB_MECHANIC) {
            format(strings, sizeof(strings),"[Mechanic Point]\n"WHITE"Type "YELLOW"/buycomponent "WHITE"to buy a component\nComponent price: "GREEN"%s / 1 component.\n"WHITE"Component Stock : "YELLOW"%d", FormatNumber(Economy_GetComponentPrice()), JobData[jobid][jobStock]);
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel(strings, COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
        }
        else if(JobData[jobid][jobType] == JOB_SORTER) {
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Package Sorting]\n"WHITE"Type "YELLOW"/sorting "WHITE"to begin sorting packages.", COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

            JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Package Sorting]\n"WHITE"Deliver your packages "YELLOW"here "WHITE"for sorting.", COLOR_CLIENT, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]+0.5, 7.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
            JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
        }
        else if(JobData[jobid][jobType] == JOB_ARMS_DEALER) {
            format(strings, sizeof(strings), "[Materials Warehouse]\n"WHITE"Type "YELLOW"/buymaterials"WHITE" to buy materials\nPrice: %s / mats", FormatNumber(Economy_GetMaterialPrice()));
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel(strings, COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
        }
        else if(JobData[jobid][jobType] == JOB_LUMBERJACK) {
            format(strings, sizeof(strings),"[Lumberjack Point]\n"WHITE"Type "YELLOW"/buychainsaw "WHITE"to buy a chainsaw.\nType "YELLOW"/unloadtree "WHITE"to sell\nType "YELLOW"/loadwoods\n"WHITE"Warehouse Stock "GREEN"%d.", JobData[jobid][jobStock]);
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel(strings, COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
        }
        else if(JobData[jobid][jobType] == JOB_FOOD_VENDOR) {
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Food Vendor Point]\n"WHITE"Type "YELLOW"/buyfood "WHITE"to buy a raw food.", COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
        }
        else if(JobData[jobid][jobType] == JOB_HAULER) {
            format(strings, sizeof(strings),"[Hauler Warehouse]\n"WHITE"Type "YELLOW"/loadcomponent "WHITE"to load a component.\nWarehouse Stock "GREEN"%d.", JobData[jobid][jobStock]);
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel(strings, COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
        }
        JobData[jobid][jobText3D][0] = CreateDynamic3DTextLabel(sprintf("[%d]\nJOB TYPE: "YELLOW"[%d]\n [%s]""\n"WHITE"Type "YELLOW"/takejob "WHITE"to acquire this job!", jobid, JobData[jobid][jobType], Job_GetName(JobData[jobid][jobType])), COLOR_CLIENT, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
        JobData[jobid][jobPickups][0] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], JobData[jobid][jobWorld], JobData[jobid][jobInterior]);

        if(!JobData[jobid][jobInterior])
            JobData[jobid][jobIcon] = CreateDynamicMapIcon(JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], 56, -1, -1, 0, -1, _, MAPICON_LOCAL);
    }
    
    return 1;
}


Job_Delete(jobid)
{
    if(jobid != -1 && JobData[jobid][jobExists])
    {
        new
        string[64];

        format(string, sizeof(string), "DELETE FROM `jobs` WHERE `jobID` = '%d'", JobData[jobid][jobID]);
        mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 3; i ++) {
            if(IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i])) {
                DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

                JobData[jobid][jobText3D][i] = Text3D:INVALID_STREAMER_ID;
            }

            if(IsValidDynamicPickup(JobData[jobid][jobPickups][i])) {
                DestroyDynamicPickup(JobData[jobid][jobPickups][i]);

                JobData[jobid][jobPickups][i] = INVALID_STREAMER_ID;
            }

        }

        if(IsValidDynamicMapIcon(JobData[jobid][jobIcon]))
            DestroyDynamicMapIcon(JobData[jobid][jobIcon]);

        JobData[jobid][jobExists] = false;
        JobData[jobid][jobType] = 0;
        JobData[jobid][jobID] = 0;
        JobData[jobid][jobStock] = 0;
        JobData[jobid][jobPrison] = 0;
        JobData[jobid][jobIcon] = INVALID_STREAMER_ID;
    }
    return 1;
}

Job_Create(playerid, type)
{
    static
        Float:x,
        Float:y,
        Float:z;

    if(GetPlayerPos(playerid, x, y, z))
    {
        for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++)
        {
            if(!JobData[i][jobExists])
            {
                JobData[i][jobExists] = true;
                JobData[i][jobType] = type;

                JobData[i][jobPos][0] = x;
                JobData[i][jobPos][1] = y;
                JobData[i][jobPos][2] = z;
                JobData[i][jobPoint][0] = 0.0;
                JobData[i][jobPoint][1] = 0.0;
                JobData[i][jobPoint][2] = 0.0;
                JobData[i][jobDeliver][0] = 0.0;
                JobData[i][jobDeliver][1] = 0.0;
                JobData[i][jobDeliver][2] = 0.0;

                JobData[i][jobInterior] = GetPlayerInterior(playerid);
                JobData[i][jobWorld] = GetPlayerVirtualWorld(playerid);

                JobData[i][jobPointInt] = 0;
                JobData[i][jobPointWorld] = 0;
                JobData[i][jobStock] = 0;
                JobData[i][jobPrison] = 0;

                Job_Refresh(i);
                mysql_tquery(g_iHandle, "INSERT INTO `jobs` (`jobInterior`) VALUES(0)", "OnJobCreated", "d", i);
                return i;
            }
        }
    }
    return -1;
}

Entrance_Delete(entranceid)
{
    if(entranceid != -1 && EntranceData[entranceid][entranceExists])
    {
        new
        string[64];

        format(string, sizeof(string), "DELETE FROM `entrances` WHERE `entranceID` = '%d'", EntranceData[entranceid][entranceID]);
        mysql_tquery(g_iHandle, string);

        if(IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

        if(IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

        if(IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3DInt]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3DInt]);

        if(IsValidDynamicPickup(EntranceData[entranceid][entrancePickupInt]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickupInt]);

        if(IsValidDynamicCP(EntranceData[entranceid][entranceCheckpoint]))
            DestroyDynamicCP(EntranceData[entranceid][entranceCheckpoint]);

        if(EntranceData[entranceid][entranceType] == 3)
            DestroyForklifts(entranceid);

        EntranceData[entranceid][entranceExists] = false;
        EntranceData[entranceid][entranceID] = 0;
        EntranceData[entranceid][entranceText3D] = EntranceData[entranceid][entranceText3DInt] = Text3D:INVALID_STREAMER_ID;
        EntranceData[entranceid][entrancePickup] = EntranceData[entranceid][entrancePickupInt] = EntranceData[entranceid][entranceCheckpoint] = INVALID_STREAMER_ID;
    }
    return 1;
}

Entrance_Save(entranceid)
{
    static
        query[1024];

    format(query, sizeof(query), "UPDATE `entrances` SET `entranceName` = '%s', `entrancePass` = '%s', `entranceIcon` = '%d', `entranceLocked` = '%d', `entrancePosX` = '%.4f', `entrancePosY` = '%.4f', `entrancePosZ` = '%.4f', `entrancePosA` = '%.4f', `entranceIntX` = '%.4f', `entranceIntY` = '%.4f', `entranceIntZ` = '%.4f', `entranceIntA` = '%.4f', `entranceInterior` = '%d', `entranceExterior` = '%d', `entranceExteriorVW` = '%d', `entranceType` = '%d'",
        SQL_ReturnEscaped(EntranceData[entranceid][entranceName]),
        SQL_ReturnEscaped(EntranceData[entranceid][entrancePass]),
        EntranceData[entranceid][entranceIcon],
        EntranceData[entranceid][entranceLocked],
        EntranceData[entranceid][entrancePos][0],
        EntranceData[entranceid][entrancePos][1],
        EntranceData[entranceid][entrancePos][2],
        EntranceData[entranceid][entrancePos][3],
        EntranceData[entranceid][entranceInt][0],
        EntranceData[entranceid][entranceInt][1],
        EntranceData[entranceid][entranceInt][2],
        EntranceData[entranceid][entranceInt][3],
        EntranceData[entranceid][entranceInterior],
        EntranceData[entranceid][entranceExterior],
        EntranceData[entranceid][entranceExteriorVW],
        EntranceData[entranceid][entranceType]
    );
    format(query, sizeof(query), "%s, `entranceCustom` = '%d', `entranceWorld` = '%d', `entranceVehAble` = '%d' WHERE `entranceID` = '%d'",
        query,
        EntranceData[entranceid][entranceCustom],
        EntranceData[entranceid][entranceWorld],
        EntranceData[entranceid][entranceVehAble],
        EntranceData[entranceid][entranceID]
    );
    return mysql_tquery(g_iHandle, query);
}
//DISABLE RV
SetInsideRV(playerid, index)
{
    new vw = VehicleData[index][vehInteriorVW];
    SetPlayerVirtualWorld(playerid, vw);
    SetPlayerPosEx(playerid, 879.7575,1278.8832,-19.0309, 2500);
    return 1;
}
IsPlayerNearLumber(playerid)
{
    new
        id = -1;
    new strings[255];
    if((id = Job_NearestPoint(playerid, 20.0)) != -1 && JobData[id][jobType] == JOB_LUMBERJACK)
    {
        if(JobData[id][jobStock] > 100)
        {
            SetPlayerHunger(playerid, PlayerData[playerid][pHunger]-1.5);
            SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]-1.0);
            JobData[id][jobStock] -= 100;
            CarryWoods[playerid] = 1;
            SendServerMessage(playerid, "You're now carrying a woods, puts it inside your truck!.");
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); //0.1269, 0.3709, 0.0000, .0000, 86.1000, -88.2999, 0.2279, 0.6850, 0.5409
            SetPlayerAttachedObject(playerid, JOB_SLOT, 1463, 1, 0.1269, 0.3709, 0.0000, 0.0000, 86.1000, -88.2999, 0.2279, 0.6850, 0.5409);
            format(strings, sizeof(strings),"[Lumberjack Point]\n"WHITE"Type "YELLOW"/buychainsaw "WHITE"to buy a chainsaw.\nType "YELLOW"/unloadtree "WHITE"to sell\nType "YELLOW"/loadwoods\n"WHITE"Warehouse Stock "GREEN"%d.", JobData[id][jobStock]);
            UpdateDynamic3DTextLabelText(JobData[id][jobText3D][1], COLOR_CLIENT, strings);
            return 1;
        }
        else return SendClientMessageEx(playerid, COLOR_WHITE, "Stock di warehouse lumberjack sangat sedikit, jumlah stock %d", JobData[id][jobStock]);
    }

    return 0;
}
AddStorage(playerid, amount, index)
{
    for(new i = 0; i < MAX_DYNAMIC_JOBS; i++)
    {
        if(JobData[i][jobType] == JOB_HAULER)
        {
            new
                sisa = JOB_STOCK_LIMIT - JobData[i][jobStock],
                // Mendapatkan nilai stok sesungguhnya yang akan ditambahkan ke warehouse.
                // Mendapatkan jumlah stok yang akan ditambahkan ke warehouse.
                to_be_added = JobData[i][jobStock] + amount
            ;

            // Stok tidak bisa ditambah jika stok di warehouse sudah penuh.
            if (JobData[i][jobStock] >= JOB_STOCK_LIMIT)
            {
                DisablePlayerCheckpoint(playerid);
                SendErrorMessage(playerid, "Warehouse penuh, harap tunggu sampai warehouse kosong. "YELLOW"Total Stock : "RED"%d", JobData[i][jobStock]);

                return 1;
            }

            new strings[255], money, bonus;

            bonus = RandomEx(100, 300);
            // Jika stok yang ingin ditambahkan, namun warehouse tidak bisa menyimpan seluruhnya, maka diisi sejumlah sisa kapasitasnya.
            // Jika stok yang ingin ditambahkan dapat ditampung seluruhnya ke warehouse, maka diisi sejumlah stok tersebut.
            JobData[i][jobStock] += (to_be_added > JOB_STOCK_LIMIT) ? sisa : amount;
            // 2 tipe truck, 1 truck hanya bisa angkut 500, yang big truck bisa angkut 1200
            money = (to_be_added > JOB_STOCK_LIMIT) ? sisa : amount;

            if (IsATruck(VehicleData[index][vehVehicleID]) && money > 500)
            {
                money = 1000+bonus;
            }
            else if (IsABigTruck(VehicleData[index][vehVehicleID]) && money > 800)
            {
                money = 1300+bonus;
            }
            
            AddPlayerSalary(playerid, money, "Revelt Wood Export Factory");

            VehicleData[index][vehWoods] -= (to_be_added > JOB_STOCK_LIMIT) ? sisa : amount;

            DisablePlayerCheckpoint(playerid);
            format(strings, sizeof(strings),"[Hauler Warehouse]\n"WHITE"Type "YELLOW"/loadcomponent "WHITE"to load a component.\nWarehouse Stock "GREEN"%d.", JobData[i][jobStock]);
            UpdateDynamic3DTextLabelText(JobData[i][jobText3D][1], COLOR_CLIENT, strings);
        }
    }
    return 1;
}
AddStorageComponent(playerid, amount, index)
{
    for(new i = 0; i < MAX_DYNAMIC_JOBS; i++)
    {
        if(JobData[i][jobType] == JOB_MECHANIC)
        {
            new
                sisa = JOB_STOCK_LIMIT - JobData[i][jobStock],
                // Mendapatkan nilai stok sesungguhnya yang akan ditambahkan ke warehouse.
                // Mendapatkan jumlah stok yang akan ditambahkan ke warehouse.
                to_be_added = JobData[i][jobStock] + amount
            ;

            // Stok tidak bisa ditambah jika stok di warehouse sudah penuh.
            if(JobData[i][jobStock] >= JOB_STOCK_LIMIT)
            {
                DisablePlayerCheckpoint(playerid);
                SendErrorMessage(playerid, "Warehouse penuh, harap tunggu sampai warehouse kosong. "YELLOW"Total Stock : "RED"%d", JobData[i][jobStock]);     

                return 1;
            }

            new strings[255], money, bonus;

            bonus = RandomEx(100, 300);
            // Jika stok yang ingin ditambahkan, namun warehouse tidak bisa menyimpan seluruhnya, maka diisi sejumlah sisa kapasitasnya.
            // Jika stok yang ingin ditambahkan dapat ditampung seluruhnya ke warehouse, maka diisi sejumlah stok tersebut.
            JobData[i][jobStock] += (to_be_added > JOB_STOCK_LIMIT) ? sisa : amount;
            // 2 tipe truck, 1 truck hanya bisa angkut 500, yang big truck bisa angkut 1200
            money = (to_be_added > JOB_STOCK_LIMIT) ? sisa : amount;

            if (IsATruck(VehicleData[index][vehVehicleID]) && money > 500)
            {
                money = 1000+bonus;
            }
            else if (IsABigTruck(VehicleData[index][vehVehicleID]) && money > 800)
            {
                money = 1300+bonus;
            }
            
            AddPlayerSalary(playerid, money, "Revelt Vehicle Component Import Factory");

            VehicleData[index][vehComponent] -= (to_be_added > JOB_STOCK_LIMIT) ? sisa : amount;

            DisablePlayerCheckpoint(playerid);
            format(strings, sizeof(strings),"[Mechanic Point]\n"WHITE"Type "YELLOW"/buycomponent "WHITE"to buy a component\nComponent price: "GREEN"%s / 1 component.\n"WHITE"Component Stock : "YELLOW"%d", FormatNumber(Economy_GetComponentPrice()), JobData[i][jobStock]);
            UpdateDynamic3DTextLabelText(JobData[i][jobText3D][1], COLOR_CLIENT, strings);
        }
    }
    return 1;
}
IsPlayerNearTruckPoint(playerid)
{
    new
        id = -1;
    new strings[255];
    if((id = Job_NearestPoint(playerid, 20.0)) != -1 && JobData[id][jobType] == JOB_HAULER)
    {
        if(JobData[id][jobStock] > 100)
        {
            SetPlayerHunger(playerid, PlayerData[playerid][pHunger]-1.5);
            SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]-1.0);
            JobData[id][jobStock] -= 100;
            CarryComponent[playerid] = 1;
            SendServerMessage(playerid, "You're now carrying a component, puts it inside your truck!.");
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
            SetPlayerAttachedObject(playerid, JOB_SLOT, 2969, 1, 0.0000, 0.4599, 0.0000, 0.0000, 89.7000, 0.0000, 1.000000, 1.000000, 1.000000);
            format(strings, sizeof(strings),"[Hauler Warehouse]\n"WHITE"Type "YELLOW"/loadcomponent "WHITE"to load a component.\nWarehouse Stock "GREEN"%d.", JobData[id][jobStock]);
            UpdateDynamic3DTextLabelText(JobData[id][jobText3D][1], COLOR_CLIENT, strings);
            return 1;
        }
        else return SendClientMessageEx(playerid, COLOR_WHITE, "Stock di warehouse sangat sedikit! jumlah stock %d", JobData[id][jobStock]);
    }      
    return 0;
}
GetWarehouseStatus(playerid)
{
    new component, lumber,haul,mine, string[255];
    for(new i = 0; i < MAX_DYNAMIC_JOBS; i++)
    {
        if(JobData[i][jobExists] && JobData[i][jobType] == JOB_MECHANIC)
        {
            component = JobData[i][jobStock];
        }
        else if(JobData[i][jobExists] && JobData[i][jobType] == JOB_HAULER)
        {
            haul = JobData[i][jobStock];
        }
        else if(JobData[i][jobExists] && JobData[i][jobType] == JOB_LUMBERJACK)
        {
            lumber = JobData[i][jobStock];
        } 
        else if(JobData[i][jobExists] && JobData[i][jobType] == JOB_MINER && JobData[i][jobPrison] == 0)
        {
            mine = JobData[i][jobStock];
        } 
    }
    format(string,sizeof(string), "Warehouse Name\tStorage\n");
    format(string,sizeof(string), "%sComponent Warehouse\t%d\n",string,  component);
    format(string,sizeof(string), "%sLumberjack Warehouse\t%d\n",string,  lumber);
    format(string,sizeof(string), "%sMining Storage\t%d\n",string, mine);
    format(string,sizeof(string), "%sRevelt's Import/Export Warehouse\t%d\n",string,  haul);
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Warehouse Informaiton", string, "Close", "");
    return 1;    
}
GetMechanicJobId()
{
    for(new i = 0; i < MAX_DYNAMIC_JOBS; i++)
    {
        if(JobData[i][jobExists] && JobData[i][jobType] == JOB_MECHANIC)
        {
            return i;
        }
    }
    return -1;
}
GetJobIdByType()
{
    for(new i = 0; i < MAX_DYNAMIC_JOBS; i++)
    {
        if(JobData[i][jobExists] && JobData[i][jobType] == JOB_HAULER)
        {
            return i;
        }
    }
    return -1;
}
IsPlayerNearMine(playerid)
{
    new
        id = -1;

    if((id = Job_NearestPoint(playerid, 10.0)) != -1 && JobData[id][jobType] == JOB_MINER)
    {
        return 1;   
    }

    return 0;
}

IsPlayerNearArrest(playerid)
{
    new
        id = Arrest_Nearest(playerid);

    return (id != -1);
}

IsPlayerInCityHall(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 361.9272, 173.6889, 1008.3828))
        return 1;
        
    return 0;
}

stock IsPlayerInWarehouse(playerid)
{
    new
        id = -1;

    if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 3)
        return 1;

    return 0;
}

IsPlayerInBank(playerid)
{
    new
        id = -1;

    if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 2 && (IsPlayerInRangeOfPoint(playerid, 2.5, 482.5177,-1308.6587,1021.6249) || IsPlayerInRangeOfPoint(playerid, 3, 482.5169,-1304.9462,1021.6249) || IsPlayerInRangeOfPoint(playerid, 3, 482.5168,-1301.2286,1021.6249) || IsPlayerInRangeOfPoint(playerid, 3, 482.5172,-1297.5249,1021.6249)))
        return 1;

    return 0;
}

IsPlayerInNewbieSchool(playerid)
{
    new
        id = -1;

    if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 5)
        return 1;

    return 0;
}

Entrance_UpdateRecentTeleport(playerid)
{
    if (!IsPlayerConnected(playerid))
    {
        return 0;
    }

    PlayerData[playerid][pEntranceTick] = gettime();
    return 1;
}

bool:Entrance_HasRecentTeleport(playerid, seconds = ENTRANCE_RECENT_TELEPORTED)
{
    if (!IsPlayerConnected(playerid))
    {
        return true;
    }

    return ((gettime() - PlayerData[playerid][pEntranceTick]) < seconds);
}

Entrance_Inside(playerid, bool:add = false)
{
    if(add == true)
    {
        for (new i = 0; i != MAX_ENTRANCES; i ++)
        {
            if(EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, EntranceData[i][entranceVehAble] ? (4.0) : (2.5), EntranceData[i][entranceInt][0], EntranceData[i][entranceInt][1], EntranceData[i][entranceInt][2]) && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld])
            {
                return i;
            }
        }

    }
    else
    {
        if(PlayerData[playerid][pEntrance] != -1)
        {
            for (new i = 0; i != MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists] && EntranceData[i][entranceID] == PlayerData[playerid][pEntrance] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld]) {
                return i;
            }
        }
    }
    return -1;
}

Entrance_GetLink(playerid)
{
    if(GetPlayerVirtualWorld(playerid) > 0)
    {
        for (new i = 0; i != MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists] && EntranceData[i][entranceID] == GetPlayerVirtualWorld(playerid) - 7000)
            return EntranceData[i][entranceID];
    }
    return -1;
}

Entrance_Nearest(playerid)
{
    for (new i = 0; i != MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
    {
        if(GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
        return i;
    }
    return -1;
}

Job_NearestPoint(playerid, Float:radius = 4.0)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if(JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, radius, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2])) {
        return i;
    }
    return -1;
}

Job_Nearest(playerid)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if(JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, 2.5, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]))
    {
        if(GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
        return i;
    }
    return -1;
}

Entrance_Enter(playerid, id)
{
    if(EntranceData[id][entranceInt][0] == 0.0 && EntranceData[id][entranceInt][1] == 0.0 && EntranceData[id][entranceInt][2] == 0.0) return SendErrorMessage(playerid, "Interior entrance masih kosong, atau tidak memiliki interior.");
    if(EntranceData[id][entranceLocked]) return GameTextForPlayer(playerid, "~r~Locked", 1500, 1);
    if(strlen(EntranceData[id][entrancePass])) return Dialog_Show(playerid, EntrancePass, DIALOG_STYLE_INPUT, "Entrance Pass", "Please enter the password for this entrance:", "Submit", "Cancel");

    PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];
    PlayerData[playerid][pEntranceTick] = gettime();

    if(EntranceData[id][entranceVehAble] == 1 && GetPlayerState(playerid) == 2)
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
        SetVehicleZAngle(GetPlayerVehicleID(playerid), EntranceData[id][entranceInt][3]);
        LinkVehicleToInterior(GetPlayerVehicleID(playerid), EntranceData[id][entranceInterior]);
        SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), EntranceData[id][entranceWorld]);
    

        foreach(new pid : Player) if(SQL_IsCharacterLogged(pid) && IsPlayerInVehicle(pid, GetPlayerVehicleID(playerid)) && GetPlayerState(pid) != PLAYER_STATE_DRIVER) {
            PlayerData[pid][pEntrance] = EntranceData[id][entranceID];
            SetPlayerInterior(pid, EntranceData[id][entranceInterior]);
            SetPlayerVirtualWorld(pid, EntranceData[id][entranceWorld]);
            SetCameraBehindPlayer(pid);
        }
    }
    else 
    {

        if(EntranceData[id][entranceCustom]) 
        {
            Player_ToggleTelportAntiCheat(playerid, false);
            SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2], 2500);
        }
        else 
        {
            SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
        }
    }

    SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);
    SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
    SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);
    SetCameraBehindPlayer(playerid);

    return 1;
}

Entrance_Exit(playerid, id)
{
    PlayerData[playerid][pEntrance] = -1;
    PlayerData[playerid][pEntranceTick] = gettime();

    if(EntranceData[id][entranceVehAble] && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
        SetVehicleZAngle(GetPlayerVehicleID(playerid), EntranceData[id][entrancePos][3]);
        LinkVehicleToInterior(GetPlayerVehicleID(playerid), EntranceData[id][entranceExterior]);
        SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), EntranceData[id][entranceExteriorVW]);


        foreach(new pid : Player) if(SQL_IsCharacterLogged(pid) && IsPlayerInVehicle(pid, GetPlayerVehicleID(playerid)) && GetPlayerState(pid) != PLAYER_STATE_DRIVER) {
            PlayerData[pid][pEntrance] = EntranceData[id][entranceID];
            SetPlayerInterior(pid, EntranceData[id][entranceInterior]);
            SetPlayerVirtualWorld(pid, EntranceData[id][entranceWorld]);
            SetCameraBehindPlayer(pid);
        }
    }
    else {
        if(EntranceData[id][entranceCustom]) 
        {
            Player_ToggleTelportAntiCheat(playerid, false);
            SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
        }
        else 
        {
            SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
        }
    }

    SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);
    SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
    SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
    SetCameraBehindPlayer(playerid);

    PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);
    return 1;
}

Entrance_Refresh(entranceid)
{
    new
        string[255];

    if(entranceid != -1 && EntranceData[entranceid][entranceExists])
    {
        if(IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

        if(IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

        if(IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3DInt]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3DInt]);

        if(IsValidDynamicPickup(EntranceData[entranceid][entrancePickupInt]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickupInt]);

        if(IsValidDynamicCP(EntranceData[entranceid][entranceCheckpoint]))
            DestroyDynamicCP(EntranceData[entranceid][entranceCheckpoint]);

        format(string,sizeof(string),"[ID: %d]\n{FFFFFF}%s\n{FFFFFF}Press {FF0000}H{FFFFFF} to enter", entranceid, EntranceData[entranceid][entranceName]);

        EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(string, X11_YELLOW_2, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2]+0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
        EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(19130, 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior], -1, 10);
        EntranceData[entranceid][entranceCheckpoint] = CreateDynamicCP(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceVehAble] ? (3.0) : (1.5), EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior], -1, 5);

        if(EntranceData[entranceid][entranceInt][0] != 0.0 && EntranceData[entranceid][entranceInt][1] != 0.0 && EntranceData[entranceid][entranceInt][2] != 0.0)
        {
            format(string,sizeof(string),"[ID: %d]\n{FFFFFF}%s\n{FFFFFF}Press {FF0000}H{FFFFFF} to exit", entranceid, EntranceData[entranceid][entranceName]);

            EntranceData[entranceid][entranceText3DInt] = CreateDynamic3DTextLabel(string, X11_YELLOW_2, EntranceData[entranceid][entranceInt][0], EntranceData[entranceid][entranceInt][1], EntranceData[entranceid][entranceInt][2]+0.7, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EntranceData[entranceid][entranceWorld], EntranceData[entranceid][entranceInterior]);
            EntranceData[entranceid][entrancePickupInt] = CreateDynamicPickup(19130, 23, EntranceData[entranceid][entranceInt][0], EntranceData[entranceid][entranceInt][1], EntranceData[entranceid][entranceInt][2], EntranceData[entranceid][entranceWorld], EntranceData[entranceid][entranceInterior], -1, 7);
        }
    }
    return 1;
}

DestroyForklifts(entranceid)
{
    if(entranceid != -1 && EntranceData[entranceid][entranceExists])
    {
        for (new i = 0; i < 7; i ++) if(IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
            DestroyVehicle(EntranceData[entranceid][entranceForklift][i]);
            EntranceData[entranceid][entranceForklift][i] = INVALID_VEHICLE_ID;
        }
        return 1;
    }
    return 0;
}

CreateForklifts(entranceid)
{
    if(entranceid != -1 && EntranceData[entranceid][entranceExists])
    {
        EntranceData[entranceid][entranceForklift][0] = CreateVehicle(530,1300.6760,5.8440,1000.7919,180.2377,114,1,-1); // forklift 1
        EntranceData[entranceid][entranceForklift][1] = CreateVehicle(530,1303.4263,5.8919,1000.7883,181.4835,119,1,-1); // forklift 2
        EntranceData[entranceid][entranceForklift][2] = CreateVehicle(530,1305.7365,5.7953,1000.7904,179.7971,122,1,-1); // forklift 3
        EntranceData[entranceid][entranceForklift][3] = CreateVehicle(530,1308.2925,-8.6468,1000.7963,89.4510,4,1,-1); // forklift 4
        EntranceData[entranceid][entranceForklift][4] = CreateVehicle(530,1308.2974,-10.9627,1000.7974,91.8611,13,1,-1); // forklift 5
        EntranceData[entranceid][entranceForklift][5] = CreateVehicle(530,1308.3057,-13.6396,1000.7997,90.6285,110,1,-1); // forklift 6
        EntranceData[entranceid][entranceForklift][6] = CreateVehicle(530,1308.2751,-16.5108,1000.7980,90.2175,111,1,-1); // forklift 7

        for (new i = 0; i < 7; i ++) if(IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
            SetVehicleVirtualWorld(EntranceData[entranceid][entranceForklift][i], EntranceData[entranceid][entranceWorld]);
            LinkVehicleToInterior(EntranceData[entranceid][entranceForklift][i], 18);
        }
    }
    return 1;
}

Entrance_Create(playerid, name[])
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle;

    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        for (new i = 0; i != MAX_HOUSES; i ++)
        {
            if(!EntranceData[i][entranceExists])
            {
                EntranceData[i][entranceExists] = true;
                EntranceData[i][entranceIcon] = 0;
                EntranceData[i][entranceType] = 0;
                EntranceData[i][entranceCustom] = 0;
                EntranceData[i][entranceLocked] = 0;

                format(EntranceData[i][entranceName], 128, name);
                EntranceData[i][entrancePass][0] = 0;

                EntranceData[i][entrancePos][0] = x;
                EntranceData[i][entrancePos][1] = y;
                EntranceData[i][entrancePos][2] = z;
                EntranceData[i][entrancePos][3] = angle;

                EntranceData[i][entranceInt][0] = 0.0000;
                EntranceData[i][entranceInt][1] = 0.0000;
                EntranceData[i][entranceInt][2] = 0.0000;
                EntranceData[i][entranceInt][3] = 0.0000;

                EntranceData[i][entranceInterior] = 0;
                EntranceData[i][entranceExterior] = GetPlayerInterior(playerid);
                EntranceData[i][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

                Entrance_Refresh(i);
                mysql_tquery(g_iHandle, "INSERT INTO `entrances` (`entranceType`) VALUES(0)", "OnEntranceCreated", "d", i);
                return i;
            }
        }
    }
    return -1;
}

House_Create(playerid, price,address[], type = TYPE_SMALL)
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle;

    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        for (new i = 0; i != MAX_HOUSES; i ++) if(!HouseData[i][houseExists])
        {
            HouseData[i][houseExists] = true;
            HouseData[i][houseOwner] = 0;
            HouseData[i][housePrice] = price;
            HouseData[i][houseMoney] = 0;

            format(HouseData[i][houseAddress], 32, "%s", address);
            format(HouseData[i][houseOwnerName], 32, "The State");

            HouseData[i][housePos][0] = x;
            HouseData[i][housePos][1] = y;
            HouseData[i][housePos][2] = z;
            HouseData[i][housePos][3] = angle;

            HouseData[i][houseInt][0] = arrHouseInteriors[type][eHouseX];
            HouseData[i][houseInt][1] = arrHouseInteriors[type][eHouseY];
            HouseData[i][houseInt][2] = arrHouseInteriors[type][eHouseZ];
            HouseData[i][houseInt][3] = arrHouseInteriors[type][eHouseAngle];
            HouseData[i][houseInterior] = arrHouseInteriors[type][eHouseInterior];

            HouseData[i][houseExterior] = GetPlayerInterior(playerid);
            HouseData[i][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

            HouseData[i][houseLights] = false;
            HouseData[i][houseLocked] = true;

            House_Refresh(i);
            mysql_tquery(g_iHandle, "INSERT INTO `houses` (`houseOwner`) VALUES(0)", "OnHouseCreated", "d", i);
            return i;
        }
    }
    return -1;
}

House_RemoveFurniture(houseid)
{
    if(HouseData[houseid][houseExists])
    {
        for (new i = 0; i != MAX_FURNITURE; i ++) if(FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
            FurnitureData[i][furnitureExists] = false;
            FurnitureData[i][furnitureModel] = 0;
            FurnitureData[i][furnitureHouse] = -1;

            DestroyDynamicObject(FurnitureData[i][furnitureObject]);
            FurnitureData[i][furnitureObject] = INVALID_STREAMER_ID;
        }
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `furniture` WHERE `ID` = '%d'", HouseData[houseid][houseID]));
    }
    return 1;
}

House_Delete(houseid)
{
    if(houseid != -1 && HouseData[houseid][houseExists])
    {
        new
        string[64];

        format(string, sizeof(string), "DELETE FROM `houses` WHERE `houseID` = '%d'", HouseData[houseid][houseID]);
        mysql_tquery(g_iHandle, string);

        if(IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
            DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

        if(IsValidDynamicPickup(HouseData[houseid][housePickup]))
            DestroyDynamicPickup(HouseData[houseid][housePickup]);

        if(IsValidDynamicCP(HouseData[houseid][houseCheckpoint]))
            DestroyDynamicCP(HouseData[houseid][houseCheckpoint]);

        /*for (new i = 0; i < MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
            Backpack_Delete(i);
        }*/
        House_RemoveFurniture(houseid);
        House_RemoveAllItems(houseid);

        HouseData[houseid][houseExists] = false;
        HouseData[houseid][houseOwner] = 0;
        HouseData[houseid][houseID] = 0;
        HouseData[houseid][houseText3D] = Text3D:INVALID_STREAMER_ID;
        HouseData[houseid][housePickup] = HouseData[houseid][houseCheckpoint] = INVALID_STREAMER_ID;
    }
    return 1;
}
House_IsShared(playerid, houseid)
{
	for(new i; i < PLAYER_MAX_HOUSE_SHARE_KEYS; i++) 
	if(HouseKeyData[playerid][i][houseID] == HouseData[houseid][houseID])
		return 1;

	return 0;
}
House_IsOwner(playerid, houseid, bool:shared = true)
{
    if (houseid < 0)
        return 0;

    if(!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
        return 0;

    if((HouseData[houseid][houseExists] && HouseData[houseid][houseOwner] != 0) && HouseData[houseid][houseOwner] == PlayerData[playerid][pID])
        return 1;

    if(shared && House_IsShared(playerid, houseid))
        return 1;

    return 0;
}

Business_ProductMenu(playerid, bizid)
{
    if(bizid == -1 || !BusinessData[bizid][bizExists])
        return 0;

    static
        string[512];

    switch (BusinessData[bizid][bizType])
    {
        case 1:
        {
            format(string, sizeof(string), "Spray Paint - %s\nLottery Ticket - %s\nFirst Aid Kit - %s\nFrozen Pizza - %s\nMask - %s\nWater - %s\nPhone Credits (5000) - %s\nCamp Fire - %s\nCigarettes Pack (20) - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6]),
                FormatNumber(BusinessData[bizid][bizPrices][7]),
                FormatNumber(BusinessData[bizid][bizPrices][8])

            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 6:
        {
            format(string, sizeof(string), "Can Of Fuel - %s\nSnack - %s\nFrozen Burger - %s\nWater - %s\nCigarettes Pack (20) - %s\nFuel on 1 liter - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5])

            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 8:
        {
            format(string, sizeof(string), "Mobile Phone - %s\nGPS System - %s\nPortable Radio - %s\nBaseball Bat - %s\nCamera - %s\nSIM Card - %s\nLaptop - %s\nPhone Credits (5000) - %s\nMP3 Player - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6]),
                FormatNumber(BusinessData[bizid][bizPrices][7]),
                FormatNumber(BusinessData[bizid][bizPrices][8])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 9:
        {
            format(string, sizeof(string), "Beer - %s\nWine - %s\nSprunk - %s\nFrench Fries - %s\nBeef Steak - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 2:
        {
            format(string, sizeof(string), "Armored Vest - %s\nDesert Eagle - %s\nSilenced Pistol - %s\n9mm Pistol - %s\nHunting Knife - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 3:
        {
            format(string, sizeof(string), "Clothes - %s\nCap - %s\nBandana - %s\nMask - %s\nHelmet - %s\nWatch - %s\nGlasses - %s\nMisc - %s\n",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6]),
                FormatNumber(BusinessData[bizid][bizPrices][7])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 4:
        {
            format(string, sizeof(string), "French Fries - %s\nCheeseburger - %s\nChicken Burger - %s\nChicken Nuggets - %s\nSalad - %s\nSprunk - %s",
                    FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 7:
        {
            string[0] = 0;

            for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
                    format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
            }
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
    }
    return 1;
}

Business_PurchaseMenu(playerid, bizid)
{
    if(bizid == -1 || !BusinessData[bizid][bizExists])
        return 0;

    static
        string[512];

    switch (BusinessData[bizid][bizType])
    {
        case 1:
        {
            format(string, sizeof(string), "Spray Paint - %s\nLottery Ticket - %s\nFirst Aid Kit - %s\nFrozen Pizza - %s\nMask - %s\nWater - %s\nPhone Credits (5000) - %s\nCamp Fire - %s\nCigarettes Pack (20) - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6]),
                FormatNumber(BusinessData[bizid][bizPrices][7]),
                FormatNumber(BusinessData[bizid][bizPrices][8])
                
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 2:
        {
            format(string, sizeof(string), "Armored Vest - %s\nDesert Eagle - %s\nSilenced Pistol - %s\n9mm Pistol - %s\nHunting Knife - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 3:
        {
            format(string, sizeof(string), "Clothes - %s\nCap - %s\nBandana - %s\nMask - %s\nHelmet - %s\nWatch - %s\nGlasses - %s\nMisc - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6]),
                FormatNumber(BusinessData[bizid][bizPrices][7])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 4:
        {
            format(string, sizeof(string), "French Fries (Hunger +12) - %s\nCheeseburger (Hunger +20) - %s\nChicken Burger (Hunger +26) - %s\nChicken Nuggets (Hunger +30) - %s\nSalad (Hunger +35) - %s\nSprunk (Energy +50) - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 6:
        {
            format(string, sizeof(string), "Can Of Fuel - %s\nSnack - %s\nFrozen Burger - %s\nWater - %s\nCigarettes Pack (20) - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),//Water
                FormatNumber(BusinessData[bizid][bizPrices][4])
                
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 7:
        {
            string[0] = 0;

            for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
                format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
            }
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 8:
        {
            format(string, sizeof(string), "Mobile Phone - %s\nGPS System - %s\nPortable Radio - %s\nBaseball Bat - %s\nCamera - %s\nSIM Card - %s\nLaptop - %s\nPhone Credits (5000) - %s\nMP3 Player - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6]),
                FormatNumber(BusinessData[bizid][bizPrices][7]),
                FormatNumber(BusinessData[bizid][bizPrices][8])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 9:
        {
            format(string, sizeof(string), "Beer - %s\nWine - %s\nSprunk - %s\nFrench Fries - %s\nBeef Steak - %s",                
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4])
            ); 
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
    }
    return 1;
}

Business_Save(bizid)
{
    static
        query[2048];

    format(query, sizeof(query), "UPDATE `businesses` SET `bizName` = '%s', `bizMessage` = '%s', `bizLink` = '%s', `bizOwner` = '%d', `bizType` = '%d', `bizPrice` = '%d', `bizPosX` = '%.4f', `bizPosY` = '%.4f', `bizPosZ` = '%.4f', `bizPosA` = '%.4f', `bizIntX` = '%.4f', `bizIntY` = '%.4f', `bizIntZ` = '%.4f', `bizIntA` = '%.4f', `bizInterior` = '%d', `bizExterior` = '%d', `bizExteriorVW` = '%d', `bizLocked` = '%d', `bizVault` = '%d', `bizProducts` = '%d', `bizSeal` = '%d', `bOwnerName`='%s'",
        SQL_ReturnEscaped(BusinessData[bizid][bizName]),
        SQL_ReturnEscaped(BusinessData[bizid][bizMessage]),
        SQL_ReturnEscaped(BusinessData[bizid][bizLink]),
        BusinessData[bizid][bizOwner],
        BusinessData[bizid][bizType],
        BusinessData[bizid][bizPrice],
        BusinessData[bizid][bizPos][0],
        BusinessData[bizid][bizPos][1],
        BusinessData[bizid][bizPos][2],
        BusinessData[bizid][bizPos][3],
        BusinessData[bizid][bizInt][0],
        BusinessData[bizid][bizInt][1],
        BusinessData[bizid][bizInt][2],
        BusinessData[bizid][bizInt][3],
        BusinessData[bizid][bizInterior],
        BusinessData[bizid][bizExterior],
        BusinessData[bizid][bizExteriorVW],
        BusinessData[bizid][bizLocked],
        BusinessData[bizid][bizVault],
        BusinessData[bizid][bizProducts],
        BusinessData[bizid][bizSeal],
        BusinessData[bizid][bOwnerName]
    );
    for (new i = 0; i < 20; i ++) {
        format(query, sizeof(query), "%s, `bizPrice%d` = '%d'", query, i + 1, BusinessData[bizid][bizPrices][i]);
    }
    format(query, sizeof(query), "%s, `bizSpawnX` = '%.4f', `bizSpawnY` = '%.4f', `bizSpawnZ` = '%.4f', `bizSpawnA` = '%.4f', `bizDeliverX` = '%.4f', `bizDeliverY` = '%.4f', `bizDeliverZ` = '%.4f', `bizShipment` = '%d', `bizCargo`='%d', `bizWarn`='%d', `bizDurability`='%d' WHERE `bizID` = '%d'",
        query,
        BusinessData[bizid][bizSpawn][0],
        BusinessData[bizid][bizSpawn][1],
        BusinessData[bizid][bizSpawn][2],
        BusinessData[bizid][bizSpawn][3],
        BusinessData[bizid][bizDeliver][0],
        BusinessData[bizid][bizDeliver][1],
        BusinessData[bizid][bizDeliver][2],
        BusinessData[bizid][bizShipment],
        BusinessData[bizid][bizCargo],
        BusinessData[bizid][bizWarn],
        BusinessData[bizid][bizDurability],
        BusinessData[bizid][bizID]
    );
    return mysql_tquery(g_iHandle, query);
}

Business_Inside(playerid)
{
    if(PlayerData[playerid][pBusiness] != -1)
    {
        for (new i = 0; i != MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && BusinessData[i][bizID] == PlayerData[playerid][pBusiness] && GetPlayerInterior(playerid) == BusinessData[i][bizInterior] && GetPlayerVirtualWorld(playerid) > 0) {
            return i;
        }
    }
    return -1;
}

Business_NearestDeliver(playerid)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, 5.0, BusinessData[i][bizDeliver][0], BusinessData[i][bizDeliver][1], BusinessData[i][bizDeliver][2])) {
        return i;
    }
    return -1;
}

Business_Nearest(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]))
    {
        if(GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
        return i;
    }
    return -1;
}

Business_Refresh(bizid)
{
    if(bizid != -1 && BusinessData[bizid][bizExists])
    {
        if(IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
            DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

        if(IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
            DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

        if(IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
            DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

        if(IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
            DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

        if(IsValidDynamicCP(BusinessData[bizid][bizCheckpoint]))
            DestroyDynamicCP(BusinessData[bizid][bizCheckpoint]);    

        static
            string[225];

        new
            price = BusinessData[bizid][bizPrice],
            after_inflation_price = Economy_GetAmountAfterInflation(price)
        ;

        if(!BusinessData[bizid][bizOwner]) {
            format(string, sizeof(string), "This business owned by: "YELLOW"Goverment\n"WHITE"Business type: "YELLOW"%s\nBusiness ID:"WHITE"%d\nBusiness price: "YELLOW"%s"WHITE"\nType /buy to purchase this business", Business_Type(bizid), bizid, FormatNumber(after_inflation_price));
        }
        else
        {
            if(BusinessData[bizid][bizSeal]) {
                format(string, sizeof(string), TURQUOISE_1"[id: %d]"COL_GREEN"\n%s\n"WHITE"Owner: "YELLOW"%s\n"WHITE"This business is sealed by "COL_RED"authority", bizid, BusinessData[bizid][bizName], BusinessData[bizid][bOwnerName]);
            }
            else {
                format(string, sizeof(string), TURQUOISE_1"[id: %d]"COL_GREEN"\n%s\n"WHITE"Owner: "YELLOW"%s\n"WHITE"Press '"COL_RED"H"WHITE"' to enter", bizid, BusinessData[bizid][bizName], BusinessData[bizid][bOwnerName]);
            }
        }
        BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, -1, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]+0.75, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
        BusinessData[bizid][bizPickup] = CreateDynamicPickup(19133, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
        BusinessData[bizid][bizCheckpoint] = CreateDynamicCP(BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 1.5, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior], -1, 5);

        if(BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][1] != 0.0 && BusinessData[bizid][bizDeliver][2] != 0.0)
        {
                format(string, sizeof(string), "%s\n\n{AAC4E5}Delivery Point", BusinessData[bizid][bizName]);
                BusinessData[bizid][bizDeliverPickup] = CreateDynamicPickup(1239, 23, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2]);
                BusinessData[bizid][bizDeliverText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
        }
    }
    return 1;
}

Business_RefreshAll()
{
    for (new i = 0; i < MAX_BUSINESSES; i++)
    {
        Business_Refresh(i);
    }
}

Business_Create(playerid, type, price)
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle;


    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        for (new i = 0; i != MAX_HOUSES; i ++)
        {
            if(!BusinessData[i][bizExists])
            {
                BusinessData[i][bizExists] = true;
                BusinessData[i][bizOwner] = 0;
                BusinessData[i][bizPrice] = price;
                BusinessData[i][bizType] = type;

                format(BusinessData[i][bizName], 32, Business_Type(i));

                BusinessData[i][bizPos][0] = x;
                BusinessData[i][bizPos][1] = y;
                BusinessData[i][bizPos][2] = z;
                BusinessData[i][bizPos][3] = angle;

                BusinessData[i][bizSpawn][0] = x;
                BusinessData[i][bizSpawn][1] = y;
                BusinessData[i][bizSpawn][2] = z;
                BusinessData[i][bizSpawn][3] = angle;

                BusinessData[i][bizDeliver][0] = 0.0;
                BusinessData[i][bizDeliver][1] = 0.0;
                BusinessData[i][bizDeliver][2] = 0.0;

                BusinessData[i][bizDurability] = 100;

                if(type == 1) {
                    BusinessData[i][bizInt][0] = -27.3074;
                    BusinessData[i][bizInt][1] = -30.8741;
                    BusinessData[i][bizInt][2] = 1003.5573;
                    BusinessData[i][bizInt][3] = 0.0000;
                    BusinessData[i][bizInterior] = 4;
                    BusinessData[i][bizPrices][0] = 75;
                    BusinessData[i][bizPrices][1] = 125;
                    BusinessData[i][bizPrices][2] = 15;
                    BusinessData[i][bizPrices][3] = 100;
                    BusinessData[i][bizPrices][4] = 3;
                    BusinessData[i][bizPrices][5] = 2;
                    BusinessData[i][bizPrices][6] = 10;
                    BusinessData[i][bizPrices][7] = 100;
                    BusinessData[i][bizPrices][8] = 20;
                    BusinessData[i][bizPrices][9] = 10;
                    BusinessData[i][bizPrices][10] = 150;
                    BusinessData[i][bizPrices][11] = 200;
                    BusinessData[i][bizPrices][12] = 160;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
                    BusinessData[i][bizPrices][15] = 5;
                    BusinessData[i][bizPrices][16] = 10;
                    BusinessData[i][bizPrices][17] = 5;
                }
                else if(type == 2) {
                    BusinessData[i][bizInt][0] = 316.3963;
                    BusinessData[i][bizInt][1] = -169.8375;
                    BusinessData[i][bizInt][2] = 999.6010;
                    BusinessData[i][bizInt][3] = 0.0000;
                    BusinessData[i][bizInterior] = 6;
                    BusinessData[i][bizPrices][0] = 50;
                    BusinessData[i][bizPrices][1] = 100;
                    BusinessData[i][bizPrices][2] = 200;
                    BusinessData[i][bizPrices][3] = 400;
                    BusinessData[i][bizPrices][4] = 600;
                    BusinessData[i][bizPrices][5] = 800;
                }
                else if(type == 3) {
                    BusinessData[i][bizInt][0] = 161.4801;
                    BusinessData[i][bizInt][1] = -96.5368;
                    BusinessData[i][bizInt][2] = 1001.8047;
                    BusinessData[i][bizInt][3] = 0.0000;
                    BusinessData[i][bizInterior] = 18;
                    BusinessData[i][bizPrices][0] = 25;
                    BusinessData[i][bizPrices][1] = 15;
                    BusinessData[i][bizPrices][2] = 10;
                    BusinessData[i][bizPrices][3] = 10;
                }
                else if(type == 4) {
                    BusinessData[i][bizInt][0] = 363.3402;
                    BusinessData[i][bizInt][1] = -74.6679;
                    BusinessData[i][bizInt][2] = 1001.5078;
                    BusinessData[i][bizInt][3] = 315.0000;
                    BusinessData[i][bizInterior] = 10;
                    BusinessData[i][bizPrices][0] = 2;
                    BusinessData[i][bizPrices][1] = 5;
                    BusinessData[i][bizPrices][2] = 5;
                    BusinessData[i][bizPrices][3] = 10;
                    BusinessData[i][bizPrices][4] = 10;
                    BusinessData[i][bizPrices][5] = 15;
                    BusinessData[i][bizPrices][6] = 10;
                }
                else if(type == 5) {
                    BusinessData[i][bizInt][0] = 1494.5612;
                    BusinessData[i][bizInt][1] = 1304.2061;
                    BusinessData[i][bizInt][2] = 1093.2891;
                    BusinessData[i][bizInt][3] = 0.0000;
                    BusinessData[i][bizInterior] = 3;
                }
                else if(type == 6) {
                    BusinessData[i][bizInt][0] = -27.3383;
                    BusinessData[i][bizInt][1] = -57.6909;
                    BusinessData[i][bizInt][2] = 1003.5469;
                    BusinessData[i][bizInt][3] = 0.0000;
                    BusinessData[i][bizInterior] = 6;
                    BusinessData[i][bizPrices][0] = 75;
                    BusinessData[i][bizPrices][1] = 115;
                    BusinessData[i][bizPrices][2] = 15;
                    BusinessData[i][bizPrices][3] = 1;
                    BusinessData[i][bizPrices][4] = 3;
                    BusinessData[i][bizPrices][5] = 2;
                    BusinessData[i][bizPrices][6] = 10;
                    BusinessData[i][bizPrices][7] = 90;
                    BusinessData[i][bizPrices][8] = 20;
                    BusinessData[i][bizPrices][9] = 10;
                    BusinessData[i][bizPrices][10] = 140;
                    BusinessData[i][bizPrices][11] = 150;
                    BusinessData[i][bizPrices][12] = 50;
                    BusinessData[i][bizPrices][13] = 40;
                    BusinessData[i][bizPrices][14] = 5;
                    BusinessData[i][bizPrices][15] = 10;
                    BusinessData[i][bizPrices][16] = 5;
                }
                else if(type == 7) {
                    BusinessData[i][bizInt][0] = -2240.4954;
                    BusinessData[i][bizInt][1] = 128.3774;
                    BusinessData[i][bizInt][2] = 1035.4210;
                    BusinessData[i][bizInt][3] = 270.0000;
                    BusinessData[i][bizInterior] = 6;

                    BusinessData[i][bizPrices][0] = 75;
                    BusinessData[i][bizPrices][1] = 115;
                    BusinessData[i][bizPrices][2] = 15;
                    BusinessData[i][bizPrices][3] = 1;
                }
                BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
                BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

                BusinessData[i][bizLocked] = true;
                BusinessData[i][bizVault] = 0;
                BusinessData[i][bizProducts] = 0;
                BusinessData[i][bizCargo] = 100;
                BusinessData[i][bizShipment] = 0;
                BusinessData[i][bizSeal] = 0;
                BusinessData[i][bizWarn] = 0;

                Business_Refresh(i);
                mysql_tquery(g_iHandle, "INSERT INTO `businesses` (`bizOwner`) VALUES(0)", "OnBusinessCreated", "d", i);
                return i;
            }
        }
    }
    return -1;
}

static Business_RemovePumps(bizid)
{
    if(BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 6)
    {
        Pump_DeleteBusiness(bizid);
    }
    return 1;
}

Business_Delete(bizid)
{
    if(bizid != -1 && BusinessData[bizid][bizExists])
    {
        new
        string[82];

        format(string, sizeof(string), "DELETE FROM `businesses` WHERE `bizID` = '%d'", BusinessData[bizid][bizID]);
        mysql_tquery(g_iHandle, string);

        foreach (new i : Player) if(PlayerData[i][pShipment] == bizid) {
            PlayerData[i][pShipment] = -1;
            PlayerData[i][pDeliverShipment] = 0;

            DisablePlayerCheckpoint(i);
        }
        if(IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
            DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

        if(IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
            DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

        if(IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
            DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

        if(IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
            DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

        if(IsValidDynamicCP(BusinessData[bizid][bizCheckpoint]))
            DestroyDynamicCP(BusinessData[bizid][bizCheckpoint]);    

        Business_RemovePumps(bizid);

        BusinessData[bizid][bizExists] = false;
        BusinessData[bizid][bizOwner] = 0;
        BusinessData[bizid][bizID] = 0;
        BusinessData[bizid][bizWarn] = 0;
        BusinessData[bizid][bizText3D] = BusinessData[bizid][bizDeliverText3D] = Text3D:INVALID_STREAMER_ID;
        BusinessData[bizid][bizPickup] = BusinessData[bizid][bizDeliverPickup] = INVALID_STREAMER_ID;
    }
    return 1;
}

Business_IsOwner(playerid, bizid)
{
    if(!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
        return 0;

    if((BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] != 0) && BusinessData[bizid][bizOwner] == PlayerData[playerid][pID])
        return 1;

    return 0;
}

Dialog:MyInventory(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if (listitem < 0)
        {
            // kasih warning untuk pilih salah 1 di list.
            SendErrorMessage(playerid, "Please select one of the list.");
            OpenInventory(playerid);
            return 1;
        }

        new index = ListedInventory[playerid][listitem];
        if(InventoryData[playerid][index][invExists])
        {
            new
                name[48],
                id = -1;
                //backpack = GetPlayerBackpack(playerid);

            PlayerData[playerid][pInventoryItem] = index;
            strunpack(name, InventoryData[playerid][index][invItem]);

            switch (PlayerData[playerid][pStorageSelect])
            {
                case 1:
                {
                    if((id = House_Inside(playerid)) != -1 && House_IsOwner(playerid, id))
                    {
                        if(InventoryData[playerid][index][invQuantity] == 1)
                        {
                            /*if(!strcmp(name, "Backpack") && GetHouseBackpack(id) != -1)
                                return SendErrorMessage(playerid, "You can only store one backpack in your house.");*/

                            House_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
                            Inventory_Remove(playerid, name);

                            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has stored a \"%s\" into their house storage.", ReturnName(playerid, 0), name);
                            House_ShowItems(playerid, id);

                            /*if(!strcmp(name, "Backpack") && backpack != -1)
                            {
                                BackpackData[backpack][backpackPlayer] = 0;
                                BackpackData[backpack][backpackHouse] = HouseData[id][houseID];

                                Backpack_Save(backpack);
                                SetAccessories(playerid);
                            }*/
                        }
                        else Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][index][invQuantity]);
                    }
                    PlayerData[playerid][pStorageSelect] = 0;
                }
                case 2:
                {
                    if((id = ApartmentRoom_Inside(playerid)) != -1 && ApartmentRoom_IsOwned(playerid, id))
                    {
                        if(InventoryData[playerid][index][invQuantity] == 1)
                        {
                            /*if(!strcmp(name, "Backpack") && GetHouseBackpack(id) != -1)
                                return SendErrorMessage(playerid, "You can only store one backpack in your house.");*/

                            Apartment_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
                            Inventory_Remove(playerid, name);

                            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has stored a \"%s\" into their house storage.", ReturnName(playerid, 0), name);
                            Apartment_ShowItem(playerid, id);
                        }
                        else Dialog_Show(playerid, ApartmentDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][index][invQuantity]);
                    }
                    PlayerData[playerid][pStorageSelect] = 0;
                }
                case 3:
                {
                    /*if(!strcmp(name, "Backpack"))
                        return SendErrorMessage(playerid, "This item cannot be stored.");*/

                    /*if(InventoryData[playerid][index][invQuantity] == 1)
                    {
                        Backpack_Add(GetPlayerBackpack(playerid), name, InventoryData[playerid][index][invModel], 1);
                        Inventory_Remove(playerid, name);

                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has stored a \"%s\" into their backpack.", ReturnName(playerid, 0), name);
                        Backpack_Open(playerid);
                    }
                    else
                    {
                        Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][index][invQuantity]);
                    }
                    PlayerData[playerid][pStorageSelect] = 0;*/
                    SendServerMessage(playerid, "This option does't work at the moment.");
                }
                default:
                {
                    format(name, sizeof(name), "%s (%d)", name, InventoryData[playerid][index][invQuantity]);

                    if(Garbage_Nearest(playerid) != -1) Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Use Item\nGive Item\nThrow Out", "Select", "Cancel");
                    else Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Use Item\nGive Item\nDrop Item", "Select", "Cancel");
                }
            }
        }
    }
    return 1;
}

ReturnDate()
{
    static date[6], string[72];

    getdate(date[2], date[1], date[0]);
    gettime(date[3], date[4], date[5]);

    format(string, sizeof(string), "%02d %s %d, %02d:%02d:%02d", date[0],GetMonth(date[1]), date[2], date[3], date[4], date[5]);
    return string;
}

ReturnVehicleHealth(vehicleid)
{
    if(!IsValidVehicle(vehicleid))
        return 0;

    static
        Float:amount;

    GetVehicleHealth(vehicleid, amount);
    return floatround(amount, floatround_round);
}

stock ReturnArmour(playerid)
{
    static
        Float:amount;

    GetPlayerArmour(playerid, amount);
    return floatround(amount, floatround_round);
}

stock ReturnHealth(playerid)
{
    static
        Float:amount;

    GetPlayerHealth(playerid, amount);
    return floatround(amount, floatround_round);
}

ReturnName(playerid, underscore=1, mask = 0)
{
    new
        name[MAX_PLAYER_NAME + 1];

    GetPlayerName(playerid, name, sizeof(name));

    if(!underscore) {
        for (new i = 0, len = strlen(name); i < len; i ++) {
                if(name[i] == '_') name[i] = ' ';
        }
    }

    if(mask){
        if(PlayerData[playerid][pMaskOn] && !AccountData[playerid][pAdminDuty])
            format(name, sizeof(name), "Mask_#%d", PlayerData[playerid][pMaskID]);
    }
    return name;
}

ReturnName2(playerid, underscore=1)
{
    static
        name[MAX_PLAYER_NAME + 1];

    GetPlayerName(playerid, name, sizeof(name));

    if(!underscore) {
        for (new i = 0, len = strlen(name); i < len; i ++) {
            if(name[i] == '_') name[i] = ' ';
        }
    }
    return name;
}

ReturnIP(playerid)
{
    new ip[16];
    GetPlayerIp(playerid, ip, sizeof(ip));

    return ip;
}

ShowStatsForPlayer(playerid, targetid)
{
    new
        scoremath, 
        string[2048], 
        Float:health = GetHealth(targetid), 
        Float:armour = GetArmour(targetid), 
        totalslot, 
        vehicleslot, 
        housevehicleslot
    ;


    scoremath = ((PlayerData[targetid][pScore] + 1) * 4);
    vehicleslot = Vehicle_PlayerTotalCount(targetid);
    housevehicleslot = House_CountVehicleSlot(targetid);
    if(GetPlayerVIPLevel(targetid) > 2)
    {
        totalslot = MAX_VIP_VEHICLES+housevehicleslot;
    }
    else
    {
        totalslot = MAX_PLAYER_VEHICLES+housevehicleslot;
    }   
    
    if(!PlayerData[playerid][pLiveMode])
    {
        format(string, sizeof string, ""TOMATO"In Character\n");
        format(string, sizeof string, "%s"WHITE"Name: ["LIGHTBLUE"%s"WHITE"] ("YELLOW"%d"WHITE") | Gender: ["LIGHTBLUE"%s"WHITE"] | Birthdate: ["LIGHTBLUE"%s"WHITE"] | Money: ["GREEN"%s"WHITE"] | Bank: ["GREEN"%s"WHITE"]\n", string, NormalName(targetid), GetPlayerSQLID(targetid), PlayerData[targetid][pGender] == 1 ? ("Male") : ("Female"), PlayerData[targetid][pBirthdate], FormatNumber(PlayerData[targetid][pMoney]), FormatNumber(PlayerData[targetid][pBankMoney]));
        format(string, sizeof string, "%sOrigin: ["LIGHTBLUE"%s"WHITE"] | Phone Number: ["LIGHTBLUE"%s"WHITE"] | Job: ["LIGHTBLUE"%s"WHITE"] | Faction: ["LIGHTBLUE"%s"WHITE"] | Faction Rank: ["LIGHTBLUE"%s"WHITE"]\n", string, PlayerData[targetid][pOrigin], PlayerData[targetid][pPhone] ? (sprintf("%d", PlayerData[targetid][pPhone])) : ("None"), (PlayerData[targetid][pJob] == JOB_NONE) ? ("None") : (Job_GetName(PlayerData[targetid][pJob])), (PlayerData[targetid][pFaction] == -1) ? ("Civilian") : (GetInitials(Faction_GetName(targetid))), Faction_GetRank(targetid));

        format(string, sizeof string, "%s"TOMATO"Out of Character\n", string);
        format(string, sizeof string, "%s"WHITE"Username: ["LIGHTBLUE"%s"WHITE"] ("YELLOW"%d"WHITE") | Registered Email: ["RED"(private)"WHITE"] | Registration Date: ["LIGHTBLUE"%s"WHITE"]\n", string, ReturnAdminName(targetid), GetUCPSQLID(targetid), ConvertTimestamp(Timestamp:PlayerData[targetid][pRegisterDate]));
        format(string, sizeof string, "%sTime Played: ["LIGHTBLUE"%d hour(s) %d minute(s) %02d second(s)"WHITE"] | Level Point(s): ["LIGHTBLUE"%d/%d"WHITE"] | MaskID: ["LIGHTBLUE"Mask_#%d"WHITE"]\n", string, PlayerData[targetid][pHour], PlayerData[targetid][pMinute], PlayerData[targetid][pSecond], PlayerData[targetid][pPlayingHours], scoremath, PlayerData[targetid][pMaskID]);
        format(string, sizeof string, "%sRoleplay Experience : ["YELLOW"%d/100"WHITE"] | UCoin: ["YELLOW"%s"WHITE"] | Vehicle Slot: ["YELLOW"%d/%d"WHITE"]\n\n", string, PlayerData[targetid][pExp], GetPlayerCoin(targetid) ? (sprintf("%d", GetPlayerCoin(targetid))) : ("None"), vehicleslot,totalslot);
        if(IsPlayerVIP(targetid))
            format(string, sizeof string, "%sVIP: ["GREEN"%s"WHITE"] | Expired: ["LIGHTBLUE"%s"WHITE"] | UCoin: ["YELLOW"%s"WHITE"]\n", string, ReturnVIPName(GetPlayerVIPLevel(targetid)), ConvertTimestamp(Timestamp:GetPlayerVIPExpired(targetid)), GetPlayerCoin(targetid) ? (sprintf("%d", GetPlayerCoin(targetid))) : ("None"));

        format(string, sizeof string, "%sHealth: ["RED"%.1f/100"WHITE"] | Armour: ["LIGHTBLUE"%.1f/100"WHITE"] | Interior: ["LIGHTBLUE"%d"WHITE"] | Virtual World: ["LIGHTBLUE"%d"WHITE"] | Last VID: ["LIGHTBLUE"%d"WHITE"] | Warnings: ["ORANGE"%d"WHITE"/"RED"20"WHITE"]", string, health, armour, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), GetPlayerLastVehicle(targetid), PlayerData[targetid][pWarnings]);

        if(GetAdminLevel(targetid)) {
            format(string, sizeof string, "%s\n\n"ORANGE"Admin/Helper:"WHITE"\n", string);
            format(string, sizeof string, "%sDuty minute(s) : ["LIGHTBLUE"%d"WHITE"] | Accepted Report: ["LIGHTBLUE"%d"WHITE"] | Denied Report: ["LIGHTBLUE"%d"WHITE"] | Accept Stuck: ["LIGHTBLUE"%d"WHITE"] | Denied Stuck: ["LIGHTBLUE"%d"WHITE"]\n", string, AccountData[targetid][pAdminDutyTime], AccountData[targetid][pAdminAcceptReport], AccountData[targetid][pAdminDeniedReport], AccountData[targetid][pAdminAcceptStuck], AccountData[targetid][pAdminDeniedStuck]);
            format(string, sizeof string, "%sAnswered Question: ["LIGHTBLUE"%d"WHITE"] | Banned Record: ["LIGHTBLUE"%d"WHITE"] | Unbanned Record: ["LIGHTBLUE"%d"WHITE"] | Jail Record: ["LIGHTBLUE"%d"WHITE"]", string, AccountData[targetid][pAdminAnswer],AccountData[targetid][pAdminBanned], AccountData[targetid][pAdminUnbanned], AccountData[targetid][pAdminJail]);
        }
    }
    else
    {
        format(string, sizeof string, ""TOMATO"In Character\n");
        format(string, sizeof string, "%s"WHITE"Name: ["LIGHTBLUE"%s"WHITE"] ("YELLOW"%d"WHITE") | Gender: ["LIGHTBLUE"%s"WHITE"] | Birthdate: ["LIGHTBLUE"%s"WHITE"] | Money: ["GREEN"%s"WHITE"]\n", string, NormalName(targetid), GetPlayerSQLID(targetid), PlayerData[targetid][pGender] == 1 ? ("Male") : ("Female"), PlayerData[targetid][pBirthdate], FormatNumber(PlayerData[targetid][pMoney]));
        format(string, sizeof string, "%sOrigin: ["LIGHTBLUE"%s"WHITE"] | Phone Number: ["LIGHTBLUE"%s"WHITE"] | Job: ["LIGHTBLUE"%s"WHITE"] | Faction: ["LIGHTBLUE"%s"WHITE"] | Faction Rank: ["LIGHTBLUE"%s"WHITE"]\n", string, PlayerData[targetid][pOrigin], PlayerData[targetid][pPhone] ? (sprintf("%d", PlayerData[targetid][pPhone])) : ("None"), (PlayerData[targetid][pJob] == JOB_NONE) ? ("None") : (Job_GetName(PlayerData[targetid][pJob])), (PlayerData[targetid][pFaction] == -1) ? ("Civilian") : (GetInitials(Faction_GetName(targetid))), Faction_GetRank(targetid));

        format(string, sizeof string, "%s"TOMATO"Out of Character\n", string);
        format(string, sizeof string, "%s"WHITE"Registration Date: ["LIGHTBLUE"%s"WHITE"]\n", string, ConvertTimestamp(Timestamp:PlayerData[targetid][pRegisterDate]));
        format(string, sizeof string, "%sTime Played: ["LIGHTBLUE"%d hour(s) %d minute(s) %02d second(s)"WHITE"] | Level Point(s): ["LIGHTBLUE"%d/%d"WHITE"]\n", string, PlayerData[targetid][pHour], PlayerData[targetid][pMinute], PlayerData[targetid][pSecond], PlayerData[targetid][pPlayingHours], scoremath);
        format(string, sizeof string, "%sRoleplay Experience : ["YELLOW"%d/100"WHITE"] | UCoin: ["YELLOW"%s"WHITE"]\n\n", string, PlayerData[playerid][pExp], GetPlayerCoin(targetid) ? (sprintf("%d", GetPlayerCoin(targetid))) : ("None"));
        if(IsPlayerVIP(targetid))
            format(string, sizeof string, "%sVIP: ["GREEN"%s"WHITE"] | Expired: ["LIGHTBLUE"%s"WHITE"] | UCoin: ["YELLOW"%s"WHITE"]\n", string, ReturnVIPName(GetPlayerVIPLevel(targetid)), ConvertTimestamp(Timestamp:GetPlayerVIPExpired(targetid)), GetPlayerCoin(targetid) ? (sprintf("%d", GetPlayerCoin(targetid))) : ("None"));

        format(string, sizeof string, "%sHealth: ["RED"%.1f/100"WHITE"] | Armour: ["LIGHTBLUE"%.1f/100"WHITE"] | Interior: ["LIGHTBLUE"%d"WHITE"] | Virtual World: ["LIGHTBLUE"%d"WHITE"] | Last VID: ["LIGHTBLUE"%d"WHITE"] | Warnings: ["ORANGE"%d"WHITE"/"RED"20"WHITE"]", string, health, armour, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), GetPlayerLastVehicle(targetid), PlayerData[targetid][pWarnings]);

        if(GetAdminLevel(targetid)) {
            format(string, sizeof string, "%s\n\n"ORANGE"Admin/Helper:"WHITE"\n", string);
            format(string, sizeof string, "%sDuty minute(s) : ["LIGHTBLUE"%d"WHITE"] | Accepted Report: ["LIGHTBLUE"%d"WHITE"] | Denied Report: ["LIGHTBLUE"%d"WHITE"] | Accept Stuck: ["LIGHTBLUE"%d"WHITE"] | Denied Stuck: ["LIGHTBLUE"%d"WHITE"]\n", string, AccountData[targetid][pAdminDutyTime], AccountData[targetid][pAdminAcceptReport], AccountData[targetid][pAdminDeniedReport], AccountData[targetid][pAdminAcceptStuck], AccountData[targetid][pAdminDeniedStuck]);
            format(string, sizeof string, "%sAnswered Question: ["LIGHTBLUE"%d"WHITE"] | Banned Record: ["LIGHTBLUE"%d"WHITE"] | Unbanned Record: ["LIGHTBLUE"%d"WHITE"] | Jail Record: ["LIGHTBLUE"%d"WHITE"]", string, AccountData[targetid][pAdminAnswer],AccountData[targetid][pAdminBanned], AccountData[targetid][pAdminUnbanned], AccountData[targetid][pAdminJail]);
        }
    }

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, ("Character Statistics - "LIGHTBLUE"%s", ConvertTimestamp(Timestamp:Now())), string, "Close", "");
    return 1;
}

static Inventory_Clear(playerid)
{
    static
        string[64];

    for (new i = 0; i < MAX_INVENTORY; i ++)
    {
        if(InventoryData[playerid][i][invExists])
        {
            InventoryData[playerid][i][invExists] = 0;
            InventoryData[playerid][i][invModel] = 0;
            InventoryData[playerid][i][invQuantity] = 0;
        }
    }
    format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
    return mysql_tquery(g_iHandle, string);
}

static Inventory_Set(playerid, item[], model, amount)
{
    new itemid = Inventory_GetItemID(playerid, item);

    if(itemid == -1 && amount > 0)
        Inventory_Add(playerid, item, model, amount);

    else if(amount > 0 && itemid != -1)
        Inventory_SetQuantity(playerid, item, amount);

    else if(amount < 1 && itemid != -1)
        Inventory_Remove(playerid, item, -1);

    return 1;
}

Inventory_GetItemID(playerid, item[])
{
    for (new i = 0; i < MAX_INVENTORY; i ++)
    {
        if(!InventoryData[playerid][i][invExists])
            continue;

        if(!strcmp(InventoryData[playerid][i][invItem], item)) return i;
    }
    return -1;
}

Inventory_GetFreeID(playerid)
{
    new total;
    if((total = Inventory_Items(playerid)) >= PlayerData[playerid][pCapacity])
    {
        SendErrorMessage(playerid, "Your inventory is full! you have %d items inside your inventory!", total);
        return -1;
    }
    for (new i = 0; i < MAX_INVENTORY; i ++)
    {
        if(!InventoryData[playerid][i][invExists])
        return i;
    }
    return -1;
}

static Inventory_Items(playerid)
{
    new count;

    for (new i = 0; i != MAX_INVENTORY; i ++) if(InventoryData[playerid][i][invExists]) {
        count++;
    }
    return count;
}

stock Inventory_Count(playerid, item[])
{
    new itemid = Inventory_GetItemID(playerid, item);

    if(itemid != -1)
        return InventoryData[playerid][itemid][invQuantity];

    return 0;
}

stock Inventory_HasItem(playerid, item[])
{
    return (Inventory_GetItemID(playerid, item) != -1);
}

stock Inventory_SetQuantity(playerid, item[], quantity)
{
    new
        itemid = Inventory_GetItemID(playerid, item),
        string[128];

    if(itemid != -1)
    {
        format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
        mysql_tquery(g_iHandle, string);

        InventoryData[playerid][itemid][invQuantity] = quantity;
    }
    return 1;
}

stock Inventory_MaxCount(item[])
{
    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true)) {
        return g_aInventoryItems[i][e_InventoryMax];
    }
    return 0;
}

stock Inventory_Add(playerid, item[], model, quantity = 1)
{
    new
        itemid = Inventory_GetItemID(playerid, item),
        string[128];

    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true))
    {
        if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem]) + quantity) > g_aInventoryItems[i][e_InventoryMax])
        {
            SendErrorMessage(playerid, "Item %s dibatasi sebanyak %d item!.", item, g_aInventoryItems[i][e_InventoryMax]);
            return -1;
        }
    }

    if(itemid == -1)
    {
        itemid = Inventory_GetFreeID(playerid);

        if(itemid != -1)
        {
            InventoryData[playerid][itemid][invExists] = true;
            InventoryData[playerid][itemid][invModel] = model;
            InventoryData[playerid][itemid][invQuantity] = quantity;

            strpack(InventoryData[playerid][itemid][invItem], item, 32 char);

            if(strcmp(item, "Kunci Gubuk") != 0)
            {
                format(string, sizeof(string), "INSERT INTO `inventory` (`ID`, `invItem`, `invModel`, `invQuantity`) VALUES('%d', '%s', '%d', '%d')", PlayerData[playerid][pID], item, model, quantity);
                mysql_tquery(g_iHandle, string, "OnInventoryAdd", "dd", playerid, itemid);
            }
            return itemid;
        }
        return -1;
    }
    else
    {
        format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` + %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
        mysql_tquery(g_iHandle, string);

        InventoryData[playerid][itemid][invQuantity] += quantity;

    }
    return itemid;
}

stock Inventory_Remove(playerid, item[], quantity = 1)
{
    new
        itemid = Inventory_GetItemID(playerid, item),
        string[128];

    if(itemid != -1)
    {
        if(InventoryData[playerid][itemid][invQuantity] > 0)
        {
            InventoryData[playerid][itemid][invQuantity] -= quantity;
        }
        if(quantity == -1 || InventoryData[playerid][itemid][invQuantity] < 1)
        {
            InventoryData[playerid][itemid][invExists] = false;
            InventoryData[playerid][itemid][invModel] = 0;
            InventoryData[playerid][itemid][invQuantity] = 0;

            format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d' AND `invID` = '%d'", PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
            mysql_tquery(g_iHandle, string);
        }
        else if(quantity != -1 && InventoryData[playerid][itemid][invQuantity] > 0)
        {
            format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` - %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
            mysql_tquery(g_iHandle, string);
        }
        return 1;
    }
    return 0;
}

static Paycheck(playerid)
{
    if(!PlayerData[playerid][pCanPaycheck])
        return SendErrorMessage(playerid, "Belum bisa mengambil paycheck untuk saat ini.");

    
    new
        salary,
        dialog_string[1024],
        paycheck = RandomEx(50, 150) * (PlayerData[playerid][pScore]+PlayerData[playerid][pHour])/100,
        jumlahrumah,
        jumlahbusiness,
        jumlahapartment,
        taxrumah,
        taxbisnis,
        taxapartment,
        jumlahkendaraan[5], //0 Sport, 1 Normal, 2 Truck, 3 Motor, 4 Kapal
        taxkendaraan[5],
        totaltaxkendaraan,
        pajakproperti,
        pajaktotal,
        pajakparkir;
    new bankinterest = PlayerData[playerid][pBankMoney]/1000;
    new totalpay = bankinterest + paycheck;
    new taxamount = ((totalpay/100) * ServerData[Tax]);

    for(new i=0; i < MAX_BUSINESSES; i++)
    {
        if(Business_IsOwner(playerid, i))
        {
            jumlahbusiness++;
        }
    }
    foreach(new i : ApartmentRoom)
    {
        if(ApartmentRoom_IsOwned(playerid, i))
        {
            jumlahapartment++;
        }
    }
    for(new i=0; i < MAX_HOUSES; i++)
    {
        if(House_IsOwner(playerid, i, false))
        {
            jumlahrumah++;
        }
    }
    foreach(new vehicle : OwnedVehicles<playerid>)
    {
        new vehicleid = VehicleData[vehicle][vehVehicleID];
        if(IsSportCar(vehicleid)) {
            jumlahkendaraan[0]++;
            taxkendaraan[0] = ((jumlahkendaraan[0]*7000) * ServerData[Tax])/100;
        }
        else if(IsDoorVehicle(vehicleid) && !IsSportCar(vehicleid)) {
            jumlahkendaraan[1]++;
            taxkendaraan[1] = ((jumlahkendaraan[1]*1500) * ServerData[Tax])/100;
        }
        else if(IsNormalTruck(vehicleid) || IsBigTruck(vehicleid)) {
            jumlahkendaraan[2]++;
            taxkendaraan[2] = ((jumlahkendaraan[2]*2000) * ServerData[Tax])/100;
        }
        else if(IsABike(vehicleid)) {
            jumlahkendaraan[3]++;
            taxkendaraan[3] = ((jumlahkendaraan[3]*500) * ServerData[Tax])/100;
        }
        else if(IsABoat(vehicleid)) {
            jumlahkendaraan[4]++;
            taxkendaraan[4] = ((jumlahkendaraan[4]*5000) * ServerData[Tax])/100;
        }
    }
    if(GetPlayerVIPLevel(playerid) < 2)
    {
        totaltaxkendaraan = taxkendaraan[0] + taxkendaraan[1] + taxkendaraan[2] + taxkendaraan[3] + taxkendaraan[4];
        taxrumah = ((jumlahrumah*10000) * ServerData[Tax])/100;
        taxbisnis = ((jumlahbusiness*10000) * ServerData[Tax])/100;
        taxapartment = ((jumlahapartment*10000) * ServerData[Tax]/100);
        pajakparkir = PlayerData[playerid][pParkedVehicle]*2000;
    }
    pajakparkir = PlayerData[playerid][pParkedVehicle]*1000;
    PlayerData[playerid][pMinutes]      = 0;
    PlayerData[playerid][pCanPaycheck]  = 0;
    pajakproperti = taxrumah+taxbisnis+totaltaxkendaraan+pajakparkir+taxapartment;
    pajaktotal = taxamount + pajakproperti;
    if(PlayerData[playerid][pHour] >= 24)
    {
        format(dialog_string, sizeof(dialog_string), WHITE"----------------------------------------------------\n\n");

        GetSalaryMoney(playerid, salary);
        format(dialog_string, sizeof(dialog_string), "%s"WHITE"Your salary: "GREEN"%s\n", dialog_string, FormatNumber(salary));
        format(dialog_string, sizeof(dialog_string), "%s"WHITE"Bonus salary: "GREEN"%s\n", dialog_string, FormatNumber(paycheck));
        format(dialog_string, sizeof(dialog_string), "%s"WHITE"Bank interest: "GREEN"%s\n", dialog_string, FormatNumber(bankinterest));
        if(totaltaxkendaraan > 1)format(dialog_string, sizeof(dialog_string), "%s"WHITE"Vehicle Tax : "RED"%s\n", dialog_string, FormatNumber(totaltaxkendaraan));
        if(taxrumah > 1) format(dialog_string, sizeof(dialog_string), "%s"WHITE"House Tax : "RED"%s\n", dialog_string, FormatNumber(taxrumah));
        if(taxbisnis > 1)format(dialog_string, sizeof(dialog_string), "%s"WHITE"Business Tax : "RED"%s\n", dialog_string, FormatNumber(taxbisnis));
        format(dialog_string, sizeof(dialog_string), "%s"WHITE"Total Government Tax (%d%%): "RED"%s\n", dialog_string, ServerData[Tax], FormatNumber(pajaktotal));    
        
        if(PlayerData[playerid][pStatus] == 2)
        {
            new bonusmoney = 500;
            format(dialog_string, sizeof(dialog_string), "%s"WHITE"Government Allowance : "GREEN"$%d!\n", dialog_string, bonusmoney);
            PlayerData[playerid][pBankMoney] += bonusmoney;
        }
        format(dialog_string, sizeof(dialog_string), "%s\n"WHITE"Your previous balance: "YELLOW"%s\n", dialog_string, FormatNumber(PlayerData[playerid][pBankMoney]));

        PlayerData[playerid][pBankMoney] -= pajaktotal;
        PlayerData[playerid][pBankMoney] += totalpay;
        PlayerData[playerid][pFactionHour] = 0;
        PlayerData[playerid][pBizDutyHour] = 0;
        GivePlayerSalary(playerid);

        format(dialog_string, sizeof(dialog_string), "%s"WHITE"Your current balance: "GREEN"%s\n\n", dialog_string, FormatNumber(PlayerData[playerid][pBankMoney]));
    }
    else
    {
        format(dialog_string, sizeof(dialog_string), WHITE"----------------------------------------------------\n\n");

        GetSalaryMoney(playerid, salary);
        format(dialog_string, sizeof(dialog_string), WHITE"%sYour salary: "GREEN"%s\n", dialog_string, FormatNumber(salary));
        format(dialog_string, sizeof(dialog_string), WHITE"%sBonus salary: "GREEN"%s\n", dialog_string, FormatNumber(paycheck));
        format(dialog_string, sizeof(dialog_string), WHITE"%sBank interest: "GREEN"%s\n", dialog_string, FormatNumber(bankinterest)); 
        
        if(PlayerData[playerid][pStatus] == 2)
        {
            new bonusmoney = 500;
            format(dialog_string, sizeof(dialog_string), "%s"WHITE"Government Allowance : "GREEN"$%d!\n", dialog_string, bonusmoney);
            PlayerData[playerid][pBankMoney] += bonusmoney;
        }
        format(dialog_string, sizeof(dialog_string), "%s\n"WHITE"Your previous balance: "YELLOW"%s\n", dialog_string, FormatNumber(PlayerData[playerid][pBankMoney]));

        PlayerData[playerid][pBankMoney] += totalpay;
        GivePlayerSalary(playerid);

        format(dialog_string, sizeof(dialog_string), "%s"WHITE"Your current balance: "GREEN"%s\n\n", dialog_string, FormatNumber(PlayerData[playerid][pBankMoney]));

    }


    if(--PlayerData[playerid][pJobLeave] == 0)
    {
        format(dialog_string, sizeof(dialog_string), "%s"LIGHT_SKY_BLUE_1"JOB: "WHITE"Now you can work in other job!\n", dialog_string);
        SendServerMessage(playerid, "Kontrak kerja sudah habis, kamu bisa keluar dari pekerjaan sekarang!");
    }

    format(dialog_string, sizeof(dialog_string), "%s"WHITE"----------------------------------------------------", dialog_string);
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Paycheck", dialog_string, "Close", "");
    return 1;
 }

stock Float:GetPlayerSpeed(playerid)
{
    static
        Float:velocity[3]
    ;

    if(IsPlayerInAnyVehicle(playerid)) {
        GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
    }
    else {
        GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
    }
    return floatsqroot(floatpower(velocity[0], 2.0) + floatpower(velocity[1], 2.0) + floatpower(velocity[2], 2.0)) * 180.0;
}

stock SetVehicleSpeed(vehicleid, Float:speed, bool:kmh = true, bool:ignore_z = true)
{
    new
        Float:x,
        Float:y,
        Float:z_samp, // Untuk menyimpan ketinggian berdasarkan koordinat dari SA-MP
        Float:z_mapandreas // Untuk menyimpan ketinggian berdasarkan koordinat dari MapAndreas
    ;
    if(!IsValidVehicle(vehicleid))
        return 1;

    if (!ignore_z)
    {
        GetVehiclePos(vehicleid, x, y, z_samp);
        // Mendapatkan ketinggian berdasarkan MapAndreas.
        MapAndreas_FindZ_For2DCoord(x, y, z_mapandreas);
        if(floatabs(z_samp - z_mapandreas) >= 2)
            return 1;
    }

    new Float:vPos[4];
    
    GetVehicleVelocity(vehicleid,vPos[0],vPos[1],vPos[2]);
    GetVehicleZAngle(vehicleid, vPos[3]);
    speed = (kmh ? (speed / 136.666667) : (speed / 85.4166672));
    return SetVehicleVelocity(vehicleid, speed * floatsin(-vPos[3], degrees), speed * floatcos(-vPos[3], degrees), (vPos[2]-0.005));
}
stock SetPlayerSpeed(playerid, Float:speed, bool:kmh = true)
{
    new Float:pPos[4];
    
    GetPlayerVelocity(playerid,pPos[0],pPos[1],pPos[2]);
    GetPlayerFacingAngle(playerid, pPos[3]);
    speed = (kmh ? (speed / 136.666667) : (speed / 85.4166672));
    return SetVehicleVelocity(vehicleid, speed * floatsin(-vPos[3], degrees), speed * floatcos(-vPos[3], degrees), (vPos[2]-0.005));
}
stock Float:GetPlayerOnFootSpeed(playerid, bool:kmh = true, Float:velx = 0.0, Float:vely = 0.0, Float:velz = 0.0)
{
    if( velx == 0.0 && vely == 0.0 && velz == 0.0)
        GetPlayerVelocity(playerid, velx, vely, velz);

    return float(floatround((floatsqroot(((velx * velx) + (vely * vely)) + (velz * velz)) * (kmh ? (136.666667) : (85.4166672))), floatround_round));
}

stock Float:GetVehicleSpeed(vehicleid, bool:kmh = true, Float:velx = 0.0, Float:vely = 0.0, Float:velz = 0.0)
{
    if( velx == 0.0 && vely == 0.0 && velz == 0.0)
        GetVehicleVelocity(vehicleid, velx, vely, velz);

    return float(floatround((floatsqroot(((velx * velx) + (vely * vely)) + (velz * velz)) * (kmh ? (136.666667) : (85.4166672))), floatround_round));
}


stock RemoveAlpha(color) {
    return (color & ~0xFF);
}

static House_WeaponStorage(playerid, houseid)
{
    if(houseid == -1 || !HouseData[houseid][houseExists])
        return 0;

    new
        string[1050];

    for (new i = 0; i < 5; i ++)
    {
        if(!HouseData[houseid][houseWeapons][i]) format(string, sizeof(string), "%sEmpty Slot\n", string);
        else format(string, sizeof(string), "%s%s ("YELLOW"Ammo: %d"WHITE") ("CYAN"Durability: %d"WHITE")\n", string, ReturnWeaponName(HouseData[houseid][houseWeapons][i]), HouseData[houseid][houseAmmo][i], HouseData[houseid][houseDurability][i]);
    }
    Dialog_Show(playerid, HouseWeapons, DIALOG_STYLE_LIST, "Weapon Storage", string, "Select", "Cancel");
    return 1;
}

static House_ShowItems(playerid, houseid)
{
    if(houseid == -1 || !HouseData[houseid][houseExists])
        return 0;

    static
        string[MAX_HOUSE_STORAGE * 32],
        name[32];

    string[0] = 0;

    for (new i = 0; i != MAX_HOUSE_STORAGE; i ++)
    {
        if(!HouseStorage[houseid][i][hItemExists])
            format(string, sizeof(string), "%sEmpty Slot\n", string);

        else {
            strunpack(name, HouseStorage[houseid][i][hItemName]);

            if(HouseStorage[houseid][i][hItemQuantity] == 1) {
                format(string, sizeof(string), "%s%s\n", string, name);
            }
            else format(string, sizeof(string), "%s%s (%d)\n", string, name, HouseStorage[houseid][i][hItemQuantity]);
        }
    }
    Dialog_Show(playerid, HouseItems, DIALOG_STYLE_LIST, "Item Storage", string, "Select", "Cancel");
    return 1;
}
static House_OpenStorage(playerid, houseid)
{
    if(houseid == -1 || !HouseData[houseid][houseExists])
        return 0;

    new
        items[2],
        string[MAX_HOUSE_STORAGE * 32];

    for (new i = 0; i < MAX_HOUSE_STORAGE; i ++) if(HouseStorage[houseid][i][hItemExists]) {
        items[0]++;
    }
    for (new i = 0; i < 5; i ++) if(HouseData[houseid][houseWeapons][i]) {
        items[1]++;
    }
    format(string, sizeof(string), "Item Storage (%d/%d)\nWeapon Storage (%d/5)\nMoney Safe (%s)", items[0], MAX_HOUSE_STORAGE, items[1], FormatNumber(HouseData[houseid][houseMoney]));
    Dialog_Show(playerid, HouseStorage, DIALOG_STYLE_LIST, "House Storage", string, "Select", "Cancel");
    return 1;
}

static House_GetItemID(houseid, item[])
{
    if(houseid == -1 || !HouseData[houseid][houseExists])
        return 0;

    for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
    {
        if(!HouseStorage[houseid][i][hItemExists])
            continue;

        if(!strcmp(HouseStorage[houseid][i][hItemName], item)) return i;
    }
    return -1;
}

static House_GetFreeID(houseid)
{
    if(houseid == -1 || !HouseData[houseid][houseExists])
        return 0;

    for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
    {
        if(!HouseStorage[houseid][i][hItemExists])
        return i;
    }
    return -1;
}

static House_AddItem(houseid, item[], model, quantity = 1, slotid = -1)
{
    if(houseid == -1 || !HouseData[houseid][houseExists])
        return 0;

    new
        itemid = House_GetItemID(houseid, item),
        string[128];

    if(itemid == -1)
    {
        itemid = House_GetFreeID(houseid);

        if(itemid != -1)
        {
            if(slotid != -1)
                itemid = slotid;

            HouseStorage[houseid][itemid][hItemExists] = true;
            HouseStorage[houseid][itemid][hItemModel] = model;
            HouseStorage[houseid][itemid][hItemQuantity] = quantity;

            strpack(HouseStorage[houseid][itemid][hItemName], item, 32 char);

            format(string, sizeof(string), "INSERT INTO `housestorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", HouseData[houseid][houseID], item, model, quantity);
            mysql_tquery(g_iHandle, string, "OnStorageAdd", "dd", houseid, itemid);

            return itemid;
        }
        return -1;
    }
    else
    {
        format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
        mysql_tquery(g_iHandle, string);

        HouseStorage[houseid][itemid][hItemQuantity] += quantity;
    }
    return itemid;
}

static House_RemoveItem(houseid, item[], quantity = 1)
{
    if(houseid == -1 || !HouseData[houseid][houseExists])
        return 0;

    new
        itemid = House_GetItemID(houseid, item),
        string[128];

    if(itemid != -1)
    {
        if(HouseStorage[houseid][itemid][hItemQuantity] > 0)
        {
            HouseStorage[houseid][itemid][hItemQuantity] -= quantity;
        }
        if(quantity == -1 || HouseStorage[houseid][itemid][hItemQuantity] < 1)
        {
            HouseStorage[houseid][itemid][hItemExists] = false;
            HouseStorage[houseid][itemid][hItemModel] = 0;
            HouseStorage[houseid][itemid][hItemQuantity] = 0;

            format(string, sizeof(string), "DELETE FROM `housestorage` WHERE `ID` = '%d' AND `itemID` = '%d'", HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
            mysql_tquery(g_iHandle, string);
        }
        else if(quantity != -1 && HouseStorage[houseid][itemid][hItemQuantity] > 0)
        {
            format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
            mysql_tquery(g_iHandle, string);
        }
        return 1;
    }
    return 0;
}

House_RemoveAllItems(houseid)
{
    for (new i = 0; i != MAX_HOUSE_STORAGE; i ++) {
        HouseStorage[houseid][i][hItemExists] = false;
        HouseStorage[houseid][i][hItemModel] = 0;
        HouseStorage[houseid][i][hItemQuantity] = 0;
    }
    mysql_tquery(g_iHandle, sprintf("DELETE FROM `housestorage` WHERE `ID` = '%d'", HouseData[houseid][houseID]));

    for (new i = 0; i < 5; i ++) {
        HouseData[houseid][houseWeapons][i] = 0;
        HouseData[houseid][houseAmmo][i] = 0;
        HouseData[houseid][houseDurability][i] = 0;
        HouseData[houseid][houseWeaponSlot][i] = -1;
        HouseData[houseid][houseSerial][i] = 0;
    }
    mysql_tquery(g_iHandle, sprintf("DELETE FROM `weapon_houses` WHERE `houseid` = '%d'", HouseData[houseid][houseID]));
    return 1;
}

FormatNumber(number, prefix[] = "$", delimiter[] = ",")
{
    static
        value[32],
        length;

    format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

    if((length = strlen(value)) > 3)
    {
        for (new i = length, l = 0; --i >= 0; l ++) {
            if((l > 0) && (l % 3 == 0)) strins(value, delimiter, i + 1);
        }
    }
    if(prefix[0] != 0)
        strins(value, prefix, 0);

    if(number < 0)
        strins(value, "-", 0);

    return value;
}

ResetFaction(playerid)
{
    if(IsPlayerDuty(playerid)) {
        ResetFactionWeapon(playerid);
    }

    if(PlayerData[playerid][pOnDuty]) {
        SetPlayerSkinEx(playerid, PlayerData[playerid][pSkin]);
    }

    SetPlayerColor(playerid, DEFAULT_COLOR);
    PlayerData[playerid][pOnDuty] = 0;
    PlayerData[playerid][pSkinFaction] = 0;
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionID] = -1;
    PlayerData[playerid][pFactionRank] = 0;
    PlayerData[playerid][pBadge] = 0;
}

StopDragging(playerid)
{
    if(PlayerData[playerid][pDragged])
    {
        PlayerData[PlayerData[playerid][pDraggedBy]][pOnDrag] = INVALID_PLAYER_ID;

        PlayerData[playerid][pDragged] = 0;
        PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;

        stop PlayerData[playerid][pDragTimer];
    }
    return 1;
}

ResetEditing(playerid)
{
    switch(PlayerData[playerid][pEditingMode])
    {
        case FURNITURE: {
            if(PlayerData[playerid][pEditFurniture] != -1) {
                Furniture_Update(PlayerData[playerid][pEditFurniture]);
                PlayerData[playerid][pEditFurniture] = -1;
            }
        }
        case OBJECTTEXT: {
            if(PlayerData[playerid][pEditTextObject] != -1) {
                ObjectText_Refresh(PlayerData[playerid][pEditTextObject]);
                PlayerData[playerid][pEditTextObject] = -1;
            }
        }
        case VEHICLE:
        {
            if(PlayerData[playerid][pEditVehicleObject] != -1 && PlayerData[playerid][pEditVehicleObjectSlot] != -1){
                Vehicle_AttachObject(PlayerData[playerid][pEditVehicleObject], PlayerData[playerid][pEditVehicleObjectSlot]);
                Vehicle_ObjectUpdate(PlayerData[playerid][pEditVehicleObject], PlayerData[playerid][pEditVehicleObjectSlot]);
                
                PlayerData[playerid][pEditVehicleObject] = -1;
                PlayerData[playerid][pEditVehicleObjectSlot] = -1;
            }
        }
        case ROADBLOCK:
        {
            if(PlayerData[playerid][pEditRoadblock] != -1)
            {
                Barricade_Sync(PlayerData[playerid][pEditRoadblock]);
                PlayerData[playerid][pEditRoadblock] = -1;
            }
        }
    }
    PlayerData[playerid][pEditingMode] = NOTHING;
    return 1;
}

ResetCooking(playerid)
{
    PlayerData[playerid][pCooking] = 0;
    PlayerData[playerid][pCookingTime] = 0;
    PlayerData[playerid][pCookingHouse] = -1;
    PlayerData[playerid][pCookingApart] = -1;
    return 1;
}

SetHospitalSpawn(playerid)
{
    SetHealth(playerid, 100);
    SetArmour(playerid, 0);
    PlayerData[playerid][pHospital] = 1;
    PlayerData[playerid][pGiveupTime] = 0;
    PlayerDeath[playerid] = 0;

    PlayerData[playerid][pKilled] = 0;
    PlayerData[playerid][pInjured] = 0;
    PlayerData[playerid][pBleeding] = 0;
    PlayerData[playerid][pBleedTime] = 0;

    PlayerData[playerid][pHospitalTime] = 115;
    PlayerData[playerid][pHunger] = 50;
    PlayerData[playerid][pEnergy] = 50;
    PlayerData[playerid][pDead] = 100.0;
    
    SetPlayerInterior(playerid, 110);
    SetPlayerVirtualWorld(playerid, (playerid + ASGH_LOBBY_WORLD_OFFSET));

    SetPlayerPos(playerid, 1847.9530, -1118.4327, 42.2648);
    SetPlayerFacingAngle(playerid, 271.1451);

    SetPlayerCameraPos(playerid, 1846.2737,-1114.7606,41.6537 + 2.0);
    SetPlayerCameraLookAt(playerid, 1847.9530, -1118.4327, 42.2648);

    TogglePlayerControllable(playerid, 0);

    ApplyAnimation(playerid, "CRACK", "crckidle2", 4.0, 1, 0, 0, 0, 0);

    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recovering... ~g~~h~30", 15, 3);

    SetPlayerWeather(playerid, 1);
    SetPlayerTime(playerid, 12, 0);
    InjuredTag(playerid, false, false, true);
    return 1;
}
ResetPlayerHospitalInPrison(playerid)
{
    ClearAnimations(playerid);

    SetHealth(playerid, 100);
    PlayerData[playerid][pInjured] = 0;
    PlayerData[playerid][pGiveupTime] = 0;
    PlayerData[playerid][pDead] = 100.0;

    SetPVarInt(playerid, "GiveUptime", 0);

    SetPlayerArmedWeapon(playerid, 0);
    TextDrawHideForPlayer(playerid, gServerTextdraws[0]);

    InjuredTag(playerid, false, false, true);
    PlayerDeath[playerid] = 0;
    return 1;
}
ResetPlayer(playerid)
{
    if(PlayerData[playerid][pFirstAid])
        stop PlayerData[playerid][pAidTimer];

    if(PlayerData[playerid][pOnDrag] != INVALID_PLAYER_ID) {
        SendServerMessage(PlayerData[playerid][pOnDrag], "Player yang mengangkatmu telah terluka (injured).");
        StopDragging(PlayerData[playerid][pOnDrag]);
    }
    else if(PlayerData[playerid][pDraggedBy] != INVALID_PLAYER_ID) {
        SendServerMessage(PlayerData[playerid][pDraggedBy], "Player yang sedang kamu angkat telah terluka (injured).");
        StopDragging(playerid);
    }
    ResetCooking(playerid);


    PlayerData[playerid][pHospital] = -1;
    PlayerData[playerid][pCrafting] = 0;
    PlayerData[playerid][pHarvesting] = 0;
    PlayerData[playerid][pFuelCan] = 0;
    PlayerData[playerid][pFingerTime] = 0;
    PlayerData[playerid][pFingerItem] = -1;
    PlayerData[playerid][pFirstAid] = false;
    PlayerData[playerid][pEmergency] = 0;
    PlayerData[playerid][pPlaceAd] = 0;
    PlayerData[playerid][pTaxiCalled] = 0;
    PlayerData[playerid][pMining] = 0;
    PlayerData[playerid][pMinedRock] = 0;
    PlayerData[playerid][pMineTime] = 0;
    PlayerData[playerid][pBleeding] = 0;
    PlayerData[playerid][pBandage] = 0;

    // PlayerData[playerid][pLiveMode] = 0;
    // PlayerData[playerid][pDisableOOC] = 0;
    // PlayerData[playerid][pDisablePM] = 0;
    // PlayerData[playerid][pDisableBC] = 0;
    // PlayerData[playerid][pDisableFaction] = 0;
    // PlayerData[playerid][pDisableLogin] = 0;
    // PlayerData[playerid][pDisableAnim] = 0;
    // PlayerData[playerid][pTogRelation] = 0;

    PlayerData[playerid][pParkedVehicle] = 0;
    PlayerData[playerid][pBleedTime] = 0;
    PlayerData[playerid][pLoadType] = 0;
    PlayerData[playerid][pLoadCrate] = 0;
    PlayerData[playerid][pLoading] = 0;
    PlayerData[playerid][pUnloading] = -1;
    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pSorting] = -1;
    PlayerData[playerid][pSortCrate] = 0;
    PlayerData[playerid][pCP] = 0;
    PlayerData[playerid][pCuffed] = 0;
    PlayerData[playerid][pTied] = 0;

    PlayerData[playerid][pPicking] = 0;
    PlayerData[playerid][pPickCar] = -1;
    PlayerData[playerid][pPickTime] = 0;
    PlayerData[playerid][pWrong] = 0;
    PlayerData[playerid][pAksesoris] = -1;
    // PlayerData[playerid][pFactionStock] = 0;
    RemovePlayerAttachedObject(playerid, JOB_SLOT);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

    DisablePlayerCheckpoint(playerid);
    GameTextForPlayer(playerid, " ", 1, 3);

    HidePlayerFooter(playerid);
//    Cooking_Reset(playerid);
    return 1;
}

GiveMoney(playerid, amount, E_SERVER_ECONOMY_FLOW:economy_flow = ECONOMY_FLOW_NONE, string:source[] = "")
{
    if (playerid != INVALID_PLAYER_ID)
    {
        PlayerData[playerid][pMoney] += amount;
        UpdateCharacterInt(playerid, "Money", PlayerData[playerid][pMoney]);

        if (economy_flow == ECONOMY_ADD_SUPPLY)
        {
            Economy_AddSupplyAmount(abs(amount));

            if (strlen(source) > 0)
            {
                printf("[ECONOMY]: %s (%d) spents money %s for \"%s\"", ReturnName(playerid, 0), playerid, FormatNumber(abs(amount)), source);
            }
        }
        else if (economy_flow == ECONOMY_TAKE_SUPPLY)
        {
            Economy_RequestSupply(abs(amount));

            if (strlen(source) > 0)
            {
                printf("[ECONOMY]: %s (%d) receives money %s from \"%s\"", ReturnName(playerid, 0), playerid, FormatNumber(abs(amount)), source);
            }
        }

        GivePlayerMoney(playerid, amount);

        stop HideHUDMoney(playerid);

        PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], (amount > 0) ? 14053887 : -1523963137);
        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], sprintf("%s%s", (amount > 0) ? ("+") : (""), FormatNumber(amount)));
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_moneyhud]);

        defer HideHUDMoney(playerid);
    }
    return 1;
}
timer HideHUDMoney[3000](playerid)
{
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_moneyhud]);
    return 1;
}

IsAnIP(str[])
{
    if(!str[0] || str[0] == '\1')
        return 0;

    for (new i = 0, l = strlen(str); i != l; i ++)
    {
        if((str[i] < '0' || str[i] > '9') && str[i] != '.')
            return 0;

        if(0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
            return 0;
    }
    return 1;
}

KickEx(playerid, time = 200)
{
    if(PlayerData[playerid][pKicked])
        return 0;

    if(SQL_IsCharacterLogged(playerid)) {
        SQL_SaveAccounts(playerid);
    }

    PlayerData[playerid][pKicked] = 1;
    SetTimerEx("KickTimer", time, false, "d", playerid);
    return 1;
}
Dialog:FirstSpawn(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                SendClientMessageEx(playerid, COLOR_CLIENT,"---------------------------------------------------------------------------------------------------------------");
                SendClientMessageEx(playerid, X11_WHITE,"Selamat datang "YELLOW"%s"WHITE", anda telah landing dan sekarang berada di Bandara Los Santos International .", ReturnName(playerid,0));
                SendClientMessageEx(playerid, X11_WHITE,"Anda di beri uang saku "GREEN"$500 "WHITE"dan di bank account "GREEN"$1000.");
                SendClientMessageEx(playerid, X11_WHITE,"Jika anda menemukan bug atau hal yang tidak wajar, anda bisa melaporkannya di "RED"%s.", "www.diversity.my.id");
                SendClientMessageEx(playerid, X11_WHITE,""RED"PENTING:"WHITE" Silahkan buka "YELLOW"/faq "WHITE"dan "YELLOW"/help "WHITE"untuk mengakses informasi awal!");
                SendClientMessageEx(playerid, X11_WHITE,"Anda pemain baru? silahkan ambil starterpack anda di "RED"%s.", "/starterpack");
                SendClientMessageEx(playerid, COLOR_CLIENT,"---------------------------------------------------------------------------------------------------------------");

                SetPlayerPosEx(playerid, 1642.6522,-2331.9292,13.5469);
                SetPlayerFacingAngle(playerid, 359.7889);
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);

            }
            case 1:
            {
                SendClientMessageEx(playerid, COLOR_CLIENT,"---------------------------------------------------------------------------------------------------------------");
                SendClientMessageEx(playerid, X11_WHITE,"Selamat datang "YELLOW"%s"WHITE", anda telah landing dan sekarang berada di Market Station .", ReturnName(playerid,0));
                SendClientMessageEx(playerid, X11_WHITE,"Anda di beri uang saku "GREEN"$500 "WHITE"dan di bank account "GREEN"$1000.");
                SendClientMessageEx(playerid, X11_WHITE,"Jika anda menemukan bug atau hal yang tidak wajar, anda bisa melaporkannya di "RED"%s.", "www.diversity.my.id");
                SendClientMessageEx(playerid, X11_WHITE,""RED"PENTING:"WHITE" Silahkan buka "YELLOW"/faq "WHITE"dan "YELLOW"/help "WHITE"untuk mengakses informasi awal!");
                SendClientMessageEx(playerid, X11_WHITE,"Anda pemain baru? silahkan ambil starterpack anda di "RED"%s.", "/starterpack");
                SendClientMessageEx(playerid, COLOR_CLIENT,"---------------------------------------------------------------------------------------------------------------");

                SetPlayerPosEx(playerid, 823.1542,-1341.9429,13.5172);
                SetPlayerFacingAngle(playerid, 90.7645);
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetCameraBehindPlayer(playerid);
                TogglePlayerControllable(playerid, 1);

            }
            case 2:
            {
                SendClientMessageEx(playerid, COLOR_CLIENT,"---------------------------------------------------------------------------------------------------------------");
                SendClientMessageEx(playerid, X11_WHITE,"Selamat datang "YELLOW"%s"WHITE", anda telah landing dan sekarang berada di ANANTA Bus Station .", ReturnName(playerid,0));
                SendClientMessageEx(playerid, X11_WHITE,"Anda di beri uang saku "GREEN"$500 "WHITE"dan di bank account "GREEN"$1000.");
                SendClientMessageEx(playerid, X11_WHITE,"Jika anda menemukan bug atau hal yang tidak wajar, anda bisa melaporkannya di "RED"%s.", "www.diversity.my.id");
                SendClientMessageEx(playerid, X11_WHITE,""RED"PENTING:"WHITE" Silahkan buka "YELLOW"/faq "WHITE"dan "YELLOW"/help "WHITE"untuk mengakses informasi awal!");
                SendClientMessageEx(playerid, X11_WHITE,"Anda pemain baru? silahkan ambil starterpack anda di "RED"%s.", "/starterpack");
                SendClientMessageEx(playerid, COLOR_CLIENT,"---------------------------------------------------------------------------------------------------------------");

                SetPlayerPosEx(playerid, 1778.2902,-1941.7074,13.5658);
                SetPlayerFacingAngle(playerid, 359.2084);
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetCameraBehindPlayer(playerid);
                TogglePlayerControllable(playerid, 1);
            }
        }
    }
    else
    {
        SendClientMessageEx(playerid, COLOR_CLIENT,"---------------------------------------------------------------------------------------------------------------");
        SendClientMessageEx(playerid, X11_WHITE,"Selamat datang "YELLOW"%s"WHITE", anda telah landing dan sekarang berada di Bandara Los Santos International .", ReturnName(playerid,0));
        SendClientMessageEx(playerid, X11_WHITE,"Anda di beri uang saku "GREEN"$500 "WHITE"dan di bank account "GREEN"$1000.");
        SendClientMessageEx(playerid, X11_WHITE,"Jika anda menemukan bug atau hal yang tidak wajar, anda bisa melaporkannya di "RED"%s.", "www.diversity.my.id");
        SendClientMessageEx(playerid, X11_WHITE,""RED"PENTING:"WHITE" Silahkan buka "YELLOW"/faq "WHITE"dan "YELLOW"/help "WHITE"untuk mengakses informasi awal!");
        SendClientMessageEx(playerid, X11_WHITE,"Anda pemain baru? silahkan ambil starterpack anda di "RED"%s.", "/starterpack");
        SendClientMessageEx(playerid, COLOR_CLIENT,"---------------------------------------------------------------------------------------------------------------");

        SetPlayerPosEx(playerid, 1642.6522,-2331.9292,13.5469);
        SetPlayerFacingAngle(playerid, 359.7889);
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetCameraBehindPlayer(playerid);
        TogglePlayerControllable(playerid, 1);
    }
    return 1;
}
static SetDefaultSpawn(playerid)
{
    if(PlayerData[playerid][pSpawnPoint] == 0) // Airport
    {
        Dialog_Show(playerid, FirstSpawn, DIALOG_STYLE_LIST, "Arrival Location", "Los Santos Airport\nLos Santos Market Station\nLos Santos Unity Station", "Choose", "Default");
    }
    return 1;
}

static RespawnPlayer(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        new
            Float:x,
        Float:y,
        Float:z;

        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x, y, z + 1);
    }
    SpawnPlayer(playerid);
    SetDefaultSpawn(playerid);
    return 1;
}

static IsPlayerIdle(playerid) {
    new
        index = GetPlayerAnimationIndex(playerid);

    return ((index == 1275) || (1181 <= index <= 1192));
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

    static
        Float:fX,
        Float:fY,
        Float:fZ;

    GetDynamicObjectPos(objectid, fX, fY, fZ);

    return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

stock IsPlayerSpawned(playerid)
{
    if(playerid < 0 || playerid >= MAX_PLAYERS)
        return 0;

    return (!PlayerData[playerid][pKilled]) && (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_NONE && GetPlayerState(playerid) != PLAYER_STATE_WASTED);
}

IsValidEmail(const email[])
{
    new at_pos = strfind(email, "@", true) + 1;
    if(email[0] == '@' || at_pos == -1)
    {
        return false;
    }

    static const providers[][] =
    {
        "hotmail.com",
        "gmail.com"
    };

    for(new i = 0; i < sizeof(providers); i ++)
    {
        if(!strcmp(email[at_pos], providers[i], true))
        {
            return true;
        }
    }
    return false;
}

static GetVehicleMaxSeats(vehicleid)
{
    static const g_arrMaxSeats[] = {
        4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
        1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
        2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
        4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
        1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
        4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
        4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
        0, 0
    };
    new
        model = GetVehicleModel(vehicleid);

    if(400 <= model <= 611)
        return g_arrMaxSeats[model - 400];

    return 0;
}
stock GetXYOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance) 
{
    new Float:a;
    GetVehiclePos(vehicleid, x, y, a);
    GetVehicleZAngle(vehicleid, a);

    a = a-90.0;

    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
stock GetXYInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance) 
{
    new Float:a;
    GetVehiclePos(vehicleid, x, y, a);
    GetVehicleZAngle(vehicleid, a);

    a = a-90.0;

    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}

stock PlayerFacePlayer(playerid, targetplayerid) 
{
	new
		Float: Angle;

	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return 1;
}
stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance) 
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);

    if(GetPlayerVehicleID(playerid))
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);

    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
    static
        Float:fX,
        Float:fY,
        Float:fZ;

    GetPlayerPos(targetid, fX, fY, fZ);

    return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

ConvertTimestamp(Timestamp:timestamp, bool:date = true)
{
    new output[256];

    if(date) TimeFormat(timestamp + Timestamp:UTC_07, "%a %d %b %Y, %T", output);
    else TimeFormat(timestamp + Timestamp:UTC_07, "%T", output);

    return output;
}

IsPlayerNearBoot(playerid, vehicleid)
{
    static
        Float:fX,
        Float:fY,
        Float:fZ;

    GetVehicleBoot(vehicleid, fX, fY, fZ);

    return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}

stock IsPlayerNearHood(playerid, vehicleid)
{
    static
        Float:fX,
        Float:fY,
        Float:fZ;

    GetVehicleHood(vehicleid, fX, fY, fZ);

    return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

stock IsPlayerNearVehicle(playerid, vehicleid, Float:radius = 5.0)
{
    static
        Float:fX,
        Float:fY,
        Float:fZ;

    GetVehiclePos(vehicleid, fX, fY, fZ);

    if(GetPlayerDistanceFromPoint(playerid, fX, fY, fZ) < radius)
        return 1;

    return 0;
}

SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 16)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 16); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit CONST.alt 4
        #emit SUB
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(IsPlayerNearPlayer(i, playerid, radius)) {
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(IsPlayerNearPlayer(i, playerid, radius)) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

SendAdminMessage(color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] >= 1 && !PlayerData[i][pDisableAdmin]) {
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] >= 1 && !PlayerData[i][pDisableAdmin]) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

SendFactionAlert(color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(AccountData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
                    SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(AccountData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

SendTesterMessage(color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(SQL_IsCharacterLogged(i) && (!PlayerData[i][pDisableTester]) && (AccountData[i][pAdmin] > 0)) { // sebelumnya pake ini, tapi bug! if(SQL_IsCharacterLogged(i) && (!PlayerData[i][pDisableTester]) || AccountData[i][pAdmin] > 0) {
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(SQL_IsCharacterLogged(i) && (!PlayerData[i][pDisableTester]) && (AccountData[i][pAdmin] > 0)) { //sebelumnya pake ini, tapi bug!if(SQL_IsCharacterLogged(i) && (!PlayerData[i][pDisableTester])  || AccountData[i][pAdmin] > 0) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}
// SendRVMessage(type, color, const str[], {Float,_}:...)
// {
//     static
//         args,
//         start,
//         end,
//         string[144]
//     ;
//     #emit LOAD.S.pri 8
//     #emit STOR.pri args

//     if(args > 12)
//     {
//         #emit ADDR.pri str
//         #emit STOR.pri start

//         for (end = start + (args - 12); end > start; end -= 4)
//         {
//             #emit LREF.pri end
//             #emit PUSH.pri
//         }
//         #emit PUSH.S str
//         #emit PUSH.C 144
//         #emit PUSH.C string
//         #emit PUSH.C args

//         #emit SYSREQ.C format
//         #emit LCTRL 5
//         #emit SCTRL 4

//             foreach (new veh : Vehicle )
//             {
//                 foreach(new i : Player)
//                 { 
//                     if(IsPlayerNearVehicle(i, vehicle) && GetVehicleModel(vehicle) == 508)
//                     {
//                         SendClientMessage(i, color, str);
//                     }
//                 }
//             }
//             return 1;
//     }

//     foreach (new veh : Vehicle )
//     {
//         foreach(new i : Player)
//         { 
//             if(IsPlayerNearVehicle(i, vehicle) && GetVehicleModel(vehicle) == 508)
//             {
//                 SendClientMessage(i, color, str);
//             }
//         }
//     }
//     return 1;
// }
SendFactionMessageEx(type, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) if(PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
                SendClientMessage(i, color, string);
        }
        return 1;
    }
    foreach (new i : Player) if(PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
        SendClientMessage(i, color, str);
    }
    return 1;
}

SendFactionMessage(factionid, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) if(PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
            SendClientMessage(i, color, string);
        }
        return 1;
    }
    foreach (new i : Player) if(PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
        SendClientMessage(i, color, str);
    }
    return 1;
}

static SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) if(PlayerData[i][pJob] == jobid) {
            SendClientMessage(i, color, string);
        }
        return 1;
    }
    foreach (new i : Player) if(PlayerData[i][pJob] == jobid) {
        SendClientMessage(i, color, str);
    }
    return 1;
}

static SendVehicleMessage(vehicleid, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) if(GetPlayerVehicleID(i) == vehicleid) {
                SendClientMessage(i, color, string);
        }
        return 1;
    }
    foreach (new i : Player) if(GetPlayerVehicleID(i) == vehicleid) {
        SendClientMessage(i, color, string);
    }
    return 1;
}

static SendRadioMessage(frequency, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) if(Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel] == frequency) 
        {
            if(!PlayerData[i][pLiveMode])
            {
                SendClientMessage(i, color, string);
            }
            else
            {
                new val[10], len;
                valstr(val, frequency);
                len = strfind(string, val);
                strdel(string, len - 2, len + strlen(val));
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player) if(Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel] == frequency) 
    {
        if(!PlayerData[i][pLiveMode])
        {
            SendClientMessage(i, color, str);
        }
        else
        {
            new val[10], len;
            valstr(val, frequency);
            len = strfind(str, val);
            format(string, sizeof(string), str);
            strdel(string, len - 2, len + strlen(val));
            SendClientMessage(i, color, string);
        }
    }
    return 1;
}

// valstr fix by Slice
stock FIX_valstr(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value), pack && strpack(dest, dest, 12);
}
#define valstr FIX_valstr

stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
    static
        args,
        str[144];

    /*
         *  Custom Function:that uses #emit to format variables into a string.
         *  This code is very fragile; touching any code here will cause crashing!
    */
    if((args = numargs()) == 3)
    {
        SendClientMessage(playerid, color, text);
    }
    else
    {
        while (--args >= 3)
        {
            #emit LCTRL 5
            #emit LOAD.alt args
            #emit SHL.C.alt 2
            #emit ADD.C 12
            #emit ADD
            #emit LOAD.I
            #emit PUSH.pri
        }
        #emit PUSH.S text
        #emit PUSH.C 144
        #emit PUSH.C str
        #emit PUSH.S 8
        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        SendClientMessage(playerid, color, str);

        #emit RETN
    }
    return 1;
}

stock SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
    static
        args,
        str[144];

    /*
         *  Custom Function:that uses #emit to format variables into a string.
         *  This code is very fragile; touching any code here will cause crashing!
    */
    if((args = numargs()) == 2)
    {
        SendClientMessageToAll(color, text);
    }
    else
    {
        while (--args >= 2)
        {
            #emit LCTRL 5
            #emit LOAD.alt args
            #emit SHL.C.alt 2
            #emit ADD.C 12
            #emit ADD
            #emit LOAD.I
            #emit PUSH.pri
        }
        #emit PUSH.S text
        #emit PUSH.C 144
        #emit PUSH.C str
        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri
        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        SendClientMessageToAll(color, str);

        #emit RETN
    }
    return 1;
}

static ProxDetector(playerid, Float:max_range, color, string[], Float:max_ratio = 1.6)
{
    new
        Float:pos_x,
        Float:pos_y,
        Float:pos_z,
        Float:range,
        Float:range_ratio,
        Float:range_with_ratio,
        clr_r, clr_g, clr_b,
        Float:color_r, Float:color_g, Float:color_b;

    if (!GetPlayerPos(playerid, pos_x, pos_y, pos_z)) {
        return 0;
    }

    color_r = float(color >> 24 & 0xFF);
    color_g = float(color >> 16 & 0xFF);
    color_b = float(color >> 8 & 0xFF);
    range_with_ratio = max_range * max_ratio;

#if defined foreach
    foreach (new i : Player) {
#else
    for (new i = GetPlayerPoolSize(); i != -1; i--) {
#endif
        if (!IsPlayerStreamedIn(i, playerid)) {
            continue;
        }

        range = GetPlayerDistanceFromPoint(i, pos_x, pos_y, pos_z);
        if (range > max_range) {
            continue;
        }

        range_ratio = (range_with_ratio - range) / range_with_ratio;
        clr_r = floatround(range_ratio * color_r);
        clr_g = floatround(range_ratio * color_g);
        clr_b = floatround(range_ratio * color_b);

        SendClientMessage(i, (color & 0xFF) | (clr_b << 8) | (clr_g << 16) | (clr_r << 24), string);
    }
    foreach(new i : Player) 
    {
        if(IsPlayerNearPlayer(i, playerid, max_range))
        {
            if(AccountData[i][pAdmin] >= 5 && PlayerData[i][pSpectator] != INVALID_PLAYER_ID) 
            {
                SendClientMessageEx(i, X11_TOMATO_1, "{C0C0C0}%s", string);
            }
        }
    }
    SendClientMessage(playerid, color, string);
    return 1;
}

stock Log_Write(const path[], const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        File:file,
        string[1024]
    ;
    if((start = strfind(path, "/")) != -1) {
        strmid(string, path, 0, start + 1);

        if(!fexist(string))
            return printf("** Warning: Directory \"%s\" doesn't exist.", string);
    }
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    file = fopen(path, io_append);

    if(!file)
        return 0;

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 1024
        #emit PUSH.C string
        #emit PUSH.C args
        #emit SYSREQ.C format

        fwrite(file, string);
        fwrite(file, "\r\n");
        fclose(file);

        #emit LCTRL 5
        #emit SCTRL 4
        #emit RETN
    }
    fwrite(file, str);
    fwrite(file, "\r\n");
    fclose(file);

    return 1;
}

IsValidRoleplayName(const name[]) {
    if(!name[0] || strfind(name, "_") == -1)
        return 0;

    else for (new i = 0, len = strlen(name); i != len; i ++) {
    if((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
            return 0;

        else if((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
            return 0;

        else if((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
            return 0;
    }
    return 1;
}
timer MancingGagal[10000](playerid)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
        RemovePlayerAttachedObject(playerid, 4);

    PlayerData[playerid][pFishing] = 0;
    FishClicked[playerid] = 0;
    BaitEaten[playerid] = false;

    StopFishing(playerid);
    ClearAnimations(playerid);
    SendServerMessage(playerid, "Kamu gagal memancing ikan, ikannya lolos!");

    stop MancingTimer[playerid];

    return 1;
}
GagalMancing(playerid)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
    RemovePlayerAttachedObject(playerid, 4);

    PlayerData[playerid][pFishing] = 0;
    FishClicked[playerid] = 0;
    BaitEaten[playerid] = false;

    StopFishing(playerid);
    ClearAnimations(playerid);
    SendServerMessage(playerid, "Kamu gagal memancing ikan, ikannya lolos!");

    stop MancingTimer[playerid];
    return 1;
}
StopFishing(playerid)
{
    PlayerTextDrawHide(playerid, FishingPowerText[playerid]);
	HidePlayerProgressBar(playerid, FishingProgressBar[playerid]);
    SetPlayerProgressBarValue(playerid, FishingProgressBar[playerid], 0);
    SetPlayerProgressBarColour(playerid, FishingProgressBar[playerid], ConvertHBEColor(FishClicked[playerid]));
}
Fishing(playerid)
{
    PlayerTextDrawShow(playerid, FishingPowerText[playerid]);
	ShowPlayerProgressBar(playerid, FishingProgressBar[playerid]);
    SetPlayerProgressBarValue(playerid, FishingProgressBar[playerid], 0);
    SetPlayerProgressBarColour(playerid, FishingProgressBar[playerid], ConvertHBEColor(FishClicked[playerid]));
    return 1;
}
CreateFishingDraw(playerid)
{
	FishingPowerText[playerid] = CreatePlayerTextDraw(playerid, 268.000000, 371.000000, "Fishing Power");
	PlayerTextDrawFont(playerid, FishingPowerText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, FishingPowerText[playerid], 0.341666, 1.299999);
	PlayerTextDrawTextSize(playerid, FishingPowerText[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, FishingPowerText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, FishingPowerText[playerid], 0);
	PlayerTextDrawAlignment(playerid, FishingPowerText[playerid], 1);
	PlayerTextDrawColor(playerid, FishingPowerText[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, FishingPowerText[playerid], 255);
	PlayerTextDrawBoxColor(playerid, FishingPowerText[playerid], 50);
	PlayerTextDrawUseBox(playerid, FishingPowerText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, FishingPowerText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, FishingPowerText[playerid], 0);

	FishingProgressBar[playerid] = CreatePlayerProgressBar(playerid, 270.000000, 386.000000, 129.500000, 9.500000, -1, 100.000000, 0);
	SetPlayerProgressBarValue(playerid, FishingProgressBar[playerid], FishClicked[playerid]);
    return 1;
}

CreateTextDraws(playerid)
{

    PlayerTextdraws[playerid][textdraw_box] = CreatePlayerTextDraw(playerid, -1.000000, 0.562500, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_box], 0.000000, 49.548995);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_box], 645.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_box], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_box], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_box], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_box], 255);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_box], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_box], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_box], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_box], 1);

    PlayerTextdraws[playerid][textdraw_blindfold] = CreatePlayerTextDraw(playerid, -1.000000, 0.562500, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 0.000000, 49.548995);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 645.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_blindfold], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 255);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 1);

    PlayerTextdraws[playerid][textdraw_sick] = CreatePlayerTextDraw(playerid, 0.500000, -0.312500, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_sick], 0.000000, 49.649990);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_sick], 640.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_sick], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_sick], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_sick], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_sick], -16777142);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_sick], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_sick], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_sick], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_sick], 1);

    PlayerTextdraws[playerid][textdraw_switch] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_switch], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_switch], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_switch], 0.530000, 51.000000);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_switch], -1);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_switch], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_switch], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_switch], 1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_switch], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_switch], 119);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_switch], -6.000000, 30.000000);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_switch], 0);

    PlayerTextdraws[playerid][textdraw_moneyhud] = CreatePlayerTextDraw(playerid, 607.399047, 97.150001, "_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 0.350000, 1.240000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 3);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 14053887);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 3);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 0);

    PlayerTextdraws[playerid][textdraw_clothes][0] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "I");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 27.410259, 5.897183);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 145);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 0);

    PlayerTextdraws[playerid][textdraw_clothes][1] = CreatePlayerTextDraw(playerid, 320.000000, 358.000000, "Clothes_Store");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 0.361666, 1.400889);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 90);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 0);

    PlayerTextdraws[playerid][textdraw_clothes][2] = CreatePlayerTextDraw(playerid, 320.000000, 377.000000, "BUY");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 0.193666, 0.915556);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 10.000000, 34.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 9306312);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 0);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], true);

    PlayerTextdraws[playerid][textdraw_clothes][3] = CreatePlayerTextDraw(playerid, 363.000000, 377.000000, "NEXT");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 0.193666, 0.915556);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 10.000000, 34.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], -132);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 0);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], true);

    PlayerTextdraws[playerid][textdraw_clothes][4] = CreatePlayerTextDraw(playerid, 277.000000, 377.000000, "BACK");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 0.193666, 0.915556);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 10.000000, 34.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], -132);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 0);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], true);

    PlayerTextdraws[playerid][textdraw_clothes][5] = CreatePlayerTextDraw(playerid, 320.000000, 398.000000, "Skin:_0/0");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 0.171666, 0.782815);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], -86);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 0);

    //Trash Capacity box
    PlayerTextdraws[playerid][textdraw_trash][0] = CreatePlayerTextDraw(playerid, 35.124458, 316.000030, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 0.000000, 1.472914);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 166.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_trash][0], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 115);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 0);

    PlayerTextdraws[playerid][textdraw_trash][1] = CreatePlayerTextDraw(playerid, 139.136138, 316.633270, "10/10");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 0.241171, 1.127500);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_trash][1], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 0);

    //Register fill form
    PlayerTextdraws[playerid][textdraw_registrasi][0] = CreatePlayerTextDraw(playerid, 459.136474, 147.999984, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 0.000000, 16.606147);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 615.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 152);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][1] = CreatePlayerTextDraw(playerid, 459.136474, 128.998825, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 0.000000, 1.847732);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 615.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], -5945099);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][2] = CreatePlayerTextDraw(playerid, 482.562774, 130.499984, "Identifikasi_Akun");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 0.181200, 1.413332);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][3] = CreatePlayerTextDraw(playerid, 462.884368, 150.916778, "Nama~n~~y~_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 0.201815, 1.349165);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][4] = CreatePlayerTextDraw(playerid, 463.352905, 179.151885, "~b~~h~Jenis Kelamin~n~~w~...");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 0.194787, 1.354998);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][5] = CreatePlayerTextDraw(playerid, 463.353027, 209.437057, "~b~~h~Tanggal Lahir~n~~w~...");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 0.190102, 1.249998);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][6] = CreatePlayerTextDraw(playerid, 463.159088, 239.038848, "~b~~h~Asal Karakter~n~~w~...");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 0.198067, 1.302498);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][7] = CreatePlayerTextDraw(playerid, 461.010528, 277.165466, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 0.000000, 1.894584);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 613.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], -1378294143);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][8] = CreatePlayerTextDraw(playerid, 512.547790, 279.066589, "UPDATE");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 0.320351, 1.401666);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 553.000000, 10.199999);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 0);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);

    PlayerTextdraws[playerid][textdraw_registrasi][9] = CreatePlayerTextDraw(playerid, -4.117624, -8.916657, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 0.000000, 50.894096);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 640.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 0);

    //Spectate textdraws
    PlayerTextdraws[playerid][textdraw_spectate][0] = CreatePlayerTextDraw(playerid, 319.822509, 328.367523, "_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 0.321001, 1.390000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 0);

    PlayerTextdraws[playerid][textdraw_spectate][1] = CreatePlayerTextDraw(playerid, 240.336715, 328.249969, "_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 0.000000, 10.046852);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 401.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 195);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 0);

    //Tickrate and server map uptodate
    PlayerTextdraws[playerid][textdraw_map] = CreatePlayerTextDraw(playerid, 84.000190, 427.600067, "Loading...");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_map], 0.194500, 1.070626);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_map], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_map], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_map], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_map], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_map], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_map], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_map], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_map], 0);

    //Ammo Update
    PlayerTextdraws[playerid][textdraw_ammo] = CreatePlayerTextDraw(playerid, 520.633239, 62.733345, "_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_ammo], 0.278001, 1.200000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_ammo], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_ammo], -1378294017);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_ammo], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_ammo], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_ammo], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_ammo], 3);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_ammo], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_ammo], 0);

    //Textdraw Time GUI
    PlayerTextdraws[playerid][textdraw_timegui][0] = CreatePlayerTextDraw(playerid, 545.000000, 22.000000, "00:00:00");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 0.449999, 1.799998);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 0);

    PlayerTextdraws[playerid][textdraw_timegui][1] = CreatePlayerTextDraw(playerid, 10.000000, 429.000000, "");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 0.341666, 1.699998);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 1);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 0);


    //Prison time
    PlayerTextdraws[playerid][textdraw_prison] = CreatePlayerTextDraw(playerid, 33.000000, 320.000000, "~g~Prison Time:~w~ 00:00:00");
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_prison], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_prison], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_prison], 0.270000, 1.000000);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_prison], -1);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_prison], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_prison], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_prison], 0);

    PlayerTextdraws[playerid][textdraw_supply] = CreatePlayerTextDraw(playerid, 37.000000, 315.000000, "~b~Loaded:~w~ Retail Supplies~n~~b~Loaded Crates:~w~ 6/6");
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_supply], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_supply], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_supply], 0.280000, 1.000000);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_supply], -1);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_supply], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_supply], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_supply], 0);

    //Notifikasi
    PlayerTextdraws[playerid][textdraw_footer] = CreatePlayerTextDraw(playerid, 321.000000, 361.385, "_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_footer], 0.326, 1.654);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_footer], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_footer], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_footer], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_footer], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_footer], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_footer], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_footer], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_footer], 0);

    //Taxi driver display
    PlayerTextdraws[playerid][textdraw_taxi][0] = CreatePlayerTextDraw(playerid, 22.943038, 232.201629, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 0.000000, 6.532943);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 142.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 132);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 0);

    PlayerTextdraws[playerid][textdraw_taxi][1] = CreatePlayerTextDraw(playerid, 22.943038, 218.251388, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 0.000000, 1.061944);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 142.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], -1378294017);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 0);

    PlayerTextdraws[playerid][textdraw_taxi][2] = CreatePlayerTextDraw(playerid, 37.570774, 218.349929, "TAXI_DRIVER_DISPLAY");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 0.251533, 1.045833);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 0);

    PlayerTextdraws[playerid][textdraw_taxi][3] = CreatePlayerTextDraw(playerid, 23.602195, 231.533264, "Total_pendapatan: ~g~$0~n~Penumpang: -");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 0.251533, 1.045833);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 0);

    //Character Selection
    PlayerTextdraws[playerid][textdraw_character][0] = CreatePlayerTextDraw(playerid, 557.000000, 346.000000, "_");
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_character][0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_character][0], 0.549999, 7.549998);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_character][0], 298.500000, 166.000000);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_character][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_character][0], 0);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_character][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_character][0], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_character][0], 255);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_character][0], 135);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_character][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_character][0], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_character][0], 0);

	PlayerTextdraws[playerid][textdraw_character][1] = CreatePlayerTextDraw(playerid, 614.000000, 333.000000, "Select Character");
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_character][1], 0);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_character][1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_character][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_character][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_character][1], 0);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_character][1], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_character][1], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_character][1], 255);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_character][1], 50);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_character][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_character][1], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_character][1], 0);

	PlayerTextdraws[playerid][textdraw_character][2] = CreatePlayerTextDraw(playerid, 549.000000, 360.000000, "Empty_Slot");
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_character][2], 1);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_character][2], 0.245833, 1.650000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_character][2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_character][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_character][2], 0);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_character][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_character][2], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_character][2], 255);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_character][2], 50);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_character][2], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_character][2], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_character][2], 0);

	PlayerTextdraws[playerid][textdraw_character][3] = CreatePlayerTextDraw(playerid, 483.000000, 386.000000, "ld_beat:left");
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_character][3], 4);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_character][3], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_character][3], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_character][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_character][3], 0);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_character][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_character][3], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_character][3], 255);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_character][3], 50);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_character][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_character][3], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_character][3], true);

	PlayerTextdraws[playerid][textdraw_character][4] = CreatePlayerTextDraw(playerid, 607.000000, 386.000000, "ld_beat:right");
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_character][4], 4);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_character][4], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_character][4], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_character][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_character][4], 0);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_character][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_character][4], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_character][4], 255);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_character][4], 50);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_character][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_character][4], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_character][4], true);

	PlayerTextdraws[playerid][textdraw_character][5] = CreatePlayerTextDraw(playerid, 551.000000, 386.000000, "Create_Character");
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_character][5], 1);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_character][5], 0.245833, 1.650000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_character][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_character][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_character][5], 0);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_character][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_character][5], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_character][5], 255);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_character][5], 50);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_character][5], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_character][5], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_character][5], true);
    return 1;

}

ShowPlayerFooter(playerid, string[], time = 3000, sound = 0) {
    if(PlayerData[playerid][pShowFooter]) {
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_footer]);
        KillTimer(PlayerData[playerid][pFooterTimer]);
    }
    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_footer], string);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_footer]);
    PlayerData[playerid][pShowFooter] = true;
    PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);

    if(sound) PlayerPlaySoundEx(playerid, 1085, 1);
    return 1;
}

ResetStatistics(playerid)
{
    static const empty_player[playerData];
    PlayerData[playerid] = empty_player;

    static const empty_tempplayer[playerTemp];
    PlayerTemp[playerid] = empty_tempplayer;

    //dummy reset/dummy array
    static const empty_account[ucpData];
    AccountData[playerid] = empty_account;

    AccountData[playerid][pUsername][0] = EOS;

    for (new i; i < MAX_CHARACTERS; i ++) {
        CharacterList[playerid][i][0] = EOS;
    }

    DestroyPlayerTextDraws(playerid);
    DestroyLaptopDraw(playerid);
    DestroyMDCDraw(playerid);
    DestroyATMDraw(playerid);
    DestroyFishingDraw(playerid);
    // Speedometer_Destroy(playerid);

    if(IsValidDynamic3DTextLabel(PlayerData[playerid][pAdoTag]))
        DestroyDynamic3DTextLabel(PlayerData[playerid][pAdoTag]);

    PlayerData[playerid][pAdoTag] = Text3D:INVALID_STREAMER_ID;
    PlayerData[playerid][pAdoActive] = false;

    for (new i = 0; i != MAX_INVENTORY; i ++) if(InventoryData[playerid][i][invExists]){
        InventoryData[playerid][i][invExists] = false;
        InventoryData[playerid][i][invModel] = 0;
        InventoryData[playerid][i][invQuantity] = 0;
    }
    for (new i = 0; i < 10; i ++) {
        format(misscallList[playerid][i], 128, "null");
        format(latestInbox[playerid][i], 128, "null");
    }
    for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) {
        ListedTickets[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_HOUSE_FURNITURE; i ++) {
        ListedFurniture[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_OWNABLE_HOUSES; i ++) {
        ListedHouse[playerid][i] = -1;
    }
    for (new i = 0; i < MAX_LISTED_ITEMS; i ++) {
        NearestItems[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_CONTACTS; i ++) if(ContactData[playerid][i][contactExists]) {
        ContactData[playerid][i][contactExists] = false;
        ContactData[playerid][i][contactID] = 0;
        ContactData[playerid][i][contactNumber] = 0;
        ListedContacts[playerid][i] = -1;
    }
    
	for (new i = 0; i != PLAYER_MAX_VEHICLE_SHARE_KEYS; i ++)
	{ 
		if(VehicleKeyData[playerid][i][vehicleKeyExists]) {
			VehicleKeyData[playerid][i][vehicleID] = INVALID_VEHICLE_KEY_ID;
			VehicleKeyData[playerid][i][playerID] = INVALID_VEHICLE_KEY_ID;
			VehicleKeyData[playerid][i][vehicleKeyExists] = 0;
		}	
	}

    for (new i = 0; i != PLAYER_MAX_HOUSE_SHARE_KEYS; i ++)
	{ 
		if(HouseKeyData[playerid][i][houseKeyExists]) {
			HouseKeyData[playerid][i][houseID] = INVALID_HOUSE_KEY_ID;
			HouseKeyData[playerid][i][playerID] = INVALID_HOUSE_KEY_ID;
            HouseKeyData[playerid][i][houseOwnerID] = INVALID_HOUSE_KEY_ID;
			HouseKeyData[playerid][i][houseKeyExists] = 0;
		}	
	}

    for (new i = 0; i != MAX_ACC; i ++) if(AccData[playerid][i][accExists]) {
        AccData[playerid][i][accExists] = false;
        AccData[playerid][i][accID] = 0;
        AccData[playerid][i][accModel] = 0;
        AccData[playerid][i][accBone] = 0;
        AccData[playerid][i][accShow] = 0;

        AccData[playerid][i][accColor1][0] = AccData[playerid][i][accColor1][1] = AccData[playerid][i][accColor1][2] = 0;
        AccData[playerid][i][accColor2][0] = AccData[playerid][i][accColor2][1] = AccData[playerid][i][accColor2][2] = 0;

        AccData[playerid][i][accOffset][0] = AccData[playerid][i][accOffset][1] = AccData[playerid][i][accOffset][2] = 0.0;
        AccData[playerid][i][accRot][0] = AccData[playerid][i][accRot][1] = AccData[playerid][i][accRot][2] = 0.0;
        AccData[playerid][i][accScale][0] = AccData[playerid][i][accScale][1] = AccData[playerid][i][accScale][2] = 0.0;
    }
    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if(LocationData[playerid][i][locationExists]) {
        LocationData[playerid][i][locationExists] = false;
        LocationData[playerid][i][locationID] = 0;
    }
    for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) if(TicketData[playerid][i][ticketExists]) {
        TicketData[playerid][i][ticketID] = 0;
        TicketData[playerid][i][ticketExists] = false;
        TicketData[playerid][i][ticketFee] = 0;
    }
    for (new i = 0; i != MAX_FISH; i++) {
        format(FishName[playerid][i], 32, "none");
        FishWeight[playerid][i] = 0.0;
    }

    for (new i = 0; i != MAX_FREQ; i++)
    {
        PlayerData[playerid][pFreq][i] = 0;
    }

    Damage_Reset(playerid, 1);
    PlayerData[playerid][pID] = -1;
    PlayerData[playerid][pGender] = 1;
    PlayerData[playerid][pSkin] = 98;
    PlayerData[playerid][pHospital] = -1;
    PlayerData[playerid][pHospitalInt] = -1;

    PlayerData[playerid][pBizJobDuty] = -1;
    PlayerData[playerid][pBizDutyHour] = 0;

    PlayerData[playerid][pMoney] = 5000;
    PlayerData[playerid][pBankMoney] = 5000;
    PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;
    PlayerData[playerid][pJailReason] = '\0';
    PlayerData[playerid][pJailedBy] = '\0';
    PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;

    PlayerData[playerid][pHouse] = -1;
    PlayerData[playerid][pFurnStore] = -1;
    PlayerData[playerid][pBusiness] = -1;
    PlayerData[playerid][pEntrance] = -1;
    PlayerData[playerid][pApartment] = -1;
    PlayerData[playerid][pApartmentBuilding] = -1;

    PlayerData[playerid][pEditTextObject] = -1;
    PlayerData[playerid][pEditAtm] = -1;
    PlayerData[playerid][pEditFurniture] = -1;
    PlayerData[playerid][pEditLumber] = -1;
    PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;

    PlayerData[playerid][pVendingSeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;

    PlayerData[playerid][pLastActor] = INVALID_DYNAMIC_ACTOR_ID;
    PlayerData[playerid][pLastBiz] = -1;
    PlayerData[playerid][pHudStyle] = 0;

    PlayerData[playerid][pWorkshopOffered] = -1;
    PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pCarOffered] = -1;
    PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pFactionOffered] = -1;
    PlayerData[playerid][pHunger] = 100;
    PlayerData[playerid][pDead] = 100;
    PlayerData[playerid][pEnergy] = 100;
    PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
    PlayerData[playerid][pCarryCrate] = -1;
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionID] = -1;
    PlayerData[playerid][pFactionDuty] = 0;
    PlayerData[playerid][pFactionHour] = 0;
    PlayerData[playerid][pFactionSalaryCollected] = 0;
    PlayerData[playerid][pFactionSalaryResettedAt] = 0;
    PlayerData[playerid][pMineSalary] = 0;
    PlayerData[playerid][pFactionEdit] = -1;
    PlayerData[playerid][pSelectedSlot] = -1;
    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pNewsGuest] = INVALID_PLAYER_ID;
    PlayerData[playerid][pTransfer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pBackpackLoot] = -1;
//    PlayerData[playerid][pRangeBooth] = -1;
    PlayerData[playerid][pTakeItems] = INVALID_PLAYER_ID;
    PlayerData[playerid][pDrinkBar] = INVALID_PLAYER_BAR_ID;
    PlayerData[playerid][pUnloading] = -1;
    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pShipment] = -1;
    PlayerData[playerid][pSorting] = -1;
    PlayerData[playerid][pHUD] = 1;
    PlayerData[playerid][pMaskID] = random(90000) + 10000;
    PlayerData[playerid][pCapacity] = 18;
    PlayerData[playerid][pPickCar] = -1;
    PlayerData[playerid][pLastVehicle] = 0;
    PlayerData[playerid][pLastCar] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pEditVehicleObject] = -1;
    PlayerData[playerid][pEditVehicleObjectSlot] = -1;
    PlayerData[playerid][pDelivery] = -1;
    PlayerData[playerid][pPlateID] = INVALID_PLAYER_ID;
    PlayerData[playerid][pPlate] = EOS;

    PlayerData[playerid][pApartmentOffered] = -1;
    PlayerData[playerid][pVendingOffered] = -1;
    PlayerData[playerid][pHouseOffered] = -1;
    PlayerData[playerid][pBusinessOffered] = -1;

    PlayerData[playerid][pBodySeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pBodyOffered] = -1;
    PlayerData[playerid][pWorkshopSeller] = INVALID_PLAYER_ID;

    PlayerData[playerid][pNameTag] = Text3D:INVALID_STREAMER_ID;
    PlayerData[playerid][pTabOut] = Text3D:INVALID_STREAMER_ID;
    PlayerData[playerid][pInjuredTag] = Text3D:INVALID_STREAMER_ID;
    PlayerData[playerid][pTutorialObjectGate] = INVALID_STREAMER_ID;

    PlayerData[playerid][pCuttingBar] = INVALID_PLAYER_BAR_ID;
    PlayerData[playerid][pAcceptInspect] = INVALID_PLAYER_ID;
    PlayerData[playerid][pOnDrag] = INVALID_PLAYER_ID;
    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
    PlayerData[playerid][pAcceptDrag] = INVALID_PLAYER_ID;
    PlayerData[playerid][pPhoneBattery] = 100;
    PlayerData[playerid][pExp] = 0;
    PlayerData[playerid][pClothesType] = 0;
    PlayerData[playerid][pKiller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pDisableAPM] = true;
    PlayerData[playerid][pDisableLDO] = true;
    PlayerData[playerid][pDisableRADIO] = true;
    // PlayerData[playerid][pFactionStock] = 0;
    PlayerData[playerid][pBeanBullets] = 0;

    selectCategory[playerid] = selectIndex[playerid] = -1;

    format(PlayerData[playerid][pAlias], 24, "Player");
    format(PlayerData[playerid][pAccent], 40, "American");

    Seatbelt{playerid} = 0;
    Helmet[playerid] = 0;
    LuckyMine[playerid] = 0;
    //AFK Timer
	// AFKMath[playerid] = 0;
	// Angka1[playerid] = 0;
	// Angka2[playerid] = 0;
	// Hasil[playerid] = 0;
    ChargePhone[playerid] = 0;

    //Transfer Pulsa
    TransferAmount[playerid] = 0;
    kuranginCredits[playerid] = 0;
    makeCall[playerid] = false;
    BatteryCounter[playerid] = 0;
    PlayerSmoking[playerid] = 0;
    PlayerDeath[playerid] = 0;

    //Hauler
    CarryWoods[playerid] = 0;
    CarryComponent[playerid] = 0;

    //Ads Holder
    format(AdsHolder[playerid], 120, "NULL");
    PhoneHolder[playerid] = 0;

    //Fishing
    BaitEaten[playerid] = false;
    FishClicked[playerid] = 0;
    FishClickedReduce[playerid] = 0;
    MancingTimer[playerid] = Timer:0;
    // AFKTimerHolder[playerid] = Timer:0;

    //Offer
    OfferID[playerid] = INVALID_PLAYER_ID;
    OfferPrice[playerid] = 0;
    RecentAnim[playerid] = false;
    FishListItem[playerid] = -1;
    BleedingTimer[playerid] = 0;
    BleedingNotification[playerid] = 0;

    //SWAT ROPE
    playerUseRope[playerid] = 0;
    playerVehicleRope[playerid] = 0;

    //Backup CP
    BackupCheckPoint[playerid] = 0;
    ShareLocationCP[playerid] = 0;

    //Event Variable
	eventJoin[playerid] = 0;
	eventTeams[playerid] = 0;
	eventScore_DM[playerid] = 0;
	Player_ToggleEventAntiCheat(playerid, true);
    ResetWarnings(playerid);
    printf("Resetting player statistics for ID %d", playerid);
    return 1;
}
InjuredTag(playerid, bool:injured = false, bool:dead = false, bool:spawned = false)
{
    if(injured)
    {
        if(!IsValidDynamic3DTextLabel(PlayerData[playerid][pInjuredTag]))
        {
            PlayerData[playerid][pInjuredTag] = CreateDynamic3DTextLabel("(( THIS PLAYER IS INJURED ))", COLOR_LIGHTRED, 0.0, 0.0, 0.2, 8.0, playerid, INVALID_VEHICLE_ID, 1);
        }
    }

    if(dead)
    {
        if(PlayerData[playerid][pInjured])
        {
            if(IsValidDynamic3DTextLabel(PlayerData[playerid][pInjuredTag]))
            {
                UpdateDynamic3DTextLabelText(PlayerData[playerid][pInjuredTag], COLOR_LIGHTRED, "(( THIS PLAYER IS DEAD ))");
                SendServerMessage(playerid, "You're no longer injured, your character now is"RED" Dead");
            }      
        }        
    }

    if(spawned)
    {
        if(IsValidDynamic3DTextLabel(PlayerData[playerid][pInjuredTag]))
            DestroyDynamic3DTextLabel(PlayerData[playerid][pInjuredTag]);

        PlayerData[playerid][pInjuredTag] = Text3D:INVALID_STREAMER_ID;        
    }
    return 1;
}
ResetNameTag(playerid, bool:mask = false, bool:logout = false)
{
    new string[255];
    if(logout)
    {
        if(IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
            DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);

        PlayerData[playerid][pMaskOn] = false;
        PlayerData[playerid][pNameTag] = Text3D:INVALID_STREAMER_ID;
    }
    if(mask)
    {
        if(IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
        {
            format(string, sizeof(string), "%s (%d)", ReturnName(playerid), playerid);
            UpdateDynamic3DTextLabelText(PlayerData[playerid][pNameTag], COLOR_WHITE, string);
        }
        PlayerData[playerid][pMaskOn] = false;
    }
    return 1;
}

ResetWarnings(playerid) {
    PlayerData[playerid][pWarnings] = 0;
    return 1;
}
GetFactionNumber(number)
{
    for(new i = 0; i < MAX_FACTIONS; i++)
    {
        if(FactionData[i][factionExists] && FactionData[i][factionType] == FACTION_LEGAL && FactionData[i][factionNumber] == number)
            return i;
    }
    return -1;
}

GetNumberOwner(number)
{
    foreach (new i : Player) if(PlayerData[i][pPhone] == number && Inventory_HasItem(i, "Cellphone")) {
        return i;
    }
    return INVALID_PLAYER_ID;
}

IsPlayerInsideTaxi(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if(GetVehicleModel(vehicleid) == 420 || GetVehicleModel(vehicleid) == 438)
    {
        foreach (new i : Player)
        {
            if((i != playerid) && (PlayerData[i][pJob] == JOB_TAXI && PlayerData[i][pJobDuty] && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid)
                return 1;
        }
    }
    return 0;
}

IsNumeric(const str[])
{
    for (new i = 0, l = strlen(str); i != l; i ++)
    {
        if(i == 0 && str[0] == '-')
            continue;

        else if(str[i] < '0' || str[i] > '9')
            return 0;
    }
    return 1;
}

stock GetBodyPartName(bodypart)
{
    new part[11];
    switch(bodypart)
    {
        case BODY_PART_TORSO: part = "TORSO";
        case BODY_PART_GROIN: part = "GROIN";
        case BODY_PART_LEFT_ARM: part = "LEFT ARM";
        case BODY_PART_RIGHT_ARM: part = "RIGHT ARM";
        case BODY_PART_LEFT_LEG: part = "LEFT LEG";
        case BODY_PART_RIGHT_LEG: part = "RIGHT LEG";
        case BODY_PART_HEAD: part = "HEAD";
        default: part = "NONE";
    }
    return part;
}

ShowWeaponList(playerid)
{
    new string[666], w_name[24];
    for(new i = 1; i <= 46; i++)
    {
        GetWeaponName(i, w_name, sizeof(w_name));
        format(string, sizeof(string), "%s%d - %s\n", string, i, w_name);
    }
    Dialog_Show(playerid, BM_Weaplist, DIALOG_STYLE_LIST, "Add Weapon", string, "Next", "Cancel");
    return 1;
}

ShowCategories(playerid, mode = 0)
{
    new name[24], Cache:check;

    check = mysql_query(g_iHandle, "SELECT `Name` FROM `category`");

    if(cache_num_rows())
    {
        new string[512];

        for(new i; i != cache_num_rows(); i++)
        {
            cache_get_field_content(i, "Name", name);
            format(string, sizeof(string), "%s%s\n", string, name);
        }

        switch(mode)
        {
            case 1: Dialog_Show(playerid, BM_RemoveCategory, DIALOG_STYLE_LIST, "Remove a Category", string, "Remove", "Close");
            case 2: Dialog_Show(playerid, BM_RenameCategory, DIALOG_STYLE_LIST, "Rename a Category", string, "Rename", "Close");
            case 3: Dialog_Show(playerid, BM_ChooseCategory, DIALOG_STYLE_LIST, "Chosse a Category", string, "Add Weapon", "Back");
            case 4: Dialog_Show(playerid, BM_RemoveWeapon, DIALOG_STYLE_LIST, "Remove a Weapon", string, "Chosse", "Close");
            default: Dialog_Show(playerid, BM_WeaponMenu, DIALOG_STYLE_LIST, "Weapon Menu", string, "Chosse", "Close");
        }
    }
    cache_delete(check);
    return 1;
}

Category_GetWeaponData(catid, index, &weapon, &ammo, &price, &authority)
{
    new Cache:check, query[255];

    format(query, sizeof(query), "SELECT WeaponID, Ammo, Price, Authority FROM `weapons` WHERE Category='%d' ORDER BY WeaponID ASC LIMIT %d, 1", catid, index);
    check = mysql_query(g_iHandle, query);

    if(!cache_num_rows()) return 0;

    weapon = cache_get_field_int(0, "WeaponID");
    ammo = cache_get_field_int(0, "Ammo");
    price = cache_get_field_int(0, "Price");
    authority = cache_get_field_int(0, "Authority");

    cache_delete(check);
    return 1;
}

Return_CategoryID(name[])
{
    new Cache:check, id = -1;

    check = mysql_query(g_iHandle, sprintf("SELECT `ID` FROM `category` WHERE `Name`='%s'", name));

    if(!cache_num_rows()) return -1;
    else id = cache_get_field_int(0, "ID");

    cache_delete(check);
    return id;
}

ShowWeapons(playerid, removing = 0, admin = 0)
{
    new Cache:check;

    if(!admin) check = mysql_query(g_iHandle, sprintf("SELECT * FROM `weapons` WHERE `Category`='%d' AND Enable = 0 AND Day = DAYOFWEEK(CURDATE()) ORDER BY `WeaponID` ASC", selectCategory[playerid]));
    else check = mysql_query(g_iHandle, sprintf("SELECT * FROM `weapons` WHERE `Category`='%d' ORDER BY `WeaponID` ASC", selectCategory[playerid]));

    if(!cache_num_rows()) return SendErrorMessage(playerid, "There no one weapon in this category.");

    new string[400], w_name[24], type[30];

    format(string, sizeof(string), "Weapon\tAmmo\tPrice\tType-Day-Status\n");
    for(new i = 0; i != cache_num_rows(); i++)
    {
        switch(cache_get_field_int(i, "Authority"))
        {
            case 0: type = "Normal Player";
            case 1: type = "Official Family";
            case 2: type = "Verified Member";
        }
        GetWeaponName(cache_get_field_int(i, "WeaponID"), w_name, 24);
        format(string, sizeof(string), "%s%s\t%d\t{2ECC71}%s\t"WHITE"%s-%d-%d\n", string, w_name, cache_get_field_int(i, "Ammo"), FormatNumber(cache_get_field_int(i, "Price")), type, cache_get_field_int(i, "Day"), cache_get_field_int(i, "Enable"));
    }
    if(removing) Dialog_Show(playerid, BM_RemoveFinal, DIALOG_STYLE_TABLIST_HEADERS, "Select Weapon", string, "Select", "Close");
    else Dialog_Show(playerid, BM_BuyWeapon, DIALOG_STYLE_TABLIST_HEADERS, "Select Weapon", string, "Select", "Close");

    cache_delete(check);
    return 1;
}

ReturnWeaponName(weaponid)
{
    new weapon[22];
    switch(weaponid)
    {
        case 0: weapon = "Fist";
        case 18: weapon = "Molotov Cocktail";
        case 44: weapon = "Night Vision Goggles";
        case 45: weapon = "Thermal Goggles";
        case 54: weapon = "Fall";
        default: GetWeaponName(weaponid, weapon, sizeof(weapon));
    }
    return weapon;
}

GetVehicleNameByModel(model)
{
    new
        name[32] = "None";

    if(model < 400 || model > 611)
        return name;

    format(name, sizeof(name), g_arrVehicleNames[model - 400]);
    return name;
}

GetVehicleNameByVehicle(vehicleid)
{
    new
        model = GetVehicleModel(vehicleid),
        name[32] = "None";

    if(model < 400 || model > 611)
        return name;

    format(name, sizeof(name), g_arrVehicleNames[model - 400]);
    return name;
}

GetVehicleModelByName(const name[])
{
    if(IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
        return strval(name);

    for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
    {
        if(strfind(g_arrVehicleNames[i], name, true) != -1)
        {
            return i + 400;
        }
    }
    return 0;
}

IsWindowedVehicle(vehicleid)
{
    static const g_aWindowStatus[] = {
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
        1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
        1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
    };
    new modelid = GetVehicleModel(vehicleid);

    if(modelid < 400 || modelid > 611)
        return 0;

    return (g_aWindowStatus[modelid - 400]);
}

IsNewsVehicle(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 488, 582: return 1;
    }
    return 0;
}
IsATruck(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 456, 455: return 1;
    }
    return 0;
}
IsABigTruck(vehicleid)
{
    switch (GetVehicleModel(vehicleid))
    {
        case 403, 514, 515: return 1;
    }
    return 0;
}

IsSportCar(vehicleid)
{
	new Sport[] = { 502, 409, 587, 602, 589, 555, 503, 504, 494, 541, 411, 477, 562, 506, 451, 565, 429, 560, 603, 559, 402, 561, 558, 415, 480 };
	for(new i = 0; i < sizeof(Sport); i++) {
	    if(GetVehicleModel(vehicleid) == Sport[i]) return 1;
	}
	return 0;
}

IsNormalCar(vehicleid)
{
	new Normal[] = { 605, 604, 418, 600, 596, 597, 598, 583, 585, 568, 580, 545, 546, 547, 549, 550, 551, 552, 554, 533, 540, 
    542, 543, 531, 529, 526, 527, 516, 517, 518, 507, 500, 496, 536, 534, 567, 535, 412, 566, 575, 576, 445, 419, 401, 410,
    426, 436, 400, 421, 404, 413, 416, 420, 422, 424, 427, 434, 438, 439, 440, 442, 457, 459, 466, 467, 474, 475, 478, 
    479, 480, 482, 483, 492, 405 };
    
	for(new i = 0; i < sizeof(Normal); i++) {
	    if(GetVehicleModel(vehicleid) == Normal[i]) return 1;
	}
	return 0;
}
IsNormalTruck(vehicleid)
{
	new Normal[] = { 428, 609, 601, 599, 588, 582, 579, 528, 525, 508, 505, 414, 423, 470, 489, 490, 491, 495, 498, 499 };
	for(new i = 0; i < sizeof(Normal); i++) {
	    if(GetVehicleModel(vehicleid) == Normal[i]) return 1;
	}
	return 0;
}

IsBigTruck(vehicleid)
{
	new Normal[] = { 432, 406, 578, 573, 557, 556, 532, 544, 524, 514, 515, 403, 407, 408, 431, 433, 437, 443, 444, 456, 486 };
	for(new i = 0; i < sizeof(Normal); i++) {
	    if(GetVehicleModel(vehicleid) == Normal[i]) return 1;
	}
	return 0;
}
IsSportBike(vehicleid)
{
	new Sport[] = { 581, 461, 521, 463, 522, 523 };
	for(new i = 0; i < sizeof(Sport); i++) {
	    if(GetVehicleModel(vehicleid) == Sport[i]) return 1;
	}
	return 0;
}
IsACruiser(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 523, 427, 490, 528, 596..599, 601: return 1;
    }
    return 0;
}
IsSportBikeModel(modelid)
{
	new Sport[] = { 581, 461, 521, 463, 522, 523 };
	for(new i = 0; i < sizeof(Sport); i++) {
	    if(modelid == Sport[i]) return 1;
	}
	return 0;
}
IsNewsVehicleModel(modelid)
{
    switch (modelid) {
        case 488, 582: return 1;
    }
    return 0;
}
IsACruiserModel(modelid)
{
    switch (modelid) {
        case 523, 427, 490, 528, 596..599, 601: return 1;
    }
    return 0;
}

IsSportCarModel(modelid)
{
	new Sport[] = { 502, 409, 587, 602, 589, 555, 503, 504, 494, 541, 411, 477, 562, 506, 451, 565, 429, 560, 603, 559, 402, 561, 558, 415, 480 };
	for(new i = 0; i < sizeof(Sport); i++) {
	    if(modelid == Sport[i]) return 1;
	}
	return 0;
}

IsNormalCarModel(modelid)
{
	new Normal[] = { 605, 604, 418, 600, 596, 597, 598, 583, 585, 568, 580, 545, 546, 547, 549, 550, 551, 552, 554, 533, 540, 
    542, 543, 529, 526, 527, 516, 517, 518, 507, 500, 496, 536, 534, 567, 535, 412, 566, 575, 576, 445, 419, 401, 410,
    426, 436, 400, 421, 404, 413, 416, 424, 427, 434, 438, 439, 440, 442, 457, 459, 466, 467, 474, 475, 478, 
    479, 480, 482, 483, 492, 405 };
    
	for(new i = 0; i < sizeof(Normal); i++) {
	    if(modelid == Normal[i]) return 1;
	}
	return 0;
}
IsABikeModel(modelid)
{
    switch (modelid) {
        case 448, 461..463, 468, 521..523, 581, 586, 481, 509, 510: return 1;
    }
    return 0;
}

IsABicycleModel(modelid)
{
    switch (modelid) {
        case 481, 509, 510: return 1;
    }
    return 0;
}
IsVehicleHasTireNotTruck(modelid)
{
    return
        IsABikeModel(modelid) ||
        IsABicycleModel(modelid) ||
        IsSportBikeModel(modelid) ||
        IsNewsVehicleModel(modelid) ||
        IsSportCarModel(modelid) ||
        IsNormalCarModel(modelid) ||
        IsACruiserModel(modelid)
    ;
}
IsDoorVehicle(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
            return 1;

        case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
            return 1;

        case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
            return 1;
    }
    return 0;
}


IsSpeedoVehicle(vehicleid)
{
    if(!IsEngineVehicle(vehicleid))
        return 0;

    switch(GetVehicleModel(vehicleid)) {
        case 509..510, 481: return 0;
    }

    return 1;
}

IsLoadableVehicle(vehicleid)
{
    new modelid = GetVehicleModel(vehicleid);

    if(GetVehicleTrailer(vehicleid))
        modelid = GetVehicleModel(GetVehicleTrailer(vehicleid));

    switch (modelid) {
        case 609, 403, 414, 456, 498, 499, 514, 515, 435, 591: return 1;
    }
    return 0;
}

GetMaxCrates(vehicleid)
{
    new crates;

    switch (GetVehicleModel(vehicleid)) {
        case 498, 609: crates = 10;
        case 414: crates = 8;
        case 456, 499: crates = 6;
        case 435, 591: crates = 15;
    }
    return crates;
}

IsCrateInUse(crateid)
{
    if(CrateData[crateid][crateVehicle] != INVALID_VEHICLE_ID && IsValidVehicle(CrateData[crateid][crateVehicle])) {
        return 1;
    }
    foreach (new i : Player) if(PlayerData[i][pCarryCrate] == crateid && GetPlayerSpecialAction(i) == SPECIAL_ACTION_CARRY) {
        return 1;
    }
    return 0;
}

GetVehicleCrates(vehicleid)
{
    if(!IsValidVehicle(vehicleid) || !IsLoadableVehicle(vehicleid))
        return 0;

    new crates;

    for (new i = 0; i != MAX_CRATES; i ++) if(CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
        crates++;
    }
    return crates;
}

IsABoat(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1; //452, 453, 454, 472, 473, 484, 493, 595, 430, 446
    }
    return 0;
}

IsABike(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 448, 461..463, 468, 521..523, 581, 586: return 1;
    }
    return 0;
}

IsABicycle(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 481, 509, 510: return 1;
    }
    return 0;
}

IsAPlane(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
    }
    return 0;
}

IsAHelicopter(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
    }
    return 0;
}

IsVehicleDrivingBackwards(vehicleid) // By Joker
{
    new
        Float:Float[3]
    ;
    if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
    {
        GetVehicleZAngle(vehicleid, Float[0]);
        if(Float[0] < 90)
        {
            if(Float[1] > 0 && Float[2] < 0) return true;
        }
        else if(Float[0] < 180)
        {
            if(Float[1] > 0 && Float[2] > 0) return true;
        }
        else if(Float[0] < 270)
        {
            if(Float[1] < 0 && Float[2] > 0) return true;
        }
        else if(Float[1] < 0 && Float[2] < 0) return true;
    }
    return false;
}

IsEngineVehicle(vehicleid)
{
    static const g_aEngineStatus[] = {
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
    };
    new modelid = GetVehicleModel(vehicleid);

    if(modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

IsFourWheelVehicle(vehicleid)
{
    return
        !IsABoat(vehicleid) &&
        !IsABike(vehicleid) &&
        !IsABicycle(vehicleid) &&
        !IsAPlane(vehicleid) &&
        !IsAHelicopter(vehicleid) &&
        !IsSportBike(vehicleid)
    ;
}

IsVehicleHasTire(vehicleid)
{
    return
        IsABike(vehicleid) ||
        IsSportBike(vehicleid) ||
        IsNewsVehicle(vehicleid) ||
        IsATruck(vehicleid) ||
        IsSportCar(vehicleid) ||
        IsNormalCar(vehicleid) ||
        IsNormalTruck(vehicleid) ||
        IsBigTruck(vehicleid) ||
        IsACruiser(vehicleid) ||
        IsDoorVehicle(vehicleid)
    ;
}

stock GetHouseByID(sqlid)
{
    for (new i = 0; i != MAX_HOUSES; i ++) if(HouseData[i][houseExists] && HouseData[i][houseID] == sqlid)
        return i;

    return -1;
}

GetElapsedTime(time, &hours, &minutes, &seconds)
{
    hours = 0;
    minutes = 0;
    seconds = 0;

    if(time >= 3600) //jika lebih dari 1 jam (3600 = 1 jam)
    {
        hours = (time / 3600); //pembagian waktu per jam di bagi time/3600
        time -= (hours * 3600); //pengurangan di time , ex 2 jam terpakai maka di kalikan 2 * 3600 = time-7200
    }
    while (time >= 60) //hitungan menit.
    {
        minutes++; //hitungan menit bertambah selama time masih bervalue 60.
        time -= 60; // waktu berkurang per menit hitungan 60 sec dari time.
    }
    return (seconds = time);
}

GetDuration(time)
{
    new
        str[32];

    if(time < 0 || time == gettime()) {
        format(str, sizeof(str), "Never");
        return str;
    }
    else if(time < 60)
        format(str, sizeof(str), "%d seconds", time);

    else if(time >= 0 && time < 60)
        format(str, sizeof(str), "%d seconds", time);

    else if(time >= 60 && time < 3600)
        format(str, sizeof(str), (time >= 120) ? ("%d minutes") : ("%d minute"), time / 60);

    else if(time >= 3600 && time < 86400)
        format(str, sizeof(str), (time >= 7200) ? ("%d hours") : ("%d hour"), time / 3600);

    else if(time >= 86400 && time < 2592000)
        format(str, sizeof(str), (time >= 172800) ? ("%d days") : ("%d day"), time / 86400);

    else if(time >= 2592000 && time < 31536000)
        format(str, sizeof(str), (time >= 5184000) ? ("%d months") : ("%d month"), time / 2592000);

    else if(time >= 31536000)
        format(str, sizeof(str), (time >= 63072000) ? ("%d years") : ("%d year"), time / 31536000);

    strcat(str, " ago");

    return str;
}

RandomEx(min, max) //Y_Less
    return random(max - min) + min;

RandomLetter()
    return 65 + random(25);

/*Float:RandomFloat(Float:max, Float:m2 = 0.0, dp = 3)
{
    new Float:mn = m2;
    if(m2 > max) {
        mn = max,
        max = m2;
    }
    m2 = floatpower(10.0, dp);

    return floatadd(floatdiv(float(random(floatround(floatmul(floatsub(max, mn), m2)))), m2), mn);
}*/

RGBAToARGB(rgba)
    return rgba >>> 8 | rgba << 24;

GetRGB(color, &r, &g, &b)
{
    new col[3 char];
    col[0] = color;
    r = col{0};
    g = col{1};
    b = col{2};
}

GetRGBColor(playerid, id, type = 0)
{
    if(!type) return 0;
    else if(type == 1) return AccData[playerid][id][accColor1][0] << 24 | AccData[playerid][id][accColor1][0] << 16 | AccData[playerid][id][accColor1][0] << 8 | 0xFF;
    else if(type == 2) return AccData[playerid][id][accColor2][0] << 24 | AccData[playerid][id][accColor2][0] << 16 | AccData[playerid][id][accColor2][0] << 8 | 0xFF;
    else return 0;
}

Aksesoris_Attach(playerid, index)
{
    SetPlayerAttachedObject(playerid,index, AccData[playerid][index][accModel], AccData[playerid][index][accBone],
        AccData[playerid][index][accOffset][0], AccData[playerid][index][accOffset][1], AccData[playerid][index][accOffset][2],
        AccData[playerid][index][accRot][0], AccData[playerid][index][accRot][1], AccData[playerid][index][accRot][2],
        AccData[playerid][index][accScale][0], AccData[playerid][index][accScale][1], AccData[playerid][index][accScale][2], RGBAToARGB(GetRGBColor(playerid, index, 1)), RGBAToARGB(GetRGBColor(playerid, index, 2)));

    AccData[playerid][index][accShow] = 1;

    Aksesoris_Save(playerid, index);
    return 1;
}

Aksesoris_Save(playerid, id)
{
    new query[1024];

    format(query,sizeof(query),"UPDATE `aksesoris` SET `Model`='%d',`Bone`='%d',`Color1`='%03d|%03d|%03d',`Color2`='%d|%d|%d',`Offset`='%.04f|%.04f|%.04f',`Rot`='%.04f|%.04f|%.04f'",
        AccData[playerid][id][accModel],
        AccData[playerid][id][accBone],
        AccData[playerid][id][accColor1][0],
        AccData[playerid][id][accColor1][1],
        AccData[playerid][id][accColor1][2],
        AccData[playerid][id][accColor2][0],
        AccData[playerid][id][accColor2][1],
        AccData[playerid][id][accColor2][2],
        AccData[playerid][id][accOffset][0],
        AccData[playerid][id][accOffset][1],
        AccData[playerid][id][accOffset][2],
        AccData[playerid][id][accRot][0],
        AccData[playerid][id][accRot][1],
        AccData[playerid][id][accRot][2]
    );

    format(query,sizeof(query),"%s,`Scale`='%.04f|%.04f|%.04f', `Type`='%s', `Show`='%d' WHERE `ID` = '%d'",
        query,
        AccData[playerid][id][accScale][0],
        AccData[playerid][id][accScale][1],
        AccData[playerid][id][accScale][2],
        AccData[playerid][id][accName],
        AccData[playerid][id][accShow],
        AccData[playerid][id][accID]
    );

    return mysql_tquery(g_iHandle, query);
}

Aksesoris_GetCount(playerid)
{
    new count;
    for (new i = 0; i != MAX_ACC; i++) if(AccData[playerid][i][accExists]) {
        count++;
    }
    return count;
}

Aksesoris_Create(playerid, model, name[])
{
    new query[128];

    for (new i = 0; i != MAX_ACC; i++)
    { 
        if(!AccData[playerid][i][accExists]) 
        {
            AccData[playerid][i][accExists] = 1;

            format(AccData[playerid][i][accName], 32, name);

            AccData[playerid][i][accModel] = model;

            AccData[playerid][i][accBone] = 1;

            PlayerData[playerid][pAksesoris] = i;
            AccData[playerid][i][accColor1][0] = AccData[playerid][i][accColor1][1] = AccData[playerid][i][accColor1][2] = 255;
            AccData[playerid][i][accColor2][0] = AccData[playerid][i][accColor2][1] = AccData[playerid][i][accColor2][2] = 255;

            AccData[playerid][i][accScale][0] = AccData[playerid][i][accScale][1] = AccData[playerid][i][accScale][2] = 1.0;

            format(query,sizeof(query),"INSERT INTO `aksesoris` (`accID`) VALUES (%d)", PlayerData[playerid][pID]);
            mysql_tquery(g_iHandle, query, "OnAksesorisCreated", "dd", playerid, i);

            return i;
        }
    }
    return 1;
}
/*==============================================================================
    Function List
==============================================================================*/

Function:WeaponNoReloadHack(playerid, weaponid, reloadtime)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        SendTesterMessage(X11_TOMATO_1, "AdmWarn: %s possible anti weapon reload hack for %s (Reload Diff: %d).", ReturnName(playerid, 0), ReturnWeaponName(weaponid), reloadtime);

        if (CheckAdmin(playerid, 6))
        {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s have been kicked for: Anti Reload Weapon (%s).", ReturnName2(playerid), ReturnWeaponName(weaponid));
            KickEx(playerid);
        }
    }
    return 1;
}

Function:OnWeaponHack(playerid, weaponid, ammo)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible spawning weapon hack %s with %d ammo.", ReturnName(playerid, 0), playerid, ReturnWeaponName(weaponid), ammo);

        if (CheckAdmin(playerid, 6))
        {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s have been kicked for: Spawn Weapon Hack (%s).", ReturnName2(playerid), ReturnWeaponName(weaponid));
            KickEx(playerid);
        }
    }
    return 1;
}

Function:VehicleHealthHack(playerid, Float:current, Float:hack, vehicleid)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible vehicle health hack id %d (%s) (%.1f to %.1f).", ReturnName(playerid, 0), playerid, vehicleid, GetVehicleNameByVehicle(vehicleid), current, hack);

        if (CheckAdmin(playerid, 6))
        {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s have been kicked for: Vehicle Health Hack.", ReturnName2(playerid));
            KickEx(playerid);
        }
    }
    return 1;
}

/*Function:OnHackHealthArmour(type, playerid, health, hack)
{
    if(SQL_IsLogged(playerid))
    {
        switch(type) {
            case 1: SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible health hack from %d to %d (diff: %d), ", ReturnName(playerid, 0), playerid, health, hack, (hack-health));
            case 2: SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible armor hack from %d to %d (diff: %d), ", ReturnName(playerid, 0), playerid, health, hack, (hack-health));
        }

        PlayerData[playerid][pCheatWarn] ++;

        if(PlayerData[playerid][pCheatWarn] > 2 && AccountData[playerid][pAdmin] < 6) {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s have been kicked for: Health/Armour Hack.", ReturnName2(playerid));
            KickEx(playerid);
        }
    }
    return 1;
}*/

/*Function:OnPlayerTeleportHack(playerid, Float:distance, type, vehicleid)
{
    if(SQL_IsLogged(playerid))
    {
        PlayerData[playerid][pTWarn] ++;
        switch(type)
        {
            case 1: SendAdminMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible teleport hack. (Distance: %f).", ReturnName(playerid,1), playerid, distance);
            case 2: SendAdminMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible vehicle teleport hack. (Distance: %f | Vehicleid: %d).", ReturnName(playerid,1), playerid, distance, vehicleid);
        }
        if(++PlayerData[playerid][pTWarn] > 3 && AccountData[playerid][pAdmin] < 6)
        {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s was kicked for: Teleport Hack.", ReturnName(playerid,0));
            KickEx(playerid);
        }
    }
    return 1;
}*/

Function:OnPlayerAirbreak(playerid, Float:ac_vX, Float:ac_vctsize, type, vehicle)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        switch(type)
        {
            case 1: SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible using airbreak cheat (speed: %.1f | distance: %f). ", ReturnName(playerid,0), playerid, ac_vX, ac_vctsize);
            case 2: SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible using vehicle airbreak (speed: %.1f | distance: %f | vehicleid: %d). ", ReturnName(playerid,0), playerid, ac_vX, ac_vctsize, vehicle);
        }
        if (CheckAdmin(playerid, 6))
        {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s have been kicked for: Airbreak Hack.", ReturnName2(playerid));
            KickEx(playerid);
        }
    }
    return 1;
}

Function:OnPlayerUseInvItem(playerid, itemid, name[])
{
    if(!strcmp(name, "Fish Rod", true)) {
        cmd_fish(playerid, "\1");
    }
/*    else if(!strcmp(name, "Magazine", true)) {
        cmd_usemag(playerid, "\1");
    }*/
/*    else if(!strcmp(name, "Backpack", true)) {
        cmd_backpack(playerid, "\1");
    }*/
    // else if(!strcmp(name, "First Aid", true)) {
    //     cmd_usekit(playerid, "\1");
    // }
    else if(!strcmp(name, "Fuel Can", true)) {
        cmd_fill(playerid, "\1");
    }
    else if(!strcmp(name, "Cellphone", true)) {
        cmd_phone(playerid, "\1");
    }
    else if(!strcmp(name, "Portable Radio", true)) {
        SendSyntaxMessage(playerid, "Use \"/pr [text]\" to chat with your radio.");
    }
    else if(!strcmp(name, "GPS System", true)) {
        cmd_gps(playerid, "\1");
    }
    else if(!strcmp(name, "Marijuana", true)) {
        cmd_usedrug(playerid, "marijuana");
    }
    else if(!strcmp(name, "Cocaine", true)) {
        cmd_usedrug(playerid, "cocaine");
    }
    else if(!strcmp(name, "Heroin", true)) {
        cmd_usedrug(playerid, "heroin");
    }
    else if(!strcmp(name, "LSD", true)) {
        cmd_usedrug(playerid, "lsd");
    }
    else if(!strcmp(name, "Ecstasy", true)) {
        cmd_usedrug(playerid, "ecs");
    }
    // else if(!strcmp(name, "Steroids", true)) {
    //     cmd_usedrug(playerid, "steroids");
    // }
    else if(!strcmp(name, "Frozen Pizza", true)) {
        cmd_cook(playerid, "pizza");
    }
    else if(!strcmp(name, "Frozen Burger", true)) {
        cmd_cook(playerid, "burger");
    }
    else if(!strcmp(name, "Armored Vest", true)) {
        cmd_vest(playerid, "\1");
    }
/*    else if(!strcmp(name, "Ammo Cartridge", true)) {
        cmd_ammo(playerid, "\1");
    }*/
/*    else if(!strcmp(name, "Colt 45", true)) {
        EquipWeapon(playerid, "Colt 45");
    }
    else if(!strcmp(name, "Desert Eagle", true)) {
        EquipWeapon(playerid, "Desert Eagle");
    }
    else if(!strcmp(name, "Shotgun", true)) {
        EquipWeapon(playerid, "Shotgun");
    }
    else if(!strcmp(name, "Micro SMG", true)) {
        EquipWeapon(playerid, "Micro SMG");
    }
    else if(!strcmp(name, "Tec-9", true)) {
        EquipWeapon(playerid, "Tec-9");
    }
    else if(!strcmp(name, "MP5", true)) {
        EquipWeapon(playerid, "MP5");
    }
    else if(!strcmp(name, "AK-47", true)) {
        EquipWeapon(playerid, "AK-47");
    }
    else if(!strcmp(name, "Rifle", true)) {
        EquipWeapon(playerid, "Rifle");
    }
    else if(!strcmp(name, "Sniper", true)) {
        EquipWeapon(playerid, "Sniper");
    }
    else if(!strcmp(name, "Golf Club", true)) {
        EquipWeapon(playerid, "Golf Club");
    }
    else if(!strcmp(name, "Knife", true)) {
        EquipWeapon(playerid, "Knife");
    }
    else if(!strcmp(name, "Shovel", true)) {
        EquipWeapon(playerid, "Shovel");
    }
    else if(!strcmp(name, "Katana", true)) {
        EquipWeapon(playerid, "Katana");
    }*/
    else if(!strcmp(name, "Marijuana Seeds", true)) {
        cmd_plant(playerid, "place 0");
    }
    else if(!strcmp(name, "Cocaine Seeds", true)) {
        cmd_plant(playerid, "place 1");
    }
    else if(!strcmp(name, "Heroin Opium Seeds", true)) {
        cmd_plant(playerid, "place 2");
    }
    //Laptop Sign
/*    else if(!strcmp(name, "Laptop", true)) {
        cmd_laptop(playerid, "");
    }*/
    else if(!strcmp(name, "Cooked Pizza", true))
    {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 2702, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+12);
        Inventory_Remove(playerid, "Cooked Pizza");
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a slice of pizza and eats it!");
    }
    else if(!strcmp(name, "Neladryl Acetate", true))
    {
        if(PlayerData[playerid][pUsePills]) return SendErrorMessage(playerid, "Tidak dapat mengkonsumsi pill sekarang, tunggu hingga %d detik lagi.", PlayerData[playerid][pUsePills]);
        if(PlayerData[playerid][pCough] < 1) return SendErrorMessage(playerid, "Anda tidak dapat mengkonsumsi pil ini.");

        Inventory_Remove(playerid, "Neladryl Acetate");
        PlayerData[playerid][pCough] --;
        PlayerData[playerid][pUsePills] = 60;
        cmd_me(playerid, sprintf("take's out %s and eat it.", name));  
    }
    else if(!strcmp(name, "Kratotamax Plus 1.0", true))
    {
        if(PlayerData[playerid][pUsePills]) return SendErrorMessage(playerid, "Tidak dapat mengkonsumsi pill sekarang, tunggu hingga %d detik lagi.", PlayerData[playerid][pUsePills]);
        if(PlayerData[playerid][pMigrainRate] < 1) return SendErrorMessage(playerid, "Anda tidak dapat mengkonsumsi pil ini.");

        Inventory_Remove(playerid, "Kratotamax Plus 1.0");
        if(++PlayerData[playerid][pMigrainUsed] >= 2)
        {
            PlayerData[playerid][pMigrainRate] --;
            PlayerData[playerid][pMigrainUsed] = 0;
        }
        PlayerData[playerid][pUsePills] = 60;
        cmd_me(playerid, sprintf("take's out %s and eat it.", name));  
    }
    else if(!strcmp(name, "Lazattavitus Extra", true))
    {
        if(PlayerData[playerid][pUsePills]) return SendErrorMessage(playerid, "Tidak dapat mengkonsumsi pill sekarang, tunggu hingga %d detik lagi.", PlayerData[playerid][pUsePills]);
        if(PlayerData[playerid][pFever] < 1) return SendErrorMessage(playerid, "Anda tidak dapat mengkonsumsi pil ini.");
        Inventory_Remove(playerid, "Lazattavitus Extra");
        if(++PlayerData[playerid][pFeverUsed] >= 2)
        {
            PlayerData[playerid][pFeverUsed] = 0;
            PlayerData[playerid][pFever] --;
        }
        PlayerData[playerid][pUsePills] = 60;
        cmd_me(playerid, sprintf("take's out %s and eat it.", name));  
    }           
    else if(!strcmp(name, "Cooked Fish", true))
    {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+30);
        Inventory_Remove(playerid, "Cooked Fish");
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a cooked fish and eats it!");
    }
    else if(!strcmp(name, "Water", true))
    {
        if(PlayerData[playerid][pEnergy] > 90)
            return SendErrorMessage(playerid, "You are not thirsty right now.");

        // if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        // {
        //     SetPlayerAttachedObject(playerid, WEAPON_SLOT, 1484, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
        //     SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        // }
        SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]+10);
        Inventory_Remove(playerid, "Water");
//        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a water and drinks it!");
    }
    else if(!strcmp(name, "Snack", true))
    {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 2768, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+10);
        Inventory_Remove(playerid, "Snack");
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a snack and eats it!");
    }
    else if(!strcmp(name, "Cooked Burger", true))
    {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+11);
        Inventory_Remove(playerid, "Cooked Burger");
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a cooked burger and eats it!");
    }
    else if(!strcmp(name, "Chicken", true))
    {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 2663, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+14);
        Inventory_Remove(playerid, "Chicken");
        ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a chicken and eats it!");
    }
    else if(!strcmp(name, "First Aid", true))
    {
        return cmd_usekit(playerid, "");
    }
    else if(!strcmp(name, "MP3 Player", true))
    {
        Dialog_Show(playerid, AudioPlayer, DIALOG_STYLE_INPUT, "MP3 Player", "Input link URL to start listening to MP3 - Masukan Off untuk mematikan lagu!", "Insert", "Close");
    }
    else if(!strcmp(name, "Cigarettes", true))
    {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
        cmd_me(playerid, sprintf("takes out %s and light it up using their lighter.", name));
        Inventory_Remove(playerid, "Cigarettes"); 
    }
    else if(!strcmp(name, "Bobby Pin", true))
    {
        return SendErrorMessage(playerid, "Temporary disabled");
        //cmd_lockpick(playerid,"");
    }
    else if(!strcmp(name, "Kevlar Vest", true))
    {
        if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
            return SendErrorMessage(playerid, "You can't use this command now.");

        if(!Inventory_HasItem(playerid, "Kevlar Vest"))
            return SendErrorMessage(playerid, "You don't have an kevlar vest.");

        if(GetArmour(playerid) >= 100)
            return SendErrorMessage(playerid, "You already have a full vest on.");

        SetArmour(playerid, 100.0);

        Inventory_Remove(playerid, "Kevlar Vest");
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out a kevlar vest and puts it on.", ReturnName(playerid, 0));
    }
    return 1;
}
PlayBusinessAudio(playerid, bizid)
{
    if(!strcmp(BusinessData[bizid][bizLink], "None", true))
    {
        StopAudioStreamForPlayer(playerid);
    }
    else
    {
        PlayAudioStreamForPlayer(playerid, BusinessData[bizid][bizLink]);
    }
    return 1;
}
PlayVehicleAudio(playerid, vehicleid)
{
    if(!strcmp(VehicleData[vehicleid][vehURL], "Off", true))
    {
        StopAudioStreamForPlayer(playerid);
        PlayerData[playerid][pVehAudioPlay] = 0;
    }
    else
    {
        StopAudioStreamForPlayer(playerid);
        PlayAudioStreamForPlayer(playerid, VehicleData[vehicleid][vehURL]);
        PlayerData[playerid][pVehAudioPlay] = 1;
    }
    return 1;
}
PlayVehicleAudioInCar(playerid, url[])
{
    new vid = GetPlayerVehicleID(playerid);
    new vehicleid = -1;
    vehicleid = Vehicle_ReturnID(vid);

    if(vehicleid == -1) 
        return 0;

    VehicleData[vehicleid][vehAudio] = 1;
    strpack(VehicleData[vehicleid][vehURL], url, 128 char);
    foreach (new i : Player)
    { 
        if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) 
        {
            if(!strcmp(url, "Off", true))
            {
                StopAudioStreamForPlayer(i);
                VehicleData[vehicleid][vehAudio] = 0;
                PlayerData[i][pVehAudioPlay] = 0;
            }
            else
            {
                StopAudioStreamForPlayer(i);
                PlayAudioStreamForPlayer(i, url);
                PlayerData[i][pVehAudioPlay] = 1;
            }
        }
    }
    return 1;
}
ListenToMusic(playerid)
{
    if(PlayerData[playerid][pVehAudioPlay] || PlayerData[playerid][pAudioPlay])
        return 1;

    return 0;
}
Dialog:VehicleAudioPlayer(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(strlen(inputtext) < 1 || strlen(inputtext) > 128)
            return Dialog_Show(playerid, VehicleAudioPlayer, DIALOG_STYLE_INPUT, "Vehicle Radio", "Error, panjang link tidak boleh di bawah 1 maximal 128 karakter!\nInput link URL to start listening to MP3 - Masukan off untuk mematikan lagu", "Insert", "Close");

        PlayVehicleAudioInCar(playerid, inputtext);
    }
    return 1;
}
Dialog:AudioPlayer(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(strlen(inputtext) < 1 || strlen(inputtext) > 128)
            return Dialog_Show(playerid, AudioPlayer, DIALOG_STYLE_INPUT, "MP3 Player", "Error, panjang link tidak boleh di bawah 1 maximal 128 karakter!\nInput link URL to start listening to MP3 - Masukan off untuk mematikan lagu", "Insert", "Close");

        if(!strcmp(inputtext, "Off", true))
        {
            StopAudioStreamForPlayer(playerid);
            PlayerData[playerid][pAudioPlay] = 0;
        }
        else
        {
            StopAudioStreamForPlayer(playerid);
            PlayAudioStreamForPlayer(playerid, inputtext);
            PlayerData[playerid][pAudioPlay] = 1;
        }
    }
    return 1;
}
Function:Alias_Check(playerid, ip[])
{
    if(!cache_num_rows())
        return SendErrorMessage(playerid, "There are nothing ip same with that.");

    new name[24], str[500];

    for(new i = 0; i != cache_num_rows(); i++) {
        cache_get_field_content(i, "Username", name);
        strcat(str, sprintf("%s\n", name));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, sprintf("From: %s", ip), str, "Close", "");
    return 1;
}

/*Function:Account_Check(playerid, ip[])
{
    if(!cache_num_rows()) return SendErrorMessage(playerid, "There are no character anymore with that accounts.");

    new name[24], str[500];
    for(new i = 0; i < cache_num_rows(); i++) {
        cache_get_field_content(i, "Character", name);
        strcat(str, sprintf("%s\n", name));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, sprintf("Character: %s", name), str, "Close", "");
    return 1;
}*/

Function:Blacklist_Record(playerid)
{
    new str[255], record, name[24];

    strcat(str, "Administrator\tBans Record\n");

    for(new i=0; i < cache_num_rows(); i++) {
        record = cache_get_field_int(i, "jumlah");
        cache_get_field_content(i, "BannedBy", name);
        strcat(str, sprintf("%s\t%d\n",name,record));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "10 Bans record", str, "Close", "");
    return 1;
}

Function:OnLocationCreated(playerid, id)
{
    SendServerMessage(playerid, "You have added \"%s\" to your GPS.", LocationData[playerid][id][locationName]);
    return 1;
}

Function:OnAksesorisCreated(playerid, id)
{
    AccData[playerid][id][accID] = cache_insert_id();
    Aksesoris_Save(playerid, id);
    Aksesoris_Attach(playerid, id);

    new string[256+1];
    for(new i; i < sizeof(accBones); i++)
    {
        format(string,sizeof(string),"%s%s\n",string,accBones[i]);
    }
    Dialog_Show(playerid, AksesorisBone, DIALOG_STYLE_LIST, "Edit Bone",string,"Select","Close");
    SendCustomMessage(playerid, "ACCESORY","Accessory created, type /acc to edit this accessory.");
    return 1;
}

Function:DestroyObjectGate(playerid)
{
    SetPlayerVirtualWorld(playerid, 0);
    TogglePlayerControllable(playerid, 1);

    if(IsValidDynamicObject(PlayerData[playerid][pTutorialObjectGate]))
        DestroyDynamicObject(PlayerData[playerid][pTutorialObjectGate]);

    PlayerData[playerid][pTutorialObjectGate] = INVALID_STREAMER_ID;
    return 1;
}

Function:OnQueryFinished(extraid, threadid, race_check)
{
    if(!IsPlayerConnected(extraid))
        return 0;

    new rows, fields;

    switch (threadid)
    {
        case THREAD_CREATE_CHAR:
        {
            if (GetPVarInt(extraid, "Verifikasi") == 1) {
                new query[128];

                SetPVarInt(extraid, "Verifikasi", 0);
                AccountData[extraid][pLogged] = 1;

                stop AccountData[extraid][pEmailTimer];
                stop AccountData[extraid][pLoginTimer];

                format(query, sizeof(query), "SELECT `Character` FROM `characters` WHERE `Username` = '%s' LIMIT %d;", ReturnName(extraid), MAX_CHARACTERS);
                mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LIST_CHARACTERS);
            }

            if (GetPVarInt(extraid, "UCPRegistration") == 1) {
                AccountData[extraid][pLogged] = 1;
                stop AccountData[extraid][pEmailTimer];
                AccountData[extraid][pID] = cache_insert_id();

                SendClientMessageEx(extraid, COLOR_CLIENT, "-----------------------------------------------------------------------------------");
                SendClientMessageEx(extraid, X11_WHITE, "Selamat datang di "RED"%s"WHITE".", "Diversity World");
                SendClientMessageEx(extraid, X11_WHITE, "Akun dengan nama "YELLOW"%s "WHITE"berhasil di buat.", ReturnName(extraid));
                SendClientMessageEx(extraid, X11_WHITE, "Silahkan login untuk melanjutkan ke dalam server.");
                SendClientMessageEx(extraid, COLOR_CLIENT, "-----------------------------------------------------------------------------------");

                SendAdminMessage(X11_OLIVE_DRAB_1, "NEW UCP: %s is login with new account.", ReturnName(extraid));

                SQL_CheckAccount(extraid);
                SetPVarInt(extraid, "UCPRegistration", 0);
            }
        }
        case THREAD_LIST_CHARACTERS: {
            for (new i = 0; i < MAX_CHARACTERS; i ++) {
                CharacterList[extraid][i][0] = EOS;
            }

            for (new i = 0; i < cache_num_rows(); i ++) {
                cache_get_field_content(i, "Character", CharacterList[extraid][i], MAX_PLAYER_NAME + 1);
                CharacterLevel[extraid][i] = cache_get_field_int(0, "pScore");
                CharacterLL[extraid][i] = cache_get_field_int(0, "LoginDate");
            }

            SetPVarInt(extraid, "ACPBlacklist", 1);

            if(!Blacklist_Check(extraid, "Username", ReturnAdminName(extraid))) {
                ShowCharacterMenu(extraid);
                DeletePVar(extraid, "ACPBlacklist");
                SendServerMessage(extraid, "Berhasil login, silahkan pilih karakter yang akan dimainkan.");
            }
        }
        case THREAD_LOAD_CHARACTERS:
        {
            cache_get_data(rows, fields);

            if(rows)
            {
                new query[128], str[128];

                PlayerData[extraid][pID] = cache_get_field_int(0, "ID");
                PlayerData[extraid][pGender] = cache_get_field_int(0, "Gender");
                PlayerData[extraid][pCreated] = cache_get_field_int(0, "Created");

                cache_get_field_content(0, "Played", query, 64);
                sscanf(query, "p<|>ddd", PlayerData[extraid][pSecond], PlayerData[extraid][pMinute], PlayerData[extraid][pHour]);

                for(new i = 0; i < MAX_FISH; i++) {
                    format(str, sizeof(str), "Fish%d", i);
                    cache_get_field_content(0, str, query, 24);
                    sscanf(query, "p<|>s[12]f", FishName[extraid][i], FishWeight[extraid][i]);
                }

                for(new i = 0; i < 10; i++) {
                    format(str, sizeof(str), "Damage%d", i);
                    cache_get_field_content(0, str, damageList[extraid][i], 128);
                }

                for(new i = 0; i < MAX_FREQ; i++) {
                    format(str, sizeof(str), "Freq%d", i);
                    PlayerData[extraid][pFreq][i] = cache_get_field_int(0, str);
                }

                cache_get_field_content(0, "Birthdate", PlayerData[extraid][pBirthdate], 24);
                cache_get_field_content(0, "Origin", PlayerData[extraid][pOrigin], 32);
                cache_get_field_content(0, "JailReason", PlayerData[extraid][pJailReason], 32);
                cache_get_field_content(0, "JailedBy", PlayerData[extraid][pJailedBy], 32);
                cache_get_field_content(0, "Alias", PlayerData[extraid][pAlias], 25);
                cache_get_field_content(0, "PlayerAccent", PlayerData[extraid][pAccent], 40);

                new
                    bool:is_alias_null
                ;
                cache_is_value_name_null(0, "Alias", is_alias_null);

                if (is_alias_null)
                {
                    format(PlayerData[extraid][pAlias], 25, "Player");
                }
                else
                {
                    cache_get_field_content(0, "Alias", PlayerData[extraid][pAlias], 25);
                }

                PlayerData[extraid][pSkin] = cache_get_field_int(0, "Skin");
                PlayerData[extraid][pPos][0] = cache_get_field_float(0, "PosX");
                PlayerData[extraid][pPos][1] = cache_get_field_float(0, "PosY");
                PlayerData[extraid][pPos][2] = cache_get_field_float(0, "PosZ");
                PlayerData[extraid][pPos][3] = cache_get_field_float(0, "PosA");
                PlayerData[extraid][pHealth] = cache_get_field_float(0, "Health");
                PlayerData[extraid][pHunger] = cache_get_field_float(0, "Hunger");
                PlayerData[extraid][pDead] = cache_get_field_float(0, "DeadTime");
                PlayerData[extraid][pEnergy] = cache_get_field_float(0, "Energy");
                PlayerData[extraid][pInterior] = cache_get_field_int(0, "Interior");
                PlayerData[extraid][pRegisterDate] = cache_get_field_int(0, "RegisterDate");
                PlayerData[extraid][pWorld] = cache_get_field_int(0, "World");
                PlayerData[extraid][pHospital] = cache_get_field_int(0, "Hospital");
                PlayerData[extraid][pHospitalInt] = cache_get_field_int(0, "HospitalInt");
                PlayerData[extraid][pMoney] = cache_get_field_int(0, "Money");
                PlayerData[extraid][pBankMoney] = cache_get_field_int(0, "BankMoney");
                PlayerData[extraid][pOwnsBillboard] = cache_get_field_int(0, "OwnsBillboard");
                PlayerData[extraid][pJailTime] = cache_get_field_int(0, "JailTime");
                PlayerData[extraid][pFightStyle] = cache_get_field_int(0, "FightStyle");
                PlayerData[extraid][pMuted] = cache_get_field_int(0, "Muted");
                PlayerData[extraid][pHouse] = cache_get_field_int(0, "House");
                PlayerData[extraid][pFurnStore] = cache_get_field_int(0, "FurnStore");

                PlayerData[extraid][pBusiness] = cache_get_field_int(0, "Business");
                PlayerData[extraid][pEntrance] = cache_get_field_int(0, "Entrance");
                PlayerData[extraid][pApartment] = cache_get_field_int(0, "Apartment");
                PlayerData[extraid][pApartmentBuilding] = cache_get_field_int(0, "ApartmentBuilding");

                PlayerData[extraid][pPhone] = cache_get_field_int(0, "Phone");
                PlayerData[extraid][pCredits] = cache_get_field_int(0, "PhoneCredits");
                PlayerData[extraid][pLottery] = cache_get_field_int(0, "Lottery");
                PlayerData[extraid][pLottery] = cache_get_field_int(0, "LotteryB");
                PlayerData[extraid][pPlayingHours] = cache_get_field_int(0, "PlayingHours");
                PlayerData[extraid][pMinutes] = cache_get_field_int(0, "Minutes");
                PlayerData[extraid][pOnDuty] = cache_get_field_int(0, "FactionDuty");
                PlayerData[extraid][pUndercoverDuty] = cache_get_field_int(0, "UndercoverDuty");
                PlayerData[extraid][pArmorStatus] = cache_get_field_float(0, "ArmorStatus");
                PlayerData[extraid][pJob] = cache_get_field_int(0, "Job");
                PlayerData[extraid][pPhoneBattery] = cache_get_field_float(0, "PhoneBattery");
                PlayerData[extraid][pExp] = cache_get_field_int(0, "pExperience");

                //Biz Job
                PlayerData[extraid][pBizDutyHour] = cache_get_field_int(0, "pBusinessDutyHour");

                PlayerData[extraid][pJobLeave] = cache_get_field_int(0, "JobLeave");
                if(PlayerData[extraid][pJobLeave] < 0) PlayerData[extraid][pJobLeave] = 0;

                PlayerData[extraid][pFactionID] = cache_get_field_int(0, "Faction");
                PlayerData[extraid][pFactionDuty] = cache_get_field_int(0, "SalaryDuty");
                PlayerData[extraid][pFactionHour] = cache_get_field_int(0, "DutyTime");
                PlayerData[extraid][pMineSalary] = cache_get_field_int(0, "MineSalary");
                PlayerData[extraid][pFactionRank] = cache_get_field_int(0, "FactionRank");
                PlayerData[extraid][pPrisoned] = cache_get_field_int(0, "Prisoned");
                PlayerData[extraid][pInjured] = cache_get_field_int(0, "Injured");
                PlayerData[extraid][pWarrants] = cache_get_field_int(0, "Warrants");
                PlayerData[extraid][pChannel] = cache_get_field_int(0, "Channel");
                PlayerData[extraid][pBleeding] = cache_get_field_int(0, "Bleeding");
                PlayerData[extraid][pBandage] = cache_get_field_int(0, "Bandage");
                PlayerData[extraid][pWarnings] = cache_get_field_int(0, "Warnings");
                PlayerData[extraid][pMaskID] = cache_get_field_int(0, "MaskID");
                PlayerData[extraid][pFactionMod] = cache_get_field_int(0, "FactionMod");
                PlayerData[extraid][pCapacity] = cache_get_field_int(0, "Capacity");
                PlayerData[extraid][pSpawnPoint] = cache_get_field_int(0, "SpawnPoint");
                PlayerData[extraid][pScore] = cache_get_field_int(0, "pScore");
                PlayerData[extraid][pCanPaycheck] = cache_get_field_int(0, "Paycheck");
                PlayerData[extraid][pBadge] = cache_get_field_int(0, "Badge");
                // PlayerData[extraid][pFactionStock] = cache_get_field_int(0, "playerFactionStock");
                PlayerData[extraid][pIDCardExpired] = cache_get_field_int(0, "IDCardExpired");
                PlayerData[extraid][pFactionSalaryCollected] = cache_get_field_int(0, "FactionSalaryCollected");
                PlayerData[extraid][pFactionSalaryResettedAt] = cache_get_field_int(0, "FactionSalaryResettedAt");

                PlayerData[extraid][pDrivingLicense] = cache_get_field_int(0, "DrivingLicense");
                PlayerData[extraid][pDrivingLicenseExpired] = cache_get_field_int(0, "DrivingLicenseExpired");
                PlayerData[extraid][pBusinessLicense] = cache_get_field_int(0, "BusinessLicense");
                PlayerData[extraid][pBusinessLicenseExpired] = cache_get_field_int(0, "BusinessLicenseExpired");
                PlayerData[extraid][pWorkshopLicense] = cache_get_field_int(0, "WorkshopLicense");
                PlayerData[extraid][pWorkshopLicenseExpired] = cache_get_field_int(0, "WorkshopLicenseExpired");
                PlayerData[extraid][pFirearmLicense] = cache_get_field_int(0, "FirearmLicense");
                PlayerData[extraid][pFirearmLicenseExpired] = cache_get_field_int(0, "FirearmLicenseExpired");
                PlayerData[extraid][pLumberLicense] = cache_get_field_int(0, "LumberLicense");
                PlayerData[extraid][pLumberLicenseExpired] = cache_get_field_int(0, "LumberLicenseExpired");
                PlayerData[extraid][pTrashmasterDelay] = cache_get_field_int(0, "Work");
                PlayerData[extraid][pMoneytransDelay] = cache_get_field_int(0, "MoneyTransDelay");
                PlayerData[extraid][pBoxvilleDelay] = cache_get_field_int(0, "BoxvilleDelay");
                PlayerData[extraid][pDelayTruck] = cache_get_field_int(0, "DelayTruck");
                PlayerData[extraid][pDelayFishing] = cache_get_field_int(0, "DelayFishing");
                PlayerData[extraid][pSkinFaction] = cache_get_field_int(0, "SkinFaction");
                PlayerData[extraid][pWoodDelay] = cache_get_field_int(0, "WoodDelay");
                PlayerData[extraid][pLumberDelay] = cache_get_field_int(0, "LumberDelay");
                PlayerData[extraid][pHidegun] = cache_get_field_int(0, "AdjWep");
                PlayerData[extraid][pCough] = cache_get_field_int(0, "Cough");
                PlayerData[extraid][pFever] = cache_get_field_int(0, "Fever");
                PlayerData[extraid][pMigrainTime] = cache_get_field_int(0, "MigrainTime");
                PlayerData[extraid][pMigrainRate] = cache_get_field_int(0, "MigrainRate");
                PlayerData[extraid][pCoughPills] = cache_get_field_int(0, "CoughPills");
                PlayerData[extraid][pMigrainPills] = cache_get_field_int(0, "MigrainPills");
                PlayerData[extraid][pFiverPills] = cache_get_field_int(0, "FiverPills");
                PlayerData[extraid][pUsePills] = cache_get_field_int(0, "UsePills");
                PlayerData[extraid][pMigrainUsed] = cache_get_field_int(0, "MigrainUsed");
                PlayerData[extraid][pFeverUsed] = cache_get_field_int(0, "FeverUsed");
                PlayerData[extraid][pGarage] = cache_get_field_int(0, "Garage");
                PlayerData[extraid][pGunAuthority] = cache_get_field_int(0, "GunAuthority");
                PlayerData[extraid][pDMVTime] = cache_get_field_int(0, "DMVTime");
                PlayerData[extraid][pSweeperDelay] = cache_get_field_int(0, "SweeperDelay");
                PlayerData[extraid][pBusDelay] = cache_get_field_int(0, "BusDelay");
                PlayerData[extraid][pCuffed] = cache_get_field_int(0, "Cuffed");
                PlayerData[extraid][pTied] = cache_get_field_int(0, "Tied");

                PlayerData[extraid][pGiveupTime] = cache_get_field_int(0, "GiveupTime");

                //Truck license
                PlayerData[extraid][pTruckLicense] = cache_get_field_int(0, "TruckLicense");
                PlayerData[extraid][pTruckLicenseExpired] = cache_get_field_int(0, "TruckLicenseExpired");

                //BLS
                PlayerData[extraid][pBLSLicense] = cache_get_field_int(0, "BLSLicense");
                PlayerData[extraid][pBLSLicenseExpired] = cache_get_field_int(0, "BLSLicenseExpired");


                SetPlayerDrugeEffect(extraid, cache_get_field_int(0, "DrugEffect"));
                SetPlayerDrugHeroin(extraid, cache_get_field_int(0, "DrugHeroin"));
                SetPlayerDrugCocaine(extraid, cache_get_field_int(0, "DrugCocaine"));
                SetPlayerDrugLSD(extraid, cache_get_field_int(0, "DrugLSD"));
                SetPlayerDrugECS(extraid, cache_get_field_int(0, "DrugEcstasy"));

                PlayerData[extraid][pSpecialEffect] = cache_get_field_int(0, "DrugSpecialEffect");

                
                PlayerData[extraid][pHudStyle] = cache_get_field_int(0, "HudStyle");

                // Skills
                PlayerData[extraid][pMechanicLevel] = cache_get_field_int(0, "MechanicLevel");
                PlayerData[extraid][pMechanicEXP] = cache_get_field_int(0, "MechanicEXP");

                // Relationship System
                PlayerData[extraid][pStatus] = cache_get_field_int(0, "Status");
                //
                // PetData[extraid][petModelID] = cache_get_field_int(0, "PetModel");
                // cache_get_field_content(0, "PetName", PetData[extraid][petName], 128);

                PlayerData[extraid][pLiveMode] = cache_get_field_int(0, "LiveMode");
                PlayerData[extraid][pDisableOOC] = cache_get_field_int(0, "pTogOOC");
                PlayerData[extraid][pDisablePM] = cache_get_field_int(0, "pTogPM");
                PlayerData[extraid][pDisableBC] = cache_get_field_int(0, "pTogBC");
                PlayerData[extraid][pDisableFaction] = cache_get_field_int(0, "pTogFaction");
                PlayerData[extraid][pDisableLogin] = cache_get_field_int(0, "pTogLogin");
                PlayerData[extraid][pDisableAnim] = cache_get_field_int(0, "pTogAnim");
                PlayerData[extraid][pTogRelation] = cache_get_field_int(0, "pTogRelation");

                PlayerData[extraid][pParkedVehicle] = cache_get_field_int(0, "ParkedVehicle");
                PlayerData[extraid][pLove] = cache_get_field_float(0, "Love");
                PlayerData[extraid][pPartnerID] = cache_get_field_int(0, "PartnerID");
                cache_get_field_content(0, "PartnerName", PlayerData[extraid][pPartnerName], 32);

                PlayerData[extraid][pDrunk] = cache_get_field_int(0, "Drunk");
                PlayerData[extraid][pDrunkTime] = cache_get_field_int(0, "DrunkTime");

                // Player Skill
                PlayerSkill[extraid][pFishingSkill] = cache_get_field_float(0, "pFishingSkill");
                PlayerSkill[extraid][pHuntingSkill] = cache_get_field_float(0, "pHuntingSkill");
                PlayerSkill[extraid][pLumberSkill] = cache_get_field_float(0, "pLumberSkill");
                PlayerSkill[extraid][pTruckerSkill] = cache_get_field_float(0, "pTruckerSkill");
                PlayerSkill[extraid][pFarmerSkill] = cache_get_field_float(0, "pFarmerSkill");


                if(!PlayerData[extraid][pMaskID])
                    PlayerData[extraid][pMaskID] = random(90000) + 10000;

                if(PlayerData[extraid][pCapacity] > 32)
                    PlayerData[extraid][pCapacity] = 32;

                if(!PlayerData[extraid][pCapacity])
                    PlayerData[extraid][pCapacity] = 18;

                TextDrawShowForPlayer(extraid, gServerTextdraws[2]);

                for (new id = 0; id < MAX_PLAYER_ATTACHED_OBJECTS; id++) if(IsPlayerAttachedObjectSlotUsed(extraid, id))
                {
                    RemovePlayerAttachedObject(extraid, id);
                }

                TextDrawHideForPlayer(extraid, gLoginTextdraws);

                PlayerData[extraid][pCuttingBar]    = CreatePlayerProgressBar(extraid, 498.0, 104.0, 113.0, 6.2, 0x15a014FF, 100, 0);

                // //RelationStatus
                // RelationshipProgressBar[extraid][0] = CreatePlayerProgressBar(extraid, 403.000000, 438.000000, 79.000000, 4.000000, -16776992, 100.000000, 0);
                // SetPlayerProgressBarValue(extraid, RelationshipProgressBar[extraid][0], PlayerData[extraid][pLove]);

                PlayerData[extraid][pLogged] = 1;
                EnablePlayerCameraTarget(extraid, 1);

                //Khusus ngeload weapon attachment
                // mysql_tquery(g_iHandle, sprintf("SELECT * FROM `weaponsettings` WHERE `charID` = '%d'", PlayerData[extraid][pID]), "OnQueryFinished", "dd", extraid, THREAD_LOAD_WEPATTACH);
                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `weaponsettings` WHERE `charID` = '%d' ", PlayerData[extraid][pID]), "OnWeaponsLoaded", "d", extraid);    
                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `inventory` WHERE `ID` = '%d'", PlayerData[extraid][pID]), "OnQueryFinished", "dd", extraid, THREAD_LOAD_INVENTORY);
                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `contacts` WHERE `ID` = '%d'", PlayerData[extraid][pID]), "OnQueryFinished", "dd", extraid, THREAD_LOAD_CONTACTS);
                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `damages` WHERE `IDs` = '%d' ORDER BY `time` DESC LIMIT %d", PlayerData[extraid][pID], MAX_DAMAGE), "OnQueryFinished", "dd", extraid, THREAD_LOAD_DAMAGES);
                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `aksesoris` WHERE `accID` = '%d' ORDER BY `accID` DESC LIMIT %d", PlayerData[extraid][pID], MAX_ACC), "OnQueryFinished", "dd", extraid, THREAD_LOAD_ACC);
                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `tickets` WHERE `ID` = '%d'", PlayerData[extraid][pID]), "OnQueryFinished", "dd", extraid, THREAD_LOAD_TICKETS);
                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `gps` WHERE `ID` = '%d'", PlayerData[extraid][pID]), "OnQueryFinished", "dd", extraid, THREAD_LOAD_LOCATIONS);
                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `vehiclekeys` WHERE `playerID` = '%d' ORDER BY `playerID` DESC LIMIT %d", PlayerData[extraid][pID], PLAYER_MAX_VEHICLE_SHARE_KEYS), "LoadVehicleKey", "d", extraid);
                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `housekeys` WHERE `playerID` = '%d' ORDER BY `playerID` DESC LIMIT %d", PlayerData[extraid][pID], PLAYER_MAX_HOUSE_SHARE_KEYS), "LoadHouseKey", "d", extraid);
                

                if(PlayerData[extraid][pOwnsBillboard] == 0) PlayerData[extraid][pOwnsBillboard] = -1;

                if(PlayerData[extraid][pFactionID] == -1) ResetFaction(extraid);
                else SetFaction(extraid, GetFactionByID(PlayerData[extraid][pFactionID]));

                if(!PlayerData[extraid][pCreated])
                {
                    SetPVarInt(extraid, "SelectDia",1);

                    SetSpawnInfo(extraid, NO_TEAM, 98, 258.0770, -42.3550, 1002.0234, 0.0, 0, 0, 0, 0, 0, 0);
                    TogglePlayerSpectating(extraid, 0);
                    TogglePlayerControllable(extraid, 0);
                }
                else
                {
                    SetSpawnInfo(extraid, NO_TEAM, PlayerData[extraid][pSkin], PlayerData[extraid][pPos][0], PlayerData[extraid][pPos][1], PlayerData[extraid][pPos][2], 0.0, 0, 0, 0, 0, 0, 0);

                    TogglePlayerSpectating(extraid, 0);
                    TogglePlayerControllable(extraid, 0);

                    CancelSelectTextDraw(extraid);
                    SetTimerEx("SpawnTimer", 1000, false, "d", extraid);
                }
            }
        }
        case THREAD_VERIFY_PASS:
        {
            cache_get_data(rows, fields);

            if(rows)
                Dialog_Show(extraid, NewPass, DIALOG_STYLE_PASSWORD, "Enter New Password", "Please enter your new password below.\n\nNote: Please use a strong and safe password for additional security.", "Change", "Cancel");

            else
                SendErrorMessage(extraid, "You have entered an incorrect password.");
        }
        case THREAD_VERIFY_EMAIL: {
            if (cache_num_rows()) {
                SendErrorMessage(extraid, "Email yang anda masukkan sudah dimiliki oleh akun lain.");
                Dialog_Show(extraid, PutEmail, DIALOG_STYLE_INPUT, "Email", WHITE"Tolong masukkan email dibawah ini untuk melakukan konfirmasi akun\nCek folder INBOX/SPAM untuk melihat kode verifikasi\n\nEmail valid: "YELLOW"@gmail.com, @hotmail.com", "Enter", "Quit");
            }
            else {
                new email_text[128], email_query[255];

                format(AccountData[extraid][pVerifyCode], 12, "d-%d", RandomEx(1000, 9999));

                format(email_query, sizeof(email_query), "UPDATE `accounts` SET `Email` = '%s', `VerifyCode` = '%s' WHERE `Username` = '%s';", SQL_ReturnEscaped(AccountData[extraid][pMail]), SQL_ReturnEscaped(AccountData[extraid][pVerifyCode]), ReturnName(extraid));
                mysql_tquery(g_iHandle, email_query);

                format(email_text, sizeof(email_text),"PNAME:%s#CODE:%s", ReturnName(extraid), AccountData[extraid][pVerifyCode]);
                SendEmail("Diversity World", AccountData[extraid][pMail], "[d-rp] Verifikasi akun anda", email_text, true, "verify.html");

                stop AccountData[extraid][pEmailTimer];
                AccountData[extraid][pEmailTimer] = defer refuseVCode(extraid);

                Dialog_Show(extraid, PutCode, DIALOG_STYLE_INPUT, "Kode Verifikasi", WHITE"Isi kode disini untuk memverifikasi email kamu\n(kode sudah dikirim ke email kamu secara otomatis (INBOX / SPAM))):", "Verifikasi", "Kembali");
            }
        }
        case THREAD_FIND_USERNAME:
        {
            new string[MAX_PLAYER_NAME+1];
            if (race_check != g_MysqlRaceCheck[extraid])
                return KickEx(extraid);

            format(string, sizeof(string), "Diversity World - %s", ReturnName(extraid));

            if(cache_num_rows()) {
                //TextDrawShowForPlayer(extraid, gLoginTextdraws);
                new
                    is_active,
                    is_registered
                ;

                GetPlayerName(extraid, AccountData[extraid][pUsername], MAX_PLAYER_NAME + 1);

                is_active = cache_get_field_int(0, "Active");
                is_registered = cache_get_field_int(0, "Registered");
                AccountData[extraid][pID] = cache_get_field_int(0, "ID");
                AccountData[extraid][pAdmin] = cache_get_field_int(0, "Admin");
                AccountData[extraid][pAdminHide] = cache_get_field_int(0, "AdminHide");
                //Admin Activity
                AccountData[extraid][pAdminDutyTime] = cache_get_field_int(0, "AdminDutyTime");
                AccountData[extraid][pAdminAcceptReport] = cache_get_field_int(0, "AdminAcceptReport");
                AccountData[extraid][pAdminDeniedReport] = cache_get_field_int(0, "AdminDeniedReport");
                AccountData[extraid][pAdminAcceptStuck] = cache_get_field_int(0, "AdminAcceptStuck");
                AccountData[extraid][pAdminDeniedStuck] = cache_get_field_int(0, "AdminDeniedStuck");
                AccountData[extraid][pAdminBanned] = cache_get_field_int(0, "AdminBanned");
                AccountData[extraid][pAdminUnbanned] = cache_get_field_int(0, "AdminUnbanned");
                AccountData[extraid][pAdminJail] = cache_get_field_int(0, "AdminJail");
                AccountData[extraid][pAdminAnswer] = cache_get_field_int(0, "AdminAnswer");

                AccountData[extraid][pLoginDate] = cache_get_field_int(0, "LoginDate");
                AccountData[extraid][pRegisterDate] = cache_get_field_int(0, "RegisterDate");

                cache_get_field_content(0, "Email", AccountData[extraid][pMail], 32);
                cache_get_field_content(0, "IP", AccountData[extraid][pIP], 17);
                cache_get_field_content(0, "Salt", AccountData[extraid][pSalt], 65);
                cache_get_field_content(0, "VerifyCode", AccountData[extraid][pVerifyCode], 32);
                cache_get_field_content(0, "Password", AccountData[extraid][pPassword], 65);
                cache_get_field_content(0, "AdminRankName", AccountData[extraid][pAdminRankName], 32);
                cache_get_value_int(0, "pStaterpackSystem", PlayerData[extraid][pStaterpackSystem]);
                
                
                if(is_active == 0)
                    return Dialog_Show(extraid, PutCode, DIALOG_STYLE_INPUT, "Kode Verifikasi", WHITE"Isi kode disini untuk memverifikasi akun kamu\n(kode sudah dikirimkan ke Direct Message discord oleh BOT F:RP):", "Verifikasi", "Kembali");

                if(is_registered == 1)
                {
                    AccountData[extraid][pLoginTimer] = defer refuseLogin(extraid);
                    Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "Login to Diversity World", "{FFFFFF}Welcome back to {00FFFF}Diversity World\n\n{FFFF00}UCP Account: %s\n{FFFFFF}Please input your password to login:", "Masuk", "Keluar", ReturnName(extraid,0));
                }
                else
                {
                    Dialog_Show(extraid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Register to Diversity World", "{FFFFFF}Welcome to {00FFFF}Diversity World\n\n{FFFF00}UCP Account: %s\n{FFFFFF}Your UCP is doesn't exists\n{FFFFFF}Please input your Password for Register:", "Daftarkan", "Keluar", ReturnName(extraid));
                }
            }
            else 
            {
                Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, string, "Your account is not registered!\n\nPlease register your account on our Discord:\n\n"YELLOW"https://discord.gg/AdgwXdmBqC", "Close", "", ReturnName(extraid));
                KickEx(extraid, 500);
            }
        }
        case THREAD_LOAD_INVENTORY:
        {
            static
                name[32];

            cache_get_data(rows, fields);

            for (new i = 0; i < rows && i < MAX_INVENTORY; i ++) {
                InventoryData[extraid][i][invExists] = true;
                InventoryData[extraid][i][invID] = cache_get_field_int(i, "invID");
                InventoryData[extraid][i][invModel] = cache_get_field_int(i, "invModel");
                InventoryData[extraid][i][invQuantity] = cache_get_field_int(i, "invQuantity");
                cache_get_field_content(i, "invItem", name, sizeof(name));
                strpack(InventoryData[extraid][i][invItem], name, 32 char);
            }
        }
        case THREAD_LOAD_DAMAGES:
        {
            cache_get_data(rows, fields);

            for (new i = 0; i < rows && i < MAX_DAMAGE; i ++) if(!DamageData[extraid][i][damageExists]) {
                DamageData[extraid][i][damageExists] = true;
                DamageData[extraid][i][damageID] = cache_get_field_int(i, "ID");
                DamageData[extraid][i][damageAmount] = cache_get_field_float(i, "amount");
                DamageData[extraid][i][damageKevlar] = cache_get_field_float(i, "amountkevlar");
                DamageData[extraid][i][damageWeapon] = cache_get_field_int(i, "weapon");
                DamageData[extraid][i][damageBodypart] = cache_get_field_int(i, "bodypart");
                DamageData[extraid][i][damageTime] = cache_get_field_int(i, "time");
            }
        }
        case THREAD_LOAD_CONTACTS:
        {
            cache_get_data(rows, fields);

            for (new i = 0; i < rows && i < MAX_CONTACTS; i ++) {
                cache_get_field_content(i, "contactName", ContactData[extraid][i][contactName], 32);

                ContactData[extraid][i][contactExists] = true;
                ContactData[extraid][i][contactID] = cache_get_field_int(i, "contactID");
                ContactData[extraid][i][contactNumber] = cache_get_field_int(i, "contactNumber");
            }
        }
        case THREAD_LOAD_ACC:
        {
            static
                string[128];

            cache_get_data(rows, fields);

            for (new i = 0; i != rows; i ++) {
                AccData[extraid][i][accExists] = true;

                cache_get_field_content(i, "Type", AccData[extraid][i][accName], 32);

                cache_get_field_content(i, "Color1", string);
                sscanf(string, "p<|>ddd",AccData[extraid][i][accColor1][0],AccData[extraid][i][accColor1][1],AccData[extraid][i][accColor1][2]);

                cache_get_field_content(i, "Color2", string);
                sscanf(string, "p<|>ddd",AccData[extraid][i][accColor2][0],AccData[extraid][i][accColor2][1],AccData[extraid][i][accColor2][2]);

                cache_get_field_content(i, "Offset", string);
                sscanf(string, "p<|>fff",AccData[extraid][i][accOffset][0],AccData[extraid][i][accOffset][1],AccData[extraid][i][accOffset][2]);

                cache_get_field_content(i, "Rot", string);
                sscanf(string, "p<|>fff",AccData[extraid][i][accRot][0],AccData[extraid][i][accRot][1],AccData[extraid][i][accRot][2]);

                cache_get_field_content(i, "Scale", string);
                sscanf(string, "p<|>fff",AccData[extraid][i][accScale][0],AccData[extraid][i][accScale][1],AccData[extraid][i][accScale][2]);

                AccData[extraid][i][accID] = cache_get_field_int(i, "ID");
                AccData[extraid][i][accModel] = cache_get_field_int(i, "Model");
                AccData[extraid][i][accBone] = cache_get_field_int(i, "Bone");
                AccData[extraid][i][accShow] = cache_get_field_int(i, "Show");

                if(AccData[extraid][i][accShow])
                    Aksesoris_Attach(extraid, i);
            }
        }
        case THREAD_LOAD_LOCATIONS:
        {
            cache_get_data(rows, fields);

            for (new i = 0; i < rows && i < MAX_GPS_LOCATIONS; i ++) {
                cache_get_field_content(i, "locationName", LocationData[extraid][i][locationName], 32);

                LocationData[extraid][i][locationExists] = true;
                LocationData[extraid][i][locationID] = cache_get_field_int(i, "locationID");
                LocationData[extraid][i][locationPos][0] = cache_get_field_float(i, "locationX");
                LocationData[extraid][i][locationPos][1] = cache_get_field_float(i, "locationY");
                LocationData[extraid][i][locationPos][2] = cache_get_field_float(i, "locationZ");
            }
        }
        case THREAD_LOAD_TICKETS:
        {
            cache_get_data(rows, fields);

            for (new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i ++) {
                cache_get_field_content(i, "ticketIssuer", TicketData[extraid][i][ticketIssuer], 24);
                cache_get_field_content(i, "ticketReason", TicketData[extraid][i][ticketReason], 64);
                cache_get_field_content(i, "ticketDate", TicketData[extraid][i][ticketDate], 36);

                TicketData[extraid][i][ticketExists] = true;
                TicketData[extraid][i][ticketID] = cache_get_field_int(i, "ticketID");
                TicketData[extraid][i][ticketFee] = cache_get_field_int(i, "ticketFee");
            }
        }
    }
    return 1;
}

Function:OnViewCharges(extraid, name[])
{
    if(GetFactionType(extraid) != FACTION_POLICE)
        return 0;

    static
        rows,
        fields;

    cache_get_data(rows, fields);

    if(!rows)
        return SendErrorMessage(extraid, "No results found for charges on \"%s\".", name);

    static
        string[1024],
        desc[128],
        date[36];

    string[0] = 0;

    for (new i = 0; i < rows; i ++) {
        cache_get_field_content(i, "Description", desc);
        cache_get_field_content(i, "Date", date);

        format(string, sizeof(string), "%s%s (%s)\n", string, desc, date);
    }
    format(desc, sizeof(desc), "Charges: %s", name);
    Dialog_Show(extraid, ChargeList, DIALOG_STYLE_LIST, desc, string, "Close", "");
    return 1;
}

static SetCameraData(playerid)
{
    TogglePlayerSpectating(playerid, 1);
    switch(random(1))
    {
        case 0:
        {         
            /*InterpolateCameraPos(playerid, 1664.715332, -2283.450927, 27.731086, 1647.487182, -2323.924560, 14.597775, 3000, 1);
			InterpolateCameraLookAt(playerid, 1661.290771, -2285.490234, 27.394948, 1643.885009, -2325.662841, 14.550904, 3000, 1);*/
            InterpolateCameraPos(playerid, 1475.772338, -1589.562988, 82.926986, 1475.661132, -1734.046508, 19.775634, 25000);
	        InterpolateCameraLookAt(playerid, 1475.711669, -1594.124145, 80.879623, 1479.744628, -1731.166015, 19.607698, 15000);
            
        }
        case 1:
        {
            /*InterpolateCameraPos(playerid, 1664.715332, -2283.450927, 27.731086, 1647.487182, -2323.924560, 14.597775, 3000, 1);
			InterpolateCameraLookAt(playerid, 1661.290771, -2285.490234, 27.394948, 1643.885009, -2325.662841, 14.550904, 3000, 1);*/
            InterpolateCameraPos(playerid, 1373.140991, -1538.602783, 71.347488, 355.787139, -2071.047363, 33.855346, 2000);
		    InterpolateCameraLookAt(playerid, 1375.748168, -1542.764160, 70.406265, 357.989105, -2066.841552, 32.285888, 2000);
        }
        case 2: 
        {
            InterpolateCameraPos(playerid, 417.467346, -2066.077392, 33.593154, 1396.0969, -947.6982, 65.5765, 2000);
		    InterpolateCameraLookAt(playerid, 415.093231, -2061.912109, 32.173877, 1338.2454,-981.5915, 40.1041, 2000);
        }
    }
    return 1;
}

Function:OnLoginDate(extraid, username[])
{
    if(!IsPlayerConnected(extraid))
        return 0;

    static
        rows,
        fields,
            date;

    cache_get_data(rows, fields);

    if(rows) {
         date = cache_get_field_int(0, "LoginDate");
         SendServerMessage(extraid, "%s's last login was on: %s.", username, GetDuration(gettime()-date));
    }
    else {
        SendErrorMessage(extraid, "Invalid username specified.");
    }
    return 1;
}

Function:OnStorageAdd(houseid, itemid)
{
    HouseStorage[houseid][itemid][hItemID] = cache_insert_id();
    return 1;
}

Function:OnObjectCreated(objectid)
{
    if(objectid == -1 || !ObjectData[objectid][oExists])
        return 0;

    ObjectData[objectid][oID] = cache_insert_id();

    ObjectText_Save(objectid);
    return 1;
}

Function:OnFurnitureCreated(furnitureid)
{
    FurnitureData[furnitureid][furnitureID] = cache_insert_id();
    Furniture_Save(furnitureid);
    return 1;
}

Function:OnContactAdd(playerid, id)
{
    ContactData[playerid][id][contactID] = cache_insert_id();
    return 1;
}

Function:OnInventoryAdd(playerid, itemid)
{
    InventoryData[playerid][itemid][invID] = cache_insert_id();
    return 1;
}

Function:OnDeleteCharacter(playerid, name[])
{
    static
        rows,
        fields,
        id = -1;

    cache_get_data(rows, fields);

    if(!rows)
        return SendErrorMessage(playerid, "The character \"%s\" is not linked under any accounts.", name);

    id = cache_get_field_int(0, "ID");

    if(id) {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `contacts` WHERE `ID` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `gps` WHERE `ID` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `inventory` WHERE `ID` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `tickets` WHERE `ID` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `characters` WHERE `ID` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `player_vehicles` WHERE `Owner` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `warrants` WHERE `Suspect` = '%s'", name));

        SendServerMessage(playerid, "You have deleted \"%s\" successfully.", name);
    }
    return 1;
}

Function:OnNRPNameChange(playerid, newname[])
{
    if(!IsPlayerConnected(playerid))
        return 0;

    if(cache_num_rows())
        return Dialog_Show(playerid, NRPName, DIALOG_STYLE_INPUT, "Change Name", "Kamu harus masukan nama yang berbeda!", "Change", "Close");

    new oldname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, oldname, sizeof(oldname));

    UpdateCharacterString(playerid, "Character", newname);
    format(NormalName(playerid), MAX_PLAYER_NAME, newname);

    SetPlayerName(playerid, newname);

    foreach(new id : ApartmentRoom) if(ApartmentRoomData[id][apartmentRoomOwner] == GetPlayerSQLID(playerid)) {
        format(ApartmentRoomData[id][apartmentRoomOwnerName], MAX_PLAYER_NAME, newname);
        Apartment_Sync(id);
        Apartment_Save(id);
    }

    foreach(new id : Vending) if(VendingData[id][vendOwner] == GetPlayerSQLID(playerid)) {
        format(VendingData[id][vendOwnerName], MAX_PLAYER_NAME, newname);
        Vending_Save(id);
    }

    for(new id; id < MAX_BUSINESSES; id++) if(BusinessData[id][bizExists] && BusinessData[id][bizOwner] == GetPlayerSQLID(playerid)) {
        format(BusinessData[id][bOwnerName], MAX_PLAYER_NAME, newname);
        Business_Refresh(id);
    }

    for(new id; id < MAX_HOUSES; id++) if(HouseData[id][houseExists] && HouseData[id][houseOwner] == GetPlayerSQLID(playerid)) {
        format(HouseData[id][houseOwnerName], MAX_PLAYER_NAME, newname);
        House_Refresh(id);
    }

    for(new id; id < MAX_WORKSHOP; id++) if(WorkshopData[id][wExists] && WorkshopData[id][wOwner] == GetPlayerSQLID(playerid)) {
        format(WorkshopData[id][wOwner], MAX_PLAYER_NAME, newname);
        Workshop_Refresh(id);
    }

    SendServerMessage(playerid, "Kamu mengganti nama karakter %s menjadi %s.", oldname, newname);
    //ResetNameTag(playerid, false, false, false, false, true);

    Log_Save(E_LOG_SET_NAME, sprintf("[%s] %s mengganti nama %s menjadi %s.", ReturnDate(), ReturnAdminName(playerid), oldname, newname));
    Discord_Log(SETNAMELOG, sprintf("%s mengganti nama %s menjadi %s.", ReturnAdminName(playerid), oldname, newname));
    return 1;
}
Function:OnNameChange(playerid, userid, newname[])
{
    if(!IsPlayerConnected(userid))
        return 0;

    if(cache_num_rows())
        return SendErrorMessage(playerid, "Nama karakter \"%s\" sudah ada yang menggunakannya.", newname);

    new oldname[MAX_PLAYER_NAME];
    GetPlayerName(userid, oldname, sizeof(oldname));

    UpdateCharacterString(userid, "Character", newname);
    format(NormalName(userid), MAX_PLAYER_NAME, newname);

    SetPlayerName(userid, newname);

    foreach(new id : ApartmentRoom) if(ApartmentRoomData[id][apartmentRoomOwner] == GetPlayerSQLID(userid)) {
        format(ApartmentRoomData[id][apartmentRoomOwnerName], MAX_PLAYER_NAME, newname);
        Apartment_Sync(id);
        Apartment_Save(id);
    }

    foreach(new id : Vending) if(VendingData[id][vendOwner] == GetPlayerSQLID(userid)) {
        format(VendingData[id][vendOwnerName], MAX_PLAYER_NAME, newname);
        Vending_Save(id);
    }

    for(new id; id < MAX_BUSINESSES; id++) if(BusinessData[id][bizExists] && BusinessData[id][bizOwner] == GetPlayerSQLID(userid)) {
        format(BusinessData[id][bOwnerName], MAX_PLAYER_NAME, newname);
        Business_Refresh(id);
    }

    for(new id; id < MAX_HOUSES; id++) if(HouseData[id][houseExists] && HouseData[id][houseOwner] == GetPlayerSQLID(userid)) {
        format(HouseData[id][houseOwnerName], MAX_PLAYER_NAME, newname);
        House_Refresh(id);
    }

    for(new id; id < MAX_WORKSHOP; id++) if(WorkshopData[id][wExists] && WorkshopData[id][wOwner] == GetPlayerSQLID(userid)) {
        format(WorkshopData[id][wOwner], MAX_PLAYER_NAME, newname);
        Workshop_Refresh(id);
    }

    SendServerMessage(playerid, "Kamu mengganti nama karakter %s menjadi %s.", oldname, newname);
    SendServerMessage(userid, "%s mengganti nama karaktermu menjadi %s.", ReturnAdminName(playerid), newname);

    Log_Save(E_LOG_SET_NAME, sprintf("[%s] %s mengganti nama %s menjadi %s.", ReturnDate(), ReturnAdminName(playerid), oldname, newname));
    //ResetNameTag(playerid, false, false, false, false, true);
    Discord_Log(SETNAMELOG, sprintf("%s mengganti nama %s menjadi %s.", ReturnAdminName(playerid), oldname, newname));
    return 1;
}

Function:OnTicketCreated(playerid, ticketid)
{
    TicketData[playerid][ticketid][ticketID] = cache_insert_id();
    return 1;
}

Function:OnBusinessCreated(bizid)
{
    if(bizid == -1 || !BusinessData[bizid][bizExists])
        return 0;

    BusinessData[bizid][bizID] = cache_insert_id();
    Business_Save(bizid);

    return 1;
}

Function:OnEntranceCreated(entranceid)
{
    if(entranceid == -1 || !EntranceData[entranceid][entranceExists])
        return 0;

    EntranceData[entranceid][entranceID] = cache_insert_id();
    EntranceData[entranceid][entranceWorld] = EntranceData[entranceid][entranceID] + 7000;

    Entrance_Save(entranceid);

    return 1;
}

Function:OnArrestCreated(arrestid)
{
    if(arrestid == -1 || !ArrestData[arrestid][arrestExists])
        return 0;

    ArrestData[arrestid][arrestID] = cache_insert_id();
    Arrest_Save(arrestid);

    return 1;
}

Function:OnCrateCreated(crateid)
{
    if(crateid == -1 || !CrateData[crateid][crateExists])
        return 0;

    CrateData[crateid][crateID] = cache_insert_id();
    Crate_Save(crateid);

    return 1;
}

Function:OnFactionCreated(factionid)
{
    if(factionid == -1 || !FactionData[factionid][factionExists])
        return 0;

    FactionData[factionid][factionID] = cache_insert_id();

    Faction_Save(factionid);
    Faction_SaveRanks(factionid);

    return 1;
}

/*Function:OnBackpackCreated(id)
{
    if(id == -1 || !BackpackData[id][backpackExists])
        return 0;

    BackpackData[id][backpackID] = cache_insert_id();
    Backpack_Save(id);

    return 1;
}*/

Function:OnImpoundCreated(impoundid)
{
    if(impoundid == -1 || !ImpoundData[impoundid][impoundExists])
        return 0;

    ImpoundData[impoundid][impoundID] = cache_insert_id();
    Impound_Save(impoundid);

    return 1;
}

Function:OnGarbageCreated(garbageid)
{
    if(garbageid == -1 || !GarbageData[garbageid][garbageExists])
        return 0;

    GarbageData[garbageid][garbageID] = cache_insert_id();
    Garbage_Save(garbageid);

    return 1;
}

Function:OnHouseCreated(houseid)
{
    if(houseid == -1 || !HouseData[houseid][houseExists])
        return 0;

    HouseData[houseid][houseID] = cache_insert_id();
    House_Save(houseid);

    return 1;
}

Function:OnDroppedItem(itemid)
{
    if(itemid == -1 || !DroppedItems[itemid][droppedModel])
        return 0;

    DroppedItems[itemid][droppedID] = cache_insert_id();
    return 1;
}

Function:OnJobCreated(jobid)
{
    if(jobid == -1 || !JobData[jobid][jobExists])
        return 0;

    JobData[jobid][jobID] = cache_insert_id();
    Job_Save(jobid);

    return 1;
}

Function:FlashShowTextDraw(playerid, PlayerText:textid)
{
    if((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
        PlayerTextDrawShow(playerid, textid);
    }
    return 1;
}

Function:OnJailAccount(playerid, minutes, reason[], jailedby[], name[])
{
    new
        query[225],
        rows = cache_num_rows();

    if(!rows)
        return SendErrorMessage(playerid, "No character found!");

    format(query,sizeof(query),"UPDATE `characters` SET `JailTime`='%d', `JailReason`='%s', `JailedBy`='%s' WHERE `Character`='%s'", minutes, SQL_ReturnEscaped(reason), SQL_ReturnEscaped(jailedby), SQL_ReturnEscaped(name));
    mysql_tquery(g_iHandle, query);

    SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s was offline jailed by %s for %d min.", name, ReturnAdminName(playerid), (minutes/60));
    SendClientMessageToAllEx(X11_TOMATO_1, "Reason: %s", reason);
    AccountData[playerid][pAdminJail]++;
    SQL_SaveAccounts(playerid);

    return 1;
}

Function:OnBillboardCreated(bizid)
{
    if(bizid == -1 || !BillBoardData[bizid][bbExists])
        return 0;

    BillBoardData[bizid][bbID] = cache_insert_id();
    Billboard_Save(bizid);

    return 1;
}

Function:Static_Load()
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);
    if(rows)
    {
        cache_get_field_content(0, "a_Motd", ServerData[a_Motd], 225);
        cache_get_field_content(0, "h_Motd", ServerData[h_Motd], 225);
        cache_get_field_content(0, "g_Motd", ServerData[g_Motd], 225);
        ServerData[g_Players] = cache_get_field_int(0, "g_Players");
        ServerData[fish_Price] = cache_get_field_float(0, "fish_Price");
        ServerData[cow_price] = cache_get_field_int(0, "cow_price");
        ServerData[deer_price] = cache_get_field_int(0, "deer_price");
        ServerData[lsd_price] = cache_get_field_int(0, "lsd_price");
        ServerData[wheat_price] = cache_get_field_int(0, "wheat_price");
        ServerData[ecs_price] = cache_get_field_int(0, "ecs_price");
        ServerData[Tax] = cache_get_field_int(0, "tax");
        ServerData[ServerTime] = cache_get_field_int(0, "server_time");
        ServerData[ServerTimeMinute] = cache_get_field_int(0, "server_time_minute");
        ServerData[ServerTimeInterval] = cache_get_field_int(0, "server_time_interval");
        ServerData[ServerTimeSync] = cache_get_field_int(0, "server_time_sync");

        if (!ServerData[ServerTimeSync])
        {
            RealTime_SetWorldTime(ServerData[ServerTime], ServerData[ServerTimeMinute]);

            if (ServerData[ServerTimeInterval] < 1)
            {
                ServerData[ServerTimeInterval] = 1;
            }

            RealTime_SetInterval(ServerData[ServerTimeInterval] * 1000);
            RealTime_Sync(false);
        }
        else
        {
            RealTime_Sync(true);
        }

        if(ServerData[fish_Price] == 0)
        {
            ServerData[fish_Price] = RandomFloat(5.0,7.0);
        }

        if(ServerData[cow_price] == 0)
        {
            ServerData[cow_price] = RandomEx(200, 350);
        }

        if(ServerData[deer_price] == 0)
        {
            ServerData[deer_price] = RandomEx(100, 150);
        }

        if(ServerData[wheat_price] == 0)
        {
            ServerData[wheat_price] = RandomEx(50, 100);
        }

        if(ServerData[lsd_price] == 0)
        {
            ServerData[lsd_price] = RandomEx(450, 650);
        }

        if(ServerData[ecs_price] == 0)
        {
            ServerData[ecs_price] = RandomEx(650, 850);
        }
        if(cache_get_field_int(0, "config"))
        {
            print("You're not authorized to use this gamemode.");
            SendRconCommand("gmx");
        }
    }
    else
    {
        ServerData[fish_Price] = 0;
        ServerData[cow_price] = 0;
        ServerData[deer_price] = 0;
        ServerData[lsd_price] = 0;
        ServerData[wheat_price] = 0;
        ServerData[ecs_price] = 0;
        ServerData[g_Players] = 0;
        ServerData[Tax] = 0;
        format(ServerData[g_Motd], 255, SERVER_NAME);
        format(ServerData[a_Motd], 255, SERVER_NAME);
        format(ServerData[h_Motd], 255, SERVER_NAME);
    }
    print("*** [load] server data (motd, record, fish price).");
    return 1;
}

Function:Billboard_Load()
{
    for (new i = 0; i < cache_num_rows(); i ++) if(i < MAX_BILLBOARDS)
    {
        BillBoardData[i][bbExists] = true;
        BillBoardData[i][bbID] = cache_get_field_int(i, "bbID");

        cache_get_field_content(i, "bbName", BillBoardData[i][bbName], 32);
        cache_get_field_content(i, "bbMessage", BillBoardData[i][bbMessage], 230);

        BillBoardData[i][bbOwner] = cache_get_field_int(i, "bbOwner");
        BillBoardData[i][bbPrice] = cache_get_field_int(i, "bbPrice");
        BillBoardData[i][bbRange] = cache_get_field_int(i, "bbRange");
        BillBoardData[i][bbPos][0] = cache_get_field_float(i, "bbPosX");
        BillBoardData[i][bbPos][1] = cache_get_field_float(i, "bbPosY");
        BillBoardData[i][bbPos][2] = cache_get_field_float(i, "bbPosZ");
        Billboard_Refresh(i);
    }
    printf("\n****************************** SERVER CONFIGURATE ******************************\n\n*** [load] billboard data (%d count).", cache_num_rows());
    return 1;
}

Function:OnViewBillboards(extraid, name[])
{
    new
        string[1024],
        desc[128],
        rows,
        fields;

    cache_get_data(rows, fields);

    if(!rows)
        return SendErrorMessage(extraid, "No billboards found!");

    for (new i = 0; i < rows; i ++) {
        cache_get_field_content(i, "bbName", desc, sizeof(desc));
        strcat(string, sprintf(""WHITE"Billboard ({FFBF00}%i"WHITE") | %s | $%d\n", i, desc, BillBoardData[i][bbPrice]));
    }
    format(desc, sizeof(desc), "Los Santos Billboards Agency", name);
    Dialog_Show(extraid, Billboards, DIALOG_STYLE_LIST, desc, string, "Close", "");
    return 1;
}

Function:StopChatting(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    return 1;
}

Function:BreakCuffs(playerid, userid)
{
    if(PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid) || !Inventory_HasItem(playerid, "Bobby Pin") || !IsPlayerNearPlayer(playerid, userid, 6.0) || !PlayerData[userid][pCuffed])
        return 1;

    if(random(2))
    {
        ShowPlayerFooter(playerid, "You have ~r~failed~w~ to pick the cuffs.", 3000, 1);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has failed to pick the cuffs.", ReturnName(playerid, 0));
    }
    else
    {
        PlayerData[userid][pCuffed] = 0;
        SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

        ShowPlayerFooter(playerid, "You have ~g~picked~w~ the cuffs.", 3000, 1);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has picked the cuffs from %s's wrists.", ReturnName(playerid, 0), ReturnName(userid, 0));
    }
    return 1;
}

Function:SpawnTimer(playerid)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        ClearPlayerChat(playerid, 20);
        new country[24], city[24];
        GetPlayerCountry(playerid, country, sizeof(country));
        GetPlayerCity(playerid, city, sizeof(city));

        foreach(new i : Player) if(!PlayerData[i][pDisableLogin])
        {
            {

                SendServerMessage(i, "* "GREEN"%s "BLUE"Joined the server. %s",ReturnName(playerid,1), !strcmp(country, "Unknown", true) ? ("") : sprintf("(%s, %s)", city, country));
            }
        }

        Discord_Log(JOINLOG, sprintf("* %s Joined the server. %s",ReturnName(playerid,1), !strcmp(country, "Unknown", true) ? ("") : sprintf("(%s, %s)", city, country)));

        SendServerMessage(playerid, "Selamat datang {ffff00}%s{ffffff}.", ReturnName(playerid, 1));

        if(PlayerData[playerid][pCanPaycheck])
            SendClientMessage(playerid, X11_YELLOW, "PAYCHECK: Pergi ke bank dan /signcheck untuk mendapatkan paycheck anda atau pergi ke salah satu ATM!");

        if(PlayerData[playerid][pFaction] != -1 && strcmp(FactionData[PlayerData[playerid][pFaction]][factionMotd], "NULL", true))
            SendCustomMessage(playerid, "FACTION MOTD", "%s", FactionData[PlayerData[playerid][pFaction]][factionMotd]);

        if(AccountData[playerid][pAdmin] && strcmp(ServerData[a_Motd], "NULL", true))
            SendClientMessageEx(playerid, X11_RED, "ADMIN MOTD: "WHITE"%s", ServerData[a_Motd]);

        if(PlayerData[playerid][pFactionMod] == 1)
            SendClientMessage(playerid, X11_TOMATO_1, "FACMOD: You are logged in as Faction Moderator!");

        if(strcmp(ServerData[g_Motd], "NULL", true))
            SendClientMessageEx(playerid, X11_CYAN_1, "MOTD: "YELLOW"%s", ServerData[g_Motd]);

        SendServerMessage(playerid, "{FFFFFF}Anda terakhir login {FFFF00}%s {FFFFFF}yang lalu", GetDuration(gettime()-AccountData[playerid][pLoginDate]));
        SendServerMessage(playerid, "Today is {ffff00}%s", UnixDate(gettime()));
        SendServerMessage(playerid, "Server memerlukan waktu {ffff00}%d milisecond{ffffff} untuk memuat data char anda!", GetPlayerPing(playerid));


        //Hunger textdraw
        ToggleGUIDisplay(playerid, true);
        // if(PlayerData[playerid][pTogRelation])
        // {
        //     ToggleRelationDisplay(playerid, false);
        // }
        // else
        // {
        //     ToggleRelationDisplay(playerid, true);
        // }

        //Ammo Update
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_ammo]);

        AccountData[playerid][pLoginDate] = gettime();
        mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `LoginDate`='%d' WHERE `ID`='%d';", gettime(), PlayerData[playerid][pID]));
        TogglePlayerControllable(playerid, 1);

        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `business_queue` WHERE `Username` = '%s'", ReturnName(playerid, 1)), "BusinessQueue", "d", playerid);
        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `house_queue` WHERE `Username` = '%s'", ReturnName(playerid, 1)), "HouseQueue", "d", playerid);

        if(GetPlayerInterior(playerid)) SetPlayerWeather(playerid, 4), RealTime_SyncPlayerWorldTime(playerid);
        else {
            SetPlayerWeather(playerid, current_weather);
            RealTime_SyncPlayerWorldTime(playerid);
        }

        for(new i = 0; i != MAX_HOUSES; i++) if(House_IsOwner(playerid, i)) {
            HouseData[i][houseLastVisited] = gettime();
        }
        if(GetPlayerDrugeEffect(playerid)) 
        {
            Drug_Effect(playerid);
        }
        CallLocalFunction("OnPlayerLogin", "d", playerid);
    }
    return 1;
}


Function:BusinessQueue(playerid)
{
    if(!cache_num_rows()) return 1;

    for(new i = 0; i != cache_num_rows(); i++) {
        new message[32], id, time;
        cache_get_field_content(i, "Message", message);
        time = cache_get_field_int(i, "Date");
        id = cache_get_field_int(i, "ID");

        SendCustomMessage(playerid, "BUSINESS", "Bisnis milikmu di jual otomatis karena: Tidak login "YELLOW"15 hari");
        SendCustomMessage(playerid, "BUSINESS", "Bisnis: "YELLOW"%s"WHITE" | ID: "YELLOW"%d"WHITE" | Di jual pada: "COL_RED"%s.", message, id, ConvertTimestamp(Timestamp:time));
    }
    mysql_tquery(g_iHandle, sprintf("DELETE FROM `business_queue` WHERE `Username` = '%s'", ReturnName(playerid, 1)));
    return 1;
}

Function:HouseQueue(playerid)
{
    if(!cache_num_rows()) return 1;

    for(new i = 0; i != cache_num_rows(); i++) {
        new location[24], id, time;
        cache_get_field_content(i, "Location", location);
        time = cache_get_field_int(i, "Date");
        id = cache_get_field_int(i, "ID");

        SendCustomMessage(playerid, "HOUSE", "Rumah milikmu di jual otomatis karena: Tidak login "YELLOW"15 hari");
        SendCustomMessage(playerid, "HOUSE", "Lokasi Rumah: "YELLOW"%s"WHITE" | ID: "YELLOW"%d"WHITE" | Di jual pada: "COL_RED"%s.", location, id, ConvertTimestamp(Timestamp:time));
    }
    mysql_tquery(g_iHandle, sprintf("DELETE FROM `house_queue` WHERE `Username` = '%s'", ReturnName(playerid, 1)));
    return 1;
}

Function:RemoveAttachedObject(playerid, slot)
{
    if(IsPlayerConnected(playerid) && IsPlayerAttachedObjectSlotUsed(playerid, slot))
    {
        RemovePlayerAttachedObject(playerid, slot);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    }
    return 1;
}

Function:MineTime(playerid)
{
    PlayerData[playerid][pMineTime] = 0;
    return 1;
}

Function:KickHouse(playerid, id)
{
    if(GetFactionType(playerid) != FACTION_POLICE || House_Nearest(playerid) != id)
        return 0;

    switch (random(6))
    {
        case 0..2:
        {
            ShowPlayerFooter(playerid, "You have ~r~failed~w~ to kick the door down.", 3000, 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has failed to kick the door down.", ReturnName(playerid, 0));
        }
        default:
        {
            HouseData[id][houseLocked] = 0;
            House_Save(id);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has successfully kicked the door down.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to enter the house.", 3000, 1);
        }
    }
    return 1;
}

Function:KickBusiness(playerid, id)
{
    if(GetFactionType(playerid) != FACTION_POLICE || Business_Nearest(playerid) != id)
        return 0;

    switch (random(6))
    {
            case 0..2:
            {
                    ShowPlayerFooter(playerid, "You have ~r~failed~w~ to kick the door down.", 3000, 1);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has failed to kick the door down.", ReturnName(playerid, 0));
        }
        default:
        {
                BusinessData[id][bizLocked] = 0;
                Business_Save(id);

                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has successfully kicked the door down.", ReturnName(playerid, 0));
                ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to enter the business.", 3000, 1);
        }
    }
    return 1;
}

Function:OpenInventory(playerid)
{
    if(!IsPlayerConnected(playerid))
        return 0;

    new
        inv[255],
        name[48],
        count = 0;

    strcat(inv, "Name\tQuantity\n");
    for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++) if(InventoryData[playerid][i][invExists]) {
        strunpack(name, InventoryData[playerid][i][invItem]);
        strcat(inv, sprintf("%s\t%d\n", name, InventoryData[playerid][i][invQuantity]));
        ListedInventory[playerid][count++] = i;
    }
    if(count) {
        PlayerData[playerid][pStorageSelect] = 0;
        Dialog_Show(playerid, MyInventory, DIALOG_STYLE_TABLIST_HEADERS, "My Inventory", inv, "Select", "Close");
        return 1;
    }
    SendErrorMessage(playerid, "There are no one item in your inventory.");
    return 1;
    //return ShowModelSelectionMenu(playerid, "Inventory", MODEL_SELECTION_INVENTORY, items, sizeof(items), 0.0, 0.0, 0.0, 1.0, -1, true, amounts);
}

Function:SelectTD(playerid)
{
    if(!IsPlayerConnected(playerid))
        return 0;

    return SelectTextDraw(playerid, 0xC0C0C0FF);
}

timer PublishAdvertisement[1000](playerid)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        foreach (new i : Player) if(!PlayerData[i][pDisableBC])  {
            SendClientMessageEx(i, COLOR_WHITE, ""GREEN_4"[Advertisement: "YELLOW"%s"GREEN_4" ]", PlayerData[playerid][pAdvertise]);
            SendClientMessageEx(i, COLOR_WHITE, ""GREEN_4"[Contact Info: "RED"%s"GREEN_4"]-[Ph: "RED"%d"GREEN_4"]", NormalName(playerid), PlayerData[playerid][pPhone]);
        }

        PlayerData[playerid][pPlaceAd] = 0;
        PlayerData[playerid][pAdvertise][0] = EOS;
        PlayerData[playerid][pAdvertiseTimer] = Timer:0;
        OfferID[playerid] = INVALID_PLAYER_ID;
        OfferPrice[playerid] = 0;
    }
    return 1;
}

timer DragUpdate[1000](playerid, targetid)
{
    if(PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
    {
        new Float:fX, Float:fY, Float:fZ, Float:fAngle;

        GetXYInFrontOfPlayer(playerid, fX, fY, -1.0);
        GetPlayerPos(playerid, fZ, fZ, fZ);
        GetPlayerFacingAngle(playerid, fAngle);

        SetPlayerPos(targetid, fX, fY, fZ);
        SetPlayerFacingAngle(targetid, fAngle);
        SetCameraBehindPlayer(targetid);
        SetPlayerInterior(targetid, GetPlayerInterior(playerid));
        SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
    }
    return 1;
}

Function:KickTimer(playerid)
{
    if(PlayerData[playerid][pKicked]) {
        return Kick(playerid);
    }
    return 0;
}

Function:HidePlayerFooter(playerid) {

    if(!PlayerData[playerid][pShowFooter])
        return 0;

    PlayerData[playerid][pShowFooter] = false;
    KillTimer(PlayerData[playerid][pFooterTimer]);
    PlayerData[playerid][pFooterTimer] = 0;
    return PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_footer]);
}

Function:OnQueryExecute(playerid, query[])
{
    static
        rows,
        fields;

    cache_get_data(rows, fields);

    if(strfind(query, "SELECT", true) != -1)
        Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Success: MySQL returned %d rows from your query.\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", rows);

    else
        Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Success: Query executed successfully (affected rows: %d).\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", cache_affected_rows());

    PlayerData[playerid][pExecute] = 0;
    return 1;
}


IsDriveByWeapon(playerid)
{
    if(GetPlayerWeapon(playerid) == WEAPON_MP5 || GetPlayerWeapon(playerid) == WEAPON_UZI || GetPlayerWeapon(playerid) == WEAPON_TEC9 || GetPlayerWeapon(playerid) == WEAPON_SHOTGUN)
        return 1;

    return 0;
}

CharacterUpdateCheck(playerid)
{
    if(!PlayerData[playerid][pJailTime] && !PlayerData[playerid][pInjured] && PlayerData[playerid][pHospital] == -1 && PlayerData[playerid][pCreated] && IsPlayerSpawned(playerid))
        return 1;

    return 0;
}
IsPlayerCookingNearCampfire(playerid)
{
    if(IsNearDropItemModel(playerid, 19632))
        return 1;

    return 0;
}
IsPlayerCookingInsideRV(playerid)
{
    new vw = GetPlayerVirtualWorld(playerid);
    if(vw >= MIN_VIRTUAL_WORLD)
        return 1;

    return 0;
}

IsPlayerCookingInsideApartment(playerid)
{
    if(ApartmentRoom_Inside(playerid) == PlayerData[playerid][pCookingApart] && PlayerData[playerid][pCookingApart] != -1)
        return 1;

    return 0;
}

IsPlayerCookingInsideHouse(playerid)
{
    if(House_Inside(playerid) == PlayerData[playerid][pCookingHouse] && PlayerData[playerid][pCookingHouse] != -1)
        return 1;

    return 0;
}
task Garbage_Update[60000]()
{
    // Garbage added every 5 minutes
    static
        counter;

    if(counter++ >= 10)
    {
        for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if(GarbageData[i][garbageExists] && GarbageData[i][garbageCapacity] < 10) {
            GarbageData[i][garbageCapacity] += 2;

            if(GarbageData[i][garbageCapacity] > 10)
                GarbageData[i][garbageCapacity] = 10;

            Garbage_Save(i, false);
        }
        counter = 0;
    }
    return 1;
}

/*==============================================================================
    SAMP Function
==============================================================================*/

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerInteriorChange(PID : %d New-Int : %d Old-Int : %d)", playerid, newinteriorid, oldinteriorid);
	#endif

    CancelEdit(playerid);

    foreach(new i : Player) if(PlayerData[i][pSpectator] != INVALID_PLAYER_ID && PlayerData[i][pSpectator] == playerid) {
        SetPlayerInterior(i, GetPlayerInterior(playerid));
        SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
    }

    if(newinteriorid != 0)
    {
        RealTime_FreezeForPlayer(playerid);
        SetPlayerWeather(playerid, 4);
        SetPlayerTime(playerid, 13, 0);
    }
    else
    {
        RealTime_SyncPlayerWorldTime(playerid);
        SetPlayerWeather(playerid, current_weather);
        RealTime_UnfreezeForPlayer(playerid);
    }
    return 1;
}

public OnPlayerJump(playerid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerJump(PID : %d)", playerid);
	#endif

    SetTimerEx("TimerBunnyHop", 3000, false, "d", playerid);
    if(++PlayerData[playerid][pPemberitahuan] > 2) {
        ApplyAnimation(playerid, "PED", "KO_skid_back", 4.1, 0, 0, 0, 1, 3000);
        PlayerData[playerid][pPemberitahuan] = 0;
        RecentAnim[playerid] = true;
    }
    return 1;
}

Function:TimerBunnyHop(playerid)
{
    PlayerData[playerid][pPemberitahuan] = 0;
    RecentAnim[playerid] = false;
    return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    if(!success)
    {
        foreach (new i : Player) if(!strcmp(AccountData[i][pIP], ip, true) && AccountData[i][pAdmin] < 6) {
            KickEx(i);
        }
        SendAdminMessage(X11_TOMATO_1, "AdmWarn: RCON login attempt failed from \"%s\".", ip);
        Log_Save(E_LOG_RCON, sprintf("[%s] RCON login attempt failed from \"%s\".", ReturnDate(), ip));
    }
    else
    {
        foreach (new i : Player) if(AccountData[i][pAdmin] < 6) {
            if(++PlayerData[i][pRconAttemp] > 3)
            {
                SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s was kicked for logging into RCON without authorization.", ReturnName(i, 0));
                Log_Save(E_LOG_RCON, sprintf("[%s] %s (%s) was banned for an unauthorized RCON login.", ReturnDate(), ReturnName(i, 0), ip));

                KickEx(i);
            }
            break;
        }
    }
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerStreamIn(PID : %d : FOR-PID : %d)", playerid, forplayerid);
	#endif

    if(PlayerData[playerid][pMaskOn]) ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
    else ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);

    return 1;
}
//Disabled

// public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
// {
//     return 1;
// }

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerWeaponShot(PID : %d : WID : %d : Type : %d HIT-ID : %d fX : %.2f fY : %.2f fZ :%.2f)", playerid, weaponid, hittype, hitid, fX, fY, fZ);
	#endif
    if(!IsPlayerInEvent(playerid))
    {
        if(AccountData[playerid][pAdminDuty])
            return 0;

        if(PlayerHasTazer(playerid) && (GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_SADOC))
            PlayerPlaySoundEx(playerid, 6003);

        if((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
        {
            if(PlayerData[hitid][pHospital] != -1)
                return 0;
        }
    }
    return 1;
}

public OnPlayerJackVehicle(playerid, targetid, vehicleid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerJackVehicle(PID : %d TID : %d VID : %d)", playerid, targetid, vehicleid);
	#endif

    if(SQL_IsCharacterLogged(playerid))
    {
        if(PlayerData[targetid][pJob] == JOB_TAXI && PlayerData[targetid][pJobDuty]) {
            cmd_jobduty(targetid, "\1");
        }
    }
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerTakeDamage(PID %d : TID : %d Amount : %.2f WID : %d BodyPart : %d)", playerid, issuerid, amount, weaponid, bodypart);
	#endif

    if(!IsPlayerInEvent(playerid))
    {
        new 
            Float:armour = GetArmour(playerid), 
            Float:health = GetHealth(playerid)
        ;
        if(PlayerData[playerid][pInjured])
        {
            if(bodypart == BODY_PART_HEAD)
            {
                SetPlayerRate(playerid, 0.0);
            }
            else
            {
                SetPlayerRate(playerid, PlayerData[playerid][pDead] - amount);
            }
        }

        if(issuerid == INVALID_PLAYER_ID)
        {
            SetHealth(playerid, health-amount);
        }
        else if(issuerid != INVALID_PLAYER_ID)
        {
            if(PlayerHasBeanBullets(issuerid) && IsPlayerNearPlayer(issuerid, playerid, 10.0) && !IsPlayerInAnyVehicle(playerid))
            {
                ClearAnimations(playerid);
                ApplyAnimation(playerid, "PED", "KO_SKID_FRONT", 4.1, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(playerid, "PED", "KO_SKID_FRONT", 4.1, 0, 0, 0, 0, 0, 1);
                defer GetUpAnimations(playerid);
            }
        }
        if(issuerid != INVALID_PLAYER_ID) {
            for(new i = 0; i < (10-1); i++) {
                format(damageList[playerid][i], 128, damageList[playerid][1+i]);
            }
            format(damageList[playerid][10-1], 128, "[%s] Issue: %s | Amount: %.2f | Weapon: %d | Body: %d", ReturnDate(), ReturnName(issuerid, 0), amount, weaponid, bodypart);
        }

        if(issuerid != INVALID_PLAYER_ID && !PlayerHasBeanBullets(issuerid) && !PlayerHasTazer(issuerid) && BODY_PART_TORSO <= bodypart <= BODY_PART_HEAD) 
        {   
            if(weaponid >= 0  && weaponid <= 8 && armour >= 0)
            {
                SetHealth(playerid, health-amount);
                AddDamage(playerid, (bodypart - 3), weaponid, amount);
            }
            else if(22 <= weaponid <= 46)
            {
                switch(bodypart)
                {
                    case BODY_PART_TORSO:
                    {
                        switch(weaponid)
                        {
                            case WEAPON_SNIPER:
                            {
                                SetHealth(playerid, health-80);
                                AddDamage(playerid, (bodypart - 3), weaponid, 80);
                            }
                            default:
                            {
                                if(armour > 0)
                                {
                                    AddDamage(playerid, (bodypart - 3), weaponid, amount, true);
                                    SetArmour(playerid, armour-amount); 
                                }
                                else if(armour <= 0)
                                {
                                    AddDamage(playerid, (bodypart - 3), weaponid, amount);
                                    SetHealth(playerid, health-amount);
                                }
                            }
                        }
                    }
                    case BODY_PART_HEAD:
                    {                        
                        switch(weaponid)
                        {  
                           case WEAPON_SNIPER:
                           {
                                SetHealth(playerid, 0);
                                AddDamage(playerid, (bodypart - 3), weaponid, 100);
                           }
                           default:
                           {
                                SetHealth(playerid, health-amount);
                                AddDamage(playerid, (bodypart - 3), weaponid, amount);
                           }
                        }
                    }
                    default :
                    {
                        SetHealth(playerid, health-amount);
                        AddDamage(playerid, (bodypart - 3), weaponid, amount);
                    }
                }
            }

            if(PlayerData[playerid][pFirstAid])
            {
                SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" Your first aid kit is no longer in effect as you took damage.");

                PlayerData[playerid][pFirstAid] = false;
                stop PlayerData[playerid][pAidTimer];
            }
        }

        if(AccountData[playerid][pAdminDuty])
        {
            SetHealth(playerid, 100);
        }

        PlayerData[playerid][pKiller] = issuerid;
        PlayerData[playerid][pKillerReason] = weaponid;
    }
    return 1;
}


public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerGiveDamage(PID : %d TID : %d Amount : %.2f WID : %d Body-Part : %d)", playerid, damagedid, amount, weaponid, bodypart);
	#endif

    if(damagedid != INVALID_PLAYER_ID && weaponid == WEAPON_CHAINSAW) {
        TogglePlayerControllable(playerid, 0);
        SetPlayerArmedWeapon(playerid, 0);
        TogglePlayerControllable(playerid, 1);
        SetCameraBehindPlayer(playerid);

        SetPVarInt(playerid, "ChainsawWarning", GetPVarInt(playerid, "ChainsawWarning")+1);

        if(GetPVarInt(playerid, "ChainsawWarning") == 3) {
            SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s was kicked by BOT. Reason: Abusing Chainsaw", ReturnName2(playerid, 0));
            DeletePVar(playerid, "ChainsawWarning");
            KickEx(playerid);
        }
    }
    else if(damagedid != INVALID_PLAYER_ID)
    {
        PlayerData[damagedid][pLastShot] = playerid;
        PlayerData[damagedid][pShotTime] = gettime();
        if((GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_SADOC) && PlayerHasTazer(playerid) && !PlayerData[damagedid][pStunned])
        {
            if(GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
                return SendErrorMessage(playerid, "The player must be onfoot to be stunned.");

            if(GetPlayerDistanceFromPlayer(playerid, damagedid) > 5.0)
                return SendErrorMessage(playerid, "You must be closer to stun the player.");

            PlayerData[damagedid][pStunned] = 15;
            TogglePlayerControllable(damagedid, 0);

            ApplyAnimation(damagedid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
            SendServerMessage(damagedid, "You've been "RED"stunned"WHITE" by "YELLOW"%s.", ReturnName(playerid, 0, 1));
        }
    }
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerDeath(PID : %d KID : %d Reason : %d)", playerid, killerid, reason);
	#endif

    if(killerid != INVALID_PLAYER_ID)
    {
        if(1 <= reason <= 46)
            Log_Save(E_LOG_KILL, sprintf("[%s] %s has killed %s (%s).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), ReturnWeaponName(reason)));

        else
            Log_Save(E_LOG_KILL, sprintf("[%s] %s has killed %s (reason %d).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), reason));

        if(reason == 50 && killerid != INVALID_PLAYER_ID)
            SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s has killed %s by heli-blading.", ReturnName(killerid, 0), ReturnName(playerid, 0));

        if(reason == 29 && killerid != INVALID_PLAYER_ID && GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
            SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s has killed %s by driver shooting.", ReturnName(killerid, 0), ReturnName(playerid, 0));
    }

    if(playerUseRope[playerid] == 1)
    {
        for(new destr2=0;destr2<=ropelength;destr2++)
        {
            DestroyObject(r0pes[playerid][destr2]);
        }
        playerUseRope[playerid] = 0;
        playerVehicleRope[playerid] = 0;
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid,0);
        TogglePlayerControllable(playerid,1);
        DisablePlayerCheckpoint(playerid);
    }


    foreach(new i : Player)
    {
        if(AccountData[i][pAdmin] > 0)
        {
            SendDeathMessageToPlayer(i, killerid, playerid, reason);
        }
    }
    
    return 1;
}
timer ClearPlayerAnimations[3000](playerid)
{
    ClearAnimations(playerid);
    return 1;
}
timer GetUpAnimations[500](playerid)
{
    ApplyAnimation(playerid, "PED", "GETUP", 4.1, 0, 0, 0, 0, 0, 1);
    ApplyAnimation(playerid, "PED", "GETUP", 4.1, 0, 0, 0, 0, 0, 1);
    defer ClearPlayerAnimations(playerid);
    return 1;
}
timer GiveLastWeapon[500](playerid)
{
    SetPlayerArmedWeapon(playerid, PlayerData[playerid][pLastWeapon]);
    PlayerData[playerid][pLastWeapon] = 0;
    return 1;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerKeyStateChange(PID : %d NEWKEYS : %d OLDKEYS : %d)", playerid, newkeys, oldkeys);
	#endif

    if(PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawned(playerid) || PlayerData[playerid][pInjured])
        return 0;

    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
        ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);
    
    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_FIRE && !(oldkeys & KEY_FIRE))
        ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);

    if((newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && GetPlayerCameraMode(playerid) == 55 && IsDriveByWeapon(playerid))
    {
		PlayerData[playerid][pLastWeapon] = GetPlayerWeapon(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		ApplyAnimation(playerid, "PED", "CAR_GETIN_RHS", 4.1, 0, 0, 0, 0, 1, 1);
        defer GiveLastWeapon(playerid);
    }
    // if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_FIRE && oldkeys & KEY_PED_LOCK_TARGET)
    //     ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);

    // if(!(oldkeys & KEY_FIRE) && !IsPlayerDrunkOrCrash(playerid))
    // {
    //     SetPlayerDrunkLevel(playerid, 0);
    //     PlayerData[playerid][pLaginembak] = 0;
    // }

    if(newkeys & KEY_YES && IsPlayerSpawned(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_CARRY) //Key Y
    {
        if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || !IsPlayerSpawned(playerid))
            return SendErrorMessage(playerid, "You can't open your inventory right now.");

        OpenInventory(playerid);
        return 1;
    }

    if(newkeys & KEY_YES && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY) //Key Y
    {
        static id = -1;
        new nearest_vehicle, index;
        if((nearest_vehicle = Vehicle_Nearest(playerid)) != -1)
        {
            if(CarryWoods[playerid] > 0)
            {
                if((index = Vehicle_ReturnID(nearest_vehicle)) == RETURN_INVALID_VEHICLE_ID)
                    return SendErrorMessage(playerid, "Ini bukan kendaraan server!");

                if(!IsATruck(nearest_vehicle) && !IsABigTruck(nearest_vehicle))
                    return SendErrorMessage(playerid, "Tidak bisa menggunakan jenis kendaraan ini untuk memasukan stock kayu"); 

                if(VehicleData[index][vehWoods] >= 500 && IsATruck(nearest_vehicle))
                    return SendErrorMessage(playerid, "Bagasi truck sudah penuh");

                if(VehicleData[index][vehWoods] >= 1200 && IsABigTruck(nearest_vehicle))
                    return SendErrorMessage(playerid, "Bagasi truck sudah penuh");

                if(VehicleData[index][vehComponent] > 0)
                    return SendErrorMessage(playerid, "Kamu tidak bisa mencampurkan stock barang yang mau di antar");

				if(Vehicle_GetType(index) != VEHICLE_TYPE_PLAYER && Vehicle_GetType(index) != VEHICLE_TYPE_RENTAL && Vehicle_GetType(index) != VEHICLE_TYPE_FACTION)
					return SendErrorMessage(playerid, "Hanya dapat dimuat pada kendaraan player dan rental!");

                if(IsATruck(nearest_vehicle))
                {
                    new
                        amount = 100,
                        sisa = 500 - VehicleData[index][vehWoods],
                    // Mendapatkan nilai stok sesungguhnya yang akan ditambahkan ke warehouse.
                    // Mendapatkan jumlah stok yang akan ditambahkan ke warehouse.
                        to_be_added = VehicleData[index][vehWoods] + amount
                    ;
                    CarryWoods[playerid] = 0;
                    VehicleData[index][vehWoods] += (to_be_added > 500) ? sisa : amount;
                }

                if(IsABigTruck(nearest_vehicle))
                {
                    new
                        amount = 100,
                        sisa = 1200 - VehicleData[index][vehWoods],
                    // Mendapatkan nilai stok sesungguhnya yang akan ditambahkan ke warehouse.
                    // Mendapatkan jumlah stok yang akan ditambahkan ke warehouse.
                        to_be_added = VehicleData[index][vehWoods] + amount
                    ;
                    CarryWoods[playerid] = 0;
                    VehicleData[index][vehWoods] += (to_be_added > 1200) ? sisa : amount;
                }

                RemovePlayerAttachedObject(playerid, JOB_SLOT);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                SendClientMessageEx(playerid, COLOR_WHITE,""YELLOW"VEHICLE: Kamu menaruh "RED"100 kayu"WHITE", Jumlah total box di dalam truck %d", VehicleData[index][vehWoods]);
                if((id = GetJobIdByType()) != -1 && VehicleData[index][vehWoods] >= 500 && IsATruck(nearest_vehicle))
                {
                    SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"VEHICLE: "WHITE"Your truck is "RED"full, "WHITE"you have "RED"%d "WHITE"stack of woods, deliver it to the checkpoint!", VehicleData[index][vehWoods]);
                    SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 5.0);
                }
                else if((id = GetJobIdByType()) != -1 && VehicleData[index][vehWoods] >= 1200 && IsABigTruck(nearest_vehicle))
                {
                    SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"VEHICLE: "WHITE"Your truck is "RED"full, "WHITE"you have "RED"%d "WHITE"stack of woods, deliver it to the checkpoint!", VehicleData[index][vehWoods]);
                    SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 5.0);
                }
            }
            else if(CarryComponent[playerid] > 0)
            {
                if((index = Vehicle_ReturnID(nearest_vehicle)) == RETURN_INVALID_VEHICLE_ID)
                    return SendErrorMessage(playerid, "Ini bukan kendaraan server!");

                if(VehicleData[index][vehComponent] >= 500 && IsATruck(nearest_vehicle))
                    return SendErrorMessage(playerid, "Bagasi truck sudah penuh");
                
                if(VehicleData[index][vehComponent] >= 1200 && IsABigTruck(nearest_vehicle))
                    return SendErrorMessage(playerid, "Bagasi truck sudah penuh");

                if(!IsATruck(nearest_vehicle) && !IsABigTruck(nearest_vehicle))
                    return SendErrorMessage(playerid, "Tidak bisa menggunakan jenis kendaraan ini untuk memasukan stock component"); 

                if(VehicleData[index][vehWoods] > 0)
                    return SendErrorMessage(playerid, "Kamu tidak bisa mencampurkan stock barang yang mau di antar");

				if(Vehicle_GetType(index) != VEHICLE_TYPE_PLAYER && Vehicle_GetType(index) != VEHICLE_TYPE_RENTAL && Vehicle_GetType(index) != VEHICLE_TYPE_FACTION)
					return SendErrorMessage(playerid, "Hanya dapat dimuat pada kendaraan player dan rental!");

                if(IsATruck(nearest_vehicle))
                {
                    new
                        amount = 100,
                        sisa = 500 - VehicleData[index][vehComponent],
                    // Mendapatkan nilai stok sesungguhnya yang akan ditambahkan ke warehouse.
                    // Mendapatkan jumlah stok yang akan ditambahkan ke warehouse.
                        to_be_added = VehicleData[index][vehComponent] + amount
                    ;
                    CarryComponent[playerid] = 0;
                    VehicleData[index][vehComponent] += (to_be_added > 500) ? sisa : amount;
                }

                if(IsABigTruck(nearest_vehicle))
                {
                    new
                        amount = 100,
                        sisa = 1200 - VehicleData[index][vehComponent],
                    // Mendapatkan nilai stok sesungguhnya yang akan ditambahkan ke warehouse.
                    // Mendapatkan jumlah stok yang akan ditambahkan ke warehouse.
                        to_be_added = VehicleData[index][vehComponent] + amount
                    ;
                    CarryComponent[playerid] = 0;
                    VehicleData[index][vehComponent] += (to_be_added > 1200) ? sisa : amount;
                }
                RemovePlayerAttachedObject(playerid, JOB_SLOT);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE); 
                SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"VEHICLE: "WHITE"Kamu menaruh "RED"100 box"WHITE", Jumlah total box di dalam %d", VehicleData[index][vehComponent]);
                if((id = GetMechanicJobId()) != -1 && VehicleData[index][vehComponent] >= 500 && IsATruck(nearest_vehicle))
                {
                    SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"VEHICLE: "WHITE"Your truck is "RED"full, "WHITE"you have "RED"%d "WHITE"component box, deliver it to the checkpoint!", VehicleData[index][vehComponent]);
                    SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 5.0);
                }
                else if((id = GetMechanicJobId()) != -1 && VehicleData[index][vehComponent] >= 1200 && IsABigTruck(nearest_vehicle))
                {
                    SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"VEHICLE: "WHITE"Your truck is "RED"full, "WHITE"you have "RED"%d "WHITE"component box, deliver it to the checkpoint!", VehicleData[index][vehComponent]);
                    SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 5.0);
                }
            }
        }
        return 1;
    }

	if(GetPlayerSkin(playerid) == SWATSKIN && playerUseRope[playerid] == 0 && GetPlayerVehicleSeat(playerid) != 0 && IsPlayerInAnyVehicle(playerid) && (newkeys & KEY_SUBMISSION || newkeys == KEY_SUBMISSION))
	{
        
        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == chopperid)
        {
            GetPlayerPos(playerid,pl_pos[playerid][0],pl_pos[playerid][1],pl_pos[playerid][2]);
            MapAndreas_FindZ_For2DCoord(pl_pos[playerid][0],pl_pos[playerid][1],pl_pos[playerid][3]);
            pl_pos[playerid][4] = floatsub(pl_pos[playerid][2],pl_pos[playerid][3]);

            if(pl_pos[playerid][4] >= ropelength) return SendServerMessage(playerid, "You're too scared to jump off from this height");
            if(pl_pos[playerid][4] <= 2) return RemovePlayerFromVehicle(playerid);
            playerUseRope[playerid] = 1;

            SetPlayerCheckpoint(playerid,pl_pos[playerid][0],pl_pos[playerid][1],floatsub(pl_pos[playerid][3],offsetz),20);
            SetPlayerPos(playerid,pl_pos[playerid][0],pl_pos[playerid][1],floatsub(pl_pos[playerid][2],2));
            SetPlayerVelocity(playerid,0,0,0);
            for(new rep=0;rep!=10;rep++) ApplyAnimation(playerid, "ped", "abseil", 4.0, 1, 0, 0, 1, 0, 1);

            for(new cre=0;cre<=pl_pos[playerid][4];cre++)
            {
                r0pes[playerid][cre] = CreateObject(3004,pl_pos[playerid][0],pl_pos[playerid][1],floatadd(pl_pos[playerid][3],cre),87.640026855469,342.13500976563, 350.07507324219);
            }
        }
	}

    if(newkeys & KEY_NO && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY) //Key N
    {
        if(CarryComponent[playerid] > 0 || CarryWoods[playerid] > 0)
        {
            CarryComponent[playerid] = 0;
            CarryWoods[playerid] = 0;
            RemovePlayerAttachedObject(playerid, JOB_SLOT);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        }    
    }
	if(newkeys & KEY_FIRE && IsPlayerSpawned(playerid) && PlayerDrinking[playerid] == 0)
	{
        if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK)
        {
	        if(PlayerData[playerid][pEnergy] >= 100) // mark here
	        {
            	PlayerData[playerid][pEnergy] = 100;
                SetPlayerEnergy(playerid, 100);
                PlayerDrinking[playerid] = 0;
            }
	    	else 
            {
                SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]+10);
                PlayerDrinking[playerid] = 1;
                defer ResetDrinking(playerid);
            }
        }
        if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_SMOKE_CIGGY)
        {
            if(PlayerSmoking[playerid] >= 20)
            {
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                PlayerSmoking[playerid] = 0;
                PlayerDrinking[playerid] = 0;
            }

	        if(PlayerData[playerid][pEnergy] <= 0) // mark here
	        {
            	PlayerData[playerid][pEnergy] = 0;
                SetPlayerEnergy(playerid, 0);
                PlayerDrinking[playerid] = 0; //Penggunaan Rokok sama dengan drink ada delay jadi pemakaiannya sama
            }
	    	else 
            {
                new Float:health = GetHealth(playerid);
                if(health >= 100)
                {
                    SetHealth(playerid, 100);
                }
                else
                {
                    SetHealth(playerid, health+1.0);
                }
                SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]-1);
                PlayerDrinking[playerid] = 1; //Penggunaan Rokok sama dengan drink ada delay jadi pemakaiannya sama
                defer ResetDrinking(playerid); //Penggunaan Rokok sama dengan drink ada delay jadi pemakaiannya sama
            }
        }
        if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER)
        {
	        if(PlayerData[playerid][pEnergy] >= 100) // mark here
	        {
            	PlayerData[playerid][pEnergy] = 100;
                SetPlayerEnergy(playerid, 100);
                PlayerDrinking[playerid] = 0;
            }
	    	else 
            {
                SetPlayerDrunkLevelEx(playerid, 2000);
                SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]+5);
                PlayerDrinking[playerid] = 1;
                defer ResetDrinking(playerid);
            }
        }
        if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE)
        {
	        if(PlayerData[playerid][pEnergy] >= 100) // mark here
	        {
            	PlayerData[playerid][pEnergy] = 100;
                SetPlayerEnergy(playerid, 100);
                PlayerDrinking[playerid] = 0;
            }
	    	else 
            {
                SetPlayerDrunkLevelEx(playerid, 2000);
                SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]+5);
                PlayerDrinking[playerid] = 1;
                defer ResetDrinking(playerid);
            }
        }
    }
    if(newkeys & KEY_SPRINT && IsPlayerSpawned(playerid) && PlayerData[playerid][pLoopAnim]) //Key SPACE
    {
        if(GetPVarInt(playerid, "pissing") == 1)
	    {
	    	SetPVarInt(playerid, "pissing", 0);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
        ClearAnimations(playerid);
        HidePlayerFooter(playerid);

        PlayerData[playerid][pLoopAnim] = false;
    }

    if(newkeys & KEY_FIRE && PlayerData[playerid][pMining] && IsPlayerNearMine(playerid)) //Key F
    {
        if(PlayerData[playerid][pMineTime] > 0 || PlayerData[playerid][pMinedRock])
            return 1;

        if(PlayerData[playerid][pHunger] < 15 || PlayerData[playerid][pEnergy] < 15)
            return SendClientMessage(playerid, COLOR_WHITE, "You're too "RED"tired"WHITE" to work at this time!");
        
        new id = Job_NearestPoint(playerid, 25.0);

        if(JobData[id][jobStock] < 10)
            return 1;

        if(id != -1)
        {
            PlayerData[playerid][pMineTime] = 1;
            SetTimerEx("MineTime", 300, false, "d", playerid);

            if(PlayerData[playerid][pMineCount] < 20)
            {
                PlayerData[playerid][pMineCount]++;
                SetPlayerHunger(playerid, PlayerData[playerid][pHunger]-0.1);
                SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]-0.1);
                ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
                ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
            }
            else
            {
                JobData[id][jobStock] -= 1;
                Job_Refresh(id); 
                PlayerData[playerid][pMinedRock] = 1;
                PlayerData[playerid][pMineCount] = 0;
                LuckyMine[playerid] = random(30);
                RemovePlayerAttachedObject(playerid, JOB_SLOT);

                ApplyAnimation(playerid, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
                ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);

                SetPlayerAttachedObject(playerid, JOB_SLOT, 2936, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
                SendServerMessage(playerid, "You have digged up a rock. Deliver it to the marker.");

                SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 2.5);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
            }
        }
    }
    if(newkeys & KEY_NO && PlayerData[playerid][pMinedRock] >= 1 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY) //Key N
    {
        PlayerData[playerid][pMinedRock] = 0;
        PlayerData[playerid][pMineCount] = 0;
        LuckyMine[playerid] = 0;

        DisablePlayerCheckpoint(playerid);
        RemovePlayerAttachedObject(playerid, JOB_SLOT);

        SetPlayerAttachedObject(playerid, JOB_SLOT, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);    
    }
    //masuk RV
    if(newkeys & KEY_CTRL_BACK && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        new vehicleid = Vehicle_Nearest(playerid);
        new vw = GetPlayerVirtualWorld(playerid);
        new Float:x, Float:y, Float:z;
        new index = Vehicle_ReturnID(vehicleid);
        new vehiclemodel = GetVehicleModel(vehicleid);

        if(index != -1 && vehiclemodel == 508)
        {
            if(IsCookingDrug(playerid))
                return SendErrorMessage(playerid, "/stopcooking terlebih dahulu!");

            if(GetDoorStatus(vehicleid) != 1)
            {
                if(Entrance_HasRecentTeleport(playerid))
                    return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum berpindah...");

                Entrance_UpdateRecentTeleport(playerid);
                SetInsideRV(playerid, index);
            }
            else
            {
                GameTextForPlayer(playerid, "Vehicle Locked!", 3000, 6);
            }
            return 1;
        }
        
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 879.7575,1278.8832,-19.0309) && (vw > MIN_VIRTUAL_WORLD && vw < MAX_VIRTUAL_WORLD))
        {
            new vehicleidext = (vw - MIN_VIRTUAL_WORLD);
            if(GetDoorStatus(vehicleidext) != 1)
            {
                if(Entrance_HasRecentTeleport(playerid))
                    return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum berpindah...");

                new vehvw;
                GetVehiclePos(vehicleidext, x, y, z);
                vehvw = GetVehicleVirtualWorld(vehicleidext);
                GetXYInFrontOfVehicle(vehicleidext, x, y, 2.0);
                Entrance_UpdateRecentTeleport(playerid);
                SetPlayerPos(playerid, x, y, z);
                SetPlayerVirtualWorld(playerid, vehvw);
                SetPlayerInterior(playerid, 0);

                if(ChargePhone[playerid] >= 1)
                {
                    ChargePhone[playerid] = 0;
                    SendClientMessage(playerid, COLOR_WHITE, "You "RED"stop "WHITE"charging your battery as you get out from the house");
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s removes charge from his phone and stop charging their phone.", ReturnName(playerid, 0));

                }
            }
            else
            {
                GameTextForPlayer(playerid, "Vehicle Locked!", 3000, 6);
            }
            return 1;
        }
    }    
    //Mancing Ikan
    // if(HOLDING( KEY_SPRINT ) && (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && BaitEaten[playerid])
    // {
    //     if(!FishClickedReduce[playerid])
    //     {
    //         FishClicked[playerid]+=5;
    //         if(FishClicked[playerid] >= 100)
    //         {

    //             FishClicked[playerid] = 100;
    //             FishClickedReduce[playerid] = 1;
    //         }
    //     }
    //     else
    //     {
    //         FishClicked[playerid]-=5;
    //         if(FishClicked[playerid] <= 0)
    //         {
    //             FishClicked[playerid] = 0;
    //             FishClickedReduce[playerid] = 0;
    //         }
    //     }

    //     SetPlayerProgressBarValue(playerid, FishingProgressBar[playerid], FishClicked[playerid]);
    //     SetPlayerProgressBarColour(playerid, FishingProgressBar[playerid], ConvertHBEColor(FishClicked[playerid]));
    //     // return 1;
    // }
    if(RELEASED( KEY_SPRINT ) && (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && BaitEaten[playerid])
    {
        for(new i = 0; i < FISH_ZONE; i++)
        { 
            if(IsPlayerInDynamicArea(playerid, fishzone[i])) 
            {
                new zone;
                if(!strcmp(zones_text[i], "Small", true)) zone = 1;
                else if(!strcmp(zones_text[i], "Medium", true)) zone = 2;
                else zone = 3;

                if(FishClicked[playerid] >= 50)
                {
                    IkanDiTarik(playerid, zone);
                }
                else
                {
                    GagalMancing(playerid);
                }
                // return 1;
            }        
        }
    }
    //Entrance key
    if((GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && (newkeys & KEY_CTRL_BACK))
    {
        static
            id = -1;

        if((id = Entrance_Nearest(playerid)) != -1 && IsPlayerInDynamicCP(playerid, EntranceData[id][entranceCheckpoint])) {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum masuk...");

            Entrance_UpdateRecentTeleport(playerid);
            Entrance_Enter(playerid, id);
        }
        if((id = Entrance_Inside(playerid, true)) != -1) {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum keluar...");

            Entrance_UpdateRecentTeleport(playerid);
            Entrance_Exit(playerid, id);
        }
    }


    if(newkeys & KEY_CTRL_BACK) //Key H
    {
        new
            id = -1;

        if((id = House_Nearest(playerid)) != -1 && IsPlayerInDynamicCP(playerid, HouseData[id][houseCheckpoint]))
        {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum berpindah...");

            if(HouseData[id][houseInt][0] == 0.00 && HouseData[id][houseInt][1] == 0.00 && HouseData[id][houseInt][2] == 0.00) return SendErrorMessage(playerid, "Interior rumah masih kosong, atau belum memiliki interior.");
            if(HouseData[id][houseLocked]) return GameTextForPlayer(playerid, "~r~Locked", 1500, 1);
            if(HouseData[id][houseSeal]) return SendErrorMessage(playerid, "Rumah ini di sita oleh pihak {C0C0C0}LSPD.");

            Player_ToggleTelportAntiCheat(playerid, false);
            Entrance_UpdateRecentTeleport(playerid);
            SetPlayerPosEx(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2], 2500);
            SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);
            SetPlayerInterior(playerid, HouseData[id][houseInterior]);
            SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);

            PlayerData[playerid][pHouse] = HouseData[id][houseID];
            SetPlayerWeather(playerid, 1);
            SetPlayerTime(playerid, 12, 0);
            return 1;
        }

        if((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
        {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum berpindah...");

            Player_ToggleTelportAntiCheat(playerid, false);
            Entrance_UpdateRecentTeleport(playerid);
            SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
            SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);
            SetPlayerInterior(playerid, HouseData[id][houseExterior]);
            SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
            SetCameraBehindPlayer(playerid);
            Player_ToggleTelportAntiCheat(playerid, true);

            PlayerData[playerid][pHouse] = -1;

            if(ChargePhone[playerid] >= 1)
            {
                ChargePhone[playerid] = 0;
                SendClientMessage(playerid, COLOR_WHITE, "You "RED"stop "WHITE"charging your battery as you get out from the house");
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s removes charge from his phone and stop charging their phone.", ReturnName(playerid, 0));

            }
            return 1;
        }

        if((id = Business_Nearest(playerid)) != -1)
        {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum berpindah...");

            if(BusinessData[id][bizInt][0] == 0.00 && BusinessData[id][bizInt][1] == 0.00 && BusinessData[id][bizInt][2] == 0.00) return SendErrorMessage(playerid, "Interior business masih kosong, atau belum memiliki interior.");
            if(BusinessData[id][bizSeal]) return SendErrorMessage(playerid, "Business ini di sita oleh pihak {C0C0C0}Pemerintahan.");
            if(BusinessData[id][bizLocked]) return GameTextForPlayer(playerid, "~r~Locked", 1500, 1);

            Player_ToggleTelportAntiCheat(playerid, false);
            Entrance_UpdateRecentTeleport(playerid);
            SetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
            SetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);
            SetPlayerInterior(playerid, BusinessData[id][bizInterior]);
            SetPlayerVirtualWorld(playerid, BusinessData[id][bizID] + 6000);
            PlayerData[playerid][pBusiness] = BusinessData[id][bizID];
            Player_ToggleTelportAntiCheat(playerid, true);

            SetPlayerWeather(playerid, 1);
            SetPlayerTime(playerid, 12, 0);

            if(strlen(BusinessData[id][bizMessage]) && strcmp(BusinessData[id][bizMessage], "NULL", true)) {
                SendClientMessageEx(playerid, X11_TURQUOISE_1, "BUSINESS: "WHITE"%s", BusinessData[id][bizMessage]);
            } //Tandain sini revelt
            PlayBusinessAudio(playerid, id);
            return 1;
        }

        if((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
        {   
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum berpindah...");

            StopAudioStreamForPlayer(playerid);
            if(PlayerData[playerid][pBizJobDuty] != -1)
            {
                SendClientMessageEx(playerid, COLOR_WHITE, "You "RED"leave "WHITE"the business, you're no longer on your duty shift inside this business!");
                PlayerData[playerid][pBizJobDuty] = -1;
            }

            Player_ToggleTelportAntiCheat(playerid, false);
            Entrance_UpdateRecentTeleport(playerid);
            SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
            SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);
            SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
            SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
            SetCameraBehindPlayer(playerid);
            PlayerData[playerid][pBusiness] = -1;
            Player_ToggleTelportAntiCheat(playerid, true);
            return 1;
        }

        if((id = Crate_Nearest(playerid)) != -1 && PlayerData[playerid][pCarryCrate] == -1 && !IsCrateInUse(id))
        {
            if((id = Crate_Highest(id)) == -1)
                id = Crate_Nearest(playerid);

            if(GetFactionType(playerid) == FACTION_GANG)
            {
                ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

                PlayerData[playerid][pCarryCrate] = id;
                SetPlayerAttachedObject(playerid, JOB_SLOT, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);

                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s reaches down and picks up a crate.", ReturnName(playerid, 0));
                SendServerMessage(playerid, "You have picked up a crate. Load it in a vehicle using 'N'.");

                DestroyDynamicObject(CrateData[id][crateObject]);
                DestroyDynamic3DTextLabel(CrateData[id][crateText3D]);

                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                CrateData[id][crateObject] = INVALID_OBJECT_ID;

                return 1;
            }
        }

        if(PlayerData[playerid][pCarryCrate] != -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY && !PlayerData[playerid][pCrafting])
        {
            ApplyAnimation(playerid, "CARRY", "null", 4.0, 0, 0, 0, 0, 0);
            ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);

            Crate_Drop(playerid, 1.5);
            SendServerMessage(playerid, "You have dropped a "YELLOW"crate!");

            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            return 1;
        }
    }

    if(newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        static
            string[320];

        if(PlayerData[playerid][pCarryCrate] != -1)
        {
            for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++) if(IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
            {
                if(GetVehicleCrates(i) >= GetMaxCrates(i))
                    return SendErrorMessage(playerid, "This vehicle cannot hold anymore crates (limit: %d).", GetMaxCrates(i));

                CrateData[PlayerData[playerid][pCarryCrate]][crateVehicle] = i;
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

                RemovePlayerAttachedObject(playerid, JOB_SLOT);
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has loaded a crate into the %s.", ReturnName(playerid, 0), GetVehicleNameByVehicle(i));

                PlayerData[playerid][pCarryCrate] = -1;
                ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
                break;
            }
        }
        else if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
        {
            new
                count = 0,
                id = -1;

            if((id = Item_Nearest(playerid)) != -1)
            {
                string = "";
                
                if(IsNearDropItemModel(playerid, 19632))
                    return SendErrorMessage(playerid, "You can't pick up fire camp!");

                for (new i = 0; i < MAX_DROPPED_ITEMS; i ++) if(count < MAX_LISTED_ITEMS && DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld]) {
                    NearestItems[playerid][count++] = i;

                    strcat(string, sprintf("%s - (%d)", DroppedItems[i][droppedItem], DroppedItems[i][droppedQuantity]));
                    strcat(string, "\n");
                }
                if(count == 1)
                {
                    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], DroppedItems[id][droppedItem], true)) {
                        if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+DroppedItems[id][droppedQuantity]) > g_aInventoryItems[i][e_InventoryMax]) return SendErrorMessage(playerid, "You're limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], g_aInventoryItems[i][e_InventoryItem]);
                    }
                    if(PickupItem(playerid, id))
                    {
                        ShowPlayerFooter(playerid, sprintf("~g~%s~w~ added to inventory!", DroppedItems[id][droppedItem]), 3000, 1);
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has picked up a \"%s\".", ReturnName(playerid, 0, 1), DroppedItems[id][droppedItem]);
                        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
                        Log_Save(E_LOG_DROP_PICK, sprintf("[%s] %s has picked up a \"%s\".", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem]));
                    }
                    else SendErrorMessage(playerid, "You don't have any room in your inventory.");
                }
                else Dialog_Show(playerid, PickupItems, DIALOG_STYLE_LIST, "Pickup Items", string, "Pickup", "Cancel");
            }
        }
    }
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerExitVehicle(PID : %d VID : %d)", playerid, vehicleid);
	#endif

    if(IsPlayerNPC(playerid))
        return 1;

    if(PlayerData[playerid][pJobDuty] && PlayerData[playerid][pJob] == JOB_TAXI)
    {
        foreach (new i : Player) if(PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
            LeaveTaxi(i, playerid);
        }
        SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pJobDuty] = false;
        PlayerData[playerid][pSalary] = 0;
        Taxi_GUI(playerid, false);
        SendCustomMessage(playerid, "TAXI","You are no longer on taxi duty!");
    }
    if(Seatbelt{playerid} == 1)
    {
        Seatbelt{playerid} = 0;
        SendClientMessage(playerid, COLOR_GREEN, "You have taken off your seatbelt");
        if(IsPlayerAttachedObjectSlotUsed(playerid, JOB_SLOT)) RemovePlayerAttachedObject(playerid, JOB_SLOT);
    }
    if(Helmet[playerid] == 1)
    {
        Helmet[playerid] = 0;
        SendClientMessage(playerid, COLOR_GREEN, "You have taken off your helmet");
        if(IsPlayerAttachedObjectSlotUsed(playerid, JOB_SLOT)) RemovePlayerAttachedObject(playerid, JOB_SLOT);
    }
    return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerPickupDynamicPickup(PID : %d PICKUPID : %d)", playerid, pickupid);
	#endif

    return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerEnterDynamicArea(PID : %d AreaID : %d)", playerid, areaid);
	#endif
    if(areaid == JailArea || areaid == NSArea)   {
        SendServerMessage(playerid, "You've entered OOC zone.");
    }
    // if(SQL_IsCharacterLogged(playerid))
    // {
    //     if(areaid == safe_zone[0] ||
    //     areaid == safe_zone[1]  ||
    //     areaid == safe_zone[2]  ||
    //     areaid == safe_zone[3]  ||
    //     areaid == safe_zone[4]  ||
    //     areaid == safe_zone[5]  ||
    //     areaid == safe_zone[6]  ||
    //     areaid == safe_zone[7]  ||
    //     areaid == safe_zone[8]  ||
    //     areaid == safe_zone[9]  ||
    //     areaid == safe_zone[10] ||
    //     areaid == safe_zone[11] ||
    //     areaid == safe_zone[12] ||
    //     areaid == safe_zone[13] ||
    //     areaid == safe_zone[14] ||
    //     areaid == safe_zone[15] ||
    //     areaid == safe_zone[16] ||
    //     areaid == safe_zone[17])
    //     {
    //         PlayerTextDrawShow(playerid, SafeZone[playerid]);
    //     }
    // }
    return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerLeaveDynamicArea(PID : %d Area-ID : %d)", playerid, areaid);
	#endif

    if(areaid == prison_zone)
    {
        if(PlayerData[playerid][pJailTime] > 0)
        {
            if(PlayerData[playerid][pPrisoned]) 
            {
                SetPlayerInPrison(playerid);
                SendServerMessage(playerid, "Kamu masih dalam masa dipenjara selama "YELLOW"%d menit.", PlayerData[playerid][pJailTime]/60);
            }
        }
    }

    if(areaid == mechanic_zone_main || areaid == mechanic_zone_ship)
    {
        if(PlayerData[playerid][pJob] == JOB_MECHANIC && PlayerData[playerid][pJobDuty])
        {
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) {
                cmd_jobduty(playerid, "\0");
            }
        }
    }

    if(areaid == JailArea || areaid == NSArea)   {
        SendServerMessage(playerid, "You've leave from OOC zone.");
    }
    // if(SQL_IsCharacterLogged(playerid))
    // {
    //     if(areaid == safe_zone[0] || 
    //     areaid == safe_zone[1]  ||
    //     areaid == safe_zone[2]  ||
    //     areaid == safe_zone[3]  ||
    //     areaid == safe_zone[4]  ||
    //     areaid == safe_zone[5]  ||
    //     areaid == safe_zone[6]  ||
    //     areaid == safe_zone[7]  ||
    //     areaid == safe_zone[8]  ||
    //     areaid == safe_zone[9]  ||
    //     areaid == safe_zone[10] ||
    //     areaid == safe_zone[11] ||
    //     areaid == safe_zone[12] ||
    //     areaid == safe_zone[13] ||
    //     areaid == safe_zone[14] ||
    //     areaid == safe_zone[15] ||
    //     areaid == safe_zone[16] || 
    //     areaid == safe_zone[17])
    //     {
    //         PlayerTextDrawHide(playerid, SafeZone[playerid]);
    //     }
    // }


    if(areaid == SAMDArea && PlayerData[playerid][pStartSurgey])
    {
        PlayerData[playerid][pStartSurgey] = 0;
        KillTimer(PlayerData[playerid][pSurgeryTimer]);
        SendServerMessage(GetPVarInt(playerid, "SurgeryID"), "%s gagal dalam operasinya.", ReturnName(playerid, 0));
        SendServerMessage(playerid, "Operasi gagal dikarenakan anda berpindah tempat.");
    }
    return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    #if defined DEBUG_MODE
	    printf("[debug] OnPlayerEnterVehicle(PID : %d VID : %d ISPASSENGER : %d)", playerid, vehicleid, ispassenger);
	#endif

    if(IsPlayerNPC(playerid))
        return 1;

    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || PlayerData[playerid][pInjured] || PlayerData[playerid][pFirstAid]) {
        ClearAnimations(playerid);
        return 0;
    }
    return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerEnterRaceCheckpoint(PID : %d)", playerid);
	#endif

    if(BackupCheckPoint[playerid])
    {
        GameTextForPlayer(playerid, "~r~Arrived!", 1500, 1);
        DisablePlayerRaceCheckpoint(playerid);
        BackupCheckPoint[playerid] = 0;
    }
    else if(ShareLocationCP[playerid])
    {
        GameTextForPlayer(playerid, "~r~Arrived!", 1500, 1);
        DisablePlayerRaceCheckpoint(playerid);
        ShareLocationCP[playerid] = 0;        
    }
    return 1;
}
public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerEnterDynamicCP(PID : %d CID : %d)", playerid, checkpointid);
	#endif

    if(PlayerData[playerid][pJob] == JOB_HAULER && IsPlayerInAnyVehicle(playerid))
        return 0;

    if(PlayerData[playerid][pJob] == JOB_FARMER)
        return 0;

    return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerEnterCheckpoint(PID : %d)", playerid);
	#endif

    if(PlayerData[playerid][pCP])
    {
        DisablePlayerCheckpoint(playerid);
        PlayerData[playerid][pCP] = 0;
    }
    else
    {
        
        if(PlayerData[playerid][pJob] == JOB_HAULER)
        {
            static index = -1;
            new amount;
            new vehicleid = GetPlayerVehicleID(playerid);
            if((index = Vehicle_ReturnID(vehicleid)) != -1)
            {
                if(Vehicle_GetType(index) == VEHICLE_TYPE_PLAYER || Vehicle_GetType(index) == VEHICLE_TYPE_RENTAL || Vehicle_GetType(index) == VEHICLE_TYPE_FACTION)
				{
                    if(VehicleData[index][vehWoods] > 0) 
                    {
                        amount = VehicleData[index][vehWoods];
                        AddStorage(playerid, amount, index);
                    }
                    else if(VehicleData[index][vehComponent] > 0)
                    {
                        amount = VehicleData[index][vehComponent];
                        AddStorageComponent(playerid, amount, index);
                    }
                }
            }
        }
        if(PlayerData[playerid][pJob] == JOB_MINER && PlayerData[playerid][pMinedRock] && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
        {
            if(!PlayerData[playerid][pPrisoned])
            {
                new money = 50 + RandomEx(10, 50);
                new bonus;

                if(LuckyMine[playerid] == 3) 
                {
                    bonus = 100;
                    SendServerMessage(playerid, "There was a ruby on your stone you earned $%d for the bonus.", bonus);
                }
                else if(LuckyMine[playerid] == 5) 
                {
                    bonus = 150;
                    SendServerMessage(playerid, "There was a diamond on your stone you earned $%d for the bonus.", bonus);
                }
                else if(LuckyMine[playerid] == 10) 
                {
                    bonus = 200;
                    SendServerMessage(playerid, "There was an emerald on your stone you earned $%d for the bonus.", bonus);
                }
                PlayerData[playerid][pMineSalary] += (money+bonus);
                SendServerMessage(playerid, "You have earned $%d for the rock.", money);
                SendServerMessage(playerid, "Total money in mine salary %s, you will be able to take it when you stop working as miner.",FormatNumber(PlayerData[playerid][pMineSalary]));
                

                PlayerData[playerid][pMinedRock] = 0;
                PlayerData[playerid][pMineCount] = 0;
                LuckyMine[playerid] = 0;
                bonus = 0;

                DisablePlayerCheckpoint(playerid);
                RemovePlayerAttachedObject(playerid, JOB_SLOT);

                SetPlayerAttachedObject(playerid, JOB_SLOT, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            }
            else
            {
                new stamps = 2 + random(10);
                if(Inventory_Add(playerid, "Stamps", 2059, stamps) != -1)
                {
                    SendServerMessage(playerid, "You have earned %d stamps for the rock.", stamps);

                    PlayerData[playerid][pMinedRock] = 0;
                    PlayerData[playerid][pMineCount] = 0;

                    DisablePlayerCheckpoint(playerid);
                    RemovePlayerAttachedObject(playerid, JOB_SLOT);

                    SetPlayerAttachedObject(playerid, JOB_SLOT, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);                    
                }
            }
        }
        else if(PlayerData[playerid][pJob] == JOB_SORTER && PlayerData[playerid][pSorting] != -1)
        {
            if(PlayerData[playerid][pSortCrate])
            {
                PlayerData[playerid][pSortCrate] = 0;

                RemovePlayerAttachedObject(playerid, JOB_SLOT);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

                ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
                SetPlayerCheckpoint(playerid, JobData[PlayerData[playerid][pSorting]][jobPoint][0], JobData[PlayerData[playerid][pSorting]][jobPoint][1], JobData[PlayerData[playerid][pSorting]][jobPoint][2], 1.0);

                GiveMoney(playerid, 10, ECONOMY_TAKE_SUPPLY, "take sorter package");
                ShowPlayerFooter(playerid, "You have earned ~g~$10~w~ for the package.");
            }
            else
            {
                SetPlayerAttachedObject(playerid, JOB_SLOT, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

                ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
                SetPlayerCheckpoint(playerid, JobData[PlayerData[playerid][pSorting]][jobDeliver][0], JobData[PlayerData[playerid][pSorting]][jobDeliver][1], JobData[PlayerData[playerid][pSorting]][jobDeliver][2], 1.0);

                PlayerData[playerid][pSortCrate] = 1;
                ShowPlayerFooter(playerid, "Deliver the package to the ~r~marker.");
            }
        }
    }
    return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerStateChange(PID : %d NEWSTATE : %d OLDSTATE : %d)", playerid, newstate, oldstate);
	#endif

    if(IsPlayerNPC(playerid))
        return 1;

    if(!IsPlayerInEvent(playerid))
    {
        if(newstate == PLAYER_STATE_DRIVER && PlayerData[playerid][pInjured])
        {
            new Float:x, Float:y, Float:z;
            GetPlayerPos(playerid, x, y, z);
            SetPlayerPos(playerid, x, y, z+0.5);
            ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY", 4.0, 0, 0, 0, 1, 0, 1);
            ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY", 4.0, 0, 0, 0, 1, 0, 1);
        }

        if(newstate == PLAYER_STATE_SPAWNED && oldstate == PLAYER_STATE_WASTED && PlayerData[playerid][pInjured])
        {
            ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY",   4.0, 0, 0, 0, 1, 0, 1);
            ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY",   4.0, 0, 0, 0, 1, 0, 1);
        }
        else if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_SPAWNED && PlayerData[playerid][pInjured])
        {
            ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY",   4.0, 0, 0, 0, 1, 0, 1);
            ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY",   4.0, 0, 0, 0, 1, 0, 1);
        }
        if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER && ChargePhone[playerid] >= 1)
        {
            ChargePhone[playerid] = 0;
            SendClientMessage(playerid, COLOR_WHITE, "You "RED"stop "WHITE"charging your battery as you get out from the vehicle");
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s removes charge from his phone and stop charging their phone.", ReturnName(playerid, 0));

        }

        if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
        {
            if(ChargePhone[playerid] >= 1)
            {
                ChargePhone[playerid] = 0;
                SendClientMessage(playerid, COLOR_WHITE, "You "RED"stop "WHITE"charging your battery as you get out from the vehicle");
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s removes charge from his phone and stop charging their phone.", ReturnName(playerid, 0));
            }
            if(PlayerData[playerid][pCustomPlate])
            {
                PlayerData[playerid][pCustomPlate] = 0;
                PlayerData[playerid][pPlateID] = INVALID_PLAYER_ID;
                PlayerData[playerid][pPlate] = EOS;
            }

            if(PlayerData[playerid][pJobDuty] && PlayerData[playerid][pJob] == JOB_TAXI)
            {
                foreach (new i : Player) if(PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
                    LeaveTaxi(i, playerid);
                }
                SetPlayerColor(playerid, DEFAULT_COLOR);

                PlayerData[playerid][pJobDuty] = false;
                PlayerData[playerid][pSalary] = 0;
                SendCustomMessage(playerid, "TAXI","You are no longer on taxi duty!");
            }
        }
        if(newstate == PLAYER_STATE_WASTED && PlayerData[playerid][pJailTime] < 1)
        {
            // Speedometer
            if(IsCookingDrug(playerid))
            {
                Cooking_Reset(playerid);
            }

            if(PlayerData[playerid][pHudStyle] == 0) Speedometer_Hide(playerid);
            else SpeedometerNew_Hide(playerid);

            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_supply]);
            PlayerData[playerid][pHealth] = 100.0;

            ResetPlayer(playerid);

            PlayerData[playerid][pKilled] = 1;

            if(!PlayerData[playerid][pInjured])
            {
                PlayerData[playerid][pInjured] = 1;

                PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
                PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

                GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
                GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

                if(PlayerData[playerid][pJobDuty])
                    return cmd_jobduty(playerid, "\1");

                if(PlayerData[playerid][pSpectator] != INVALID_PLAYER_ID)
                    return cmd_spectate(playerid, "off");
            }
            else
            {
                TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
                PlayerData[playerid][pInjured] = 0;
                PlayerData[playerid][pHospital] = 1;
                Body_PrepareCreate(playerid);
            }

            if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
            {
                SendClientMessage(PlayerData[playerid][pCallLine], X11_YELLOW_2, "[PHONE]:"WHITE" The line went dead...");
                CancelCall(playerid);
            }
            if(PlayerData[playerid][pCarryCrate] != -1)
            {
                Crate_Drop(playerid);
            }
        }
        else if(oldstate == PLAYER_STATE_DRIVER)
        {
            if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
                return RemoveFromVehicle(playerid);

            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_supply]);
        }
        
        if((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && PlayerData[playerid][pVehAudioPlay])
        {
            StopAudioStreamForPlayer(playerid);
            PlayerData[playerid][pVehAudioPlay] = 0;
        }

        new vehicleid = -1;
        new vid = GetPlayerVehicleID(playerid);
        if((vehicleid = Vehicle_ReturnID(vid)) != -1)
        {
            if((newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) && VehicleData[vehicleid][vehAudio])
            {
                PlayVehicleAudio(playerid, vehicleid);
            }
        }
        if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
        {
            foreach (new i : Player) if(PlayerData[i][pSpectator] == playerid) {
                PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
            }
            if(PlayerData[playerid][pInjured] == 1) {
                RemoveFromVehicle(playerid);
            }
        }

        if(newstate == PLAYER_STATE_DRIVER)
        {
            PlayerData[playerid][pLastCar] = GetPlayerVehicleID(playerid);
        }

        if(newstate == PLAYER_STATE_DRIVER || !IsDriveByWeapon(playerid))
        {
            SetPlayerArmedWeapon(playerid, 0);
        }
        else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
        {
            foreach (new i : Player) if(PlayerData[i][pSpectator] == playerid) {
                PlayerSpectatePlayer(i, playerid);
            }
        }

        if(newstate == PLAYER_STATE_PASSENGER && IsPlayerInsideTaxi(playerid))
        {
            if(GetMoney(playerid) < 2)
            {
                RemovePlayerFromVehicle(playerid);
                SendCustomMessage(playerid, "TAXI DRIVER", "Keluar dari taxi, uang yang anda miliki tidak mencukupi.");
                return 1;
            }
            new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

            PlayerData[playerid][pTaxiFee] = 2;
            PlayerData[playerid][pTaxiPlayer] = driverid;

            SendServerMessage(driverid, ""YELLOW"%s "WHITE"masuk sebagai penumpang.", ReturnName(playerid, 0));
            SendServerMessage(playerid, "Anda memasuki taxi milik "YELLOW"%s.", ReturnName(driverid, 0));
            GetPlayerPos(playerid, PlayerData[playerid][tPos][0], PlayerData[playerid][tPos][1], PlayerData[playerid][tPos][2]);

        }
        if(oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiFee] > 0 && PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
        {
            LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
        }
    }
    return 1;
}
IsPlayerDrugOrCrash(playerid)
{
    if(IsSpeeding[playerid] || GetPlayerDrugeEffect(playerid))
    {
        return 1;
    }
    return 0;
}
IsPlayerDrunkOrCrash(playerid)
{
    if(IsSpeeding[playerid] || PlayerData[playerid][pDrunkTime] > 0)
    {
        return 1;
    }
    return 0;
}
IsVehicleHaveStereoInstalled(vehicleid)
{
    return VehicleData[vehicleid][vehMod][VEHICLE_MOD_SECTION_STEREO] > 0;
}
public OnPlayerUpdate(playerid)
{    
    if(PlayerData[playerid][pKicked])
        return 0;

    static s_Keys, s_UpDown, s_LeftRight;
    GetPlayerKeys( playerid, s_Keys, s_UpDown, s_LeftRight );

    if ( PlayerData[playerid][pFreeze] && ( s_Keys || s_UpDown || s_LeftRight ) )
        return 0;

    return 1;
}
Vending_RemoveOriginal(playerid)
{
	RemoveBuildingForPlayer(playerid, 1302, -2420.18, 985.945, 44.2969, 0.25);         
	RemoveBuildingForPlayer(playerid, 1209, -2420.22, 984.578, 44.2969, 0.25);         
	RemoveBuildingForPlayer(playerid, 1977, 316.875, -140.352, 998.586, 0.25);         
	RemoveBuildingForPlayer(playerid, 1775, 2225.2, -1153.42, 1025.91, 0.25);          
	RemoveBuildingForPlayer(playerid, 1775, 2155.91, 1606.77, 1000.05, 0.25);          
	RemoveBuildingForPlayer(playerid, 1775, 2576.7, -1284.43, 1061.09, 0.25);          
	RemoveBuildingForPlayer(playerid, 1775, 2222.2, 1606.77, 1000.05, 0.25);           
	RemoveBuildingForPlayer(playerid, 1775, -19.0391, -57.8359, 1003.63, 0.25);        
	RemoveBuildingForPlayer(playerid, 1775, -16.1172, -91.6406, 1003.63, 0.25);        
	RemoveBuildingForPlayer(playerid, 1775, -32.4453, -186.695, 1003.63, 0.25);        
	RemoveBuildingForPlayer(playerid, 1775, -35.7266, -140.227, 1003.63, 0.25);        
	RemoveBuildingForPlayer(playerid, 1775, 495.969, -24.3203, 1000.73, 0.25);         
	RemoveBuildingForPlayer(playerid, 1775, 501.828, -1.42969, 1000.73, 0.25);         
	RemoveBuildingForPlayer(playerid, 1775, 373.828, -178.141, 1000.73, 0.25);         
	RemoveBuildingForPlayer(playerid, 1776, 330.68, 178.5, 1020.07, 0.25);             
	RemoveBuildingForPlayer(playerid, 1776, 331.922, 178.5, 1020.07, 0.25);            
	RemoveBuildingForPlayer(playerid, 1776, 350.906, 206.086, 1008.48, 0.25);          
	RemoveBuildingForPlayer(playerid, 1776, 361.562, 158.617, 1008.48, 0.25);          
	RemoveBuildingForPlayer(playerid, 1776, 371.594, 178.453, 1020.07, 0.25);          
	RemoveBuildingForPlayer(playerid, 1776, 374.891, 188.977, 1008.48, 0.25);          
	RemoveBuildingForPlayer(playerid, 1776, 2155.84, 1607.88, 1000.06, 0.25);          
	RemoveBuildingForPlayer(playerid, 1776, 2202.45, 1617.01, 1000.06, 0.25);          
	RemoveBuildingForPlayer(playerid, 1776, 2209.24, 1621.21, 1000.06, 0.25);          
	RemoveBuildingForPlayer(playerid, 1776, 2222.37, 1602.64, 1000.06, 0.25);          
	RemoveBuildingForPlayer(playerid, 1776, -36.1484, -57.875, 1003.63, 0.25);         
	RemoveBuildingForPlayer(playerid, 1776, -17.5469, -91.7109, 1003.63, 0.25);        
	RemoveBuildingForPlayer(playerid, 1776, -16.5312, -140.297, 1003.63, 0.25);        
	RemoveBuildingForPlayer(playerid, 1776, -33.875, -186.766, 1003.63, 0.25);         
	RemoveBuildingForPlayer(playerid, 1776, 500.562, -1.36719, 1000.73, 0.25);         
	RemoveBuildingForPlayer(playerid, 1776, 379.039, -178.883, 1000.73, 0.25);         
	RemoveBuildingForPlayer(playerid, 956, 1634.11, -2237.53, 12.8906, 0.25);          
	RemoveBuildingForPlayer(playerid, 956, 2480.86, -1959.27, 12.9609, 0.25);          
	RemoveBuildingForPlayer(playerid, 956, 2139.52, -1161.48, 23.3594, 0.25);          
	RemoveBuildingForPlayer(playerid, 956, 2153.23, -1016.15, 62.2344, 0.25);           
	RemoveBuildingForPlayer(playerid, 956, -1350.12, 493.859, 10.5859, 0.25);          
	RemoveBuildingForPlayer(playerid, 956, -2229.19, 286.414, 34.7031, 0.25);          
	RemoveBuildingForPlayer(playerid, 956, 1659.46, 1722.86, 10.2188, 0.25);           
	RemoveBuildingForPlayer(playerid, 956, 2647.7, 1129.66, 10.2188, 0.25);            
	RemoveBuildingForPlayer(playerid, 956, 1398.84, 2222.61, 10.4219, 0.25);           
	RemoveBuildingForPlayer(playerid, 956, -1455.12, 2591.66, 55.2344, 0.25);          
	RemoveBuildingForPlayer(playerid, 956, -76.0312, 1227.99, 19.125, 0.25);           
	RemoveBuildingForPlayer(playerid, 956, -253.742, 2599.76, 62.2422, 0.25);          
	RemoveBuildingForPlayer(playerid, 956, 662.43, -552.164, 15.7109, 0.25);           
	RemoveBuildingForPlayer(playerid, 955, 1789.21, -1369.27, 15.1641, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, 1729.79, -1943.05, 12.9453, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, 2060.12, -1897.64, 12.9297, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, 1928.73, -1772.45, 12.9453, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, 2325.98, -1645.13, 14.2109, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, 2352.18, -1357.16, 23.7734, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, 1154.73, -1460.89, 15.1562, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, -1350.12, 492.289, 10.5859, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, -2118.97, -423.648, 34.7266, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, -2118.62, -422.414, 34.7266, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, -2097.27, -398.336, 34.7266, 0.25);         
	RemoveBuildingForPlayer(playerid, 955, -2092.09, -490.055, 34.7266, 0.25);         
	RemoveBuildingForPlayer(playerid, 955, -2063.27, -490.055, 34.7266, 0.25);         
	RemoveBuildingForPlayer(playerid, 955, -2005.65, -490.055, 34.7266, 0.25);         
	RemoveBuildingForPlayer(playerid, 955, -2034.46, -490.055, 34.7266, 0.25);         
	RemoveBuildingForPlayer(playerid, 955, -2068.56, -398.336, 34.7266, 0.25);         
	RemoveBuildingForPlayer(playerid, 955, -2039.85, -398.336, 34.7266, 0.25);         
	RemoveBuildingForPlayer(playerid, 955, -2011.14, -398.336, 34.7266, 0.25);         
	RemoveBuildingForPlayer(playerid, 955, -1980.79, 142.664, 27.0703, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, 2319.99, 2532.85, 10.2188, 0.25);           
	RemoveBuildingForPlayer(playerid, 955, 1520.15, 1055.27, 10,  0.25);               
	RemoveBuildingForPlayer(playerid, 955, -862.828, 1536.61, 21.9844, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, -14.7031, 1175.36, 18.9531, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, -253.742, 2597.95, 62.2422, 0.25);          
	RemoveBuildingForPlayer(playerid, 955, 201.016, -107.617, 0.898438, 0.25);         
	RemoveBuildingForPlayer(playerid, 955, 1277.771, 372.57, 19.5547, 0.25);            
	RemoveBuildingForPlayer(playerid, 1340, 1589.7, -1287.27, 17.6406, 0.25);          
	RemoveBuildingForPlayer(playerid, 1340, 1000.48, -1849.04, 12.7969, 0.25);         
	RemoveBuildingForPlayer(playerid, 1340, 388.859, -2071.66, 7.94531, 0.25);         
	RemoveBuildingForPlayer(playerid, 1340, -2691.68, 384.492, 4.48438, 0.25);         
	RemoveBuildingForPlayer(playerid, 1340, -2146.52, -424.773, 35.3281, 0.25);         
	RemoveBuildingForPlayer(playerid, 1340, -2094.23, -396.461, 35.6562, 0.25);         
	RemoveBuildingForPlayer(playerid, 1340, -2036.32, -396.758, 35.6562, 0.25);         
	RemoveBuildingForPlayer(playerid, 1340, 2537.82, 2137.12, 10.8594, 0.25);          
	RemoveBuildingForPlayer(playerid, 1340, 1558.2, 979.445, 10.9453, 0.25);           
	RemoveBuildingForPlayer(playerid, 1340, 2144.64, 1441.93, 10.8516, 0.25);          
	RemoveBuildingForPlayer(playerid, 1340, -799.781, 1624.22, 27.125, 0.25);           
	RemoveBuildingForPlayer(playerid, 1340, -197.492, 2659.91, 62.8203, 0.25);         
	RemoveBuildingForPlayer(playerid, 1340, -2199.99, -2386.89, 30.7188, 0.25);         
	RemoveBuildingForPlayer(playerid, 1341, -2286.54, 147.633, 35.3203, 0.25);         
	RemoveBuildingForPlayer(playerid, 1341, -2384.23, -584.008, 132.109, 0.25);        
	RemoveBuildingForPlayer(playerid, 1341, 2538.03, 2153.7, 10.7344, 0.25);           
	RemoveBuildingForPlayer(playerid, 1341, 2295.71, 2250.1, 10.7344, 0.25);           
	RemoveBuildingForPlayer(playerid, 1341, 1030.59, 1362.59, 10.8125, 0.25);          
	RemoveBuildingForPlayer(playerid, 1341, 2125.13, 1442.08, 10.7031, 0.25);          
	RemoveBuildingForPlayer(playerid, 1341, 2175.09, 1523.41, 10.7344, 0.25);          
	RemoveBuildingForPlayer(playerid, 1342, -2515.79, -15.6172, 25.6328, 0.25);        
	RemoveBuildingForPlayer(playerid, 1342, -2151.84, -435.562, 35.2891, 0.25);         
	RemoveBuildingForPlayer(playerid, 1342, -2193.77, 605.188, 35.2109, 0.25);         
	RemoveBuildingForPlayer(playerid, 1342, -2194.02, 613.406, 35.2109, 0.25);          
	RemoveBuildingForPlayer(playerid, 1342, -2197.59, 613.406, 35.2109, 0.25);         
	RemoveBuildingForPlayer(playerid, 1342, -2181.48, 613.703, 35.2109, 0.25);         
	RemoveBuildingForPlayer(playerid, 1342, -2187.15, 614.547, 35.2109, 0.25);          
	RemoveBuildingForPlayer(playerid, 1342, 2536.12, 2290.85, 10.8594, 0.25);          

    return 1;
}
static BuildingRemove(playerid)
{
    //Vehicle Toys Shop
    RemoveBuildingForPlayer(playerid, 1635, 2255.840, -2013.589, 15.148, 0.250);

    // SAN-EXT
    RemoveBuildingForPlayer(playerid, 6516, 717.687, -1357.280, 18.046, 0.250);
    RemoveBuildingForPlayer(playerid, 1439, 732.726, -1341.770, 12.632, 0.250);
    RemoveBuildingForPlayer(playerid, 1415, 732.851, -1332.900, 12.687, 0.250);

    //dermaga prima
    RemoveBuildingForPlayer(playerid, 1280, 150.664, -1835.359, 3.108, 0.250);
    RemoveBuildingForPlayer(playerid, 1231, 154.664, -1839.430, 5.475, 0.250);
    RemoveBuildingForPlayer(playerid, 1461, 148.813, -1820.050, 3.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1280, 150.664, -1809.359, 3.085, 0.250);
    RemoveBuildingForPlayer(playerid, 1461, 148.813, -1799.938, 3.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1231, 154.546, -1799.640, 5.467, 0.250);
    RemoveBuildingForPlayer(playerid, 1280, 159.335, -1794.588, 3.171, 0.250);
    RemoveBuildingForPlayer(playerid, 1280, 150.664, -1784.338, 3.467, 0.250);
    RemoveBuildingForPlayer(playerid, 16121, -125.514, 1904.188, 13.890, 0.250);
    RemoveBuildingForPlayer(playerid, 16713, -125.514, 1904.188, 13.890, 0.250);
    RemoveBuildingForPlayer(playerid, 1461, 161.813, -1813.630, 3.553, 0.250);
    RemoveBuildingForPlayer(playerid, 1280, 159.195, -1842.588, 3.140, 0.250);
    RemoveBuildingForPlayer(playerid, 1461, 161.656, -1854.078, 3.546, 0.250);
    RemoveBuildingForPlayer(playerid, 1280, 150.664, -1870.310, 3.101, 0.250);
    RemoveBuildingForPlayer(playerid, 1461, 148.093, -1847.708, 3.546, 0.250);
    RemoveBuildingForPlayer(playerid, 1231, 154.453, -1887.239, 5.484, 0.250);
    RemoveBuildingForPlayer(playerid, 1461, 148.093, -1887.280, 3.546, 0.250);
    RemoveBuildingForPlayer(playerid, 1461, 161.656, -1893.640, 3.546, 0.250);
    RemoveBuildingForPlayer(playerid, 1280, 158.664, -1908.318, 3.171, 0.250);
    RemoveBuildingForPlayer(playerid, 1461, 161.570, -1921.310, 3.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1461, 147.945, -1927.729, 3.553, 0.250);

    //ASGH (BELAKANG)
    RemoveBuildingForPlayer(playerid, 5935, 1120.1563, -1303.4531, 18.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 5737, 1120.1563, -1303.4531, 18.5703, 0.25);

    // //exteriorfd 2 bangunan besar di little mexico
    // RemoveBuildingForPlayer(playerid, 4019, 1777.839, -1773.910, 12.523, 0.250);
    // RemoveBuildingForPlayer(playerid, 4025, 1777.839, -1773.910, 12.523, 0.250);


    //SWAT EXT
    RemoveBuildingForPlayer(playerid, 1297, 1292.180, -1660.170, 15.890, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1267.670, -1659.880, 14.601, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1258.579, -1659.880, 14.601, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1258.579, -1643.369, 14.601, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1267.670, -1643.369, 14.601, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1267.670, -1675.500, 14.601, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1258.579, -1675.500, 14.601, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1233.469, -1643.430, 14.851, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1237.500, -1643.430, 14.851, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1241.530, -1643.430, 14.851, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1245.560, -1643.430, 14.851, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1255.709, -1640.459, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1255.709, -1632.869, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1243.510, -1632.869, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1243.510, -1640.459, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1231.310, -1640.459, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1219.119, -1640.459, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1219.119, -1632.869, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1231.310, -1632.869, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1211.599, -1632.869, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1282.829, -1619.849, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1282.829, -1629.109, 28.421, 0.250);
    RemoveBuildingForPlayer(playerid, 626, 1282.829, -1639.959, 28.421, 0.250);


    // Gas pumps
    RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1767.2891, 14.1406, 6000.00);
    RemoveBuildingForPlayer(playerid, 3465, 2120.8203, 914.7188, 11.2578, 6000.00);
    RemoveBuildingForPlayer(playerid, 1686, -1610.6172, -2721.0000, 47.9297, 6000.00);

    // Sprunk machines
    RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);

    return 1;
}
Player_ToggleAntiHealthHack(playerid, bool:toggle)
{
    EnableAntiCheatForPlayer(playerid, 11, toggle);
    EnableAntiCheatForPlayer(playerid, 12, toggle);
    EnableAntiCheatForPlayer(playerid, 13, toggle);
    return 1;
}
public OnPlayerConnect(playerid)
{


    new name[MAX_PLAYER_NAME + 1];
    GetPlayerName(playerid, name, sizeof name);

    if (_:g_Discord_Chat == 0)
    g_Discord_Chat = DCC_FindChannelById("1178159505243119757"); // Discord channel ID

    new string[128];
    format(string, sizeof string, " ```%s Joined The Server. :)```", name);
    DCC_SendChannelMessage(g_Discord_Chat, string);
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerConnect(PID : %d)", playerid);
	#endif

    if(IsPlayerNPC(playerid))
        return 1;

    if((GetTickCount() - PlayerData[playerid][pLeaveTime]) < 2000 && !strcmp(ReturnIP(playerid), AccountData[playerid][pLeaveIP]))
    {
        SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s (%s) was kicked for possible rejoin hacks.", ReturnName(playerid), ReturnIP(playerid));
        KickEx(playerid);
        return 1;
    }
    
    //PlayerData[playerid][pStaterpackSystem] = 0;

    g_MysqlRaceCheck[playerid]++;
    
    CallerPlayerID[playerid] = INVALID_PLAYER_ID;
    NameCounter[playerid] = 0;
    PlayerDrinking[playerid] = 0;

    ResetStatistics(playerid);
    ResetWeaponSettings(playerid);

    BuildingRemove(playerid);
    Vending_RemoveOriginal(playerid);
    PreloadAnimations(playerid);
    ResetPlayerWeapons(playerid);
    CancelSelectTextDraw(playerid);
    SetPlayerArmedWeapon(playerid, 0);
    SetPlayerColor(playerid, DEFAULT_COLOR);
    Player_ToggleTelportAntiCheat(playerid, true);
    Player_ToggleAntiHealthHack(playerid, false);

    // RelationStatus(playerid);
    CreateTextDraws(playerid);
    // CreatePhoneDraw(playerid);
    CreateLaptopDraw(playerid);
    SpeedRadar_Init(playerid);
    CreateMDCDraw(playerid);
    CreateATMDraw(playerid);
    CreateFishingDraw(playerid);
    Speedometer_Initialize(playerid);
    SpeedometerNew_Init(playerid);

    Blackjack_Initialize(playerid);

    //Player Hud
    HUD_Init(playerid);
    HUD1_Init(playerid);
    HUD2_Init(playerid);

    IDCard_Init(playerid);

    DeletePVar(playerid, "ChainsawWarning");
    DeletePVar(playerid, "ForceHospital");

    if(g_ServerRestart || GetGVarInt("Countdown")) {
        TextDrawShowForPlayer(playerid, gServerTextdraws[1]);
    }

    GetPlayerIp(playerid, ReturnIP(playerid), 16);
    /*GetPlayerIp(playerid, ReturnIP(playerid));
    format(query, sizeof(query), "UPDATE `accounts` SET `IP` = '%s' WHERE `accounts`=%s'");*/

    GetPlayerName(playerid, ReturnName(playerid), MAX_PLAYER_NAME + 1);
    return 1;
}
//DISABLE RV
GetPeopleInsideRV(playerid)
{
    new 
        vw = GetPlayerVirtualWorld(playerid),
        playervehicleid = vw - MIN_VIRTUAL_WORLD, 
        playervw,
        index,
        Float:x, 
        Float:y, 
        Float:z,
        playervehid,
        veh_index
    ;

    if(vw > MIN_VIRTUAL_WORLD && vw < MAX_VIRTUAL_WORLD)
    {   
        if((index = Vehicle_ReturnID(playervehicleid)) && Vehicle_IsOwned(playerid, index))
        {
            foreach(new i : Player)
            {
                playervw = GetPlayerVirtualWorld(i);
                if(playervw > MIN_VIRTUAL_WORLD && playervw < MAX_VIRTUAL_WORLD && (playervw-MIN_VIRTUAL_WORLD) == playervehicleid)
                {   
                    CallLocalFunction("OnPlayerSpawn", "d", i);
                }
            }
        }
        GetVehiclePos(playervehicleid, x, y, z);
        PlayerData[playerid][pPos][0] = x;
        PlayerData[playerid][pPos][1] = y;
        PlayerData[playerid][pPos][2] = z;
    }
    else if(vw < MIN_VIRTUAL_WORLD)
    {
        foreach(new i : Player)
        {
            playervw = GetPlayerVirtualWorld(i);
            playervehid = playervw - MIN_VIRTUAL_WORLD;
            veh_index = Vehicle_ReturnID(playervehid);
            if(playervw > MIN_VIRTUAL_WORLD && playervw < MAX_VIRTUAL_WORLD)
            {
                if(veh_index != -1 && Vehicle_IsOwned(playerid, veh_index) && (playervw-MIN_VIRTUAL_WORLD) == VehicleData[veh_index][vehVehicleID])
                {
                    CallLocalFunction("OnPlayerSpawn", "d", i);
                }
            }
        }
    }
    return 1;
}
DestroyPlayer3DText(playerid)
{
    if(IsValidDynamic3DTextLabel(PlayerData[playerid][pTabOut]))
        DestroyDynamic3DTextLabel(PlayerData[playerid][pTabOut]);

    PlayerData[playerid][pTabOut]       = Text3D:INVALID_STREAMER_ID;

    if(IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
        DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);

    PlayerData[playerid][pNameTag]      = Text3D:INVALID_STREAMER_ID;

    if(IsValidDynamic3DTextLabel(PlayerData[playerid][pInjuredTag]))
        DestroyDynamic3DTextLabel(PlayerData[playerid][pInjuredTag]);

    PlayerData[playerid][pInjuredTag]   = Text3D:INVALID_STREAMER_ID;

    if(IsValidDynamic3DTextLabel(PlayerData[playerid][pAdoTag]))
        DestroyDynamic3DTextLabel(PlayerData[playerid][pAdoTag]);

    PlayerData[playerid][pAdoTag]       = Text3D:INVALID_STREAMER_ID;
    PlayerData[playerid][pAdoActive]    = false;
    return 1;
}
public OnPlayerDisconnect(playerid, reason)
{

    new name[MAX_PLAYER_NAME + 1];
    GetPlayerName(playerid, name, sizeof name);

    if (_:g_Discord_Chat == 0)
    g_Discord_Chat = DCC_FindChannelById("1178159505243119757"); // Discord channel ID

    new string[128];
    format(string, sizeof string, " ```%s Has Left The Server. :(```", name);
    DCC_SendChannelMessage(g_Discord_Chat, string);

	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerDisconnect(PID : %d REASON : %d)", playerid, reason);
	#endif

    //DISABLE RV
    GetPeopleInsideRV(playerid);
    g_MysqlRaceCheck[playerid]++;
    CallerPlayerID[playerid] = INVALID_PLAYER_ID;
    PlayerDrinking[playerid] = 0;
    //AFK Timer
	// AFKMath[playerid] = 0;
	// Angka1[playerid] = 0;
	// Angka2[playerid] = 0;
	// Hasil[playerid] = 0;

    callerCP_Delete(playerid);
    DestroyPlayer3DText(playerid);

    new textreason[][] = {"Timeout/Crash", "Quit", "Kick/Ban"};

    PlayerData[playerid][pLeaveTime] = GetTickCount();
    Report_Reset(playerid);
    format(AccountData[playerid][pLeaveIP], 16, AccountData[playerid][pIP]);

    if(PlayerData[playerid][pRefillPrice] > 0)
    {
        new amount = Economy_GetAmountAfterSalesTax(PlayerData[playerid][pRefillPrice]);
        GiveMoney(playerid, -amount, ECONOMY_ADD_SUPPLY, "refill gas");
    }

    if(PlayerTemp[playerid][temp_selecttextdraw])
    {
        if(PlayerData[playerid][pClothesType] == 1)
        {
            HideClothesTextdraw(playerid);
            PlayerData[playerid][pSkin] = PlayerTemp[playerid][temp_realskin];
        }
    }


    
    NameCounter[playerid] = 0;

    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
    {
        SendClientMessage(PlayerData[playerid][pCallLine], X11_YELLOW_2, "[PHONE]:"WHITE" The line went dead...");
        CancelCall(playerid);
    }
    SendNearbyMessage(playerid, 50.0, X11_GREY_60, "* %s leave the game (%s).", ReturnName(playerid), textreason[reason]);
    Discord_Log(LEAVELOG, sprintf("* %s telah disconect dari server (%s).", ReturnName(playerid), textreason[reason]));

    CallLocalFunction("OnPlayerDisconnectEx", "dd", playerid, reason);
    TerminateConnection(playerid);
    return 1;
}

Function:GetPlayerCameraObject(playerid)
    return Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_OBJECT, GetPlayerCameraTargetObject(playerid));

Function:encode_lights(light1, light2, light3, light4)
    return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);

public OnGameModeExit()
{
	#if defined DEBUG_MODE
	    printf("[debug] OnGameModeExit()");
	#endif

    SaveAll();

    printf("There are %d players on the server when server down.", Iter_Count(Player));

    foreach(new playerid : Player)
        TerminateConnection(playerid);

    MySqlCloseConnection();

//    Profiler_Dump();
//    Profiler_Stop();
    return 1;
}

static LoadWorkshopMapping()
{
    print("Successfull loaded workshop mapping.");
    return 1;
}
// static CreateChopShop()
// {
// 	new index;
// 	index = Random(sizeof(randCoord));
//     ChopshopData[0][chopShopPosX] = randCoord[index][e_PosX]; 
//     ChopshopData[0][chopShopPosY] = randCoord[index][e_PosY];
//     ChopshopData[0][chopShopPosZ] = randCoord[index][e_PosZ];
// 	ChopshopData[0][chopShopPickup] = CreateDynamicPickup(1239, 23, ChopshopData[0][chopShopPosX], ChopshopData[0][chopShopPosY], ChopshopData[0][chopShopPosZ], 0, 0);
// 	ChopshopData[0][chopShopText] = CreateDynamic3DTextLabel("[Chopshop]\n"WHITE"Gunakan "YELLOW"/chopshop"WHITE" untuk menghancurkan kendaraan", COLOR_CLIENT, ChopshopData[0][chopShopPosX], ChopshopData[0][chopShopPosY], ChopshopData[0][chopShopPosZ]+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
//     print("Chopshop loaded.");
// 	return 1;
// }
static LoadActor()
{
    gActor[0] = CreateActor(2, 1028.7078,-1103.4530,23.8281,276.7179); //Drugs
    gActor[1] = CreateActor(21, 1095.4104,-1875.3322,13.5469,181.6305); //Drugs
    gActor[2] = CreateActor(22, 386.8400,-1879.9895,2.6761,174.8854); //Drugs
    gActor[3] = CreateActor(29, -31.2202,-1118.0354,1.0781,160.7379); //Drugs

    ApplyActorAnimation(gActor[0], "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0);
    ApplyActorAnimation(gActor[1], "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0);
    ApplyActorAnimation(gActor[2], "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0);
    ApplyActorAnimation(gActor[3], "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0);

    gActor[4] = CreateActor(168, -384.0056,-1438.9092,26.3203,269.8137); //Butcher

    //Bank Actor
    gActor[5] = CreateActor(240, 480.7738,-1297.7662,1021.6249,269.9697); //Bank Actor
    SetActorVirtualWorld(gActor[5], 5000);
    gActor[6] = CreateActor(194, 480.7896,-1301.4039,1021.6249,268.6537); //Bank Actor
    SetActorVirtualWorld(gActor[6], 5000);
    gActor[7] = CreateActor(240, 480.7893,-1305.0725,1021.6249,268.6537); //Bank Actor
    SetActorVirtualWorld(gActor[7], 5000);
    gActor[8] = CreateActor(194, 480.7858,-1308.7632,1021.6249,268.3247); //Bank Actor
    SetActorVirtualWorld(gActor[8], 5000);
    //CreateDynamicMapIcon(2334.9365,-1351.7225,24.0318, 26, -1, -1, 0); //Mechanic Center

    gActor[9] = CreateActor(158, -64.8065,-1120.8037,1.0781,69.4673); //Butcher


    // gActor[9] = CreateActor(50, 2490.5518,-1464.7108,24.0229,359.5193); //Chopshop
    // gActor[10] = CreateActor(50, 2442.9946,-1758.6802,13.5924,180.3066); //Chopshop
    // gActor[11] = CreateActor(50, 1683.9979,-2022.8073,14.1282,273.6494); //Chopshop
    // gActor[12] = CreateActor(50, 2036.3608,-1292.2246,20.9422,82.2104); //Chopshop

    ApplyActorAnimation(gActor[0], "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0);
    ApplyActorAnimation(gActor[1], "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0);
    ApplyActorAnimation(gActor[2], "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0);
    ApplyActorAnimation(gActor[3], "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0);


    print("Successfull loaded static mapicon.");
    return 1;
}
static LoadServerMapIcon()
{

    CreateDynamicMapIcon(1546.2462,-1675.5460,13.5619, 30, -1, -1, 0, -1, _, MAPICON_GLOBAL); //LSPD
    CreateDynamicMapIcon(1481.1840,-1770.0223,18.7958, 2, -1, -1, 0, -1, _, MAPICON_GLOBAL); //City Hall
    CreateDynamicMapIcon(1654.2096,-1660.8616,22.5156, 36, -1, -1, 0, -1, _, MAPICON_GLOBAL); //Newbie School
    CreateDynamicMapIcon(2303.6799,-16.0679,26.4844, 52, -1, -1, 0, -1, _, MAPICON_GLOBAL); //Bank Palomino
    CreateDynamicMapIcon(2334.9365,-1351.7225,24.0318, 26, -1, -1, 0, -1, _, MAPICON_GLOBAL); //Mechanic Center

    print("Successfull loaded static mapicon.");
    return 1;
}
//Server Pickup Static
static LoadServerPickup()
{
    //Static Locker Pickup
    //LSFD
    CreateDynamicPickup(1239, 23, 1886.6283,-2202.7998,13.6401, 510, 9);
    CreateDynamic3DTextLabel("[Fire Department Locker]\n"YELLOW"/flocker to access the locker", COLOR_CLIENT, 1886.6283,-2202.7998,13.6401+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 510, 9);
    
    //LSPD
    CreateDynamicPickup(1239, 23, 1190.5789,-1663.1620,791.0681, 10, 10);
    CreateDynamic3DTextLabel("[LSPD Locker]\n"YELLOW"/flocker to access the locker", COLOR_CLIENT, 1190.5789,-1663.1620,791.0681+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 10, 10);

    //Charity
    CreateDynamicPickup(1239, 23, 361.9272, 173.6889, 1008.3828, 510, 3);
    CreateDynamic3DTextLabel("[Charity]\n"YELLOW"/charity to charity your money to government", COLOR_CLIENT, 361.9272, 173.6889, 1008.3828 + 0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 510, 3);

    //Public Parking
    CreateDynamicPickup(1239, 23, 1630.7808,-1139.1279,23.9063, 0, 0);
    CreateDynamic3DTextLabel("[Public Parking]\n"WHITE"Gunakan "YELLOW"/park"WHITE" atau "YELLOW"/unpark "WHITE"untuk parkir atau mengambil kendaraan anda", COLOR_CLIENT, 1630.7808,-1139.1279,23.9063+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    // CreateDynamicPickup(1239, 23, 1224.6685,-1376.7126,14.9861, 0, 0);
    // CreateDynamic3DTextLabel("[Public Parking]\n"WHITE"Gunakan "YELLOW"/park"WHITE" atau "YELLOW"/unpark "WHITE"untuk parkir atau mengambil kendaraan anda", COLOR_CLIENT, 1224.6685,-1376.7126,14.9861+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    //Drug Lab

    //Drug NPC
    // CreateDynamic3DTextLabel("[Drugs Dealer]\n"WHITE"Gunakan "YELLOW"/selldrugs"WHITE" untuk menjual drugs", COLOR_CLIENT, 1028.7078,-1103.4530,23.8281+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    // CreateDynamic3DTextLabel("[Drugs Dealer]\n"WHITE"Gunakan "YELLOW"/selldrugs"WHITE" untuk menjual drugs", COLOR_CLIENT, 1095.4104,-1875.3322,13.5469+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    // CreateDynamic3DTextLabel("[Drugs Dealer]\n"WHITE"Gunakan "YELLOW"/selldrugs"WHITE" untuk menjual drugs", COLOR_CLIENT, 386.8400,-1879.9895,2.6761+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    // CreateDynamic3DTextLabel("[Drugs Dealer]\n"WHITE"Gunakan "YELLOW"/selldrugs"WHITE" untuk menjual drugs", COLOR_CLIENT, -31.2202,-1118.0354,1.0781+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    //Butcher NPC
    // CreateDynamic3DTextLabel("[Butcher]\n"WHITE"Gunakan "YELLOW"/sellmeat"WHITE" untuk menjual hasil buruan", COLOR_CLIENT, -384.0056,-1438.9092,26.3203+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    //Farmer NPC
    CreateDynamic3DTextLabel("[Farmer]\n"WHITE"Gunakan "YELLOW"/sellplant"WHITE" untuk menjual hasil panen", COLOR_CLIENT, -64.8065,-1120.8037,1.0781+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);


    //Chopshop Pickup
    // CreateDynamicPickup(1239, 23, 2488.7637,-1460.4315,24.0184, 0, 0);
    // CreateDynamic3DTextLabel("[Chopshop]\n"WHITE"Gunakan "YELLOW"/chopshop"WHITE" untuk menghancurkan kendaraan", COLOR_CLIENT, 2488.7637,-1460.4315,24.0184+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    // CreateDynamicPickup(1239, 23, 2446.1292,-1761.6219,13.5859, 0, 0);
    // CreateDynamic3DTextLabel("[Chopshop]\n"WHITE"Gunakan "YELLOW"/chopshop"WHITE" untuk menghancurkan kendaraan", COLOR_CLIENT, 2446.1292,-1761.6219,13.5859+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    // CreateDynamicPickup(1239, 23, 1687.5428,-2024.3988,14.1289, 0, 0);
    // CreateDynamic3DTextLabel("[Chopshop]\n"WHITE"Gunakan "YELLOW"/chopshop"WHITE" untuk menghancurkan kendaraan", COLOR_CLIENT, 1687.5428,-2024.3988,14.1289+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    // CreateDynamicPickup(1239, 23, 2031.8624,-1290.8844,20.9403, 0, 0);
    // CreateDynamic3DTextLabel("[Chopshop]\n"WHITE"Gunakan "YELLOW"/chopshop"WHITE" untuk menghancurkan kendaraan", COLOR_CLIENT, 2031.8624,-1290.8844,20.9403+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);


    //Scrapyard Pickup
    CreateDynamicPickup(1239, 23, 2410.4741,-1425.8549,23.9830, 0, 0);
    CreateDynamic3DTextLabel("[Scrapyard]\n"WHITE"Gunakan "YELLOW"/scrapyard"WHITE" untuk menghancurkan kendaraan anda selamanya", COLOR_CLIENT, 2410.4741,-1425.8549,23.9830+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	//Gym Center Pickup
    CreateDynamicPickup(1239, 23, 756.4702,5.8568,1000.6992, 5, 5);
    CreateDynamic3DTextLabel("[Gym Center]\n"WHITE"Gunakan "YELLOW"/training"WHITE" untuk mengambil latihan bela diri", COLOR_CLIENT, 756.4702,5.8568,1000.6992+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5, 5);

    CreateDynamicPickup(1239, 23, 756.4702,5.8568,1000.6992, 0, 0);
    CreateDynamic3DTextLabel("[Donation Point]\n"WHITE"Gunakan "YELLOW"/viphelp"WHITE" untuk bantuan", COLOR_CLIENT, 477.4115,-1498.9061,20.4821+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    // CreateDynamicPickup(1239, 23, -2152.5366,1232.2404,33.9297);
    // CreateDynamic3DTextLabel("[Drugs Factory]\n"WHITE"Type "YELLOW"/buydrugs"WHITE" to buy drugs", COLOR_CLIENT, -2152.5366,1232.2404,33.9297+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    CreateDynamicPickup(1581, 23, -2033.0439, -117.4885, 1035.1719);
    CreateDynamic3DTextLabel("[Driving Test]\n"WHITE"Type "YELLOW"/drivingtest "WHITE"to start the test for "GREEN"$75.\n"WHITE"Type "YELLOW"/extendlicense "WHITE"to extend driving license when expired for "COL_GREEN"$50", COLOR_CLIENT, -2033.0439, -117.4885, 1035.1719+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickup(1239, 23, 1260.3976, -20.0215, 1001.0234);
    CreateDynamic3DTextLabel("[Cargo Unloading]\n"WHITE"Type "YELLOW"/loadcrate"WHITE" to begin loading cargo.", COLOR_CLIENT, 1260.3976, -20.0215, 1001.0234+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickup(1239, 23, 2282.2642,-2016.2533,13.5430);
    CreateDynamic3DTextLabel("[Truck Modshop]\n"WHITE"Type "YELLOW"/buyvacc"WHITE" to buy vehicle accesories\nType "YELLOW"/vacc"WHITE" to edit vehicle accesories", COLOR_CLIENT, 2282.2642,-2016.2533,13.5430+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickup(1239, 23, 482.5177,-1308.6587,1021.6249);
    CreateDynamic3DTextLabel("[BANK POINT]\n"WHITE"(/help > Bank commands)", COLOR_CLIENT, 482.5177,-1308.6587,1021.6249+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);

    CreateDynamicPickup(1239, 23, 482.5169,-1304.9462,1021.6249);
    CreateDynamic3DTextLabel("[BANK POINT]\n"WHITE"(/help > Bank commands)", COLOR_CLIENT, 482.5169,-1304.9462,1021.6249+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);

    CreateDynamicPickup(1239, 23, 482.5168,-1301.2286,1021.6249);
    CreateDynamic3DTextLabel("[BANK POINT]\n"WHITE"(/help > Bank commands)", COLOR_CLIENT, 482.5168,-1301.2286,1021.6249+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);

    CreateDynamicPickup(1239, 23, 482.5172,-1297.5249,1021.6249);
    CreateDynamic3DTextLabel("[BANK POINT]\n"WHITE"(/help > Bank commands)", COLOR_CLIENT, 482.5172,-1297.5249,1021.6249+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);

    CreateDynamicPickup(1239, 23, -1083.9651,-968.5424,129.3047, -1, LSPD_LOBBY);
    CreateDynamic3DTextLabel("[Tickets]\n"WHITE"Type "YELLOW"/payticket "WHITE"to pay your tickets.", COLOR_CLIENT, -1083.9651,-968.5424,129.3047+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, LSPD_LOBBY);

    CreateDynamicPickup(1239, 23, -1087.2913,-971.8285,129.3047, -1, LSPD_LOBBY);
    CreateDynamic3DTextLabel("[Register Plate]\n"WHITE"Cost: "GREEN"$500\n"WHITE"Type "YELLOW"/registerplate "WHITE"to change vehicle plate.", COLOR_CLIENT, -1087.2913,-971.8285,129.3047+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, LSPD_LOBBY);

    CreateDynamicPickup(1239, 23, 1552.5021,-1609.3511,13.3828, -1, 0);
    CreateDynamic3DTextLabel("[Car Release]\n"WHITE"Type "YELLOW"/releasecar "WHITE"to release a vehicle.", COLOR_CLIENT, 1552.5021,-1609.3511,13.3828+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    //Prison Food Court
    // CreateDynamicPickup(1239, 23, 180.8817,1458.1420,10.6136, -1, 0);
    // CreateDynamic3DTextLabel("[Prison Foodcourt]\n"WHITE"Type "YELLOW"/foodcourt "WHITE"to open the menu.", COLOR_CLIENT, 180.8817,1458.1420,10.6136+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 0);

    // CreateDynamicPickup(1239, 23, 180.8817,1463.4524,10.6136, -1, 0);
    // CreateDynamic3DTextLabel("[Prison Foodcourt]\n"WHITE"Type "YELLOW"/foodcourt "WHITE"to open the menu.", COLOR_CLIENT, 180.8817,1463.4524,10.6136+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 0);

    // CreateDynamicPickup(1239, 23, 180.8657,1469.2339,10.6136, -1, 0);
    // CreateDynamic3DTextLabel("[Prison Foodcourt]\n"WHITE"Type "YELLOW"/foodcourt "WHITE"to open the menu.", COLOR_CLIENT, 180.8657,1469.2339,10.6136+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 0);

/*    for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) {
        CreateDynamicMapIcon(arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 22, 0);

        CreateDynamicPickup(19130, 23, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 0);
        CreateDynamic3DTextLabel("General Hospital", X11_TOMATO_1, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]+0.7, 15.0);

        CreateDynamicPickup(1240, 23, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2],0);
        CreateDynamic3DTextLabel("[Hospital Deliver]\n"WHITE"/dropinjured to deliver a patient.", X11_TOMATO_1, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2], 15.0);
    }*/

    print("Successfull loaded static pickup and label.");
    return 1;
}

static LoadGlobalTextdraws()
{
    //  Server injured textdraw
    gServerTextdraws[0] = TextDrawCreate(322.783325, 418.050140, "You_are_injured!_~r~/call_911_~w~or_~r~/giveup");
    TextDrawLetterSize(gServerTextdraws[0], 0.295051, 1.378332);
    TextDrawAlignment(gServerTextdraws[0], 2);
    TextDrawColor(gServerTextdraws[0], -1);
    TextDrawSetShadow(gServerTextdraws[0], 0);
    TextDrawSetOutline(gServerTextdraws[0], 1);
    TextDrawBackgroundColor(gServerTextdraws[0], 255);
    TextDrawFont(gServerTextdraws[0], 1);
    TextDrawSetProportional(gServerTextdraws[0], 1);
    TextDrawSetShadow(gServerTextdraws[0], 0);

    //  Server restart and countdown
    gServerTextdraws[1] = TextDrawCreate(22.005966, 209.766693, "_");
    TextDrawLetterSize(gServerTextdraws[1], 0.263191, 1.156665);
    TextDrawAlignment(gServerTextdraws[1], 1);
    TextDrawColor(gServerTextdraws[1], -1);
    TextDrawSetShadow(gServerTextdraws[1], 0);
    TextDrawSetOutline(gServerTextdraws[1], 1);
    TextDrawBackgroundColor(gServerTextdraws[1], 255);
    TextDrawFont(gServerTextdraws[1], 3);
    TextDrawSetProportional(gServerTextdraws[1], 1);
    TextDrawSetShadow(gServerTextdraws[1], 0);

    //  Server watermark
    gServerTextdraws[2] = TextDrawCreate(605.000000, 2.000000, "Diversity ~w~World");
    TextDrawFont(gServerTextdraws[2], 1);
    TextDrawLetterSize(gServerTextdraws[2], 0.370833, 2.000000);
    TextDrawTextSize(gServerTextdraws[2], 400.000000, 17.000000);
    TextDrawSetOutline(gServerTextdraws[2], 1);
    TextDrawSetShadow(gServerTextdraws[2], 0);
    TextDrawAlignment(gServerTextdraws[2], 3);
    TextDrawColor(gServerTextdraws[2], -16776961);
    TextDrawBackgroundColor(gServerTextdraws[2], 255);
    TextDrawBoxColor(gServerTextdraws[2], 50);
    TextDrawUseBox(gServerTextdraws[2], 0);
    TextDrawSetProportional(gServerTextdraws[2], 1);
    TextDrawSetSelectable(gServerTextdraws[2], 0);

    //Login Textdraws
    gLoginTextdraws = TextDrawCreate(273.500000, 78.249641, "mdl-2001:logo_uog");
    TextDrawTextSize(gLoginTextdraws, 90.000000, 90.000000);
    TextDrawAlignment(gLoginTextdraws, 1);
    TextDrawColor(gLoginTextdraws, -1);
    TextDrawSetShadow(gLoginTextdraws, 0);
    TextDrawBackgroundColor(gLoginTextdraws, 255);
    TextDrawFont(gLoginTextdraws, 4);
    TextDrawSetProportional(gLoginTextdraws, 0);

    //Modern Textdraws HUD
    HUD_1 = TextDrawCreate(577.000000, 409.000000, "_");
    TextDrawFont(HUD_1, 1);
    TextDrawLetterSize(HUD_1, 0.600000, 4.700002);
    TextDrawTextSize(HUD_1, 298.500000, 125.000000);
    TextDrawSetOutline(HUD_1, 1);
    TextDrawSetShadow(HUD_1, 0);
    TextDrawAlignment(HUD_1, 2);
    TextDrawColor(HUD_1, 1687547391);
    TextDrawBackgroundColor(HUD_1, 255);
    TextDrawBoxColor(HUD_1, 1687547391);
    TextDrawUseBox(HUD_1, 1);
    TextDrawSetProportional(HUD_1, 1);
    TextDrawSetSelectable(HUD_1, 0);
    
    HUD_2 = TextDrawCreate(577.000000, 412.000000, "_");
    TextDrawFont(HUD_2, 1);
    TextDrawLetterSize(HUD_2, 0.600000, 4.700002);
    TextDrawTextSize(HUD_2, 298.500000, 125.000000);
    TextDrawSetOutline(HUD_2, 1);
    TextDrawSetShadow(HUD_2, 0);
    TextDrawAlignment(HUD_2, 2);
    TextDrawColor(HUD_2, 1687547391);
    TextDrawBackgroundColor(HUD_2, 255);
    TextDrawBoxColor(HUD_2, 255);
    TextDrawUseBox(HUD_2, 1);
    TextDrawSetProportional(HUD_2, 1);
    TextDrawSetSelectable(HUD_2, 0);
    
    HUD_3 = TextDrawCreate(560.000000, 428.000000, "_");
    TextDrawFont(HUD_3, 1);
    TextDrawLetterSize(HUD_3, 0.412499, 4.700002);
    TextDrawTextSize(HUD_3, 298.500000, 91.000000);
    TextDrawSetOutline(HUD_3, 1);
    TextDrawSetShadow(HUD_3, 0);
    TextDrawAlignment(HUD_3, 2);
    TextDrawColor(HUD_3, 9145343);
    TextDrawBackgroundColor(HUD_3, 255);
    TextDrawBoxColor(HUD_3, 9145343);
    TextDrawUseBox(HUD_3, 1);
    TextDrawSetProportional(HUD_3, 1);
    TextDrawSetSelectable(HUD_3, 0);
    
    HUD_4 = TextDrawCreate(535.000000, 414.000000, "_");
    TextDrawFont(HUD_4, 1);
    TextDrawLetterSize(HUD_4, -1.070832, 0.950001);
    TextDrawTextSize(HUD_4, 298.500000, -4.500000);
    TextDrawSetOutline(HUD_4, 1);
    TextDrawSetShadow(HUD_4, 0);
    TextDrawAlignment(HUD_4, 2);
    TextDrawColor(HUD_4, 1687547391);
    TextDrawBackgroundColor(HUD_4, 255);
    TextDrawBoxColor(HUD_4, 1687547391);
    TextDrawUseBox(HUD_4, 1);
    TextDrawSetProportional(HUD_4, 1);
    TextDrawSetSelectable(HUD_4, 0);

    //Speedometer
    VehicleTextdraw[0] = TextDrawCreate(470.000000, 409.000000, "_");
    TextDrawFont(VehicleTextdraw[0], 1);
    TextDrawLetterSize(VehicleTextdraw[0], 0.600000, 4.700002);
    TextDrawTextSize(VehicleTextdraw[0], 298.500000, 80.000000);
    TextDrawSetOutline(VehicleTextdraw[0], 1);
    TextDrawSetShadow(VehicleTextdraw[0], 0);
    TextDrawAlignment(VehicleTextdraw[0], 2);
    TextDrawColor(VehicleTextdraw[0], 1687547391);
    TextDrawBackgroundColor(VehicleTextdraw[0], 255);
    TextDrawBoxColor(VehicleTextdraw[0], 1687547391);
    TextDrawUseBox(VehicleTextdraw[0], 1);
    TextDrawSetProportional(VehicleTextdraw[0], 1);
    TextDrawSetSelectable(VehicleTextdraw[0], 0);
    
    VehicleTextdraw[1] = TextDrawCreate(470.000000, 412.000000, "_");
    TextDrawFont(VehicleTextdraw[1], 1);
    TextDrawLetterSize(VehicleTextdraw[1], 0.266665, 4.700002);
    TextDrawTextSize(VehicleTextdraw[1], 298.500000, 80.000000);
    TextDrawSetOutline(VehicleTextdraw[1], 1);
    TextDrawSetShadow(VehicleTextdraw[1], 0);
    TextDrawAlignment(VehicleTextdraw[1], 2);
    TextDrawColor(VehicleTextdraw[1], 1687547391);
    TextDrawBackgroundColor(VehicleTextdraw[1], 255);
    TextDrawBoxColor(VehicleTextdraw[1], 255);
    TextDrawUseBox(VehicleTextdraw[1], 1);
    TextDrawSetProportional(VehicleTextdraw[1], 1);
    TextDrawSetSelectable(VehicleTextdraw[1], 0);
    
    VehicleTextdraw[2] = TextDrawCreate(470.000000, 428.000000, "_");
    TextDrawFont(VehicleTextdraw[2], 1);
    TextDrawLetterSize(VehicleTextdraw[2], 0.412499, 4.700002);
    TextDrawTextSize(VehicleTextdraw[2], 298.500000, 80.000000);
    TextDrawSetOutline(VehicleTextdraw[2], 1);
    TextDrawSetShadow(VehicleTextdraw[2], 0);
    TextDrawAlignment(VehicleTextdraw[2], 2);
    TextDrawColor(VehicleTextdraw[2], 9145343);
    TextDrawBackgroundColor(VehicleTextdraw[2], 255);
    TextDrawBoxColor(VehicleTextdraw[2], 9145343);
    TextDrawUseBox(VehicleTextdraw[2], 1);
    TextDrawSetProportional(VehicleTextdraw[2], 1);
    TextDrawSetSelectable(VehicleTextdraw[2], 0);
    
    VehicleTextdraw[3] = TextDrawCreate(447.000000, 414.000000, "_");
    TextDrawFont(VehicleTextdraw[3], 1);
    TextDrawLetterSize(VehicleTextdraw[3], -1.070832, 0.950001);
    TextDrawTextSize(VehicleTextdraw[3], 298.500000, -4.500000);
    TextDrawSetOutline(VehicleTextdraw[3], 1);
    TextDrawSetShadow(VehicleTextdraw[3], 0);
    TextDrawAlignment(VehicleTextdraw[3], 2);
    TextDrawColor(VehicleTextdraw[3], 1687547391);
    TextDrawBackgroundColor(VehicleTextdraw[3], 255);
    TextDrawBoxColor(VehicleTextdraw[3], 1687547391);
    TextDrawUseBox(VehicleTextdraw[3], 1);
    TextDrawSetProportional(VehicleTextdraw[3], 1);
    TextDrawSetSelectable(VehicleTextdraw[3], 0);
    
    VehicleTextdraw[4] = TextDrawCreate(461.000000, 426.000000, "Preview_Model");
    TextDrawFont(VehicleTextdraw[4], 5);
    TextDrawLetterSize(VehicleTextdraw[4], 0.600000, 2.000000);
    TextDrawTextSize(VehicleTextdraw[4], 8.500000, 10.000000);
    TextDrawSetOutline(VehicleTextdraw[4], 0);
    TextDrawSetShadow(VehicleTextdraw[4], 0);
    TextDrawAlignment(VehicleTextdraw[4], 1);
    TextDrawColor(VehicleTextdraw[4], -1);
    TextDrawBackgroundColor(VehicleTextdraw[4], 0);
    TextDrawBoxColor(VehicleTextdraw[4], 255);
    TextDrawUseBox(VehicleTextdraw[4], 0);
    TextDrawSetProportional(VehicleTextdraw[4], 1);
    TextDrawSetSelectable(VehicleTextdraw[4], 0);
    TextDrawSetPreviewModel(VehicleTextdraw[4], 1240);
    TextDrawSetPreviewRot(VehicleTextdraw[4], 0.000000, 0.000000, 0.000000, 1.000000);
    TextDrawSetPreviewVehCol(VehicleTextdraw[4], 1, 1);
    
    VehicleTextdraw[5] = TextDrawCreate(485.000000, 426.000000, "Preview_Model");
    TextDrawFont(VehicleTextdraw[5], 5);
    TextDrawLetterSize(VehicleTextdraw[5], 0.600000, 2.000000);
    TextDrawTextSize(VehicleTextdraw[5], 8.500000, 10.000000);
    TextDrawSetOutline(VehicleTextdraw[5], 0);
    TextDrawSetShadow(VehicleTextdraw[5], 0);
    TextDrawAlignment(VehicleTextdraw[5], 1);
    TextDrawColor(VehicleTextdraw[5], -1);
    TextDrawBackgroundColor(VehicleTextdraw[5], 0);
    TextDrawBoxColor(VehicleTextdraw[5], 255);
    TextDrawUseBox(VehicleTextdraw[5], 0);
    TextDrawSetProportional(VehicleTextdraw[5], 1);
    TextDrawSetSelectable(VehicleTextdraw[5], 0);
    TextDrawSetPreviewModel(VehicleTextdraw[5], 1650);
    TextDrawSetPreviewRot(VehicleTextdraw[5], 0.000000, 0.000000, 0.000000, 1.000000);
    TextDrawSetPreviewVehCol(VehicleTextdraw[5], 1, 1);
    return 1;
}

OnGameModeInit_Setup()
{

    Whitelist = DCC_FindChannelById("1181136057320874034");
    RefundRoles = DCC_FindChannelById("1181136057320874034");
    new tmpobjid;
    Iter_Add(Body, 0);
    Iter_Add(ServerActor, 0);
    //Server configuration
    MySqlStartConnection();
    ManualVehicleEngineAndLights();
    Streamer_ToggleErrorCallback(1);
    SetGameModeText("Diversity v1.1 Deluxe");
    BlockGarages(true, GARAGE_TYPE_ALL, "CLOSED");
    //SendRconCommand("password demo"); klo mo aktifin password lewat sini password server
    ShowNameTags(1);
    SetNameTagDrawDistance(8.0);
    //Gamemode configuration
    // UpdateVehicleState();
    LoadServerPickup();
    LoadServerMapIcon();
    LoadGlobalTextdraws();
    LoadWorkshopMapping();
    LoadActor();
    // CreateChopShop();

    // Mysql loader
    //mysql_pquery(g_iHandle, "SELECT * FROM `billboards` ORDER BY `bbID` ASC", "Billboard_Load", "");
    //mysql_pquery(g_iHandle, "SELECT * FROM `backpacks`", "Backpack_Load", "");
    //mysql_pquery(g_iHandle, "SELECT * FROM `crates`", "Crate_Load", "");
    //mysql_pquery(g_iHandle, "SELECT * FROM `droppedweapon` ORDER BY `ID` DESC", "OnDroppedLoad", "");

    mysql_pquery(g_iHandle, "SELECT * FROM `server` WHERE `ID`='1'", "Static_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `houses` ORDER BY `houseID` ASC", "House_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `businesses` ORDER BY `bizID` ASC", "Business_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `dropped` ORDER BY `ID` ASC", "Dropped_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `entrances` ORDER BY `entranceID` ASC", "Entrance_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `jobs` ORDER BY `jobID` ASC", "Job_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `factions` ORDER BY `factionID` ASC", "Faction_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `arrestpoints`", "Arrest_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `impoundlots`", "Impound_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `garbage` ORDER BY `garbageID` ASC", "Garbage_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `objecttext`", "ObjectText_Load", "");
    mysql_pquery(g_iHandle, "SELECT * FROM `workshop`", "Workshop_Load", "");


//    mysql_pquery(g_iHandle, "SELECT * FROM `furnstore` ORDER BY `id` ASC", "FurnStore_Load", "");
//    mysql_pquery(g_iHandle, "SELECT * FROM `furnobject` ORDER BY `id` ASC", "FurnObject_Load", "");

    SetModelPreviewRotation(18875, 90.0, 180.0, 0.0);
    SetModelPreviewRotation(2703, -105.0, 0.0, -15.0);
    SetModelPreviewRotation(2702, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2814, -90.0, 0.0, -90.0);
    SetModelPreviewRotation(2768, -15.0, 0.0, -160.0);
    SetModelPreviewRotation(19142, -20.0, -90.0, 0.0);
    SetModelPreviewRotation(1581, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(2958, -10.0, -15.0, 0.0);
    SetModelPreviewRotation(1575, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1577, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1578, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(18634, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2043, 0.0, 0.0, 90.0);
    SetModelPreviewRotation(1484, -15.0, 30.0, 0.0);
    SetModelPreviewRotation(2226, 0.0, 0.0, 180.0);

    //Anticheat disable
    /*EnableAntiCheat(39, 0); //Dialog hack
    EnableAntiCheat(40, 0); //multiple login on same IP
    EnableAntiCheat(52, 0); //Anti NOP
    EnableAntiCheat(14, 0); //Money Hack
    EnableAntiCheat(47, 0); //Armed Hack
    EnableAntiCheat(18, 0); //Special Action
    EnableAntiCheat(6, 0); //Pickup Teleport
    EnableAntiCheat(2, 0); //Speed Hack*/

    JailArea = CreateDynamicPolygon(JailArray, _, _, _, _, 3, _);
    NSArea = CreateDynamicPolygon(NSArray, _, _, _, _, 20, _);
    SAMDArea = CreateDynamicPolygon(SAMDArray, _, _, _, _, 4, _);
    //production = CreateDynamicPolygon(production_Array, _, _, _, _, 3, _);
    mechanic_zone_main = CreateDynamicPolygon(mekanikzone, _, _, _, _, 0);
    mechanic_zone_repair[0] = CreateDynamicPolygon(mekanikrepair[0], _, _, _, _, 0);
    mechanic_zone_repair[1] = CreateDynamicPolygon(mekanikrepair[1], _, _, _, _, 0);
    mechanic_zone_ship = CreateDynamicPolygon(mekanikzoneship, _, _, _, _, 0);
    prison_zone = CreateDynamicPolygon(prisonzone, _, _, _, _, 0);

    safe_zone[0] = CreateDynamicRectangle(1324.0, -2661.5, 2100.0, -2174.5);
    safe_zone[1] = CreateDynamicRectangle(1063.0, -2260.5, 1520.0, -1882.5);
    safe_zone[2] = CreateDynamicRectangle(1129.0, -2380.5, 1324.0, -2260.5);
    safe_zone[3] = CreateDynamicRectangle(1040.0, -1844.5, 1291.0, -1714.5);
    safe_zone[4] = CreateDynamicRectangle(1038.0, -1714.5, 1291.0, -1581.5);
    safe_zone[5] = CreateDynamicRectangle(1319.0, -1876.5, 1587.0, -1581.5);
    safe_zone[6] = CreateDynamicRectangle(1690.0, -1950.5, 1810.0, -1806.5);
    safe_zone[7] = CreateDynamicRectangle(2001.0, -2096.5, 2104.0, -1966.5);
    safe_zone[8] = CreateDynamicRectangle(1983.0, -1451.5, 2101.0, -1352.5);
    safe_zone[9] = CreateDynamicRectangle(2211.0, -1380.5, 2272.0, -1298.5);
    safe_zone[10] = CreateDynamicRectangle(1025.0, -1568.5, 1215.0, -1389.5);
    safe_zone[11] = CreateDynamicRectangle(1067.0, -1389.5, 1253.0, -1276.5);
    safe_zone[12] = CreateDynamicRectangle(619.0, -1395.5, 795.0, -1315.5);
    safe_zone[13] = CreateDynamicRectangle(803.0, -1315.5, 938.0, -1154.5);
    safe_zone[14] = CreateDynamicRectangle(506.0, -1315.5, 619.0, -1237.5);
    safe_zone[15] = CreateDynamicRectangle(601.9, -612.4, 676.9, -534.4);
    safe_zone[16] = CreateDynamicRectangle(1179.3, -1284.3, 1279.3, -1184.3);
    safe_zone[17] = CreateDynamicRectangle(1251.9, -1389.3, 1336.9, -1284.3);

    farm_zone[0] = CreateDynamicRectangle(-330.1, -1434.1, -158.1, -1309.1);
    farm_zone[1] = CreateDynamicRectangle(-338.1, -1564.1, -205.1, -1459.1);


    tempatganja[0] = CreateDynamicPolygon(ganjazone, _, _, _, _, 0);
    tempatganja[1] = CreateDynamicPolygon(ganjabb1, _, _, _, _, 0);
    tempatganja[2] = CreateDynamicPolygon(ganjabb2, _, _, _, _, 0);
    tempatganja[3] = CreateDynamicPolygon(ganjabb3, _, _, _, _, 0);
    tempatganja[4] = CreateDynamicPolygon(ganjabb4, _, _, _, _, 0);
    tempatganja[5] = CreateDynamicPolygon(ganjadillimore, _, _, _, _, 0);
    tempatganja[6] = CreateDynamicPolygon(ganjapalo, _, _, _, _, 0);


    for (new i; i < sizeof(ColorList); i++) {
        format(color_string, sizeof(color_string), "%s{%06x}%03d %s", color_string, ColorList[i] >>> 8, i, ((i+1) % 16 == 0) ? ("\n") : (""));
    }

    for (new i; i < sizeof(FontNames); i++) {
        format(object_font, sizeof(object_font), "%s%s\n", object_font, FontNames[i]);
    }

    fishzone[0] = CreateDynamicPolygon(zones_points_0);
    fishzone[1] = CreateDynamicCircle(zones_points_1[0], zones_points_1[1], zones_points_1[2]);
    fishzone[2] = CreateDynamicCircle(zones_points_2[0], zones_points_2[1], zones_points_2[2]);
    fishzone[3] = CreateDynamicCircle(zones_points_3[0], zones_points_3[1], zones_points_3[2]);
    fishzone[4] = CreateDynamicCircle(zones_points_4[0], zones_points_4[1], zones_points_4[2]);
    fishzone[5] = CreateDynamicCircle(zones_points_5[0], zones_points_5[1], zones_points_5[2]);
    fishzone[6] = CreateDynamicRectangle(zones_points_6[0], zones_points_6[1], zones_points_6[2], zones_points_6[3]);
    fishzone[7] = CreateDynamicPolygon(zones_points_7);
    fishzone[8] = CreateDynamicPolygon(zones_points_8);
    fishzone[9] = CreateDynamicPolygon(zones_points_9);
    fishzone[10] = CreateDynamicPolygon(zones_points_10);

    //Vehicle Toys Shop
    tmpobjid = CreateDynamicObject(17950, 2253.650878, -2016.296752, 14.776873, 0.000000, -0.000029, 179.999816, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    tmpobjid = CreateDynamicObject(17950, 2260.861328, -2016.296752, 14.776873, 0.000000, -0.000029, 179.999816, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    tmpobjid = CreateDynamicObject(17950, 2268.082519, -2016.296752, 14.776873, 0.000000, -0.000029, 179.999816, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    tmpobjid = CreateDynamicObject(17950, 2275.302734, -2016.296752, 14.776873, 0.000000, -0.000029, 179.999816, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    tmpobjid = CreateDynamicObject(17950, 2246.417480, -2016.296752, 14.776873, 0.000000, -0.000037, 179.999771, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Tandain Sini untuk di uncomment

    tmpobjid = CreateDynamicObject(1468, 2232.398437, -2013.704345, 13.758905, 0.000000, 0.000000, 135.400024, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1468, 2233.058349, -2011.813110, 13.758905, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1468, 2236.144042, -2017.396850, 13.758905, 0.000000, 0.000000, 135.400024, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1468, 2239.895751, -2021.097290, 13.758905, 0.000000, 0.000000, 135.400024, -1, -1, -1, 300.00, 300.00); 


    //Penutup underground
    tmpobjid = CreateDynamicObject(19377, -1750.174316, 984.437988, 19.399074, 0.000000, 0.000000, 0.000000, -1, -1, -1, 100.00, 100.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4562, "plaza1_lan2", "sl_blokpave1", 0xFF717D91);
    tmpobjid = CreateDynamicObject(19377, -1750.174316, 994.057922, 19.399074, 0.000000, 0.000000, 0.000000, -1, -1, -1, 100.00, 100.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4562, "plaza1_lan2", "sl_blokpave1", 0xFF717D91);
    
    //RV INTERIOR
    tmpobjid = CreateDynamicObject(19447, 879.035461, 1277.616333, -18.426811, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 880.815185, 1277.626586, -20.116809, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 882.664306, 1277.616333, -18.426811, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 883.544799, 1282.535644, -18.426811, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 885.035034, 1272.725585, -18.426811, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 880.815185, 1277.626586, -16.676815, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-10-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 880.815185, 1268.016357, -16.676815, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-10-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(1743, 880.302734, 1274.754760, -20.134965, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 2023, "bitsnbobs", "CJ_LIGHTWOOD", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 3108, "bjmptx", "target_crv", 0x00000000);
    tmpobjid = CreateDynamicObject(1745, 882.164978, 1276.324829, -20.210876, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(2314, 881.249389, 1277.475097, -20.030872, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 2023, "bitsnbobs", "CJ_LIGHTWOOD", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 885.620117, 1277.838989, -20.030872, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
    tmpobjid = CreateDynamicObject(1742, 882.863769, 1277.799682, -17.250873, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 2, 2023, "bitsnbobs", "CJ_LIGHTWOOD", 0x00000000);
    tmpobjid = CreateDynamicObject(2339, 881.076538, 1282.205078, -17.840858, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 1, 14603, "bikeskool", "motel_wall3", 0x00000000);
    tmpobjid = CreateDynamicObject(2339, 882.066284, 1282.205078, -17.840858, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 1, 14603, "bikeskool", "motel_wall3", 0x00000000);
    tmpobjid = CreateDynamicObject(912, 879.189514, 1276.912475, -19.461505, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 2023, "bitsnbobs", "CJ_LIGHTWOOD", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 879.035461, 1267.987304, -18.426811, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 880.815185, 1271.067504, -20.116809, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 883.945068, 1270.445190, -18.426811, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 882.664306, 1267.865600, -18.426811, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
    tmpobjid = CreateDynamicObject(2522, 880.782714, 1271.014282, -20.036973, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "DinerFloor", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 3922, "bistro", "Marble", 0x00000000);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    tmpobjid = CreateDynamicObject(1764, 882.850402, 1278.470458, -20.030872, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2944, 879.143920, 1279.712890, -18.620878, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2764, 879.619018, 1281.873413, -19.640867, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19916, 882.175537, 1282.309570, -20.030872, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1720, 879.666442, 1280.508056, -20.030872, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2417, 881.308166, 1282.284057, -20.060873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3034, 882.564575, 1279.864501, -18.094703, 0.000000, 0.500000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3034, 879.134887, 1275.993408, -18.022180, 0.000000, 0.500000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19466, 880.235717, 1270.661621, -19.102827, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19466, 880.235717, 1270.661621, -17.172832, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2523, 880.195800, 1271.036376, -20.040477, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    print("JANGAN LUPA SUBSCRIBE: https://www.youtube.com/channel/UCDfvH7IxOIZh9ojBoOLK_CQ");
    tmpobjid = CreateDynamicObject(1649, 878.079406, 1270.536621, -18.389377, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2738, 882.097595, 1272.094482, -19.447183, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2257, 882.523315, 1275.445312, -18.026443, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19787, 881.694885, 1277.767944, -18.201543, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2262, 881.647460, 1273.300659, -18.326683, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2726, 881.160644, 1277.371948, -19.150873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2073, 880.811462, 1274.896118, -16.560865, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2073, 880.811462, 1280.146484, -16.560865, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2074, 881.253906, 1271.918701, -17.010866, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3034, 879.125366, 1282.403930, -18.114601, 0.000000, -0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); 

    //Drug Lab
    tmpobjid = CreateDynamicObject(1893, 2351.280517, -650.246215, 130.714630, 0.000000, -11.199996, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19922, 2350.927246, -646.957336, 127.054687, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2901, 2350.844726, -647.137878, 127.244712, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, 2352.199218, -647.111083, 127.854675, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2902, 2349.933593, -646.683959, 127.934661, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19830, 2351.562500, -646.670959, 127.834709, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19922, -1629.402709, -2235.174560, 30.476562, 0.000000, 0.000000, 93.600044, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19922, -1629.201049, -2238.388183, 30.476562, 0.000000, 0.000000, 93.600044, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19922, -1629.000732, -2241.573974, 30.476562, 0.000000, 0.000000, 93.600044, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2234.114013, 31.246570, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2234.704589, 31.246570, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2234.444335, 31.486576, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2235.454345, 31.246570, 0.000000, 0.000015, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2236.044921, 31.246570, 0.000000, 0.000015, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2235.784667, 31.486576, 0.000000, 0.000015, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2237.376220, 31.246570, 0.000000, 0.000022, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2237.966796, 31.246570, 0.000000, 0.000022, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2237.706542, 31.486576, 0.000000, 0.000022, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2238.695068, 31.246570, 0.000000, 0.000030, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2239.285644, 31.246570, 0.000000, 0.000030, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2239.025390, 31.486576, 0.000000, 0.000030, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2240.635253, 31.246570, 0.000000, 0.000038, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2241.225830, 31.246570, 0.000000, 0.000038, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2240.965576, 31.486576, 0.000000, 0.000038, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2241.965576, 31.246570, 0.000000, 0.000045, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2242.556152, 31.246570, 0.000000, 0.000045, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -1629.093383, -2242.295898, 31.486576, 0.000000, 0.000045, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19922, -751.827697, -132.703323, 64.878128, 0.000000, 0.000000, 19.399999, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19922, -754.780334, -133.742950, 64.878067, 0.000000, 0.000000, 19.399999, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2894, -755.705078, -134.117675, 65.678115, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -754.741455, -134.001037, 65.618118, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -753.711181, -133.641113, 65.618118, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -752.210693, -133.121170, 65.618118, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2891, -751.180419, -132.761245, 65.618118, 0.000000, 0.000007, 0.000000, -1, -1, -1, 300.00, 300.00); 


    DisableInteriorEnterExits();
    EnableStuntBonusForAll(0);
    SetNameTagDrawDistance(10.0);

    ShowPlayerMarkers(1);
    LimitPlayerMarkerRadius(100.0);

    CallLocalFunction("OnGameModeInitEx", "");
    print("JANGAN LUPA SUBSCRIBE: https://www.youtube.com/channel/UCDfvH7IxOIZh9ojBoOLK_CQ");
    return 1;
}
task Server_RefreshStorage[1800000]()
{
    for(new i=0; i != MAX_DYNAMIC_JOBS; i++)
    {
        if(JobData[i][jobExists] && JobData[i][jobStock] < 2000)
        {
            JobData[i][jobExists] += 1000;      
        }
    }
    return 1;
}
task Server_PriceUpdate[2400000]()
{
    ServerData[cow_price] = RandomEx(200,350);
    ServerData[deer_price] = RandomEx(100,150);
    ServerData[fish_Price] = RandomFloat(3.5,5.0);
    ServerData[lsd_price] = RandomEx(450,650);
    ServerData[ecs_price] = RandomEx(650,850);
    ServerData[wheat_price] = RandomEx(50, 100);
    return 1;
}

task System_UpdateHouse[900000]()
{
    for(new id = 0; id != MAX_HOUSES; id++)
    { 
        if(HouseData[id][houseExists] && HouseData[id][houseOwner])
        {
            if((gettime()-HouseData[id][houseLastVisited]) > (AUTOSELLDAYS * 86400)) 
            {
                HouseData[id][houseOwner] = 0;
                HouseData[id][houseMoney] = 0;
                HouseData[id][houseLocked] = 1;
                HouseData[id][houseLastVisited] = 0;
                HouseData[id][houseParkingSlotUsed] = 0;

		        mysql_tquery(g_iHandle, sprintf("UPDATE server_vehicles SET state=%d,`house_parking`='-1',`interior` = '0' , `world` = '0' WHERE `state` = '%d' AND `house_parking`='%d';", VEHICLE_STATE_SPAWNED, VEHICLE_STATE_HOUSEPARKED, HouseData[id][houseID]));

                House_RemoveAllItems(id);

                new query[256];
                format(query, sizeof(query), "INSERT INTO `house_queue` SET Username = '%s', Location='%s', Date = UNIX_TIMESTAMP(), ID = '%d'", HouseData[id][houseOwnerName], SQL_ReturnEscaped(GetLocation(HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2])), id);
                mysql_tquery(g_iHandle, query);

                format(HouseData[id][houseOwnerName], MAX_PLAYER_NAME, "None");
            }

            House_Refresh(id);
            House_Save(id);
        }
    }
    return 1;
}
task System_UpdateItem[905000]() // Default 900000
{
    for(new id = 0; id != MAX_DROPPED_ITEMS; id ++) if(DroppedItems[id][droppedModel] && DroppedItems[id][droppedTime])
    {
        if((gettime()-DroppedItems[id][droppedTime]) > (2 * 800))
        {
            Item_Delete(id);
        }
    }
    return 1;
}
task System_UpdateEntrance[900000]()
{
    for(new id = 0; id != MAX_ENTRANCES; id++) if(EntranceData[id][entranceExists])
    {
        Entrance_Refresh(id);
        Entrance_Save(id);
    }
    return 1;
}
task LotteryUpdate[2700000]()
{
    new
        number = random(60) + 1,
        jackpot = RandomEx(100,300);

    foreach (new i : Player)
    {
        if(PlayerData[i][pLotteryB] == 1)
        {
            if(PlayerData[i][pLottery] == number)
            {
                GiveMoney(i, jackpot, ECONOMY_TAKE_SUPPLY, "got lottery jackpot");
                SendServerMessage(i, "You have won the lottery jackpot of %s!", FormatNumber(jackpot));
            }
            else
            {
                SendClientMessage(i, X11_WHITE, "[LOTTERY]: You didn't win the lottery draw this time.");
            }
            PlayerData[i][pLottery] = 0;
            PlayerData[i][pLotteryB] = 0;
        }
    }
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerRequestClass(PID : %d CLASSID : %d)", playerid, classid);
	#endif

    if(IsPlayerNPC(playerid))
        return 1;

    if(IsValidRoleplayName(ReturnName(playerid)))
    {
        SendErrorMessage(playerid, "Username Account Center tidak sesuai format!");
        SendErrorMessage(playerid, "Penggunaan Account Center harus mengikuti format nama biasa.");
        SendErrorMessage(playerid, "Sebagai contoh, Clyne, RiskiBabi, BagasMiAyam, DimasNugroho dan lainnya.");
        KickEx(playerid);
    }

    if(!PlayerData[playerid][pKicked])
    {
        RealTime_SyncPlayerWorldTime(playerid);
        SetPVarInt(playerid, "IPBlacklist", 1);

        if(!Blacklist_Check(playerid, "IP", ReturnIP(playerid))) {
            DeletePVar(playerid, "IPBlacklist");

            SetCameraData(playerid);
            SQL_CheckAccount(playerid);
            SetPlayerColor(playerid, DEFAULT_COLOR);
            ShowLoginTextdraw(playerid);
        }
    }
    return 1;
}
public OnPlayerRequestSpawn(playerid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerRequestSpawn(PID : %d)", playerid);
	#endif

    if (AccountData[playerid][pLogged] == 0)
    {
        KickEx(playerid);
        return 0;
    }
    return 1;
}

timer VehicleExplode[2000](playerid)
{
    SetHealth(playerid, 0);
    return 1;
}
SetOutsideRV(playerid, vehicleid, Float:health = 1000.0)
{
    new Float:x, Float:y, Float:z, vw, int;
    GetVehiclePos(vehicleid, x, y, z);
    vw = GetVehicleVirtualWorld(vehicleid);
    int = GetVehicleInterior(vehicleid);
    SetPlayerPosEx(playerid, x, y, z);
    SetPlayerVirtualWorld(playerid, vw);
    SetPlayerInterior(playerid, int);
    if(ChargePhone[playerid] >= 1)
    {
        ChargePhone[playerid] = 0;
        SendClientMessage(playerid, COLOR_WHITE, "You "RED"stop "WHITE"charging your battery as you get out from the vehicle");
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s removes charge from his phone and stop charging their phone.", ReturnName(playerid, 0));

    }

    if(health < 200)
    {
        defer VehicleExplode(playerid);
    }
    return 1;
}
SetPlayerFightStyle(playerid)
{
	if(PlayerData[playerid][pFightStyle] == 0)
	{
	    SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
	}
	else if(PlayerData[playerid][pFightStyle] == 1)
	{
	    SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
	}
	else if(PlayerData[playerid][pFightStyle] == 2)
	{
        SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
	}
	else if(PlayerData[playerid][pFightStyle] == 3)
	{
        SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
	}
	else if(PlayerData[playerid][pFightStyle] == 4)
	{
	    SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
	}
	else if(PlayerData[playerid][pFightStyle] == 5)
	{
	    SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
	}
    return 1;
}

public OnPlayerSpawn(playerid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerSpawn(PID : %d)", playerid);
	#endif

    if(!IsPlayerInEvent(playerid))
    {
        SetPlayerTeam(playerid, 1);
        new vw = GetPlayerVirtualWorld(playerid);
        new vehicleid = (vw - MIN_VIRTUAL_WORLD);
        if(vw > MIN_VIRTUAL_WORLD && vw < MAX_VIRTUAL_WORLD)
        {
            SetOutsideRV(playerid, vehicleid);
            // return 1;
        }
        SetPlayerScore(playerid, PlayerData[playerid][pScore]);

        if(PlayerData[playerid][pOnDuty])
        {
            SetPlayerSkinEx(playerid, PlayerData[playerid][pSkinFaction], 1);

            if(PlayerData[playerid][pSpectator] == INVALID_PLAYER_ID)
            {
                if(PlayerData[playerid][pUndercoverDuty])
                {
                    SetPlayerColor(playerid, DEFAULT_COLOR);
                }
                else
                {
                    SetFactionColor(playerid);
                }
            }
            
        }
        else SetPlayerSkinEx(playerid, PlayerData[playerid][pSkin]);

        Streamer_ToggleIdleUpdate(playerid, true);

        PlayerData[playerid][pKilled] = 0;

        if(PlayerData[playerid][pBleeding])
            PlayerData[playerid][pBleedTime] = 1;

        if(PlayerData[playerid][pJailTime] > 0)
        {
            for (new i = 0; i < 100; i ++) {
                SendClientMessage(playerid,-1, "");
            }

            if(PlayerData[playerid][pPrisoned]) SetPlayerInPrison(playerid);
            else SpawnPlayerInJail(playerid);
            SendServerMessage(playerid, "Kamu masih dalam masa dipenjara selama "YELLOW"%d menit.", PlayerData[playerid][pJailTime]/60);
        }
        else if(PlayerData[playerid][pHospital] != -1)
        {
            SetHospitalSpawn(playerid);
            PlayerData[playerid][pHospitalTime] = 0;
        }
        else if(!PlayerData[playerid][pCreated])
        {
            if(GetPVarInt(playerid, "SelectDia"))
            {
                //new str[64];
                //format(str, sizeof(str), "~b~~h~Nama~n~~w~%s", ReturnName(playerid));
                //PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], str);

                for (new i = 0; i < 20; i ++) {
                    SendClientMessage(playerid , -1, "");
                }

                //for (new i = 0; i < 10; i ++) {
                //    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][i]);
                //}
                PlayerData[playerid][pSkin] = 98;
                SetPlayerSkinEx(playerid, 98);

                ToggleGUIDisplay(playerid, false);

                //ANANTA TANDAI
                PlayerData[playerid][pOrigin][0] = '\0';
                PlayerData[playerid][pBirthdate][0] = '\0';

                SendServerMessage(playerid, "Data pada karakter anda belum lengkap, isi data sesuai dengan keadaan karakter.");
                SendServerMessage(playerid, "Arahkan kursor anda ke text '{C0C0C0}UPDATE"WHITE"' samping untuk mengubah data karakter.");
                SendServerMessage(playerid, "Gunakan command '{C0C0C0}/resetcursor"WHITE"' jika kursor anda hilang pada saat pengisian data.");

                Dialog_Show(playerid, Personal, DIALOG_STYLE_LIST, "Character Settings",""WHITE"Gender\n{C0C0C0}Birth Date\n"WHITE"Origin Character\n"GREEN"Deploy Character!","Select","Kembali");

                //SelectTextDraw(playerid, 0xC0C0C0FF);
                ResetWeapons(playerid);

                //Box spextate textdraw
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_spectate][1]);

                SetPlayerPos(playerid, 258.0770, -42.3550, 1002.0234);
                SetPlayerFacingAngle(playerid,45.5218);
                SetPlayerInterior(playerid, 14);
                SetPlayerVirtualWorld(playerid, (playerid+3));
                SetPlayerCameraPos(playerid,255.014175,-39.542194,1002.023437);
                SetPlayerCameraLookAt(playerid,257.987945,-42.462291,1002.023437);
            }
        }
        else
        {
            SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

            SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
            SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

    //        SetCameraBehindPlayer(playerid);
            SetAccessories(playerid);

            if(PlayerData[playerid][pWorld] == PRISON_WORLD) {
                SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
            }
            else
            {
                if(PlayerData[playerid][pSpawnPoint] == 3 && PlayerData[playerid][pInjured] == 0) {
                    SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
                }
            }
            if(PlayerData[playerid][pInjured])
            {
                SavePlayerWeapon(playerid);

                SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);

                InjuredTag(playerid, true);

                if(PlayerData[playerid][pDead] <= 20)
                {
                    PlayerDeath[playerid] = 1;
                    InjuredTag(playerid, false, true);
                }

                TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
                TextDrawSetString(gServerTextdraws[0], "You_are_injured!_~r~/call_911_~w~or_~r~/giveup");

                SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" Anda terluka dan membutuhkan pertolongan medis (/call 911 > medics).");
                SendClientMessage(playerid, X11_GREY_60, "USAGE:"WHITE" (( /giveup untuk spawn ke rumah sakit. Tunggu 5 menit agar bisa melakukannya. ))");

                PlayerData[playerid][pGiveupTime] = (5 * 60);

                ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY",   4.0, 0, 0, 0, 1, 0, 1);
                ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY",   4.0, 0, 0, 0, 1, 0, 1);

                SetArmour(playerid, GetArmour(playerid));
                SetHealth(playerid, GetHealth(playerid));
            }
            else
            {
                SetArmour(playerid, GetArmour(playerid));
                SetHealth(playerid, GetHealth(playerid));

                if(IsPlayerDuty(playerid))  RefreshFactionWeapon(playerid);
                else RefreshWeapon(playerid);
            }
        }
        //Fightstyle set
        SetPlayerFightStyle(playerid);

        if (PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied]) {
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
        }
        //sementara
        if (AccountData[playerid][pAdminDuty]) {
            SetHealth(playerid, 99999);
            SetPlayerColor(playerid, RemoveAlpha(0xFF800000));
        }
        SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);

        SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 0);
    }
    return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerCommandReceived(PID : %d CMD : %s)", playerid, cmdtext);
	#endif

    if(!SQL_IsCharacterLogged(playerid) || PlayerData[playerid][pKilled])
        return 0;

    printf("[command] [%s]: %s", ReturnName(playerid, 1), cmdtext);

    if(PlayerData[playerid][pMuted] && strfind(cmdtext, "/unmute", true) != 0)
    {
        SendErrorMessage(playerid, "You are muted by the system.");
        return 0;
    }

    foreach(new i : Player) if(AccountData[i][pAdmin] >= 5 && PlayerData[i][pSpectator] == playerid) {
        SendClientMessageEx(i, X11_TOMATO_1, "( cmd ) {C0C0C0}%s: %s", ReturnName(playerid, 0), cmdtext);
    }
    return 1;
}



public OnPlayerText(playerid, text[])
{
    new name[MAX_PLAYER_NAME + 1];
    GetPlayerName(playerid, name, sizeof name);
    new msg[128]; 
    format(msg, sizeof(msg), "```%s: %s```", name, text);
    DCC_SendChannelMessage(g_Discord_Chat, msg);

    text[0] = toupper(text[0]);

    if((!PlayerData[playerid][pLogged]) || PlayerData[playerid][pHospital] != -1)
        return 0;

    if(!IsPlayerInEvent(playerid))
    {
        if(IsPlayerFlooding(playerid))
        {
            SendErrorMessage(playerid, "Chat flood protection!");
            return 0;
        }

        new
            targetid = PlayerData[playerid][pCallLine];

        if(AccountData[playerid][pAdminDuty])
        {
            SendNearbyMessage(playerid, 15.0, X11_RED_2, "%s: "WHITE"(( %s ))", ReturnName(playerid, 0), text);
            SetPlayerChatBubble(playerid, sprintf("Admin: %s", text), X11_RED_2, 15.0, 5000);
        }
        else if(!IsPlayerOnPhone(playerid))
        {
            if(IsPlayerInDynamicArea(playerid, JailArea) || IsPlayerInDynamicArea(playerid, NSArea)) 
            {
                cmd_b(playerid, text);
            }
            else
            {
                if(!strcmp(PlayerData[playerid][pAccent], "None", true))
                {
                    ProxDetector(playerid, 15.0, X11_WHITE, sprintf("%s says: %s", ReturnName(playerid, 0, 1), text));
                    SetPlayerChatBubble(playerid, sprintf("Says: %s", text), X11_WHITE, 15.0, 5000);
                }
                else
                {
                    ProxDetector(playerid, 15.0, X11_WHITE, sprintf("(%s Accent) %s says: %s", PlayerData[playerid][pAccent], ReturnName(playerid, 0, 1), text));
                    SetPlayerChatBubble(playerid, sprintf("(%s Accent) Says: %s", PlayerData[playerid][pAccent], text), X11_WHITE, 15.0, 5000);
                }
            }
        }
        else
        {
            ProxDetector(playerid, 5.0, X11_WHITE, sprintf("(Phone) %s says: %s", ReturnName(playerid, 0, 1), text));
            SetPlayerChatBubble(playerid, sprintf("(Phone): %s", text), X11_WHITE, 10.0, 5000);
        }

        if(!IsPlayerInAnyVehicle(playerid) && !PlayerData[playerid][pInjured] && !PlayerData[playerid][pLoopAnim] && !IsPlayerOnPhone(playerid) && !PlayerData[playerid][pDisableAnim] && !AccountData[playerid][pAdminDuty] && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK && !GetPlayerDrugeEffect(playerid))
        {
            ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 0, 1, 1, 1, strlen(text) * 100, 1);
            SetTimerEx("StopChatting", strlen(text) * 100, false, "d", playerid);
        }

        if(PlayerData[playerid][pFactionCall])
        {
            new factionid = PlayerData[playerid][pFactionCallID], string[1024];
            SendFactionMessage(factionid, COLOR_SERVER, "%d CALL: "WHITE"%s (%s) "YELLOW"(ph: %d)", FactionData[factionid][factionNumber], ReturnName(playerid, 0), GetPlayerLocation(playerid), PlayerData[playerid][pPhone]);
            SendFactionMessage(factionid, COLOR_SERVER, "DESCRIPTION: "WHITE"%s", text);

            format(string, sizeof(string), "[OPERATOR]:"WHITE" Your phone call has been forwarded to %d - %s", FactionData[factionid][factionNumber], FactionData[factionid][factionName]);
            SendClientMessage(playerid, COLOR_SERVER, string);
            cmd_hangup(playerid, "\1");

        }
        switch (PlayerData[playerid][pEmergency])
        {
            case 1:
            {
                if(!strcmp(text, "police", true))
                {
                    if(!FactionMember_GetTypeCount(FACTION_POLICE, true)) {
                        SendErrorMessage(playerid, "There is no one police member on duty!"), cmd_hangup(playerid, "\1");
                        return 0;
                    }
                    PlayerData[playerid][pEmergency] = 2;
                    SendClientMessage(playerid, X11_TURQUOISE_1, "[OPERATOR]:"WHITE" You've been dispatched to police HQ. Please describe the crime.");
                }
                else if(!strcmp(text, "medics", true))
                {
                    if(!FactionMember_GetTypeCount(FACTION_MEDIC, true))
                    {
                        SendErrorMessage(playerid, "There is no one medics member on duty!"), cmd_hangup(playerid, "\1");
                        return 0;
                    }
                    PlayerData[playerid][pEmergency] = 3;
                    SendClientMessage(playerid, COLOR_HOSPITAL, "[OPERATOR]:"WHITE" You've been dispatched to medical HQ. Please describe the emergency.");
                }
                else if(!strcmp(text, "both", true))
                {
                    PlayerData[playerid][pEmergency] = 6;
                    SendClientMessage(playerid, COLOR_HOSPITAL, "[OPERATOR]:"WHITE" You've been dispatched to both department HQ. Please describe the emergency.");
                }
                else SendClientMessage(playerid, X11_TURQUOISE_1, "[OPERATOR]:"WHITE" Sorry, I don't understand. Do you require \"police\" , \"medics\" or \"both\"?");
            }
            case 2:
            {
                SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, ""COL_LIGHTBLUE"[DISPATCHER] "WHITE"911 CALL: %s (%s) "YELLOW"(ph: %d)", ReturnName(playerid, 0), GetPlayerLocation(playerid), PlayerData[playerid][pPhone]);
                SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, ""COL_LIGHTBLUE"[DISPATCHER] "WHITE"DESCRIPTION: %s", text);
                callerData[playerid][callerType] = 1; //LSPD
                //callerCP_Delete(playerid);
                callerCP_Create(playerid);
                SendClientMessage(playerid, X11_TURQUOISE_1, "[OPERATOR]:"WHITE" We have alerted all units in the area.");
                cmd_hangup(playerid, "\1");
            }
            case 3:
            {
                SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, ""COL_LIGHTBLUE"[DISPATCHER] "WHITE"911 CALL: %s (%s) "YELLOW"(ph:%d)", ReturnName(playerid, 0), GetPlayerLocation(playerid), PlayerData[playerid][pPhone]);
                SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, ""COL_LIGHTBLUE"[DISPATCHER] "WHITE"DESCRIPTION: %s", text);
                SendFactionMessageEx(FACTION_POLICE, COLOR_HOSPITAL, ""COL_LIGHTBLUE"[DISPATCHER] "WHITE"911 CALL: %s (%s) "YELLOW"(ph:%d)", ReturnName(playerid, 0), GetPlayerLocation(playerid), PlayerData[playerid][pPhone]);
                SendFactionMessageEx(FACTION_POLICE, COLOR_HOSPITAL, ""COL_LIGHTBLUE"[DISPATCHER] "WHITE"DESCRIPTION: %s", text);
                callerData[playerid][callerType] = 2; //Medic
                //callerCP_Delete(playerid);
                callerCP_Create(playerid);
                SendClientMessage(playerid, COLOR_HOSPITAL, "[OPERATOR]:"WHITE" We have alerted all units in the area.");
                cmd_hangup(playerid, "\1");
            }
            case 4:
            {
                SendFactionMessageEx(FACTION_GOV, X11_ORCHID_3, "711 CALL: %s (%s) "YELLOW"(ph: %d)", ReturnName(playerid, 0), GetPlayerLocation(playerid), PlayerData[playerid][pPhone]);
                SendFactionMessageEx(FACTION_GOV, X11_ORCHID_3, "DESCRIPTION: %s", text);

                SendClientMessage(playerid, X11_GREY_60, "[OPERATOR]:"WHITE" Your request have been sent to government.");
                cmd_hangup(playerid, "\1");
            }
            case 5:
            {
                SendFactionMessageEx(FACTION_NEWS, X11_PALE_GREEN_4, "144 CALL: %s (%s) "YELLOW"(ph: %d)", ReturnName(playerid, 0), GetPlayerLocation(playerid), PlayerData[playerid][pPhone]);
                SendFactionMessageEx(FACTION_NEWS, X11_PALE_GREEN_4, "DESCRIPTION: %s", text);

                SendClientMessage(playerid, X11_GREY_60, "[OPERATOR]:"WHITE" Your request have been sent to summer news.");
                cmd_hangup(playerid, "\1");
            }
            case 6:
            {
                SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, ""COL_LIGHTBLUE"[DISPATCHER] "WHITE"911 CALL: %s (%s) "YELLOW"(ph:%d)", ReturnName(playerid, 0), GetPlayerLocation(playerid), PlayerData[playerid][pPhone]);
                SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, ""COL_LIGHTBLUE"[DISPATCHER] "WHITE"DESCRIPTION: %s", text);
                SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, ""COL_LIGHTBLUE"[DISPATCHER] "WHITE"911 CALL: %s (%s) "YELLOW"(ph:%d)", ReturnName(playerid, 0), GetPlayerLocation(playerid), PlayerData[playerid][pPhone]);
                SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, ""COL_LIGHTBLUE"[DISPATCHER] "WHITE"DESCRIPTION: %s", text);
                callerData[playerid][callerType] = 3;
                //callerCP_Delete(playerid);
                callerCP_Create(playerid);
                SendClientMessage(playerid, COLOR_HOSPITAL, "[OPERATOR]:"WHITE" We have alerted all units in the area.");
                cmd_hangup(playerid, "\1");
            }
        }
        if(targetid != INVALID_PLAYER_ID && !PlayerData[playerid][pIncomingCall] && PlayerData[targetid][pCallLine] != INVALID_PLAYER_ID) {
            SendClientMessageEx(targetid, X11_YELLOW_2, "(Phone) Caller says: %s", text);
        }
    }
    return 0;
}

public Streamer_OnPluginError(const error[])
{
	#if defined DEBUG_MODE
	    printf("[debug] Streamer_OnPluginError(Error : %s)", error);
	#endif

    printf("[streamer error] %s", error);
    PrintBacktrace();
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerEditDynamicObject(PID : %d OID : %d Response : %d X : %f Y : %f Z : %f RX : %f RY : %f RZ : %f)", playerid, objectid, response, x, y, z, rx, ry, rz);
	#endif

    if(response == EDIT_RESPONSE_FINAL)
    {
        switch(PlayerData[playerid][pEditingMode])
        {
            case OBJECTTEXT: {
                if(PlayerData[playerid][pEditTextObject] != -1 && ObjectData[PlayerData[playerid][pEditTextObject]][oExists] && PlayerData[playerid][pEditingMode] == OBJECTTEXT)
                {
                    ObjectData[PlayerData[playerid][pEditTextObject]][oPos][0] = x;
                    ObjectData[PlayerData[playerid][pEditTextObject]][oPos][1] = y;
                    ObjectData[PlayerData[playerid][pEditTextObject]][oPos][2] = z;
                    ObjectData[PlayerData[playerid][pEditTextObject]][oPos][3] = rx;
                    ObjectData[PlayerData[playerid][pEditTextObject]][oPos][4] = ry;
                    ObjectData[PlayerData[playerid][pEditTextObject]][oPos][5] = rz;

                    ObjectText_Refresh(PlayerData[playerid][pEditTextObject]);
                    ObjectText_Save(PlayerData[playerid][pEditTextObject]);

                    SendServerMessage(playerid, "You have edited the position of object text ID: %d.", PlayerData[playerid][pEditTextObject]);

                    PlayerData[playerid][pEditTextObject] = -1;
                }
            }
            case FURNITURE: {
                if(PlayerData[playerid][pEditFurniture] != -1 && FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureExists] && PlayerData[playerid][pEditingMode] == FURNITURE)
                {
                    new id = House_Inside(playerid);
                    if(id != -1 && House_IsOwner(playerid, id, false))
                    {
                        FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][0] = x;
                        FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][1] = y;
                        FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][2] = z;
                        FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][0] = rx;
                        FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][1] = ry;
                        FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][2] = rz;

                        Furniture_Update(PlayerData[playerid][pEditFurniture]);
                        Furniture_Save(PlayerData[playerid][pEditFurniture]);

                        SendServerMessage(playerid, "You have edited the position of item \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

                        PlayerData[playerid][pEditFurniture] = -1;
                    }
                }
            }
        }
        ResetEditing(playerid);
    }
    if(response == EDIT_RESPONSE_CANCEL)
    {
        ResetEditing(playerid);
    }
    Log_Save(E_LOG_EDIT_OBJECT, sprintf("[%s] %s edit dynamic object with respond %d object %d.", ReturnDate(), ReturnName(playerid, 0), response, objectid));
    return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerEditAttachedObject(PID : %d Response : %d Index : %d ModelID : %d Bone : %d fOffsetX : %.2f fOffsetY : %.2f fOffsetZ : %.2f fRotX : %.2f fRotY : %.2f fRotZ : %.2f fScaleX : %.2f fScaleY : %.2f fScaleZ : %.2f)", playerid, response, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	#endif

    if(response)
    {
        new weaponid = EditingWeapon[playerid];
        if(weaponid)
        {
    
            new enum_index = weaponid - 22, weaponname[18], string[340];

            GetWeaponName(weaponid, weaponname, sizeof(weaponname));
            
            WeaponSettings[playerid][enum_index][Position][0] = fOffsetX;
            WeaponSettings[playerid][enum_index][Position][1] = fOffsetY;
            WeaponSettings[playerid][enum_index][Position][2] = fOffsetZ;
            WeaponSettings[playerid][enum_index][Position][3] = fRotX;
            WeaponSettings[playerid][enum_index][Position][4] = fRotY;
            WeaponSettings[playerid][enum_index][Position][5] = fRotZ;
            EditingWeapon[playerid] = 0;

            RemovePlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid));
            SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetWeaponModel(weaponid), WeaponSettings[playerid][enum_index][Bone], fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, 0, 0, 0);

            format(string, sizeof(string), "You have successfully adjusted the position of your %s.", weaponname);
            SendClientMessage(playerid, -1, string);
            WeaponAtt_Save(playerid, enum_index);
            return 1;        
        }
        if(PlayerData[playerid][pAksesoris] != -1)
        {
            new id = PlayerData[playerid][pAksesoris];
            AccData[playerid][id][accOffset][0] = fOffsetX;
            AccData[playerid][id][accOffset][1] = fOffsetY;
            AccData[playerid][id][accOffset][2] = fOffsetZ;
            AccData[playerid][id][accRot][0] = fRotX;
            AccData[playerid][id][accRot][1] = fRotY;
            AccData[playerid][id][accRot][2] = fRotZ;
            AccData[playerid][id][accScale][0] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
            AccData[playerid][id][accScale][1] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
            AccData[playerid][id][accScale][2] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);
            Aksesoris_Attach(playerid, id);
            PlayerData[playerid][pAksesoris] = -1;
            SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
            return 1;
        }
    }
    else
    {
        if(EditingWeapon[playerid])
        {
            WeaponAtt_Save(playerid, EditingWeapon[playerid] - 22);
            EditingWeapon[playerid] = 0;
        }

        if(PlayerData[playerid][pAksesoris] != -1)
        {
            Aksesoris_Attach(playerid, PlayerData[playerid][pAksesoris]);
            PlayerData[playerid][pAksesoris] = -1;
        }
    }
    return 1;
}

public CustomSelectionResponse(playerid, extraid, modelid, response)
{
	#if defined DEBUG_MODE
	    printf("[debug] CustomSelectionResponse(PID : %d EXTRAID : %d ModelID : %d Response : %d)", playerid, extraid, modelid, response);
	#endif

    if(response)
    {
        switch(extraid)
        {
            case MODEL_SELECTION_AKSESORIS:
            {
                new
                    id = Business_Inside(playerid),
                    price;

                if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 3)
                {
                    price = BusinessData[id][bizPrices][PlayerData[playerid][pClothesType]-1];
                    price = Economy_GetAmountAfterSalesTax(price);

                    if(GetMoney(playerid) < price)
                        return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

                    if(BusinessData[id][bizProducts] < 1)
                        return SendErrorMessage(playerid, "This business is out of stock.");

                    Aksesoris_Create(playerid, modelid, GetAksesorisNameByModel(modelid));

                    new str[64];
                    format(str, sizeof(str), "bought accessories \"%s\"", GetAksesorisNameByModel(modelid));

                    GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, str);
                    SendServerMessage(playerid, "You have purchased a \"%s\" for %s.", GetAksesorisNameByModel(modelid), FormatNumber(price));

                    BusinessData[id][bizProducts]--;
                    BusinessData[id][bizVault] += price;

                    Business_Save(id);
                }
            }
            case MODEL_SELECTION_VEHOBJECT:
            {
                new 
                    price = 500,
                    vehicleid,
                    vehicle_index
                ;

                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
                    return SendErrorMessage(playerid, "You need to be inside vehicle as driver");

                vehicleid = GetPlayerVehicleID(playerid);

                vehicle_index = Vehicle_ReturnID(vehicleid);

                if(vehicle_index == -1)
                    return 0;

                price = Economy_GetAmountAfterSalesTax(price);

                if(GetMoney(playerid) < price)
                    return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

                if(Vehicle_ObjectAdd(playerid, vehicle_index, modelid, OBJECT_TYPE_BODY)) SendServerMessage(playerid, "Sukses membeli vehicle object baru!.");
                else SendServerMessage(playerid, "Tidak ada slot untuk kendaraan ini lagi.");

                new str[96];
                format(str, sizeof(str), "bought vehicle attachment \"%s\"", GetVehObjectNameByModel(modelid));

                GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, str);
                SendServerMessage(playerid, "You have purchased a \"%s\" for %s.", GetVehObjectNameByModel(modelid), FormatNumber(price));
            }
        }
    }
    return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnModelSelectionResponse(PID : %d ExtraID : %d Index : %d ModelID : %d Response : %d)",playerid, extraid, index, modelid, response);
	#endif

    if((response) && (extraid == MODEL_SELECTION_SKIN))
    {
        for (new i = 0; i < 50; i ++) {
            SendClientMessage(playerid, -1, "");
        }

        SetPVarInt(playerid, "SelectDia", 0);

        ToggleGUIDisplay(playerid, true);
        // ToggleRelationDisplay(playerid, true);

        TextDrawShowForPlayer(playerid, gServerTextdraws[2]);

        DisablePlayerCheckpoint(playerid);

        PlayerData[playerid][pSkin] = modelid;
        PlayerData[playerid][pCreated] = 1;
        PlayerData[playerid][pTutorialTime] = 0;
        PlayerData[playerid][pScore] = 1;
        PlayerData[playerid][pMinutes] = 0;
        PlayerData[playerid][pHour] = 0;
        PlayerData[playerid][pMinute] = 0;
        PlayerData[playerid][pSecond] = 0;
        PlayerData[playerid][pLogged] = 1;
        PlayerData[playerid][pIDCardExpired] = (gettime()+2629746);
        SetHealth(playerid, 100);

        PlayerData[playerid][pRegisterDate] = gettime();
        mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `RegisterDate`='%d' WHERE `ID`='%d';", PlayerData[playerid][pRegisterDate], PlayerData[playerid][pID]));

        SetPlayerSkinEx(playerid, modelid);
        TogglePlayerSpectating(playerid, false);

        SetDefaultSpawn(playerid);
        SQL_SaveAccounts(playerid);

        SetPlayerScore(playerid,PlayerData[playerid][pScore]);

        TogglePlayerControllable(playerid, 0);

        PlayerData[playerid][pTutorialObjectGate] = CreateDynamicObject(19477,1642.66,-2326.82,15.9418,0.000,0.000,-90, playerid+1, 0, playerid,200.000,200.000);
        SetDynamicObjectMaterialText(PlayerData[playerid][pTutorialObjectGate], 0, sprintf("Selamat datang ...\n\n"COL_GREEN"%s", ReturnName(playerid, 0)), 130, "Ariel", 30, 1, -1, -16777216, 1);
        SetPlayerVirtualWorld(playerid, playerid+1);
        SetTimerEx("DestroyObjectGate", 5000, false, "d", playerid);
    }
    if((response) && (extraid == MODEL_SELECTION_FURNITURE))
    {
        new
            id = Business_Inside(playerid),
            type = PlayerData[playerid][pFurnitureType],
            price;

        if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 7)
        {
            price = BusinessData[id][bizPrices][type];

            if(GetMoney(playerid) < price)
                return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

            if(BusinessData[id][bizProducts] < 1)
                return SendErrorMessage(playerid, "This business is out of stock.");

            if(!House_GetCount(playerid))
                return SendErrorMessage(playerid, "You don't have house.");

            new
                str[128],
                count = 0;

            for(new i = 0; i < MAX_HOUSES; i++)
            {
                if(HouseData[i][houseExists] && House_IsOwner(playerid, i, false))
                {
                    // SendServerMessage(playerid, "ListedHouse %d: %d", count, i);

                    format(str, sizeof(str), "%sHouse Address: %s | Loc: %s\n", str, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));
                    ListedHouse[playerid][count++] = i;
                }

            }
            Dialog_Show(playerid, SelectHouse, DIALOG_STYLE_LIST, "Select House", str, "Select", "Close");
            SetPVarInt(playerid, "InsideBusiness", id);
            SetPVarInt(playerid, "FurnitureModel", modelid);
            SetPVarInt(playerid, "FurniturePrice", price);
        }
    }
    if((response) && (extraid == MODEL_SELECTION_SKINS))
    {
        Dialog_Show(playerid, FactionSkin, DIALOG_STYLE_LIST, "Edit Skin", "Add by Model ID\nAdd by Thumbnail\nClear Slot", "Select", "Cancel");
        PlayerData[playerid][pSelectedSlot] = index;
    }
    if((response) && (extraid == MODEL_SELECTION_ADD_SKIN))
    {
        FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = modelid;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

        SendServerMessage(playerid, "You have set the skin ID in slot %d to %d.", PlayerData[playerid][pSelectedSlot], modelid);
    }
    if((response) && (extraid == MODEL_SELECTION_FACTION_SKIN))
    {
        new factionid = PlayerData[playerid][pFaction];

        if(factionid == -1 || !IsNearFactionLocker(playerid))
            return 0;

        if(modelid == 19300)
            return SendErrorMessage(playerid, "There is no model in the selected slot.");

        if(modelid == PlayerData[playerid][pSkinFaction])
            return SendErrorMessage(playerid, "Can't select with the same skin ID.");

        PlayerData[playerid][pSkinFaction] = modelid;

        if(PlayerData[playerid][pOnDuty]) {
            SetPlayerSkinEx(playerid, modelid, 1);
        }
        SendServerMessage(playerid, "Faction skin changed to id "COL_GREEN"%d.", modelid);
    }
    return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerClickTextDraw(PID : %d)", playerid);
	#endif

    if(clickedid == Text:INVALID_TEXT_DRAW)
    {
        if(PlayerTemp[playerid][temp_selecttextdraw])
        {
            if(PlayerData[playerid][pClothesType] == 1)
            {
                SetPlayerSkinEx(playerid, PlayerTemp[playerid][temp_realskin]);
                TogglePlayerControllable(playerid, true);

                HideClothesTextdraw(playerid);
                SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
                PlayerData[playerid][pClothesType] = 0;
            }
            CloseMDC(playerid);
            // ClosePhone(playerid);
            CloseLaptop(playerid);
            CloseATM(playerid);
        }
    }
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerClickPlayerTextDraw(PID : %d)", playerid);
	#endif

    if(!Dialog_Opened(playerid))
    {
        if(playertextid == PlayerTextdraws[playerid][textdraw_character][3])
        {
            if(SelectCharTD[playerid] > 0)
            {
                SelectCharTD[playerid] -= 1;
                RefrestCharacterListTextDraw(playerid, SelectCharTD[playerid]);
            }
        }
        if(playertextid == PlayerTextdraws[playerid][textdraw_character][4])
        {
            if(SelectCharTD[playerid] < 3)
            {
                SelectCharTD[playerid] += 1;
                RefrestCharacterListTextDraw(playerid, SelectCharTD[playerid]);
            }
        }
        if(playertextid == PlayerTextdraws[playerid][textdraw_character][5])
        {
            for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(AccountData[i][pUsername][0] != EOS)
            {
                if(!strcmp(AccountData[i][pUsername], ReturnName(playerid)) && i != playerid)
                {
                    SendServerMessage(playerid, "Seseorang sedang login menggunakan UCP yang sama.");
                    KickEx(playerid);
                    return 1;
                }
            }

            for(new i = 0; i < 6; i++)
            {
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_character][i]);
            }
    
            if (CharacterList[playerid][SelectCharTD[playerid]][0] == EOS)
                return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", WHITE"Enter character name, maximum 24 characters\n\nExample: "GREEN"Ilham_Jaya, Clyne_Oconnor, Alexader_Kimberly.", "Create", "Back");

            PlayerData[playerid][pCharacter] = SelectCharTD[playerid];
            SetPlayerName(playerid, CharacterList[playerid][SelectCharTD[playerid]]);

            if(!Blacklist_Check(playerid, "Characters", ReturnName(playerid))) {
                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character`='%s' ORDER BY `ID` ASC LIMIT 1;", CharacterList[playerid][PlayerData[playerid][pCharacter]]), "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTERS);
            }
        }
        //ATM
        if(playertextid == ATMCloseButton[playerid])
        {
            CloseATM(playerid);
        }
        if(playertextid == WithdrawButton[playerid])
        {
            Dialog_Show(playerid, AtmWithdraw, DIALOG_STYLE_LIST, "ATM Account","$100\n$200\n$500\n$1,000\n$5,000\n$10,000","Take","Close");
        }
        if(playertextid == TransferButton[playerid])
        {
            if(PlayerData[playerid][pHour] < 2) return SendErrorMessage(playerid, "You must play 2 hours to transfer.");
            Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
        }
        if(playertextid == SalaryButton[playerid])
        {
            ShowPlayerSalary(playerid);
        }
        if(playertextid == PaycheckButton[playerid])
        {
            Paycheck(playerid);
        }

        //MDC
        if(playertextid == MDCCloseButton[playerid])
        {
            CloseMDC(playerid);
        }
        if(playertextid == LookupButton[playerid])
        {
            Dialog_Show(playerid, LookupList, DIALOG_STYLE_LIST, "MDC Lookup", "Lookup by Name\nLookup By Plate\nWeapon Serial Number", "Choose", "Back");
        }
        if(playertextid == WarrantsButton[playerid])
        {
            static
                string[512];

            string[0] = 0;

            foreach (new i : Player) if(PlayerData[i][pWarrants] > 1) {
                format(string, sizeof(string), "%s%s (%d warrants)\n", string, ReturnName(i, 0), PlayerData[i][pWarrants]);
            }
            if(!strlen(string))
                return SendErrorMessage(playerid, "There are no active warrants.");

            Dialog_Show(playerid, Warrants, DIALOG_STYLE_LIST, "Active Warrants", string, "Select", "Back");
        }
        if(playertextid == PlaceChargeButton[playerid])
        {
            Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Please enter the ID of the player:", "Submit", "Back");
        }
        if(playertextid == CallSignButton[playerid])
        {
            Dialog_Show(playerid, CallSignInput, DIALOG_STYLE_INPUT, "Call Sign", "Input your call sign:\nNote: input dengan off jika ingin menghapus!", "Place", "Close");
        }
        if(playertextid == PhoneTraceButton[playerid])
        {
            Dialog_Show(playerid, Trace, DIALOG_STYLE_LIST, "Trace", "Phone Number", "Select", "Cancel");
        }
        if(playertextid == CCTVButton[playerid])
        {
            Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "CCTV", "Coming Soon", "Close", "");
        }

        //Laptop Textdraw
        if(playertextid == LaptopCloseButton[playerid])
        {
            CloseLaptop(playerid);
        }
        if(playertextid == WarehouseButton[playerid])
        {
            GetWarehouseStatus(playerid);
        }
        if(playertextid == EBankButton[playerid])
        {
            Dialog_Show(playerid, eBank, DIALOG_STYLE_LIST, "E-Banking", "Bank Status\nCheck Salary\nTransfer\nBuy Phone Credits", "Choose", "Close");            
        }
        if(playertextid == AdsListButton[playerid])
        {
            ShowAds(playerid);
        }
        if(playertextid == SpeedTunerButton[playerid])
        {
            new vehicleid = Vehicle_Nearest(playerid, 5);
            static index;
            if((index = Vehicle_ReturnID(vehicleid)) != -1 && Vehicle_IsOwned(playerid, index))
            {
                if(VehicleData[index][vehTurbo] == 0)
                    return SendErrorMessage(playerid, "You don't have any turbo installed on this vehicle");

                if(VehicleData[index][vehTurbo] == 3)
                {
                    Dialog_Show(playerid, ChangeSpeed, DIALOG_STYLE_LIST, "V-Engine Tuning", "Disable Turbo\nChange to Level 1 Turbo\nChange to Level 2 Turbo\nChange to Level 3 Turbo", "Change", "Close");
                }

                if(VehicleData[index][vehTurbo] == 2)
                {
                    Dialog_Show(playerid, ChangeSpeed, DIALOG_STYLE_LIST, "V-Engine Tuning", "Disable Turbo\nChange to Level 1 Turbo\nChange to Level 2 Turbo", "Change", "Close");
                }

                if(VehicleData[index][vehTurbo] == 1)
                {
                    Dialog_Show(playerid, ChangeSpeed, DIALOG_STYLE_LIST, "V-Engine Tuning", "Disable Turbo\nChange to Level 1 Turbo", "Change", "Close");
                }
            } 
            else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Vehicle Tuner", "You're not near any vehicle!", "Close", "");
        }
        if(playertextid == YellowPageButton[playerid])
        {
            ShowBizJob(playerid);
        }
        if(playertextid == VehicleImportButton[playerid])
        {
            Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Yellow Page", "Coming Soon", "Close", "");            
        }
        if(playertextid == FactionImportButton[playerid])
        {
            // if(GetFactionType(playerid) != FACTION_GANG)
            //     return SendErrorMessage(playerid, "Kamu tidak bergabung dalam official family.");

            // Dialog_Show(playerid, Laptop, DIALOG_STYLE_LIST, "Laptop", "Informasi Pengiriman\nImport Materials\nImport Drugs\nImport Guns", "Select", "Close");            
        }

        // //Handphone
        // if(playertextid == AcceptCall[playerid])
        // {
        //     AnswerCall(playerid);
        // }

        // if(playertextid == PhoneOff[playerid] || playertextid == PhoneOnButton[playerid])
        // {
        //     if(!PlayerData[playerid][pPhoneOff])
        //     {
        //         if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) {
        //             CancelCall(playerid);
        //         }
        //         PlayerData[playerid][pPhoneOff] = 1;
        //         // OpenPhone(playerid);
        //         SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has powered off their cellphone.", ReturnName(playerid, 0));
        //     }
        //     else
        //     {
        //         if(PlayerData[playerid][pPhoneBattery] <= 0 && PlayerData[playerid][pPhoneOff])
        //             return SendClientMessage(playerid, COLOR_WHITE, "Your phone battery is 0%% , charge it first!"), ClosePhone(playerid);

        //         PlayerData[playerid][pPhoneOff] = 0;
        //         // OpenPhone(playerid);
        //         SendCustomMessage(playerid, "CELLPHONE", "There is total %d miss call on your phone.", GetMissCallCount(playerid));
        //         SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has powered on their cellphone.", ReturnName(playerid, 0));
        //     }
        // }

        // if(playertextid == DeniedCall[playerid])
        // {
        //     HangupCall(playerid);
            
        // }

        // if(playertextid == CarGPS[playerid])
        // {
        //     VehicleTrack(playerid);
        // }

        // if(playertextid == MidButton[playerid])
        // {
        //     // ClosePhone(playerid);
        //     CancelSelectTextDrawEx(playerid);
        // }

        // if(playertextid == Contacts[playerid])
        // {
        //     ShowContacts(playerid);
        // }

        // if(playertextid == Messages[playerid])
        // {
        //     if(!PlayerData[playerid][pPhone])
        //         return SendErrorMessage(playerid, "You dont have SIM card on your phone.");

        //     Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Please enter the number that you wish to send a text message to:", "Dial", "Back");
        // }

        // if(playertextid == ShareLocation[playerid])
        // {
        //     if(!PlayerData[playerid][pPhone])
        //         return SendErrorMessage(playerid, "You dont have SIM card on your phone.");

        //     Dialog_Show(playerid, ShareLoc, DIALOG_STYLE_INPUT, "Share Location", "Please enter the number that you wish to send a location to:", "Send", "Back");
        // }

        // if(playertextid == DialNumber[playerid])
        // {
        //     if(!PlayerData[playerid][pPhone])
        //         return SendErrorMessage(playerid, "You dont have SIM card on your phone.");

        //     Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Dial Number", "Please enter the number that you wish to dial below:", "Dial", "Back");
        // }

        // if(playertextid == MissedCall[playerid])
        // {
        //     ShowMissCallList(playerid);
        // }

        // if(playertextid == Credits[playerid])
        // {
        //     Dialog_Show(playerid, CreditsMenu, DIALOG_STYLE_LIST, "Phone Credits", "Phone Credits\nTransfer Credits\n", "Choose", "Close");
        // }

        if(playertextid == PlayerTextdraws[playerid][textdraw_registrasi][8])
        {
            Dialog_Show(playerid, Personal, DIALOG_STYLE_LIST, "Update",""WHITE"Jenis Kelamin\n{C0C0C0}Tanggal Lahir\n"WHITE"Asal Karakter\n{C0C0C0}Selesai!","Update","Kembali");
        }

        //Clothing
        if(playertextid == PlayerTextdraws[playerid][textdraw_clothes][2])
        {
            new
                bizid = Business_Inside(playerid),
                price;

            if(bizid == -1)
                return 0;

            if(BusinessData[bizid][bizType] != 3)
                return 0;

            if(BusinessData[bizid][bizProducts] < 1)
                return SendErrorMessage(playerid, "This business is out of stock.");

            price = BusinessData[bizid][bizPrices][PlayerData[playerid][pClothesType]-1];
            price = Economy_GetAmountAfterSalesTax(price);

            if(GetMoney(playerid) < price)
                return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

            GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought clothes");

            BusinessData[bizid][bizProducts]--;
            BusinessData[bizid][bizVault] += price;
            Business_Save(bizid);

            HideClothesTextdraw(playerid);
            TogglePlayerControllable(playerid, true);
            PlayerData[playerid][pClothesType] = 0;

            PlayerData[playerid][pSkin] = (PlayerData[playerid][pGender] == 1) ? g_aMaleSkins[PlayerTemp[playerid][temp_selectskin]] : g_aFemaleSkins[PlayerTemp[playerid][temp_selectskin]];
            SetPlayerSkinEx(playerid, (PlayerData[playerid][pGender] == 1) ? g_aMaleSkins[PlayerTemp[playerid][temp_selectskin]] : g_aFemaleSkins[PlayerTemp[playerid][temp_selectskin]]);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received some clothes.", ReturnName(playerid, 0), FormatNumber(price));
        }

        if(playertextid == PlayerTextdraws[playerid][textdraw_clothes][4]) //back
        {
            if(PlayerTemp[playerid][temp_selectskin] == 0)
            {
                PlayerPlaySoundEx(playerid, 1053);
                return 0;
            }
            else PlayerTemp[playerid][temp_selectskin] --;
            SetPlayerSkinEx(playerid, (PlayerData[playerid][pGender] == 1) ? g_aMaleSkins[PlayerTemp[playerid][temp_selectskin]] : g_aFemaleSkins[PlayerTemp[playerid][temp_selectskin]]);

            PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], sprintf("Skin:_%d/%d", PlayerTemp[playerid][temp_selectskin], ((PlayerData[playerid][pGender] == 1) ? sizeof(g_aMaleSkins) : sizeof(g_aFemaleSkins))));
        }
        if(playertextid == PlayerTextdraws[playerid][textdraw_clothes][3]) //next
        {
            if(PlayerTemp[playerid][temp_selectskin] == ((PlayerData[playerid][pGender] == 1) ? sizeof(g_aMaleSkins) - 1 : sizeof(g_aFemaleSkins) - 1))
            {
                PlayerPlaySoundEx(playerid, 1053);
                return 0;
            }
            else PlayerTemp[playerid][temp_selectskin] ++;
            SetPlayerSkinEx(playerid, (PlayerData[playerid][pGender] == 1) ? g_aMaleSkins[PlayerTemp[playerid][temp_selectskin]] : g_aFemaleSkins[PlayerTemp[playerid][temp_selectskin]]);

            PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], sprintf("Skin:_%d/%d", PlayerTemp[playerid][temp_selectskin], ((PlayerData[playerid][pGender] == 1) ? sizeof(g_aMaleSkins) : sizeof(g_aFemaleSkins))));
        }
        //End Clothing
    }
    return 1;
}

static ShowContacts(playerid)
{
    new
        string[32 * MAX_CONTACTS],
        count = 0;

    string = "Add Contact\n";

    for (new i = 0; i != MAX_CONTACTS; i ++) if(ContactData[playerid][i][contactExists]) {
        format(string, sizeof(string), "%s%s - #%d\n", string, ContactData[playerid][i][contactName], ContactData[playerid][i][contactNumber]);

        ListedContacts[playerid][count++] = i;
    }
    Dialog_Show(playerid, Contacts, DIALOG_STYLE_LIST, "My Contacts", string, "Select", "Back");
    return 1;
}

GetContactNameByNumber(playerid, number)
{
    new
        name[MAX_PLAYER_NAME];

    for (new i = 0; i != MAX_CONTACTS; i ++) if(ContactData[playerid][i][contactExists] && ContactData[playerid][i][contactNumber] == number) {
        format(name, 24, "%s", ContactData[playerid][i][contactName]);
        return name;
    }
    format(name, 24, "%d", number);
    return name;
}

static GetPlayerID(name[], underscore = 1)
{
    foreach (new i : Player) if(!strcmp(ReturnName(i, underscore), name, true)) {
        return i;
    }
    return INVALID_PLAYER_ID;
}

Function:OfflinePI(playerid, name[255])
{
    if(!cache_num_rows()) return SendErrorMessage(playerid, "Invalid target to track!."), cmd_mdc(playerid, "\1");

    new str[4096],
        id = cache_get_field_int(0, "ID"),
        Cache: ticket,
        Cache: vehicles,
        Cache: charges;

    new charname[255];
    cache_get_field_content(0, "Character", charname);

    strcat(str, sprintf("{AAC4E5}I. Personal information\n"WHITE"Personal ID: "YELLOW"SA%09d\n"WHITE"Name: "YELLOW"%s\n", id, SQL_ReturnEscaped(charname)));
    strcat(str, sprintf(""WHITE"Phone Number: "YELLOW"%d\n"WHITE"Job: "YELLOW"%s\n", cache_get_field_int(0, "Phone"), Job_GetName(cache_get_field_int(0, "Job"))));
    strcat(str, "\n{AAC4E5}II. Licenses"WHITE"\n");
    //---------------------------
    if(cache_get_field_int(0, "DrivingLicense"))  {
        if(cache_get_field_int(0, "DrivingLicenseExpired") != 0) strcat(str, sprintf("Driving: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:cache_get_field_int(0, "DrivingLicenseExpired"))));
        else strcat(str, "Driving: ["COL_RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Driving: ["COL_RED"Not Passed"WHITE"]\n");

    if(cache_get_field_int(0, "FirearmLicense"))  {
        if(cache_get_field_int(0, "FirearmLicenseExpired") != 0) strcat(str, sprintf("Firearm: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:cache_get_field_int(0, "FirearmLicenseExpired"))));
        else strcat(str, "Firearm: ["COL_RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Firearm: ["COL_RED"Not Passed"WHITE"]\n");

    if(cache_get_field_int(0, "BusinessLicense"))  {
        if(cache_get_field_int(0, "BusinessLicenseExpired") != 0) strcat(str, sprintf("Business: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:cache_get_field_int(0, "BusinessLicenseExpired"))));
        else strcat(str, "Business: ["COL_RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Business: ["COL_RED"Not Passed"WHITE"]\n");

    if(cache_get_field_int(0, "WorkshopLicense"))  {
        if(cache_get_field_int(0, "WorkshopLicenseExpired") != 0) strcat(str, sprintf("Workshop: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:cache_get_field_int(0, "BusinessLicenseExpired"))));
        else strcat(str, "Workshop: ["COL_RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Workshop: ["COL_RED"Not Passed"WHITE"]\n");

    if(cache_get_field_int(0, "LumberLicense"))  {
        if(cache_get_field_int(0, "LumberLicenseExpired") != 0) strcat(str, sprintf("Lumber: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:cache_get_field_int(0, "LumberLicenseExpired"))));
        else strcat(str, "Lumber: ["COL_RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Lumber: ["COL_RED"Not Passed"WHITE"]\n");

    // Check Active Charges
    strcat(str, "\n{AAC4E5}III. Active Charges\n"WHITE"");
    new chargename[255];
    cache_get_field_content(0, "Character", chargename);
    
    charges = mysql_query(g_iHandle, sprintf("SELECT * FROM `warrants` WHERE `Arrest` = '0' AND `Suspect` = '%s' ORDER BY `ID` DESC", SQL_ReturnEscaped(chargename)));

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i=0; i<cache_num_rows(); i++) {
        new reason[128],date[64], suspect[24], username[24];
        cache_get_field_content(i, "Suspect", suspect);
        cache_get_field_content(i, "Description", reason);
        cache_get_field_content(i, "Date", date);
        cache_get_field_content(i, "Username", username);

        strcat(str, sprintf(""WHITE"%d. {BDF38B}%s\n"WHITE"Issuer: "YELLOW"%s"WHITE" - (%s)\n", i+1, reason, username, date));
    }
    cache_delete(charges);
    //Crime Record
    strcat(str, "\n{AAC4E5}IV. Crime Record\n"WHITE"");
    charges = mysql_query(g_iHandle, sprintf("SELECT * FROM `warrants` WHERE `Arrest` = '1' AND `Suspect` = '%s' ORDER BY `ID` DESC", SQL_ReturnEscaped(chargename)));

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i=0; i<cache_num_rows(); i++) {
        new reason[128],date[64], suspect[24], username[24];
        cache_get_field_content(i, "Suspect", suspect);
        cache_get_field_content(i, "Description", reason);
        cache_get_field_content(i, "Date", date);
        cache_get_field_content(i, "Username", username);

        strcat(str, sprintf(""WHITE"%d. {BDF38B}%s\n"WHITE"Issuer: "YELLOW"%s"WHITE" - (%s) "RED"(Arrested)\n", i+1, reason, username, date));
    }
    cache_delete(charges);

    // Check Vehicle
    strcat(str, "\n{AAC4E5}V. Registered Vehicle"WHITE"\n");
    vehicles = mysql_query(g_iHandle, sprintf("SELECT `model`, `plate` FROM `server_vehicles` WHERE `extraid`='%d' AND `type`='1';", id));

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i = 0; i < cache_num_rows(); i++)
    {
        new plate[32],
            model = cache_get_field_int(i, "model");

        cache_get_field_content(i, "plate", plate);

        if(!strcmp(plate, "None", true))
        {
            continue;
        }
        else
        {
            strcat(str, sprintf(""WHITE"%d. "CYAN"%s - "YELLOW"P: %s"WHITE"\n", (i + 1), GetVehicleNameByModel(model), plate));
        }
    }
    cache_delete(vehicles);

    // Check Unpaid Ticket
    strcat(str, "\n{AAC4E5}VI. Unpaid Ticket"WHITE"\n");
    ticket = mysql_query(g_iHandle, sprintf("SELECT * FROM `tickets` WHERE `ID` = '%d' ORDER BY `ticketID` DESC", id));

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i=0; i<cache_num_rows(); i++) {
        new reason[32],
            date[36],
            issuer[24],
            fee = cache_get_field_int(i, "ticketFee");

        cache_get_field_content(i, "ticketReason", reason);
        cache_get_field_content(i, "ticketDate", date);
        cache_get_field_content(i, "ticketIssuer", issuer);

        strcat(str, sprintf(""WHITE"%d. {BDF38B}%s "WHITE"(%s - %s) Issuer: %s\n", i+1, reason, FormatNumber(fee), date, issuer));
    }
    cache_delete(ticket);

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Civilian Summary", str, "Close", "");
    return 1;
}

/*==============================================================================
    Command List
==============================================================================*/
CMD:checktruck(playerid, params[])
{
    new nearest_vehicle, index;
    if((nearest_vehicle = Vehicle_Nearest(playerid)) != -1)
    {
        if((index = Vehicle_ReturnID(nearest_vehicle)) != -1 && VehicleData[index][vehComponent] > 0)
        {
            SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"VEHICLE: "WHITE"Truck mengangkut "GREEN"%d "WHITE"Component box", VehicleData[index][vehComponent]);
        }
        else if((index = Vehicle_ReturnID(nearest_vehicle)) != -1 && VehicleData[index][vehWoods] > 0)
        {
            SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"VEHICLE: "WHITE"Truck mengangkut "GREEN"%d "WHITE"Stack of woods", VehicleData[index][vehWoods]);    
        }
    }
    return 1;
}
CMD:jobdelay(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
    return SendErrorMessage(playerid, "You aren't logged in!");

    new jobdelay[355];

    strcat(jobdelay, "Job\tDelay (minutes)\n");
    strcat(jobdelay, sprintf("Fishing\t%d\n", PlayerData[playerid][pDelayFishing]/60));
    strcat(jobdelay, sprintf("Sweeper Delay\t%d\n", PlayerData[playerid][pSweeperDelay]/60));
    strcat(jobdelay, sprintf("Bus Delay\t%d\n", PlayerData[playerid][pBusDelay]/60));
    strcat(jobdelay, sprintf("Trucker\t%d\n", PlayerData[playerid][pDelayTruck]/60));
    strcat(jobdelay, sprintf("Trashmaster Job\t%d\n", PlayerData[playerid][pTrashmasterDelay]/60));
    strcat(jobdelay, sprintf("Sell Tree\t%d\n", PlayerData[playerid][pLumberDelay]/60));
    strcat(jobdelay, sprintf("Money Trans\t%d\n", PlayerData[playerid][pMoneytransDelay]/60));
    strcat(jobdelay, sprintf("Boxville Deliver\t%d", PlayerData[playerid][pBoxvilleDelay]/60));

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Job Delay", jobdelay, "CLOSE", "", "");
    return 1;
}

CMD:foodcourt(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 180.8817,1458.1420,10.6136) || IsPlayerInRangeOfPoint(playerid, 3.0, 180.8817,1463.4524,10.6136) || IsPlayerInRangeOfPoint(playerid, 3.0, 180.8657,1469.2339,10.6136))
    {    
        Dialog_Show(playerid, FoodCourt, DIALOG_STYLE_LIST, "Food Court", "Bread (15 Stamps)\n"WHITE"Vegetables Soup (20 Stamps)\n"WHITE"Mineral Water (10 Stamps)", "Buy", "Close");
    }
    return 1;
}

CMD:buyseeds(playerid, params[])
{
    new
		is_at_location = Location_IsPlayerAt(playerid, LOCATION_SEEDS_SHOP)
	;

	if(is_at_location < 1) 
        return SendErrorMessage(playerid, "Kamu tidak berada di Seeds Shop!");

    Dialog_Show(playerid, BuySeeds, DIALOG_STYLE_LIST, "Buy Seeds", "Marijuana Seeds($10)\n"WHITE"Cocaine Seeds($10)\n"WHITE"Heroin Opium Seeds($10)", "Buy", "Close");
    return 1;
}

// CMD:buydrugs(playerid, params[])
// {
//     new output[128];

//     if(GetFactionType(playerid) != FACTION_GANG)
//         return SendErrorMessage(playerid, "Kamu tidak bergabung dalam official family.");

//     if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2152.5366,1232.2404,33.9297))
//         return SendErrorMessage(playerid, "Kamu tidak berada di Drug Factory!");

//     strcat(output, ""WHITE"Drugs\tPrice/grams\tMinimal Buy\n");
//     strcat(output, "Marijuana\t$50/grams\t25 grams\n");
//     strcat(output, "Heroin\t$60/grams\t25 grams\n");
//     strcat(output, "Cocaine\t$70/grams\t50 grams");

//     Dialog_Show(playerid, BuyDrugs, DIALOG_STYLE_TABLIST_HEADERS, "Buy Drugs", output, "Buy", "Close");
//     return 1;
// }
//Laptop Sign
ShowAds(playerid)
{
    new string[5000];
    for(new i=0; i < MAX_PLAYERS; i++)
    {
        if(strcmp(AdsHolder[i], "NULL", true))
        {
            format(string, sizeof(string), "%s%s %d\n", string, AdsHolder[i], PhoneHolder[i]);
        }
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Advertisement Holder", string, "Close", "");
    return 1;
}

CMD:laptop(playerid, params[])
{
    new id = -1;
    if((id = Item_Nearest(playerid)) != -1)
    {
        if(DroppedItems[id][droppedModel]  == 19893  && IsPlayerInRangeOfPoint(playerid, 2.0, DroppedItems[id][droppedPos][0], DroppedItems[id][droppedPos][1], DroppedItems[id][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[id][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[id][droppedWorld]) 
        {
            OpenLaptop(playerid);
        }
    }
    else return SendErrorMessage(playerid, "You're not near any laptop!");
    return 1;
}

CMD:levels(playerid, params[])
{
    new output[800], oldvalue, points;

    for(new i = 1; i <= 39; i++)
    {
        points = ((i + 1) * 4);
        strcat(output, sprintf("Level: %d\t%d jam\n", i + 1, points + oldvalue));

        oldvalue += points;
    }

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST, "Level Target", output, "Close", "", "");
    return 1;
}

CMD:pvars(playerid, params[])
{
    new varname[128], varcount = GetPVarsUpperIndex(playerid), sgstr[128];
    if(varcount == 0) return SendClientMessage(playerid, -1, "No PVars found on your playerid.");
    for(new i = 0; i < varcount; i++)
    {
        GetPVarNameAtIndex(playerid, i, varname, 128);
        switch(GetPVarType(playerid, varname))
        {
            case PLAYER_VARTYPE_NONE: format(sgstr, sizeof(sgstr), "pVar %i: {FF0000}UNUSED", i);
            case PLAYER_VARTYPE_INT: format(sgstr, sizeof(sgstr), "pVar %i: %s - %i", i, varname, GetPVarInt(playerid, varname));
            case PLAYER_VARTYPE_STRING:
            {
                new pvarstring[128];
                GetPVarString(playerid, varname, pvarstring, 128);
                format(sgstr, sizeof(sgstr), "pVar %i: %s - %s", i, varname, pvarstring);
            }
            case PLAYER_VARTYPE_FLOAT: format(sgstr, sizeof(sgstr), "pVar %i: %s - %f", i, varname, GetPVarFloat(playerid, varname));
        }
        SendClientMessageEx(playerid, -1, sgstr);
    }
    return true;
}

IsHaveSpace(text[])
{
	for (new i = 0, len = strlen(text); i < len; i ++)
	{
		if(text[i] == ' ') return 1;
	}
	return 0;
}

DCMD:register(user, channel, params[])
{

	new userId[21];
	new uname[33];
	DCC_GetUserId(user, userId);
	DCC_GetUserName(user, uname);

	if(channel != Whitelist)
		return 1;	

	if(isnull(params))
	    return DCC_SendChannelMessage(Whitelist,":x: Gunakan /register [username]");

	if(IsHaveSpace(params))
		return DCC_SendChannelMessage(Whitelist, ":x: Nama tidak boleh memiliki spasi!");
	
	if(strlen(params) < 3)
	{
		new str[72];
		format(str, sizeof(str), ":x: Nama tidak bisa kurang dari 3 karakter!");
		DCC_SendChannelMessage(Whitelist, str);
		return 1;
	}
    if(IsValidRoleplayName(params))
    {
        new str[82];
        format(str, sizeof(str), ":x: hanya bisa membuat UCP tanpa menggunakan symbol _");
		DCC_SendChannelMessage(Whitelist, str);
        return 1;
    }
	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `DiscordID` = '%e' LIMIT 1", userId);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
	new count = cache_num_rows();
	if(count > 0)
	{
		new str[256];
		format(str, sizeof(str), ":x: Discord %s sudah pernah membuat account sebelumnya!", uname);
		DCC_SendChannelMessage(Whitelist, str);
	}
	else
	{
    	DCC_CreatePrivateChannel(user, "SendActivationCode", "sss", params, userId, uname);
	}
    cache_delete(ex);
	return 1;
}

forward SendActivationCode(message[], userId[], owner[]);
public SendActivationCode(message[], userId[], owner[])
{
	new DCC_Channel:PM;
	PM = DCC_GetCreatedPrivateChannel();

    new DCC_User:target = DCC_FindUserById(userId);

	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 1", message);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
    new count = cache_num_rows();
	if(count > 0)
	{
		new str[256];
		format(str, sizeof(str), ":x: Nama UCP %s sudah terdaftar di server, silahkan gunakan nama lain", message);
		DCC_SendChannelMessage(Whitelist, str);
		return 1;
	}
	else
	{
		new verif[32];
        format(verif, sizeof(verif), "D-%d", RandomEx(1000, 9999));

		new zstr[256];
		format(zstr, sizeof(zstr), "Selamat akun %s berhasil didaftarkan.\nSilahkan login ke game menggunakan nama UCP %s untuk membuat password akun Anda serta memasukkan kode verifikasi dibawah ini:\n\n> %s\n\nTerimakasih telah mendaftar, semoga betah ð", message, message, verif);
		DCC_SendChannelMessage(PM, zstr);
        
		new str[256];
		format(str, sizeof(str), "Berhasil mendaftarkan akun UCP %s, silahkan cek direct message dan masukan saat kamu mendaftar", message);
		DCC_SendChannelMessage(Whitelist, str);

		new zquery[270];
		mysql_format(g_iHandle,zquery,sizeof(zquery),"INSERT INTO `accounts` (`Username`, `VerifyCode`, `DiscordID`) VALUES('%e', '%e', '%e')", message, verif, userId);
		mysql_tquery(g_iHandle,zquery);

        DCC_SetGuildMemberNickname(DCC_FindGuildById("773822999627169804"), target, message);
        DCC_AddGuildMemberRole(DCC_FindGuildById("773822999627169804"), target, DCC_FindRoleById("773825163774787585"));
        
		printf("[LOGS] Created account for Discord '%s' with Username '%s' and Code '%s'", owner, message, verif);
	}
    cache_delete(ex);
	return 1;
}

DCMD:resendcode(user, channel, params[])
{
	new userId[21];
	new uname[33];
	DCC_GetUserId(user, userId);
	DCC_GetUserName(user, uname);

	if(channel != Whitelist)
		return 1;	

	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `DiscordID` = '%s' LIMIT 1", userId);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
	new count = cache_num_rows();
	if(count)
	{
		new active, str[256], unamee[24];

		cache_get_value_name_int(0, "Active", active);
		cache_get_value_name(0, "Username", unamee);
		if(active == 1)
			return format(str, sizeof(str), ":x: In-Game account milik **%s** (%s) sudah aktif! kamu tidak memerlukan activation code lagi.", uname, unamee), DCC_SendChannelMessage(channel, str);

		DCC_CreatePrivateChannel(user, "ReSendActivationCode", "sss", unamee, userId, uname);
	}	
	else
	{
		DCC_SendChannelMessage(channel, sprintf(":x: Discord **%s** belum pernah mendaftarkan akun!", uname));		
	}
	cache_delete(ex);
	return 1;
}

DCMD:refundrole(user, channel, params[])
{
	new userId[21];
	new uname[33];
	DCC_GetUserId(user, userId);
	DCC_GetUserName(user, uname);

	if(channel != RefundRoles)
		return 1;	

	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `DiscordID` = '%s' LIMIT 1", userId);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
	new count = cache_num_rows();
	if(count)
	{
		new active, str[256], unamee[24];

		cache_get_value_name_int(0, "Active", active);
		cache_get_value_name(0, "Username", unamee);
        format(str, sizeof(str), "Hallo **%s** (%s) Refund Role Berhasil, Happy Roleplay.", uname, unamee), DCC_SendChannelMessage(channel, str);

		DCC_CreatePrivateChannel(user, "RefundRole", "sss", unamee, userId, uname);
	}	
	else
	{
		DCC_SendChannelMessage(channel, sprintf(":x: Discord **%s** belum pernah mendaftarkan akun!", uname));		
	}
	cache_delete(ex);
	return 1;
}


forward ReSendActivationCode(uname[], userId[], owner[]);
public ReSendActivationCode(uname[], userId[], owner[])
{
	new DCC_Channel:PM, code[32];
	PM = DCC_GetCreatedPrivateChannel();

	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 1", uname);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
    new count = cache_num_rows();
	if(count > 0)
	{
		cache_get_value_name(0, "VerifyCode", code, 32);

		new zstr[300];
		format(zstr, sizeof(zstr), "Selamat datang kembali %s \nSilahkan login ke game menggunakan nama UCP %s untuk membuat password akun Anda serta memasukkan kode verifikasi dibawah ini:\n\n> %s\n\nJangan berikan kode ini ke siapapun ð", uname, uname, code);
		DCC_SendChannelMessage(PM, zstr);

		new ystr[256];
		format(ystr, sizeof(ystr), ":white_check_mark: Kode untuk account **%s** berhasil dikirim ulang ke **direct message**-mu.", uname);
		DCC_SendChannelMessage(Whitelist, ystr);

        DCC_SetGuildMemberNickname(DCC_FindGuildById("773822999627169804"), DCC_FindUserById(userId), uname);
        DCC_AddGuildMemberRole(DCC_FindGuildById("773822999627169804"), DCC_FindUserById(userId), DCC_FindRoleById("773825163774787585"));
	}
    cache_delete(ex);
	return 1;
}

forward RefundRole(uname[], userId[], owner[]);
public RefundRole(uname[], userId[], owner[])
{
	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 1", uname);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
    new count = cache_num_rows();
	if(count > 0)
	{
        DCC_SetGuildMemberNickname(DCC_FindGuildById("773822999627169804"), DCC_FindUserById(userId), uname);
        DCC_AddGuildMemberRole(DCC_FindGuildById("773822999627169804"), DCC_FindUserById(userId), DCC_FindRoleById("773825163774787585"));
	}
    cache_delete(ex);
	return 1;
}

CMD:lookup(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/lookup [playerid]");

    if(!IsPlayerConnected(userid))
        return SendErrorMessage(playerid, "Invalid player id.");

    new
        city[24],
        country[24],
        region[24],
        isp[24];

    GetPlayerCountry(userid, country);
    GetPlayerCity(userid, city);
    GetPlayerRegion(userid, region);
    GetPlayerISP(userid, isp);

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Lookup", ""WHITE"Lookup data from "YELLOW"%s\n\n"WHITE"Country: {C0C0C0}%s\n"WHITE"City: {C0C0C0}%s\n"WHITE"Region: {C0C0C0}%s\n"WHITE"ISP: {C0C0C0}%s", "Close", "", ReturnName(userid, 0), country, city, region, isp);
    return 1;
}

CMD:bansrecord(playerid, params[]) {
    mysql_tquery(g_iHandle, "SELECT BannedBy, COUNT(BannedBy) as jumlah FROM blacklist GROUP BY BannedBy ORDER BY jumlah DESC LIMIT 10", "Blacklist_Record", "d", playerid);
    return 1;
}

CMD:fish(playerid, params[])
{
    if(IsPlayerInWater(playerid))
        return SendErrorMessage(playerid, "Tidak dapat memancing sambil berenang.");

    if(PlayerData[playerid][pDelayFishing] && GetPlayerVIPLevel(playerid) < 3)
        return SendErrorMessage(playerid, "Tunggu %d menit untuk dapat memancing ikan kembali.", (PlayerData[playerid][pDelayFishing]/60));

    if(PlayerData[playerid][pFishing])
        return SendErrorMessage(playerid, "Anda sedang memancing.");

    if(PlayerData[playerid][pInjured]) 
        return SendErrorMessage(playerid, "Tidak bisa memancing saat anda injured.");

    if(PlayerData[playerid][pHunger] <= 20)
        return SendErrorMessage(playerid, "Anda terlalu lelah untuk memancing lagi.");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Tidak bisa memancing saat mengemudi.");

    if(!Inventory_HasItem(playerid, "Fish Rod"))
        return SendErrorMessage(playerid, "Anda tidak memiliki pancingan.");

    if(!Inventory_HasItem(playerid, "Bait"))
        return SendErrorMessage(playerid, "Anda tidak memiliki umpan.");

    for(new i = 0; i < FISH_ZONE; i++) if(IsPlayerInDynamicArea(playerid, fishzone[i])) 
    {
        // if(!strcmp(zones_text[i], "Small", true)) zone = 1;
        // else if(!strcmp(zones_text[i], "Medium", true)) zone = 2;
        // else zone = 3;

        PlayerData[playerid][pFishing] = 1;

        SetCameraBehindPlayer(playerid);
        SetPlayerAttachedObject(playerid, 4, 18632, 6, 0.00000, 0.00000, 0.00000, 0.00000, 180.00000, 90.00000, 1, 1, 1);
        ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,1,0);

        Inventory_Remove(playerid, "Bait");

        SendServerMessage(playerid, "Anda mulai memancing, tunggu hingga satu menit untuk mendapatkan ikan! "YELLOW"(/cancelfish untuk menggagalkan)");

        stop PlayerData[playerid][pFishingTime];

        new time, level = GetFishingLevel(playerid);

        switch(level)
        {
            case 1: time = 120000; 
            case 2: time = 90000; 
            case 3: time = 60000; 
            default: time = 30000; 
        }
        PlayerData[playerid][pFishingTime] = defer getFish[time](playerid);
        return 1;
    }
    SendErrorMessage(playerid, "Tidak bisa memancing di sini.");
    return 1;
}

CMD:cancelfish(playerid, params[])
{
    if(!PlayerData[playerid][pFishing]) return SendErrorMessage(playerid, "Anda sedang tidak memancing.");

    if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
        RemovePlayerAttachedObject(playerid, 4);

    PlayerData[playerid][pFishing] = 0;
    FishClicked[playerid] = 0;
    BaitEaten[playerid] = false;

    StopFishing(playerid);
    ClearAnimations(playerid);


    stop PlayerData[playerid][pFishingTime];
    SendServerMessage(playerid, "Anda telah berhenti melakukan pemancingan.");
    return 1;
}

CMD:myfish(playerid, params[])
{
    new
        str[4098];

    new maximum_fish, level = GetFishingLevel(playerid);
    
    switch(level)
    {
        case 1: maximum_fish = 10;
        case 2: maximum_fish = 15;
        case 3: maximum_fish = 20;
        default: maximum_fish = 25;
    }

    format(str, sizeof(str), "Fish Name\tWeight\n");
    for(new i = 0; i < maximum_fish; i++) {
        if(FishWeight[playerid][i] > 0.0)
            format(str, sizeof(str), "%s%s\t%.3f\n", str, FishName[playerid][i], FishWeight[playerid][i]);
        else
            format(str, sizeof(str), "%sEmpty\t \n", str);
    }
    Dialog_Show(playerid, ShowFish, DIALOG_STYLE_TABLIST_HEADERS, "Fish Inventory", str, "Release", "Close");
    return 1;
}

CMD:buyrod(playerid, params[])
{
    static
        confirm[8]
    ;

    new
        rod_price = 250,
        amount = Economy_GetAmountAfterSalesTax(rod_price)
    ;
    
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1359.2423,1340.3364,10.8862))
        return SendErrorMessage(playerid, "You're not in fish store.");

    if(Inventory_HasItem(playerid, "Fish Rod"))
        return SendErrorMessage(playerid, "Anda sudah memiliki pancingan.");

    if(GetMoney(playerid) < amount)
        return SendClientErrorMessage(playerid, "Anda tidak memiliki uang %s.", FormatNumber(amount));

    if(sscanf(params, "s[8]", confirm))
        return SendClientSyntaxMessage(playerid, "/buyrod ['confirm'] (harga pancingan yaitu: "GREEN"%s"GREY_80", '/buyrod confirm' untuk setuju)", FormatNumber(amount));

    if(!strcmp(confirm, "confirm"))
    {
        if(Inventory_Add(playerid, "Fish Rod", 18632, 1) != -1)
        {
            GiveMoney(playerid, -amount, ECONOMY_ADD_SUPPLY, "bought fish rod");

            SendClientServerMessage(playerid, "Anda telah membeli pancingan dengan harga "COL_GREEN"%s dollar.", FormatNumber(amount));
            return 1;
        }
    }

    SendClientSyntaxMessage(playerid, "Harga untuk pancingan yaitu: "GREEN"%s"GREY_80", "WHITE"/buyrod confirm "GREY_80"untuk setuju.)", FormatNumber(amount));
    return 1;
}
CMD:training(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 756.4702,5.8568,1000.6992))
        return SendErrorMessage(playerid, "You're not at training center.");

    Dialog_Show(playerid, fightStyle, DIALOG_STYLE_LIST, "FIGHTING STYLE", "Normal punch Style $250\nBoxing Style $350\nKungfu Style $450\nKneehead Style $650\nPunch Kick Style $850", "Train", "Close");
    return 1;
}
CMD:buybait(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1359.2423,1340.3364,10.8862))
        return SendErrorMessage(playerid, "You're not in fish store.");

    if(Inventory_Count(playerid, "Bait") > 100)
        return SendErrorMessage(playerid, "Anda tidak bisa menampung umpan melebihi 100.");

    Dialog_Show(playerid, BuyBait, DIALOG_STYLE_INPUT, "Buy Bait", WHITE"Berapa banyak umpan yang akan anda beli?\nAnda akan mendapatkan "YELLOW"dua umpan/"GREEN"$5.\n"WHITE"Masukkan jumlah uang untuk membeli:", "Buy", "Close");
    return 1;
}
// CMD:sellmeat(playerid, params[])
// {
//     if(!IsPlayerInRangeOfPoint(playerid, 3.0, -384.0056,-1438.9092,26.3203))
//         return SendErrorMessage(playerid, "You're not at meat drop off.");

//     new    
//         string[1024],
//         level = GetHuntingLevel(playerid),
//         bonus
//     ;
//     switch(level)
//     {
//         case 1: bonus = 25;
//         case 2: bonus = 50;
//         case 3: bonus = 100;
//         default: bonus = 125;
//     }
//     strcat(string, "Meat Name\tSell Price\tBonus\n");
//     strcat(string, sprintf("Cow Meat\t%s\t%s\n", FormatNumber(ServerData[cow_price]), FormatNumber(bonus)));
//     strcat(string, sprintf("Deer Meat\t%s\t%s\n", FormatNumber(ServerData[deer_price]), FormatNumber(bonus)));
    
//     Dialog_Show(playerid, SellMeat, DIALOG_STYLE_TABLIST_HEADERS, "Meat Factory", string, "Sell", "Close");
    
//     return 1;
// }
// Dialog:SellMeat(playerid, response, listitem, inputtext[])
// {
//     if(response)
//     {
//         switch(listitem)
//         {
//             case 0:
//             {
//                 SetPVarInt(playerid, "MeatType", listitem);
//                 Dialog_Show(playerid, SellMeatConfirm, DIALOG_STYLE_INPUT, "Meat Factory", "Berapa jumlah yang ingin kamu jual ? ", "Sell", "Close");
                
//             }
//             case 1:
//             {
//                 SetPVarInt(playerid, "MeatType", listitem);
//                 Dialog_Show(playerid, SellMeatConfirm, DIALOG_STYLE_INPUT, "Meat Factory", "Berapa jumlah yang ingin kamu jual ? ", "Sell", "Close");  
//             }
//         }
//     }
//     return 1;
// }
// Dialog:SellMeatConfirm(playerid, response, listitem, inputtext[])
// {
//     if(response)
//     {
//         new 
//             meattype = GetPVarInt(playerid, "MeatType"),
//             level = GetHuntingLevel(playerid),
//             bonus
//         ;
//         switch(level)
//         {
//             case 1: bonus = 25;
//             case 2: bonus = 50;
//             case 3: bonus = 100;
//             default: bonus = 125;
//         }
//         switch(meattype)
//         {
//             case 0:
//             {
//                 new price;
//                 price = ServerData[cow_price]+bonus;
//                 if(strval(inputtext) < 0 || strval(inputtext) > 100000) return Dialog_Show(playerid, SellMeatConfirm, DIALOG_STYLE_INPUT, "Meat Factory", "Berapa jumlah yang ingin kamu jual ? ", "Sell", "Close");
//                 if(Inventory_Count(playerid, "Cow Meat") < strval(inputtext))
//                     return SendErrorMessage(playerid, "Anda tidak mempunyai cow meat sebanyak itu !"); 

//                 new amount = strval(inputtext);

//                 Inventory_Remove(playerid, "Cow Meat", amount);
//                 SendClientMessageEx(playerid, COLOR_WHITE, "Kamu telah menjual Cow Meat sebanyak %d dengan harga total "GREEN"%s", strval(inputtext), FormatNumber(price*strval(inputtext)));
//                 new
//                     total_price = price * amount,
//                     tax = Economy_GetSalesTax(total_price)
//                 ;

//                 GiveMoney(playerid, (total_price - tax), ECONOMY_TAKE_SUPPLY, "sell cow meat");
//             }
//             case 1:
//             {
//                 new price;
//                 price = ServerData[deer_price]+bonus;
//                 if(strval(inputtext) < 0 || strval(inputtext) > 100000) return Dialog_Show(playerid, SellMeatConfirm, DIALOG_STYLE_INPUT, "Meat Factory", "Berapa jumlah yang ingin kamu jual ? ", "Sell", "Close");
//                 if(Inventory_Count(playerid, "Deer Meat") < strval(inputtext))
//                     return SendErrorMessage(playerid, "Anda tidak mempunyai deer meat sebanyak itu !"); 

//                 new
//                     amount = strval(inputtext),
//                     before_tax_amount = price * amount,
//                     tax = Economy_GetSalesTax(before_tax_amount),
//                     after_tax_amount = (before_tax_amount - tax)
//                 ;

//                 Inventory_Remove(playerid, "Deer Meat", amount);
//                 SendClientMessageEx(playerid, COLOR_WHITE, "Kamu telah menjual deer meat sebanyak %d dengan harga total "GREEN"%s", strval(inputtext), FormatNumber(after_tax_amount));

//                 GiveMoney(playerid, after_tax_amount, ECONOMY_TAKE_SUPPLY, "sell deer meat");
//             }
//         }
//     }
//     return 1;
// }
CMD:sellfish(playerid, params[])
{
    new Float:count = 0.0;

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1357.1354,1340.3186,10.8862))
        return SendErrorMessage(playerid, "You're not in fish store.");

    for(new i = 0; i < MAX_FISH; i++) if(FishWeight[playerid][i] > 0.0) {
        count += FishWeight[playerid][i];
    }

    if(count > 0.0) {
        new total = floatround(count * ServerData[fish_Price]);
        Dialog_Show(playerid, SellFish, DIALOG_STYLE_MSGBOX, "Sell Fish", ""WHITE"Apakah anda akan menjual semua ikan yang anda miliki?\nHarga Ikan: "YELLOW"%.1f/lbs\n"WHITE"Berat total ikan: "YELLOW"%.3f\n"WHITE"Harga Jual: "YELLOW"%s\n\n"COL_LIGHTRED"PENTING: "WHITE"Jika anda menjual ikan, maka setelah ini anda harus menunggu 20 menit untuk dapat memancing ikan kembali!", "Jual", "Keluar", ServerData[fish_Price], count, FormatNumber(total));
        SetPVarInt(playerid, "TotalPrice", total);
    }
    else SendErrorMessage(playerid, "Anda tidak memiliki ikan untuk di jual.");

    return 1;
}

CMD:as(playerid, params[])
    return cmd_acceptstuck(playerid, params);

CMD:setmyskill(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 1000);
    return 1;
}


CMD:acceptstuck(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static userid;
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/acceptstuck [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "This player not available right now.");
    if((gettime() - PlayerData[userid][pStuck]) > 60) return SendErrorMessage(playerid, "This player is'nt request anything.");

    AdminActivity_Write(
		playerid,
		userid,
		ADMIN_ACTIVITY_ACCEPT_REPORT,
		sprintf(
			"Admin %s (playerid=%d, IP=%s) accept stuck request from %s (playerid=%d, IP=%s)."
			,ReturnAdminName(playerid)
			,playerid
			,ReturnIP(playerid)
			,ReturnName(userid, 0)
			,userid
			,ReturnIP(userid)
		)
	);

    PlayerData[userid][pStuck] = (gettime()-60);
    SendCustomMessage(userid, "STUCK REQUEST","Administrator/Helper "COL_RED"%s "WHITE"accept your stuck request.", ReturnAdminName(playerid));
    SendTesterMessage(X11_TOMATO_1, "STUCK REQUEST: %s accept %s stuck request.", ReturnAdminName(playerid), ReturnName(userid, 0));
    AccountData[playerid][pAdminAcceptStuck]++;
    SQL_SaveAccounts(playerid);
    return 1;
}

CMD:deniedstuck(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static userid;
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/deniedstuck [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "This player not available right now.");
    if((gettime() - PlayerData[userid][pStuck]) > 60) return SendErrorMessage(playerid, "This player is'nt request anything.");

    AdminActivity_Write(
		playerid,
		userid,
		ADMIN_ACTIVITY_ACCEPT_REPORT,
		sprintf(
			"Admin %s (playerid=%d, IP=%s) deny stuck request from %s (playerid=%d, IP=%s)."
			,ReturnAdminName(playerid)
			,playerid
			,ReturnIP(playerid)
			,ReturnName(userid, 0)
			,userid
			,ReturnIP(userid)
		)
	);

    PlayerData[userid][pStuck] = (gettime()-60);
    SendCustomMessage(userid, "STUCK REQUEST","Administrator/Helper "COL_RED"%s "WHITE"denied your stuck request.", ReturnAdminName(playerid));
    SendTesterMessage(X11_TOMATO_1, "STUCK REQUEST: %s denied %s stuck request.", ReturnAdminName(playerid), ReturnName(userid, 0));
    AccountData[playerid][pAdminDeniedStuck]++;
    SQL_SaveAccounts(playerid);
    return 1;
}

CMD:stuck(playerid, params[])
{
    if((gettime() - PlayerData[playerid][pStuck]) < 60) return SendErrorMessage(playerid, "Tunggu 1 menit untuk mengulangi pelaporan.");
    Dialog_Show(playerid, Stuck, DIALOG_STYLE_LIST, "Stuck", "Wrong virtual world id.\nWrong interior id.\nStuck inside house/business/etc\nStuck at blueberry\nDeath without reason\nFreeze without reason", "Report", "Close");
    return 1;
}

CMD:countdown(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static interval;

    if(GetGVarInt("Countdown"))
    {
        TextDrawHideForAll(gServerTextdraws[1]);
        SetGVarInt("Countdown", 0);
        return 1;
    }

    if(sscanf(params, "d", interval)) return SendSyntaxMessage(playerid, "/countdown [interval]");

    TextDrawShowForAll(gServerTextdraws[1]);
    SetGVarInt("Countdown", 1);
    SetGVarInt("CDInterval", interval);
    SendTesterMessage(X11_TOMATO_1, "TeamWarn: %s start coutdown with %d second.", ReturnName2(playerid, 0), interval);
    return 1;
}

// CMD:changelog(playerid, params[])
// {
//     Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "NEW UPDATES", ""WHITE"Available update on {9ACD32}%s"WHITE"\n\n \
//         "GREEN"Added:"WHITE"\n\
//         |- [Job] Job Skill '/skills'.\n\n\
//         "CYAN"Updates:"WHITE"\n\
//         |- [Inventory] Increase cow meat and deer meat space from 10 to 15\n\
//         |- [Inventory] Increase Wheat Plant space from 10 to 30\n\n\
//         "LIGHTBLUE"Bug fixes:"WHITE"\n\
//         |- \n\n\
//         "TOMATO"Delete:"WHITE"\n\
//         |- \n\n\
//         "WHITE"* Untuk informasi lebih lanjut silahkan kunjungi forum kami atau discord kami di %s - %s.","Close","", SERVER_REVISION,SERVER_URL,SERVER_DISCORD
//     );

//     //Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Server Changelog", WHITE"Current version: "GREEN"%s\n\n"WHITE"* Perubahan pada server dapat dilihat pada: "LIGHTBLUE"https://ANANTA-ROLEPLAY.org/viewtopic.php?p=17809#p17809", "Close", "", SERVER_REVISION);
//     SendServerMessage(playerid, "Server Changelog"YELLOW" https://ANANTA-ROLEPLAY.org/viewtopic.php?p=17809#p17809");
//     return 1;
// }

CMD:credits(playerid, params[])
{
    new credits[1000];

    strcat(credits, WHITE"SAMP Development Team\n\n");
    strcat(credits, CYAN"Server Support\n");
    strcat(credits, WHITE"Y_Less, Incognito, Emmet_, Southclaws, Vince\n");
    strcat(credits, "Slice, maddinat0r, Zeex, Nexus and lainnya\n\n");
    strcat(credits, CYAN"Diversity Management Team\n");
    strcat(credits, WHITE"ilhamjaya08\n");
    strcat(credits, "Diversity Team yang telah membantu dalam mengembangkan Server\n\n");
    strcat(credits, CYAN"Script Development\n");
    strcat(credits, WHITE"ilhamjaya08 (Developer)\n\n");
    strcat(credits, WHITE"Leynardo Yosef/Revelts (Basic Gamemode Creator)\n");
    strcat(credits, "*  Player yang senantiasa memberikan waktu luangnya bermain di Diversity World!\n\n");
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "CREDITS", credits, "Close", "");
    return 1;
}

CMD:vmodels(playerid, params[])
{
    new string[3500];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
        format(string,sizeof(string), "%s%d - %s\n", string, (i+400), g_arrVehicleNames[i]);

    Dialog_Show(playerid, VehicleModels, DIALOG_STYLE_LIST, "Vehicle Models", string, "Close", "");
    return 1;
}

CMD:createacc(playerid, params[])
{
    new player,
        model,
        type[24];

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params,"uds[24]", player, model, type))
        return SendSyntaxMessage(playerid, "/createacc [playerid] [model] [object name]");

    if(Aksesoris_GetCount(player) > MAX_ACC)
        return SendErrorMessage(playerid, "There are no slot for this player.");

    Aksesoris_Create(player, model, type);
    SendServerMessage(playerid, "You have been create new Accessory for id: [%d] model: [%d] type: [%s]", player, model, type);
    return 1;
}
CMD:deattachall(playerid, params[])
{
    for(new index = 0; index != MAX_ACC; index++)
    {
        if(AccData[playerid][index][accExists] && AccData[playerid][index][accShow])
        {
            if(IsPlayerAttachedObjectSlotUsed(playerid, index))
            {
                RemovePlayerAttachedObject(playerid, index);
                AccData[playerid][index][accShow] = 0;
                Aksesoris_Save(playerid, index);
            }
        }
    }
    SendServerMessage(playerid, "You de-attach all your accesories!");
    return 1;
}
CMD:attachall(playerid, params[])
{
    for(new index = 0; index != MAX_ACC; index++)
    {
        if(AccData[playerid][index][accExists])
        {
            if(IsPlayerAttachedObjectSlotUsed(playerid, index))
            {
                RemovePlayerAttachedObject(playerid, index);
                Aksesoris_Attach(playerid, index);
            }
            else
            {
                Aksesoris_Attach(playerid, index);
            }
        }
    }
    SendServerMessage(playerid, "You attach all your accesories!");
    return 1;
}
CMD:acc(playerid, params[])
{
    new 
        string[255],
        count = 0
    ;
    
    format(string,sizeof(string),"Index\tName\tBone\n");
    for (new id = 0; id != MAX_ACC; id++)
    if(AccData[playerid][id][accExists])
    {
        format(string,sizeof(string),"%s#%d\t%s\t%s\n", string, id, AccData[playerid][id][accName], accBones[AccData[playerid][id][accBone]-1]);
        if (count < 4)
        {
            ListedAcc[playerid][count] = id;
            count = count + 1;
        }
    }
    if(!count) SendErrorMessage(playerid, "You don't have some accesories.");
    else Dialog_Show(playerid, Aksesoris, DIALOG_STYLE_TABLIST_HEADERS, "Editing Accesories", string, "Select","Exit");

    return 1;
}

CMD:eject(playerid, params[])
{
    static
        userid,
        Float:x,
        Float:y,
        Float:z;

    if(sscanf(params,"u", userid))
        return SendSyntaxMessage(playerid, "/eject [name/playerid]");

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "You need to be driver to use this command.");

    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(userid))
        return SendErrorMessage(playerid, "That player not in this car");

    if(!IsPlayerInAnyVehicle(userid))
        return SendErrorMessage(playerid, "That player is not in any vehicle");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't eject yourself");

    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(userid,x,y,z+1);
    TogglePlayerControllable(userid, 1);
    SendServerMessage(userid, "You have been thrown out the car by %s", ReturnName(playerid, 0));
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has ejected %s from the vehicle.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:resetcursor(playerid, params[])
{
    if(!GetPVarInt(playerid,"SelectDia"))
        return SendErrorMessage(playerid, "You can't use this command.");

    return SelectTextDraw(playerid, 0xC0C0C0FF);
}

CMD:x(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:npos;
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "f", npos)) return SendClientMessage(playerid, X11_TOMATO_1, "USAGE: /x [Cordinate]");
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x+npos, y, z);
    return 1;
}

CMD:y(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:npos;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "f", npos)) return SendClientMessage(playerid, X11_TOMATO_1, "USAGE: /y [Cordinate]");
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y+npos, z);
    return 1;
}

CMD:z(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:npos;
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "f", npos)) return SendClientMessage(playerid, X11_TOMATO_1, "USAGE: /z [Cordinate]");
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y, z+npos);
    return 1;
}

CMD:b(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1)
        return 1;

    if(IsPlayerInDynamicArea(playerid, NSArea) && GetGVarInt("ToggleNS", GLOBAL_VARTYPE_INT) && !AccountData[playerid][pAdmin])
        return SendErrorMessage(playerid, "Perintah /b dinonaktifkan sementara pada newbie school");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/b [local OOC]");

    if(strlen(params) > 64)
    {
        if(AccountData[playerid][pAdminDuty] == 1)
        {
            SendNearbyMessage(playerid, 15.0, 0xFF0000FF, "%s:"WHITE" (( %.64s ..", ReturnName(playerid, 0, 1), params);
            SendNearbyMessage(playerid, 15.0, X11_WHITE, ".. %s "WHITE"))", params[64]);
            return 1;
        }
        else
        {
            ProxDetector(playerid, 15.0, X11_WHITE, sprintf("%s: (( %.64s ..", ReturnName(playerid, 0, 1), params));
            ProxDetector(playerid, 15.0, X11_WHITE, sprintf(".. %s ))", params[64]));
            return 1;
        }
    }
    else
    {
        if(AccountData[playerid][pAdminDuty] == 1)
            return SendNearbyMessage(playerid, 15.0, 0xFF0000FF, "%s:"WHITE" (( %s ))", ReturnName(playerid, 0, 1), params);

        ProxDetector(playerid, 13.0, X11_WHITE, sprintf("%s: (( %s ))", ReturnName(playerid, 0, 1), params));
    }
    return 1;
}

CMD:try(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/try [action]");

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s %.64s ..", ReturnName(playerid, 0, 1), params);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, ".. %s, %s", params[64], (random(2) == 0) ? ("and success") : ("but fail"));
    }
    else {
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s %s, %s", ReturnName(playerid, 0, 1), params, (random(2) == 0) ? ("and success") : ("but fail"));
    }
    return 1;
}

/*CMD:faketext(playerid, params[])
{
    CheckAdmin(playerid, 5);
    if(isnull(params)) return SendSyntaxMessage(playerid, "/faketext [text]");
    SendClientMessageToAllEx(X11_WHITE, "%s", ColouredText(params));
    return 1;
}

CMD:faketextplayer(playerid, params[])
{
    CheckAdmin(playerid, 7);

    static
        userid,
        text[128];

    if(sscanf(params, "us[128]", userid, text)) return SendSyntaxMessage(playerid, "/faketextplayer [playerid/PartOfName] [text]");
    SendClientMessageEx(userid, X11_WHITE, "%s", ColouredText(text));
    return 1;
}*/

CMD:ado(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1)
        return 0;

    new Float:x, Float:y, Float:z;

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/ado [text] 'off' to remove");

    if(strlen(params) > 128)
        return SendErrorMessage(playerid, "Max text can only maximmum 128 characters.");

    if(!strcmp(params, "off", true))
    {
        if(!PlayerData[playerid][pAdoActive])
            return SendErrorMessage(playerid, "You're not make ado actions.");

        if(IsValidDynamic3DTextLabel(PlayerData[playerid][pAdoTag]))
            DestroyDynamic3DTextLabel(PlayerData[playerid][pAdoTag]);

        PlayerData[playerid][pAdoTag] = Text3D:INVALID_STREAMER_ID;

        SendServerMessage(playerid, "You're removed your ado text.");
        PlayerData[playerid][pAdoActive] = false;
        return 1;
    }

    FixText(params);
    GetPlayerPos(playerid, x, y, z);

    SendClientMessageEx(playerid, X11_PLUM, "* [ADO]: %s", params);
    PlayerData[playerid][pAdoActive] = true;

    if(IsValidDynamic3DTextLabel(PlayerData[playerid][pAdoTag])) UpdateDynamic3DTextLabelText(PlayerData[playerid][pAdoTag], X11_PLUM, sprintf("%s\n * (( %s )) *", params, ReturnName(playerid, 0)));
    else PlayerData[playerid][pAdoTag] = CreateDynamic3DTextLabel(sprintf("%s\n * (( %s )) *", params, ReturnName(playerid, 0)), X11_PLUM, x, y, z, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    return 1;
}

CMD:ame(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;

    new flyingtext[164];

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/ame [action]");

    if(strlen(params) > 128)
        return SendErrorMessage(playerid, "Max action can only maximmum 128 characters.");

    if(strlen(params) > 64) {
        SendClientMessageEx(playerid, X11_PLUM, "* [AME]: %.64s ..", params);
        SendClientMessageEx(playerid, X11_PLUM, ".. %s", params[64]);
    }
    else {
        SendClientMessageEx(playerid, X11_PLUM, "* [AME]: %s", params);
    }
    format(flyingtext, sizeof(flyingtext), "* %s %s*", ReturnName(playerid, 0, 1), params);
    SetPlayerChatBubble(playerid, flyingtext, X11_PLUM, 10.0, 10000);

    return 1;
}
CMD:melow(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/melow [action]");

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 8.0, X11_PLUM, "* %s (low) %.64s ..", ReturnName(playerid, 0, 1), params);
        SendNearbyMessage(playerid, 8.0, X11_PLUM, ".. %s", params[64]);
    }
    else {
        SendNearbyMessage(playerid, 8.0, X11_PLUM, "* %s (low) %s", ReturnName(playerid, 0, 1), params);
    }
    return 1;
}
CMD:me(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/me [action]");

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 20.0, X11_PLUM, "* %s %.64s ..", ReturnName(playerid, 0, 1), params);
        SendNearbyMessage(playerid, 20.0, X11_PLUM, ".. %s", params[64]);
    }
    else {
        SendNearbyMessage(playerid, 20.0, X11_PLUM, "* %s %s", ReturnName(playerid, 0, 1), params);
    }
    return 1;
}

CMD:ldo(playerid, params[])
{
    new userid, text[128];
    if(sscanf(params, "us[128]", userid, text)) return SendSyntaxMessage(playerid, "/ldo [playerid/PartOfName] [desc]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't use long /ldo to yourself.");

    if(strlen(text) > 64) 
    {
        SendClientMessageEx(userid, X11_PURPLE, "* %.64s ..", text);
        SendClientMessageEx(userid, X11_PURPLE, ".. %s (( %s )) (( Reply with /ldo ))", text[64], ReturnName(playerid, 0, 1));

        SendNearbyMessage(playerid, 20.0, X11_PURPLE, "* %.64s ..", params);
        SendNearbyMessage(playerid, 20.0, X11_PURPLE, ".. %s (( %s )) (( /ldo ))", text[64], ReturnName(playerid, 0, 1));
    }
    else 
    {
        SendClientMessageEx(userid, X11_PURPLE, "* %s (( %s )) (( Reply with /ldo ))", text, ReturnName(playerid, 0, 1));
        SendNearbyMessage(playerid, 20.0, X11_PURPLE, "* %s (( %s )) (( /ldo ))", text, ReturnName(playerid, 0, 1));
    }
    if(GetAdminLevel(playerid) < 8)
    {
        foreach(new i : Player) if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] && !PlayerData[i][pDisableLDO])
            SendClientMessageEx(i, X11_GREEN_YELLOW, "/ldo %s (%d) to %s (%d) : %s", ReturnName2(playerid), playerid, ReturnName2(userid), userid, text);
    }
    return 1;
}

CMD:do(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/do [description]");

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 20.0, X11_PLUM, "* %.64s ..", params);
        SendNearbyMessage(playerid, 20.0, X11_PLUM, ".. %s (( %s ))", params[64], ReturnName(playerid, 0, 1));
    }
    else {
        SendNearbyMessage(playerid, 20.0, X11_PLUM, "* %s (( %s ))", params, ReturnName(playerid, 0, 1));
    }
    return 1;
}
CMD:dolow(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/do [description]");

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 8.0, X11_PLUM, "* %.64s ..", params);
        SendNearbyMessage(playerid, 8.0, X11_PLUM, ".. %s (( (low) %s ))", params[64], ReturnName(playerid, 0, 1));
    }
    else {
        SendNearbyMessage(playerid, 8.0, X11_PLUM, "* %s (( (low) %s ))", params, ReturnName(playerid, 0, 1));
    }
    return 1;
}
CMD:cw(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You need to be driver to use this command");
    if(!IsWindowedVehicle(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "This vehicle doesn't have window.");
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/(c)ar(w)hisper [whisper]");

    if(strlen(params) > 64) {
        SendVehicleMessage(GetPlayerVehicleID(playerid), 0xBBFFEEFF, "[Car Whisper] %s says: %.64s ..", ReturnName(playerid, 0, 1), params);
        SendVehicleMessage(GetPlayerVehicleID(playerid), 0xBBFFEEFF, ".. %s", params[64]);
    }
    else{
        SendVehicleMessage(GetPlayerVehicleID(playerid), 0xBBFFEEFF, "[Car Whisper] %s says: %s", ReturnName(playerid, 0, 1), params);
    }
    return 1;
}

CMD:s(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;
    if(isnull(params)) return SendSyntaxMessage(playerid, "/(s)hout [shout text]");
    if(IsPlayerInDynamicArea(playerid, JailArea) || IsPlayerInDynamicArea(playerid, NSArea) || AccountData[playerid][pAdminDuty] > 0) return cmd_b(playerid, params);

    new
        line_1[56],
        line_2[84]
    ;

    format(line_1, sizeof(line_1), "%.48s ..", params);
    format(line_2, sizeof(line_2), ".. %s", params[48]);
    line_1[0] = toupper(line_1[0]);

    if(!strcmp(PlayerData[playerid][pAccent], "None", true))
    {
        if (strlen(params) > 64)
        {
            ProxDetector(playerid, 30.0, X11_WHITE, sprintf("%s shouts: %s", ReturnName(playerid, 0, 1), line_1));
            ProxDetector(playerid, 30.0, X11_WHITE, sprintf("%s!", line_2));
        }
        else
        {
            ProxDetector(playerid, 30.0, X11_WHITE, sprintf("%s shouts: %s!", ReturnName(playerid, 0, 1), params));
        }
    }
    else
    {
        if (strlen(params) > 64)
        {
            ProxDetector(playerid, 30.0, X11_WHITE, sprintf("(%s Accent) %s shouts: %s", PlayerData[playerid][pAccent], ReturnName(playerid, 0, 1), line_1));
            ProxDetector(playerid, 30.0, X11_WHITE, sprintf("%s!", line_2));
        }
        else
        {
            ProxDetector(playerid, 30.0, X11_WHITE, sprintf("%s shouts: %s!", ReturnName(playerid, 0, 1), params));
        }
    }  
    return 1;
}

CMD:l(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1)
        return 0;

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/(l)ow [low text]");

    if(IsPlayerInDynamicArea(playerid, JailArea) || IsPlayerInDynamicArea(playerid, NSArea) || AccountData[playerid][pAdminDuty] > 0)
        return cmd_b(playerid, params);

    new
        line_1[56],
        line_2[84]
    ;

    format(line_1, sizeof(line_1), "%.48s ..", params);
    format(line_2, sizeof(line_2), ".. %s", params[48]);

    if(strlen(params) < 128) 
    {
        params[0] = toupper(params[0]);
        if(!strcmp(PlayerData[playerid][pAccent], "None", true))
        {
            if (strlen(params) > 48)
            {
                ProxDetector(playerid, 5.0, X11_WHITE, sprintf("[low] %s says: %s", ReturnName(playerid, 0, 1), line_1));
                ProxDetector(playerid, 5.0, X11_WHITE, sprintf("[low] %s", line_2));
            }
            else
            {
                ProxDetector(playerid, 5.0, X11_WHITE, sprintf("[low] %s says: %s", ReturnName(playerid, 0, 1), params));
            }
        }
        else
        {
            if (strlen(params) > 48)
            {
                ProxDetector(playerid, 5.0, X11_WHITE, sprintf("[low] (%s Accent) %s says: %s", PlayerData[playerid][pAccent], ReturnName(playerid, 0, 1), line_1));
                ProxDetector(playerid, 5.0, X11_WHITE, sprintf("[low] %s", line_2));
            }
            else
            {
                ProxDetector(playerid, 5.0, X11_WHITE, sprintf("[low] (%s Accent) %s says: %s", PlayerData[playerid][pAccent], ReturnName(playerid, 0, 1), params));
            }
        }
    }
    return 1;
}

CMD:o(playerid, params[])
{
    if(g_StatusOOC && GetAdminLevel(playerid) < 1)
        return SendErrorMessage(playerid, "Perintah ini dinonaktifkan sementara.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/o [global OOC]");

    if(PlayerData[playerid][pDisableOOC])
        return SendErrorMessage(playerid, "Aktifkan OOC chatmu terlebih dahulu dengan perintah /toggle.");

    if(strlen(params) > 120)
        return SendClientMessage(playerid, -1, "Text terlalu panjang, maksima 120 karakter.");

    foreach (new i : Player) if(!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated])
    {
        if(AccountData[playerid][pAdminDuty] && GetAdminLevel(playerid))
            SendClientMessageEx(i, -1, "(( "RED"%s %s"WHITE" (%d): %s ))", GetAdminLevel(playerid) == 1 ? ("Helper") : ("Admin"), ReturnName(playerid, 0), playerid, params);

        else
        {
            new vip_level = GetPlayerVIPLevel(playerid);
            new chat_color[][] = {LIGHTBLUE, YELLOW, COL_BLUE, ORANGE, GOLD};

            if(!strcmp(PlayerData[playerid][pAlias], "(null)")) SendClientMessageEx(i, -1, "(( %sPlayer %s"WHITE" (%d): %s ))", chat_color[vip_level], ReturnName2(playerid, 0), playerid, params);
            else SendClientMessageEx(i, -1, "(( %s%s %s"WHITE" (%d): %s ))", chat_color[vip_level], PlayerData[playerid][pAlias], ReturnName2(playerid, 0), playerid, params);
        }
    }
    return 1;
}
CMD:radio(playerid, params[])
{
    new text[128];

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "Kamu harus bergabung ke instansi untuk menggunakan perintah ini!");

    if(GetFactionType(playerid) == FACTION_GANG || GetFactionType(playerid) == FACTION_LEGAL)
        return SendErrorMessage(playerid, "Family/Gang tidak bisa mengakses perintah ini!.");

    if(sscanf(params,"s[128]",text))
        return SendSyntaxMessage(playerid, "/r(adio) [text]");

    if(strval(text) > 128)
        return SendErrorMessage(playerid,"Text dibatasi 128 karakter!.");

    if(text[0] == '@')
    {
        if(strlen(text) != 1) SendFactionMessage(PlayerData[playerid][pFaction], FactionData[PlayerData[playerid][pFaction]][factionColor], "[RADIO] %s %s: %s.%03d %s", Faction_GetRank(playerid), ReturnName2(playerid, 0), GetInitials(Faction_GetRank(playerid)), PlayerData[playerid][pBadge], text[1]);
        else SendFactionMessage(PlayerData[playerid][pFaction], FactionData[PlayerData[playerid][pFaction]][factionColor], "[RADIO] %s %s: %s", Faction_GetRank(playerid), ReturnName2(playerid, 0), text);
    }
    else if(text[0] == '~')
    {
        if(IsPlayerInAnyVehicle(playerid) && IsCallsignActive(GetPlayerVehicleID(playerid)))
        {
            new callsign[64];
            GetDynamic3DTextLabelText(ReturnCallsignLabelID(GetPlayerVehicleID(playerid)), callsign, sizeof(callsign));
            SendFactionMessage(PlayerData[playerid][pFaction], FactionData[PlayerData[playerid][pFaction]][factionColor], "[RADIO] %s %s: %s %s", Faction_GetRank(playerid), ReturnName2(playerid, 0), callsign, text[1]);
        }
        else SendFactionMessage(PlayerData[playerid][pFaction], FactionData[PlayerData[playerid][pFaction]][factionColor], "[RADIO] %s %s: %s", Faction_GetRank(playerid), ReturnName2(playerid, 0), text[1]);
    }
    else SendFactionMessage(PlayerData[playerid][pFaction], FactionData[PlayerData[playerid][pFaction]][factionColor], "[RADIO] %s %s: %s", Faction_GetRank(playerid), ReturnName2(playerid, 0), text);
    return 1;
}

CMD:r(playerid,params[])
    return cmd_radio(playerid, params);

CMD:ooc(playerid, params[])
    return cmd_o(playerid, params);

CMD:or(playerid, params[])
    return cmd_oocradio(playerid, params);

CMD:od(playerid, params[])
    return cmd_odept(playerid, params);

CMD:d(playerid, params[])
    return cmd_dept(playerid, params);

CMD:megaphone(playerid, params[])
    return cmd_m(playerid, params);

CMD:shout(playerid, params[])
    return cmd_s(playerid, params);

CMD:low(playerid, params[])
    return cmd_l(playerid, params);

CMD:w(playerid, params[])
    return cmd_whisper(playerid, params);
//ACCENT
CMD:accent(playerid, params[]) 
{
    if(!isnull(params)) 
    {
        new string[100];
        if(IsNumeric(params)) return SendErrorMessage(playerid, "You cannot put numeric to use this command");
        if(strlen(params) >= 35) 
        {
            SendErrorMessage(playerid, "Invalid accent length. Accents can only consist of 1-34 characters.");
        }
        else 
        {
            params[0] = toupper(params[0]);
            format(PlayerData[playerid][pAccent], 35, params);

            format(string, sizeof(string), "You are now speaking in a "RED"'%s'"WHITE" accent.", params);
            SendClientMessage(playerid, COLOR_WHITE, string);
        }
    }
    else 
    {
        return SendSyntaxMessage(playerid, "/accent [accent] ('none' to disable)");
    }
	return 1;
}
//CMD alias > Stranger_uniqueid charID(UNIQUE) alias targetID(UNIQUE) PlayerData[playerid][pID] PlayerData[targetid][pID]
// /alias targetid Nama
CMD:help(playerid, params[])
    return Dialog_Show(playerid, Help, DIALOG_STYLE_LIST, "Help List", "Account commands\nBank commands\nBusiness commands\nChat commands\nFaction commands\nFishing / Hunting Help\nGeneral commands\nHouse commands\nJob commands\nProperty commands\nVehicle commands\nWorkshop commands\nKeyboard Shortcut\nSidejob Guide\nDonater commands\nApartment Commands\nAnimation Command", "Select", "Close");

CMD:changepass(playerid, params[])
{
    Dialog_Show(playerid, ChangePassword, DIALOG_STYLE_PASSWORD, "Ganti Password", WHITE"Masukkan password lamamu:", "Masuk", "Keluar");
    return 1;
}

CMD:lastlogged(playerid, params[])
{
    if(CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(isnull(params) || strlen(params) > 24)
        return SendSyntaxMessage(playerid, "/lastlogged [acp name]");

    static
        query[128];

    format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
    mysql_tquery(g_iHandle, query, "OnLoginDate", "ds", playerid, params);

    return 1;
}
CMD:minesalary(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_MINER)
        return SendErrorMessage(playerid, "You're not a miner!");

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Mine Salary", "Total mine salary : %s", "Close", "", FormatNumber(PlayerData[playerid][pMineSalary]));
    return 1;
}

CMD:tosscigar(playerid, params[])
{
    new targetid, string[128];
    if(sscanf(params, "u", targetid))
        return SendSyntaxMessage(playerid, "/tosscigar [playerid]");

    if(targetid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, targetid, 5.0)) 
        return SendErrorMessage(playerid, "The player is disconnected or not near you.");

    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_SMOKE_CIGGY)
    {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        SetPlayerSpecialAction(targetid, SPECIAL_ACTION_SMOKE_CIGGY);
        PlayerSmoking[targetid] = PlayerSmoking[playerid];
        PlayerSmoking[playerid] = 0;
        format(string, sizeof(string), "toss his cigarettes to %s", ReturnName(targetid));
        cmd_ame(playerid, string);
    }
    else SendErrorMessage(playerid, "You are not smoking any cigarretes!");
    return 1;
}

CMD:gotoco(playerid, params[]){
    if (CheckAdmin(playerid, 2))
    return PermissionError(playerid);

	new Float: pos[3], int;
	if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /gotoco [x coordinate] [y coordinate] [z coordinate] [interior]");

	SendClientMessageEx(playerid, COLOR_WHITE, "You have been teleported to the coordinates specified.");
	SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	SetPlayerInterior(playerid, int);
	return 1;
}

CMD:gov(playerid, params[]) {
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/gov [text]");
    if(PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3)
        if(GetFactionType(playerid) == FACTION_POLICE) {
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"|___________ Government News Announcement ___________|");
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"** %s: %s %s: %s **",GetInitials(Faction_GetName(playerid)),Faction_GetRank(playerid), ReturnName(playerid,1) ,params);
        }
        else if(GetFactionType(playerid) == FACTION_NEWS) {
            SendErrorMessage(playerid, "You aren't government!");
            /*SendClientMessageToAllEx(X11_GREEN_YELLOW,"|___________ Government News Announcement ___________|");
            SendClientMessageToAllEx(X11_GREEN_YELLOW,"** %s : %s %s: %s **",GetInitials(Faction_GetName(playerid)),Faction_GetRank(playerid), ReturnName(playerid,1) ,params);*/
        }
        else if(GetFactionType(playerid) == FACTION_MEDIC) {
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"|___________ Government News Announcement ___________|");
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"** %s: %s %s: %s **",GetInitials(Faction_GetName(playerid)),Faction_GetRank(playerid), ReturnName(playerid,1) ,params);
        }
        else if(GetFactionType(playerid) == FACTION_GOV) {
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"|___________ Government News Announcement ___________|");
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"** %s: %s %s: %s **",GetInitials(Faction_GetName(playerid)),Faction_GetRank(playerid), ReturnName(playerid,1) ,params);
        }
        else
            return SendClientMessageEx(playerid, -1,"You're not in any faction");
    else
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);
    return 1;
}


/*================================= ADMIN COMMAND LIST ===============================
=============================================================================================*/
CMD:taxrate(playerid, params[])
{
    new taxrate;
    if(GetFactionType(playerid) != FACTION_GOV) 
        return SendErrorMessage(playerid, "You're not in government faction!");

    if(PlayerData[playerid][pFactionRank] < 7)
        return SendErrorMessage(playerid, "You're not allowed to set city tax!");

    if(sscanf(params, "d", taxrate))
        return SendSyntaxMessage(playerid, "/taxrate [1-50%%]");

    if(taxrate > 0 && taxrate <= 50) 
    {

        new string[90], name[MAX_PLAYER_NAME];
        GetPlayerName(playerid, name, sizeof(name));
        ServerData[Tax] = taxrate;
        format(string,sizeof(string),"Anda telah mengatur tarif pajak menjadi %d%%.",taxrate);
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendAdminMessage(COLOR_WHITE, ""YELLOW"%s "WHITE"Telah mengatur tarif pajak menjadi "RED"%d%%", name, taxrate);
        mysql_tquery(g_iHandle, sprintf("UPDATE `server` SET `tax` = '%d' WHERE `ID`='1'", ServerData[Tax]));
    
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Tarif pajak harus antara 1 sampai 50 persen.");

    return 1;
}

CMD:resetweps(playerid, params[])
{
    if(CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/resetweps [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    ResetWeapons(userid);
    SendAdminAction(playerid, "You have reset %s's weapons.", ReturnName(userid, 0));
    SendServerMessage(userid, ""RED"%s "WHITE"have reset your weapons.", ReturnAdminName(playerid));
    return 1;
}

CMD:resetjob(playerid, params[])
{
    new targetid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", targetid)) return SendSyntaxMessage(playerid, "/resetjob [playerid]");
    if(targetid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");

    PlayerData[targetid][pDelayFishing] = 0;
    PlayerData[targetid][pSweeperDelay] = 0;
    PlayerData[targetid][pBusDelay] = 0;
    PlayerData[targetid][pDelayTruck] = 0;
    PlayerData[targetid][pTrashmasterDelay] = 0;
    PlayerData[targetid][pMoneytransDelay] = 0;
    PlayerData[targetid][pBoxvilleDelay] = 0;
    PlayerData[targetid][pWoodDelay] = 0;
    SendCustomMessage(targetid, "JOB RESET","Your job has been reset by "YELLOW"%s", ReturnName(playerid, 0));
    return 1;
}

CMD:deliverstock(playerid, params[])
{
    static id = -1;
    new vehicleid = GetPlayerVehicleID(playerid);
    static index = -1;

    if(GetPlayerJob(playerid) != JOB_HAULER)
        return SendErrorMessage(playerid, "You're not a hauler!");

    if(!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You need to be inside the vehicle to use this");

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "You need to be driver to use this command");

    if((index = Vehicle_ReturnID(vehicleid)) != -1 && VehicleData[index][vehComponent] > 0)
    {
        if((id = GetMechanicJobId()) != -1)
        {
            SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 5.0);
        }
    }
    else if((index = Vehicle_ReturnID(vehicleid)) != -1 && VehicleData[index][vehWoods] > 0)
    {
        if((id = GetJobIdByType()) != -1)
        {
            SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 5.0);
        }
    }
    else SendClientMessageEx(playerid, COLOR_WHITE, "You don't have any items to restock at warehouse your trunk storage is "RED"empty");
    return 1;
}
/*CMD:ipcheck(playerid, params[])
{
    new userid;
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/ipcheck [playerid/part of name]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    SendClientMessageEx(playerid, X11_GREEN_YELLOW, "IP from %s: "WHITE"%s", ReturnName2(userid), ReturnIP(userid));
    return 1;
}*/


/*CMD:getacc(playerid, params[])
{
    static
        character[32],
        accounts[24];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]", character)) return SendSyntaxMessage(playerid, "/getacc [accounts name]");
    mysql_tquery(g_iHandle, sprintf("SELECT `characters` WHERE `Username`='%s', `Character`='%s'", accounts, character), "Account_Check", "ss", character);
    return 1;
}*/

CMD:getip(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/getip [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    SendServerMessage(playerid, "%s's IP address is %s.", ReturnName(userid, 0), ReturnIP(userid));
    return 1;
}

CMD:getipuser(playerid, params[])
{
    static
        ip[32];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]", ip))
        return SendSyntaxMessage(playerid, "/getipuser [ip]");

    mysql_tquery(g_iHandle, sprintf("SELECT * FROM `accounts` WHERE `IP`='%s';", SQL_ReturnEscaped(ip)), "Alias_Check", "ds", playerid, ip);
    return 1;
}

CMD:revokewhitelist(playerid, params[])
{
    static
        userid[MAX_PLAYER_NAME],
        Cache: getid,
        query[255];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]", userid))
        return SendSyntaxMessage(playerid, "/revokewhitelist [accounts name]");

    format(query, sizeof(query), "SELECT `ID` FROM `accounts` WHERE `Username` = '%s'", userid);
    getid = mysql_query(g_iHandle, query);

    new rows = cache_num_rows();

    if(rows)
    {
        new id;
        id = cache_get_field_int(0, "ID");

        new query2[255];
        format(query2, sizeof(query2), "DELETE FROM `whitelist` WHERE `pID` = '%d'", id);
        mysql_tquery(g_iHandle, query2);

        SendAdminMessage(X11_TOMATO_1, "[WHITELIST] %s has revoke whitelist account name %s", ReturnAdminName(playerid), userid);
    }
    else
        SendErrorMessage(playerid, "%s isn't registered.", userid);

    cache_delete(getid);
    return 1;
}

CMD:whitelist(playerid, params[])
{
    static
        userid[MAX_PLAYER_NAME],
        reason[128],
        Cache: getid,
        query[255];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]s[128]", userid, reason))
        return SendSyntaxMessage(playerid, "/whitelist [accounts name] [reason]");

    format(query, sizeof(query), "SELECT `ID` FROM `accounts` WHERE `Username` = '%s'", userid);
    getid = mysql_query(g_iHandle, query);

    new rows = cache_num_rows();

    if(rows)
    {
        new id;
        id = cache_get_field_int(0, "ID");

        new query2[1024];
        format(query2, sizeof(query2), "INSERT INTO `whitelist` (`pID`, `whitelisted`, `whitelistdate`, `whitelistby`, `whitelistreason`) VALUES ('%d', '1' , '%s', '%s' , '%s' ) ON DUPLICATE KEY UPDATE `whitelisted`='1', `whitelistdate`='%s', `whitelistreason`='%s';", id, SQL_ReturnEscaped(ReturnDate()), ReturnAdminName(playerid), SQL_ReturnEscaped(reason), SQL_ReturnEscaped(ReturnDate()), SQL_ReturnEscaped(reason));
        mysql_tquery(g_iHandle, query2);

        SendAdminMessage(X11_TOMATO_1, "[WHITELIST] %s whitelist account name %s reason : %s", ReturnAdminName(playerid), userid, reason);
    }
    else
        SendErrorMessage(playerid, "%s isn't registered.", userid);

    cache_delete(getid);
    return 1;
}

CMD:ogetip(playerid, params[])
{
    static
        userid[MAX_PLAYER_NAME],
        Cache: ipcheck,
        query[128];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]", userid))
        return SendSyntaxMessage(playerid, "/ogetip [accounts name]");

    format(query, sizeof(query), "SELECT `IP` FROM `accounts` WHERE `Username` = '%s'", userid);
    ipcheck = mysql_query(g_iHandle, query);

    new rows = cache_num_rows();

    if(rows)
    {
        new ip[32];
        cache_get_field_content(0, "IP", ip, 32);
        SendClientMessageEx(playerid, X11_GREEN_YELLOW, "Offline ip check from username/accounts %s: "WHITE"%s", userid, ip);
    }
    else
        SendErrorMessage(playerid, "%s isn't registered.", userid);

    cache_delete(ipcheck);
    return 1;
}

CMD:acure(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        userid;

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/acure [playerid]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");

    PlayerData[userid][pCough] = 0;
    PlayerData[userid][pMigrainRate] = 0;
    PlayerData[userid][pFever] = 0;
    PlayerData[userid][pBleeding] = 0;
    PlayerData[userid][pBleedTime] = 0;
    PlayerData[userid][pBandage] = 0;

    SendServerMessage(userid, "Administrator %s telah mereset penyakit di karakter anda.", ReturnAdminName(playerid));
    SendServerMessage(playerid, "Anda telah mereset penyakit karakter %s.", ReturnName(userid, 0));
    return 1;
}

CMD:ah(playerid, params[])
    return cmd_ahelp(playerid, "\0");

CMD:ahelp(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new
        AdmCmdStr1[4096] = "Admin Level\tAdmin Command\n";

    if(AccountData[playerid][pAdmin] >= 1)
    {
        strcat(AdmCmdStr1, "Helper\t/a\nHelper\t/aduty\nHelper\t/asay\nHelper\t/checkacc\nHelper\t/check\nHelper\t/spectate\nHelper\t/reports\nHelper\t/jail\nHelper\t/release\nHelper\t/kick\nHelper\t/warn\nHelper\t/unwarn\nHelper\t/mute\nHelper\t/unmute");
        strcat(AdmCmdStr1, "\nHelper\t/goto\nHelper\tgethere\nHelper\t/freeze\nHelper\t/unfreeze\nHelper\t/ban\nHelper\t/banacp\nHepler\t/unbanacp\nHelper\t/tempban\nHelper\t/otempban\nHelper\t/oban\nHelper\t/send\nHelper\t/setskin");
        strcat(AdmCmdStr1, "\nHelper\t/ans\nHelper\tgetcar\nHelper\t/gotocar\nHelper\t/setint\nHelper\t/setvw\nHelper\t/gotoplayerscar\nHelper\t/cmc\nHelper\t/vowner\nHelper\t/checknumber\nHelper\t/apm");
        strcat(AdmCmdStr1, "\nHelper\t/maxenergy\nHelper\t/fixveh\nHelper\t/aslap\nHelper\t/acallsign\nHelper\t/changeboard\nHelper\t/spawn\nHelper\t/sethp\nHelper\t/jailed\nHelper\t/checkitem");
        strcat(AdmCmdStr1, "\nHelper\t/revive\nHelper\t/jetpack\nHelper\t/checkmask\nHelper\t/baninfo\nHelper\t/mark\nHelper\t/gotomark\nHelper\t/entercar\nHelper\t/vdl");
        strcat(AdmCmdStr1, "\nHelper\t/unban\nHelper\t/banip\nHelper\t/ogetip\nHelper\t/getip\nHelper\t/getipuser\nHelper\t/unbanip\nHelper\t/ogethere\nHelper\t/respawnfactioncars\nHelper\t/mark");
        strcat(AdmCmdStr1, "\nHelper\t/owarn\nHelper\t/forcehospital\nHelper\t/lookup\nHelper\t/nearplayer\nHelper\t/listwarns\nHelper\t/ft\nHelper\t/lt\nHelper\t/togoocns");
    }
    if(AccountData[playerid][pAdmin] >= 2)
    {
        strcat(AdmCmdStr1, "\nLevel 1\t/respawn\nLevel 1\t/respawncars\nLevel 1\t/shooter\nLevel 1\t/forcedmv\nLevel 1\t/countdown\nLevel 1\t/togooc");
        strcat(AdmCmdStr1, "\nLevel 1\t/destroyveh\nLevel 1\t/respawncar\nLevel 1\t/listguns\nLevel 1\t/masked\nLevel 1\t/setarmor");
        strcat(AdmCmdStr1, "\nLevel 1\t/flip\nAdmin Level 1\t/vote");
    }
    if(AccountData[playerid][pAdmin] >= 3)
    {
        strcat(AdmCmdStr1, "\nLevel 2\t/resetweps\nLevel 2\t/forceinsurance\nLevel 2\t/near\nLevel 2\t/destroycar");
        strcat(AdmCmdStr1, "\nLevel 2\t/adestroybox \nLevel 2\t/setname\nLevel 2\t/addsalary");
    }
    if(AccountData[playerid][pAdmin] >= 4)
    {
        strcat(AdmCmdStr1, "\nLevel 3\t/destroyveh\nLevel 3\t/destroyitem");
        strcat(AdmCmdStr1, "\nLevel 3\t/respawnnear\nLevel 3\t/resetdamage\nlevel 3\t/resetshooter");
    }
    if(AccountData[playerid][pAdmin] >= 5)
    {
        strcat(AdmCmdStr1, "\nLevel 4\t/checkstorage\nLevel 4\t/acolorcar\nLevel 4\t/setfuel\nLevel 4\t/clearinventory\nLevel 4\t/clearwarns\nLevel 4\t/gunauthority");
        strcat(AdmCmdStr1, "\nLevel 4\t/auction\nLevel 4\t/setplayer");
        strcat(AdmCmdStr1, "\nLevel 4\t/asetfaction\nLevel 4\t/setweather");
    }
    if(AccountData[playerid][pAdmin] >= 6)
    {
        strcat(AdmCmdStr1, "\nSr. Admin\t/spawnitem\nSr. Admin\t/setquantity\nSr. Admin\t/veh\nSr. Admin\t/setpump\nSr. Admin\t/asetrank");
        strcat(AdmCmdStr1, "\nSr. Admin\t/cpv\nSr. Admin\t/gunauthority\nSr. Admin\t/givewep\nSr. Admin\t/clearallreports");
    }
    if(AccountData[playerid][pAdmin] >= 7)
    {
        strcat(AdmCmdStr1, "\nLead Admin\t/restart\nLead Admin\t/setmotd\nLead Admin\t/dynamichelp\nLead Admin\t/saveaccounts\nLead Admin\t/saveall");
        strcat(AdmCmdStr1, "\nLead Admin\t/cpv\nLead Admin\t/gunauthority\nLead Admin\t/givewep\nLead Admin\t/setleader\nLead Admin\t/setitem");
        strcat(AdmCmdStr1, "\nLead Admin\t/setadmin\nLead Admin\t/deletechar");
        strcat(AdmCmdStr1, "\nLead Admin\t/resetpassword\n");
    }
    if(AccountData[playerid][pAdmin] >= 8)
    {
        strcat(AdmCmdStr1, "\nServer Manager\t/setadmin\nServer Manager\t/deletechar");
        strcat(AdmCmdStr1, "\nServer Manager\t/resetpassword\n");
    }
    if(AccountData[playerid][pAdmin] >= 9)
    {
        strcat(AdmCmdStr1, "\nHOM\t/panel");

    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Admin Command", AdmCmdStr1, "CLOSE", "", "");
    return 1;
}

CMD:dynamichelp(playerid, params[])
{
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    new display[1000];

    // Finish rework
    strcat(display, "ATM\t/atmmenu (/am), /goto 'atm'\n");
    strcat(display, "LUMBER\t/lumbermenu (/lm), /goto 'lumber'\n");
    strcat(display, "MARKETPLACE\t/marketplace, /goto 'marketplace'\n");
    strcat(display, "BASEMENT\t/basementmenu (/bm), /goto 'basement'\n");
    strcat(display, "GATE\t/gatemenu, /nearestgate, /gotogate, /infogate, /gatehelp\n");
    strcat(display, "PUMP\t/createpump, /destroypump, /editpump, /setpump, /goto 'pump'\n");
    strcat(display, "DEALERSHIP\t/dealermenu (/dm), /goto 'dealer'\n");
    strcat(display, "RENTAL VEHICLES\t/rentalmenu (/rm), /goto 'rental'\n");

    // Rework progress
    strcat(display, "GARBAGE\t/creategarbage, /destroygarbage\n");
    strcat(display, "SPEED\t/createspeed, /destroyspeed, /goto speed\n");
    strcat(display, "JOB\t/createjob, /editjob, /destroyjob, /createjobcar\n");
    strcat(display, "WORKSHOP\t/createworkshop, /editworkshop, /destroyworkshop\n");
    strcat(display, "HOUSE\t/createhouse, /edithouse, /destroyhouse, /goto house\n");
    strcat(display, "BUSINESS\t/createbiz, /editbiz, /destroybiz, /bizstate, /goto biz\n");
    strcat(display, "OBJECTTEXT\t/createobjecttext, /editobjecttext, /destroyobjecttext\n");
    strcat(display, "ENTRANCE\t/createentrance, /editentrace, /destroyentrance, /goto entrance\n");
    strcat(display, "FACTION\t/createfaction, /editfaction, /destroyfaction, /createfactioncar\n");
    strcat(display, "OTHER\t/near");
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST, "Dynamic Command", display, "Close", "");
    return 1;
}

CMD:checkpoint(playerid, params[])
{
    if(CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    SendClientMessageEx(playerid, X11_TOMATO_1, "Your REPORT point: %d", AccountData[playerid][pReportPoint]);
    return 1;
}

CMD:forcehospital(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/forcehospital [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!PlayerData[userid][pHospitalTime])
        return SendErrorMessage(playerid, "You can't revive a player that's not injured.");

    PlayerData[userid][pHospitalTime] = 115;
    SetPVarInt(playerid, "ForceHospital", 1);
    SendAdminAction(playerid, "You have force %s's character from hospital.", ReturnName(userid, 0));
    return 1;
}

CMD:respawn(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/respawn [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!IsPlayerSpawned(userid))
        return SendErrorMessage(playerid, "You can't respawn a player that's not spawned.");

    RespawnPlayer(userid);

    SendAdminAction(playerid, "You have respawned %s.", ReturnName(userid, 0));
    SendAdminAction(userid, "You have been respawned by %s.", ReturnName(playerid, 0));

    return 1;
}
CMD:migraindong(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);
    PlayerData[playerid][pMigrainRate] = 3;
    return 1;
}
CMD:feverdong(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);
    PlayerData[playerid][pFever] = 1;
    return 1;
}

CMD:sakitdong(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    SetPlayerHunger(playerid, 5);
    return 1;
}

CMD:setcustomskin(playerid, params[])
{
    static
        userid,
        skinid;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, skinid))
        return SendSyntaxMessage(playerid, "/setcustomskin [playerid/PartOfName] [skin id]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(skinid < 20001 || skinid > 20074)
        return SendErrorMessage(playerid, "Invalid skin ID. Skins range from 20001 to 20074.");

    SetPlayerSkinEx(userid, skinid);

    SendAdminAction(playerid, "You have set %s's skin to ID: %d.", ReturnName(userid, 0), skinid);
    SendAdminAction(userid, "%s has set your skin to ID: %d.", ReturnName(playerid, 0), skinid);

    return 1;
}
CMD:setskin(playerid, params[])
{
    static
        userid,
        skinid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, skinid))
        return SendSyntaxMessage(playerid, "/setskin [playerid/PartOfName] [skin id]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(skinid < 0 || skinid > 311)
        return SendErrorMessage(playerid, "Invalid skin ID. Skins range from 0 to 311.");

    SetPlayerSkinEx(userid, skinid);

    SendAdminAction(playerid, "You have set %s's skin to ID: %d.", ReturnName(userid, 0), skinid);
    SendAdminAction(userid, "%s has set your skin to ID: %d.", ReturnName(playerid, 0), skinid);

    return 1;
}

CMD:stats(playerid, params[])
{
    ShowStatsForPlayer(playerid, playerid);
    return 1;
}


Player_Item(playerid, targetid)
{
    new str[1024],
        name[64];

    format(str, sizeof(str), "Item\tAmount\n");
    strcat(str, sprintf("Money\t%s\n", FormatNumber(GetMoney(targetid))));
    if(ReturnWeaponCount(targetid) > 0)
    for(new i = 1; i != MAX_WEAPON_SLOT; i++) if(PlayerGuns[targetid][i][weapon_id]) {
		strcat(str, sprintf("%s\n", ReturnWeaponName(PlayerGuns[targetid][i][weapon_id])));
    }


    //Inside Inventory
    for (new i = 0; i < PlayerData[targetid][pCapacity]; i ++) 
    if(InventoryData[targetid][i][invExists]) 
    {
        strunpack(name, InventoryData[targetid][i][invItem]);
        strcat(str, sprintf("%s\t%d\n", name, InventoryData[targetid][i][invQuantity]));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, sprintf("%s item's", ReturnName(targetid, 0)), str, "Close", "");
    return 1;
}


/*CMD:itemcheck(playerid, params[])
{
    CheckAdmin(playerid, 1);
    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if(DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2])) {
        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Item Information", ""WHITE"Item Name: "YELLOW"%s\n"WHITE"Item Amount: "YELLOW"%d\n"WHITE"Dropped By: "YELLOW"%s\n"WHITE"Int: "YELLOW"%d\n"WHITE"Vw: "YELLOW"%d\n"WHITE"Weapon: "COL_RED"%s\n"WHITE"Ammo:"COL_RED" %d", "Close", "",
            DroppedItems[i][droppedItem],
            DroppedItems[i][droppedQuantity],
            DroppedItems[i][droppedPlayer],
            DroppedItems[i][droppedInt],
            DroppedItems[i][droppedWorld],
            DroppedItems[i][droppedWeaponId] != 0 ? ReturnWeaponName(DroppedItems[i][droppedWeaponId]) : ("-"),
            DroppedItems[i][droppedAmmo]
        );
        return 1;
    }
    SendErrorMessage(playerid, "There is no item in near you.");
    return 1;
}*/

CMD:shooter(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/shooter [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "You have specified an invalid player.");
    new str[128*10];

    for(new i = (10-1), end = 0; end <= i; --i) {
        format(str, sizeof(str), "%s%s\n", str, damageList[userid][i]);
        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "10 Latest damage", str, "Close", "");
    }
    return 1;
}


CMD:inventory(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawned(playerid))
        return SendErrorMessage(playerid, "You can't open your inventory right now.");

    OpenInventory(playerid);
    return 1;
}

CMD:usepills(playerid, params[])
{
    OpenInventory(playerid);
    return 1;
}

CMD:togooc(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(!g_StatusOOC)
    {
        SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s has disabled global OOC chat.", ReturnName(playerid, 0));
        g_StatusOOC = true;
    }
    else
    {
        SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s has enabled global OOC chat.", ReturnName(playerid, 0));
        g_StatusOOC = false;
    }
    return 1;
}

CMD:togoocns(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(!GetGVarInt("ToggleNS", GLOBAL_VARTYPE_INT))
    {
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has disable newbie school OOC chat.", ReturnName(playerid, 0));
        SetGVarInt("ToggleNS", true, GLOBAL_VARTYPE_INT);
    }
    else
    {
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has enable newbie school OOC chat.", ReturnName(playerid, 0));
        SetGVarInt("ToggleNS", false, GLOBAL_VARTYPE_INT);
    }
    return 1;
}

CMD:setarmor(playerid, params[])
{
    static
        userid,
        Float:amount;

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "uf", userid, amount))
        return SendSyntaxMessage(playerid, "/setarmor [playerid/PartOfName] [amount]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(amount > 100 || amount < 0)
        return SendErrorMessage(playerid, "Amount of set armor must between 0 - 100");

    SetArmour(userid, amount);
    SendServerMessage(playerid, "You have set %s's armor to %.2f.", ReturnName(userid, 0), amount);
    return 1;
}

/*CMD:arepairall(playerid, params[])
{
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    for(new i, j = GetVehiclePoolSize(); i <= j; i++) if(IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID) {
        RepairVehicle(i);
    }
    SendTesterMessage(X11_TOMATO_1, "AdmWarn: %s repaired all vehicle.", NormalName(playerid));
    return 1;
}*/

CMD:fixveh(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new index = Vehicle_ReturnID(vehicleid);
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(vehicleid > 0 && isnull(params))
    {
        RepairVehicle(vehicleid);
        if(VehicleData[index][vehEngineUpgrade] == 1) 
        {
            SetVehicleHealth(vehicleid, 2000);    
        }

        if(VehicleData[index][vehBodyUpgrade] == 3)
        {
            VehicleData[index][vehBodyRepair] = 1000.0;
        }
        SendServerMessage(playerid, "Kendaraan yang kamu naiki telah diperbaiki.");
    }
    else
    {
        if(sscanf(params, "d", vehicleid))
            return SendSyntaxMessage(playerid, "/fixveh [vehicle ID]");

        if(!IsValidVehicle(vehicleid))
            return SendErrorMessage(playerid, "ID kendaraan tidak valid!.");


        RepairVehicle(vehicleid);
        index = Vehicle_ReturnID(vehicleid);
        if(VehicleData[index][vehEngineUpgrade] == 1) 
        {
            SetVehicleHealth(vehicleid, 2000);
        }
        if(VehicleData[index][vehBodyUpgrade] == 3)
        {
            VehicleData[index][vehBodyRepair] = 1000.0;
        }
        SendServerMessage(playerid, "Kendaraan "YELLOW"(id: %d)"WHITE" telah diperbaiki.", vehicleid);
    }
    return 1;
}

CMD:givewep(playerid, params[])
{
    new
        userid,
        weaponid,
        durability,
        ammo,
        type
    ;

    if (CheckAdmin(playerid, 9))
        return PermissionError(playerid);

    if(sscanf(params, "uiiii", userid, weaponid, ammo, durability, type))
        return SendSyntaxMessage(playerid, "/givewep [playerid/PartOfName] [weaponid] [ammo] [durability] [type 1-Legal / 2-Ilegal");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "Player id yang targetkan tidak terhubung tidak ada diserver.");

    if(IsPlayerDuty(userid))
        return SendErrorMessage(playerid, "Player sedang duty faction tidak dapat diberikan.");

    if(!(0 < weaponid < 46))
        return SendErrorMessage(playerid, "Id weapon tidak valid.");

    if(ammo < 1 || ammo > 2000)
        return SendErrorMessage(playerid, "Aminisi hanya dibatasi 1 - 2000");

    if(durability < 1 || durability > 1000)
        return SendErrorMessage(playerid, "Durability hanya dibatasi 1 - 1000");

    if(PlayerHasWeaponInSlot(userid, weaponid))
        return SendErrorMessage(playerid, "Player tersebut mempunyai senjata di slot yang sama");

    if(type != 1 && type != 2)
        return SendErrorMessage(playerid, "Masukan type hanya 1 dan 2");

    if(type == 1)
    {
        new serial[64];
        format(serial, sizeof(serial), "%d%d%d", RandomEx(20, 90), RandomEx(15, 90), GetPlayerSQLID(userid));
        GivePlayerWeaponEx(userid, weaponid, ammo, durability, serial);
    }
    else if(type == 2)
    {
        GivePlayerWeaponEx(userid, weaponid, ammo, durability);
    }

    SendServerMessage(playerid, "Kamu memberikan %s sebuah %s dengan %d amunisi.", ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
    Log_Save(E_LOG_WEAPON, sprintf("[%s] %s give %s a %s with %d ammo.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo));
    Discord_Log(ADMINWEAP_LOG, sprintf("[%s] %s give %s a %s with %d ammo.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo));
    return 1;
}

CMD:setplayer(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    static
        userid,
        type[16],
        amount[32];


    if(sscanf(params, "us[16]S()[32]", userid, type, amount))
    {
        SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" exp, status, love, gender, birthdate, origin, bank, playinghours, drivinglic, takedrivinglic, businesslic, takebusinesslic");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" canpaycheck, job, warrants, channel, level, phonenumber, wooddelay, mechaniclevel, workshoplic, takeworkshoplic");
        return 1;
    }
    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!strcmp(type, "exp", true))
    {
        if(isnull(amount) || strval(amount) < 1 || strval(amount) > 100)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [exp] [1-100]");

        PlayerData[userid][pExp] = strval(amount);
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's "WHITE"exp to "LIGHTBLUE"%d.", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    if(!strcmp(type, "battery", true))
    {
        if(isnull(amount) || strval(amount) < 1 || strval(amount) > 100)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [battery] [1-100]");

        PlayerData[playerid][pPhoneBattery] = strval(amount);
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's "WHITE"battery to "LIGHTBLUE"%d.", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    if(!strcmp(type, "hunger", true))
    {
        if(isnull(amount) || strval(amount) < 1 || strval(amount) > 100)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [hunger] [1-100]");

        SetPlayerHunger(userid, strval(amount));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's "WHITE"hunger to "LIGHTBLUE"%d.", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    if(!strcmp(type, "canpaycheck", true))
    {
        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [canpaycheck] [0-1]");

        PlayerData[userid][pCanPaycheck] = strval(amount);
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's "WHITE"able to paycheck to "LIGHTBLUE"%d.", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    if(!strcmp(type, "energy", true))
    {
        if(isnull(amount) || strval(amount) < 1 || strval(amount) > 100)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [energy] [1-100]");

        SetPlayerEnergy(userid, strval(amount));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's "WHITE"energy to "LIGHTBLUE"%d.", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    if(!strcmp(type, "heartrate", true))
    {
        if(isnull(amount) || strval(amount) < 1 || strval(amount) > 100)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [heartrate] [1-100]");

        SetPlayerRate(userid, strval(amount));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's "WHITE"heartrate to "LIGHTBLUE"%d.", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    if(!strcmp(type, "gender", true))
    {
        if(isnull(amount) || strval(amount) < 1 || strval(amount) > 2)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [gender] [1: male - 2: female]");

        PlayerData[userid][pGender] = strval(amount);

        if(PlayerData[userid][pGender] == 1) SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's "WHITE"gender to "LIGHTBLUE"male.", ReturnAdminName(playerid), ReturnName(userid, 0));
        else if(PlayerData[userid][pGender] == 2) SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's "WHITE"gender to "LIGHTBLUE"female.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    if(!strcmp(type, "status", true))
    {
        if(strval(amount) < 0 || strval(amount) > 2)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [status] [0: Single - 1: Dating - 2: Married]");

        PlayerData[userid][pStatus] = strval(amount);
        if(strval(amount) == 0) 
        {
            PlayerData[userid][pPartnerID] = 0;
            mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `PartnerName` = 'None' WHERE ID = %d", PlayerData[userid][pID]));
        }
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's "WHITE"relationship status.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    if(!strcmp(type, "love", true))
    {
        if(isnull(amount) || strval(amount) < 0 || strval(amount) > 100)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [love]");

        SetPlayerLove(userid, strval(amount));

        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's "WHITE"love rate to "LIGHTBLUE"%d.", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    else if(!strcmp(type, "mechaniclevel", true))
    {
        if (CheckAdmin(playerid, 8))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [mechaniclevel] [1-4]");

        if(!(0 < strval(amount) <= 4))
            return SendErrorMessage(playerid, "Level dibatasi mulai dari level 1 sampai 4!");

        new mechanic_exp[] = {0, 500, 2500, 5000};

        SetMechanicLevel(userid, (strval(amount) - 1));
        SetMechanicEXP(userid, mechanic_exp[(strval(amount) - 1)]);

        UpdateCharacterInt(userid, "MechanicLevel", GetMechanicLevel(userid));
        UpdateCharacterInt(userid, "MechanicEXP", GetMechanicEXP(userid));

        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's"WHITE" mechanic to "LIGHTBLUE"level %d.", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    else if(!strcmp(type, "takedrivinglic", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pDrivingLicense] = 0;
        PlayerData[userid][pDrivingLicenseExpired] = 0;
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have remove "YELLOW"%s's"WHITE" driving licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "idcard", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pIDCardExpired] = (gettime()+((24*3600)*30));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's"WHITE" id card expiration.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "drivinglic", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pDrivingLicense] = 1;
        PlayerData[userid][pDrivingLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's"WHITE" driving licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "takeblslic", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pBLSLicense] = 0;
        PlayerData[userid][pBLSLicenseExpired] = 0;
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have remove "YELLOW"%s's"WHITE" BLS licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "blslic", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pBLSLicense] = 1;
        PlayerData[userid][pBLSLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's"WHITE" BLS licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "taketrucklic", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pTruckLicense] = 0;
        PlayerData[userid][pTruckLicenseExpired] = 0;
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have remove "YELLOW"%s's"WHITE" trucker licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "trucklic", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pTruckLicense] = 1;
        PlayerData[userid][pTruckLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's"WHITE" trucker licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "businesslic", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pBusinessLicense] = 1;
        PlayerData[userid][pBusinessLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's"WHITE" business licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "takebusinesslic", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pBusinessLicense] = 0;
        PlayerData[userid][pBusinessLicenseExpired] = 0;
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have remove "YELLOW"%s's"WHITE" business licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "workshoplic", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pWorkshopLicense] = 1;
        PlayerData[userid][pWorkshopLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s's"WHITE" workshop licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "takeworkshoplic", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);

        PlayerData[userid][pWorkshopLicense] = 0;
        PlayerData[userid][pWorkshopLicenseExpired] = 0;
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have take "YELLOW"%s's"WHITE" workshop licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "level", true))
    {
        if(CheckAdmin(playerid, 8))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [level]");

        PlayerData[userid][pScore] = strval(amount);
        SetPlayerScore(userid, PlayerData[userid][pScore]);
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s"WHITE" to "LIGHTBLUE"level %d", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    else if(!strcmp(type, "birthdate", true))
    {
        if(isnull(amount) || strlen(amount) > 24)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [birthdate] [birth date]");

        format(PlayerData[userid][pBirthdate], 24, amount);

        SendClientMessageEx(userid, X11_FOREST_GREEN, "Your birthdate has been set to \"%s\" by Admin %s", amount, ReturnAdminName(playerid));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s"WHITE" birthdate to "LIGHTBLUE"%s", ReturnAdminName(playerid), ReturnName(userid, 0), amount);
    }
    else if(!strcmp(type, "origin", true))
    {
        if(isnull(amount) || strlen(amount) > 32)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [origin] [new origin]");

        format(PlayerData[userid][pOrigin], 32, amount);
        SendClientMessageEx(userid, X11_FOREST_GREEN, "Your origin has been set to \"%s\" by Admin %s", amount, ReturnAdminName(playerid));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s"WHITE" origin to "LIGHTBLUE"%s", ReturnAdminName(playerid), ReturnName(userid, 0), amount);
    }
    else if(!strcmp(type, "bank", true))
    {
        if(CheckAdmin(playerid, 8))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [bank] [bank funds]");

        PlayerData[userid][pBankMoney] = strval(amount);

        SendServerMessage(playerid, "You have set %s's bank money to %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s"WHITE" bank account to "LIGHTBLUE"%s", ReturnAdminName(playerid), ReturnName(userid, 0), FormatNumber(strval(amount)));
    }
    else if(!strcmp(type, "hepeng", true))
    {
        if(CheckAdmin(playerid, 8))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [hepeng] [money]");

        GiveMoney(userid, strval(amount)); // TODO: Apakah hepeng akan memengaruhi economy server?
        SendServerMessage(playerid, "You have give %s's money for %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
    }
    else if(!strcmp(type, "playinghours", true))
    {
        if(CheckAdmin(playerid, 8))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [playinghours] [amount]");

        PlayerData[userid][pHour] = strval(amount);
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s"WHITE" playing hours to "LIGHTBLUE"%d", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    else if(!strcmp(type, "paycheck", true))
    {
        if(CheckAdmin(playerid, 8))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [paycheck] [amount]");

        PlayerData[userid][pPlayingHours] = strval(amount);
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s"WHITE" paycheck to "LIGHTBLUE"%d", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    else if(!strcmp(type, "job", true))
    {
        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [job] [amount]");

        if(strval(amount) < 0 || strval(amount) > 11)
            return SendErrorMessage(playerid, "You have specified an invalid job ID.");

        PlayerData[userid][pJob] = strval(amount);
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s"WHITE" job to "LIGHTBLUE"%s", ReturnAdminName(playerid), ReturnName(userid, 0), Job_GetName(PlayerData[userid][pJob]));
    }
    else if(!strcmp(type, "warrants", true))
    {
        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [warrants] [amount]");

        PlayerData[userid][pWarrants] = strval(amount);
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s"WHITE" warrants to "LIGHTBLUE"%s", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    else if(!strcmp(type, "channel", true))
    {
        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [channel] [radio channel]");

        PlayerData[userid][pChannel] = strval(amount);
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s"WHITE" radio channel to "LIGHTBLUE"%s", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    else if(!strcmp(type, "wooddelay", true))
    {
        PlayerData[userid][pWoodDelay] = 0;
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have reset "YELLOW"%s"WHITE" wood courier delay", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "phonenumber", true))
    {
        if (CheckAdmin(playerid, 8))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [phonenumber] [number]");

        PlayerData[userid][pPhone] = strval(amount);
        SendAdminMessage(X11_CYAN_1, "[SETPLAYER]: "RED"%s "WHITE"have set "YELLOW"%s"WHITE" phone number to %d", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    Log_Save(E_LOG_SET_PLAYER, sprintf("[%s] %s sets %s of %s for %s.", ReturnDate(), ReturnName(playerid), type, ReturnName(userid), amount));
    Discord_Log(SETPLAYERLOG, sprintf("[%s] %s sets %s of %s for %s.", ReturnDate(), ReturnName(playerid), type, ReturnName(userid), amount));
    return 1;
}

/*CMD:factionmod(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/factionmod [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(PlayerData[userid][pFactionMod])
    {
        PlayerData[userid][pFactionMod] = false;

        SendAdminAction(playerid, "You have taken away %s's faction management status.", ReturnName(userid, 0));
        SendAdminAction(userid, "%s has kicked you from the faction management team.", ReturnName(playerid, 0));
    }
    else
    {
        PlayerData[userid][pFactionMod] = true;

        SendAdminAction(playerid, "You have invited %s to the faction management team.", ReturnName(userid, 0));
        SendAdminAction(userid, "%s has invited you to the faction management team.", ReturnName(playerid, 0));
    }
    return 1;
}*/
Dialog:NRPName(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!IsValidRoleplayName(inputtext))    
            return Dialog_Show(playerid, NRPName, DIALOG_STYLE_INPUT, "Change Name", "[ERROR] Kamu harus masukan nama roleplay!", "Change", "Close");

        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character` = '%s';", inputtext), "OnNRPNameChange", "ds", playerid, inputtext);

    }
    else
    {
        if(NameCounter[playerid] < 5)
        {
            Dialog_Show(playerid, NRPName, DIALOG_STYLE_INPUT, "Change Name", "[ERROR] Kamu harus masukan nama baru!", "Change", "Close");
            NameCounter[playerid]++;
        }
        else return Kick(playerid);
    }
    return 1;
}
CMD:nrn(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new targetid;
    if(sscanf(params, "d", targetid))
        return SendSyntaxMessage(playerid, "/nrn [playerid]");

    if(targetid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "Player tersebut tidak login ke server!.");

    if(!SQL_IsCharacterLogged(targetid))
        return SendErrorMessage(playerid, "Player tersebut belum spawn kedalam server!.");
    
    new playername[35], targetname[35];
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerName(targetid, targetname, sizeof(targetname));

    SendAdminMessage(COLOR_WHITE, ""RED"[Admin] "YELLOW"%s "WHITE"Telah memberikan Changename dialog kepada "RED"%s", playername, targetname);
    Dialog_Show(targetid, NRPName, DIALOG_STYLE_INPUT, "Change Name","Nama kamu tidak roleplay, kamu harus ganti nama!", "Change", "Close");

    return 1;
}

CMD:setname(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    new userid, newname[24];


    if(sscanf(params, "us[24]", userid, newname))
        return SendSyntaxMessage(playerid, "/setname [playerid/PartOfName] [new name]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "Player tersebut tidak login ke server!.");

    if(!SQL_IsCharacterLogged(userid))
        return SendErrorMessage(playerid, "Player tersebut belum spawn kedalam server!.");

    if(!IsValidRoleplayName(newname))
        return SendErrorMessage(playerid, "Gunakan nama berformat roleplay.");

    mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character` = '%s';", newname), "OnNameChange", "dds", playerid, userid, newname);
    return 1;
}

CMD:createhouse(playerid, params[])
{
    static
        price,
        id,
        type,
        address[32];

    if (CheckAdmin(playerid, 9))
        return PermissionError(playerid);

    if(sscanf(params, "dds[32]", type, price, address))
    {
        SendSyntaxMessage(playerid, "/createhouse [interior type] [price] [house address]");

        static str[84];
        for (new i = 0; i < sizeof(arrHouseInteriors); i++)
        {
            format(str, sizeof(str), "%d: %s", i, arrHouseInteriors[i][eHouseDesc]);
            SendClientMessage(playerid, X11_GREY_80, str);
        }

        return 1;
    }

    if(type < 0 || type > 13) return SendErrorMessage(playerid, "The specified interior must be between 0 - 13.");
    if(price < 0) return SendErrorMessage(playerid, "Price can't under zero.");

    for (new i = 0; i != MAX_HOUSES; i ++) if(HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], address, true)) {
        return SendErrorMessage(playerid, "The address \"%s\" is already in use (ID: %d).", address, i);
    }

    if((id = House_Create(playerid, price, address, type)) == -1) return SendErrorMessage(playerid, "The server has reached the limit for houses.");

    SendServerMessage(playerid, "You have successfully created house ID: %d.", id);
    return 1;
}

CMD:destroyhouse(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyhouse [house id]");

    if((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
        return SendErrorMessage(playerid, "You have specified an invalid house ID.");

    House_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed house ID: %d.", id);
    return 1;
}

CMD:bizcmds(playerid, params[])
{
    SendClientMessage(playerid, COLOR_CLIENT, "BUSINESSES:"WHITE" /buy, /bm /abandon, /lock, /refillgas, /bshipment.");
    return 1;
}

CMD:housecmds(playerid, params[])
{
    SendClientMessage(playerid, COLOR_CLIENT, "HOUSES:"WHITE" /buy, /abandon, /lock, /storage, /furniture.");
    SendClientMessage(playerid, COLOR_CLIENT, "HOUSES:"WHITE" /doorbell, /switch.");
    return 1;
}
/*
CMD:buymats(playerid, params[])
    return cmd_buymaterials(playerid, params);
*/
/*CMD:blackmarketlock(playerid, params[])
{
    new hour, minute, second;
    gettime(hour, minute, second);

    if(PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "On duty can't access blackmarket.");

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2164.0056,-246.5920,36.5156))
        return SendErrorMessage(playerid, "You're not in blackmarket.");

    if (CheckAdmin(playerid, 4))
    {
        switch(hour)
        {
            case 0 .. 5, 8 .. 10: ShowCategories(playerid);
            default: SendErrorMessage(playerid, "Blackmarket is close, open on 00:00 - 05:00 or 08:00 - 10:00.");
        }
    }
    else ShowCategories(playerid);
    return 1;
}*/

CMD:addcategory(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    Dialog_Show(playerid, BM_Category, DIALOG_STYLE_INPUT, "Add Category", "Inser name of category", "Create", "Close");
    return 1;
}

CMD:removecategory(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    ShowCategories(playerid, 1);
    return 1;
}

CMD:renamecategory(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    ShowCategories(playerid, 2);
    return 1;
}

CMD:addweapon(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    ShowWeaponList(playerid);
    return 1;
}

CMD:removeweapon(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    ShowCategories(playerid, 4);
    return 1;
}

CMD:buy(playerid, params[])
{
    static
        id = -1;

    if((id = ApartmentRoom_Nearest(playerid)) != INVALID_APARTMENT_ROOM)
    {
        if(ApartmentRoom_GetCount(playerid) >= MAX_PLAYER_APARTMENT)
            return SendErrorMessage(playerid, "You can only own %d apartments at a time.", MAX_PLAYER_APARTMENT);

        if(ApartmentRoomData[id][apartmentRoomPrice] > GetMoney(playerid))
            return SendErrorMessage(playerid, "You dont have enough money to afford this apartment!");

        if(ApartmentRoomData[id][apartmentRoomOwner] != INVALID_ROOM_OWNER)
            return SendErrorMessage(playerid, "This apartment is already owned by someone else!");
        
        ApartmentRoomData[id][apartmentRoomOwner] = GetPlayerSQLID(playerid);
        format(ApartmentRoomData[id][apartmentRoomOwnerName], 32, "%s", NormalName(playerid));

        GiveMoney(playerid, -ApartmentRoomData[id][apartmentRoomPrice], ECONOMY_ADD_SUPPLY, "bought apartment");
        SendServerMessage(playerid, "You have purchased this apartment for %s!", FormatNumber(ApartmentRoomData[id][apartmentRoomPrice]));
        ShowPlayerFooter(playerid, "You have ~g~purchased~w~ an apartment!");

        ApartmentRoom_Sync(id);
        ApartmentRoom_Save(id);

        Log_Save(E_LOG_APARTMENT, sprintf("[%s] %s has purchased apartment ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(ApartmentRoomData[id][apartmentRoomPrice])));
    }
    else if((id = Vending_GetInside(playerid)) != INVALID_VENDING_ID)
    {
        if(Vending_GetCount(playerid) >= MAX_OWNABLE_VENDING)
            return SendErrorMessage(playerid, "You can only own %d vending machine at a time.", MAX_OWNABLE_VENDING);

        new
            after_inflation = Economy_GetAmountAfterInflation(VendingData[id][vendPrice])
        ;

        if(after_inflation > GetMoney(playerid))
            return SendErrorMessage(playerid, "You dont have enough money to afford this vending machine!");

        if(VendingData[id][vendOwner] != INVALID_OWNER_ID)
            return SendErrorMessage(playerid, "This vending machine is already owned by someone else!");
        
        VendingData[id][vendOwner] = GetPlayerSQLID(playerid);
        format(VendingData[id][vendOwnerName], 32, "%s", NormalName(playerid));

        GiveMoney(playerid, -after_inflation, ECONOMY_ADD_SUPPLY, "bought vending mechine");
        SendServerMessage(playerid, "You have purchased this vending machine for %s!", FormatNumber(after_inflation));
        ShowPlayerFooter(playerid, "You have ~g~purchased~w~ a vending machine!");
        Vending_Save(id);

        Log_Save(E_LOG_VENDING_MACHINE, sprintf("[%s] %s has purchased vending machine ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(after_inflation)));

    }
    else if((id = House_Nearest(playerid)) != -1)
    {
        if(GetAdminLevel(playerid) >= 8)
        {
            if(House_GetCount(playerid) >= MAX_OWNABLE_HOUSES+1)
                return SendErrorMessage(playerid, "You can only own %d houses at a time.", MAX_OWNABLE_HOUSES+1);
        }
        else
        {
            if(House_GetCount(playerid) >= MAX_OWNABLE_HOUSES && GetPlayerVIPLevel(playerid) < 4)
                return SendErrorMessage(playerid, "You can only own %d houses at a time.", MAX_OWNABLE_HOUSES);

            else if(House_GetCount(playerid) >= MAX_OWNABLE_HOUSES+1)
                return SendErrorMessage(playerid, "You can only own %d houses at a time.", MAX_OWNABLE_HOUSES+1);
        }

        new
            price = HouseData[id][housePrice],
            after_inflation_price = Economy_GetAmountAfterInflation(price)
        ;

        if(HouseData[id][houseOwner] != 0)
            return SendErrorMessage(playerid, "This house is already owned at the moment.");

        if(after_inflation_price > GetMoney(playerid))
            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

        HouseData[id][houseOwner] = GetPlayerSQLID(playerid);
        HouseData[id][houseLastVisited] = gettime();
        format(HouseData[id][houseOwnerName],32,"%s", NormalName(playerid));

        House_Refresh(id);
        House_Save(id);

        GiveMoney(playerid, -after_inflation_price, ECONOMY_ADD_SUPPLY, "bought house");
        SendServerMessage(playerid, "You have purchased \"%s\" for %s!", HouseData[id][houseAddress], FormatNumber(after_inflation_price));

        ShowPlayerFooter(playerid, "You have ~g~purchased~w~ a house!");
        Log_Save(E_LOG_HOUSE, sprintf("[%s] %s has purchased house ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(after_inflation_price)));
    }
    else if((id = Business_Nearest(playerid)) != -1)
    {
        if(!PlayerData[playerid][pBusinessLicenseExpired])
            return SendErrorMessage(playerid, "You don't have business licenses.");

        if(GetAdminLevel(playerid) >= 8)
        {
            if(Business_GetCount(playerid) >= MAX_OWNABLE_BUSINESSES+1)
                return SendErrorMessage(playerid, "You can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES+1);
        }
        else
        {
            if(Business_GetCount(playerid) >= MAX_OWNABLE_BUSINESSES && GetPlayerVIPLevel(playerid) < 4)
                return SendErrorMessage(playerid, "You can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES);

            else if(Business_GetCount(playerid) >= MAX_OWNABLE_BUSINESSES+1)
                return SendErrorMessage(playerid, "You can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES+1);
        }

        new
            price = BusinessData[id][bizPrice],
            after_inflation_price = Economy_GetAmountAfterInflation(price)
        ;

        if(BusinessData[id][bizOwner] != 0)
            return SendErrorMessage(playerid, "This business is already owned at the moment.");

        if(after_inflation_price > GetMoney(playerid))
            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

        BusinessData[id][bizOwner] = GetPlayerSQLID(playerid);
        format(BusinessData[id][bOwnerName],25,"%s",NormalName(playerid));

        Business_Refresh(id);
        Business_Save(id);

        GiveMoney(playerid, -after_inflation_price, ECONOMY_ADD_SUPPLY, "bought business");
        SendServerMessage(playerid, "You have purchased \"%s\" for %s!", BusinessData[id][bizName], FormatNumber(after_inflation_price));

        ShowPlayerFooter(playerid, "You have ~g~purchased~w~ a business!");
        Log_Save(E_LOG_BUSINESS, sprintf("[%s] %s has purchased business ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(after_inflation_price)));
    }
    else if((id = Workshop_Nearest(playerid)) != -1)
    {
        if(!PlayerData[playerid][pWorkshopLicenseExpired])
            return SendErrorMessage(playerid, "That player don't have workshop licenses.");

        if(GetAdminLevel(playerid) >= 8)
        {
            if(Workshop_GetCount(playerid) >= MAX_OWNABLE_WORKSHOP+1)
                return SendErrorMessage(playerid, "You can only own %d workshop at a time.", MAX_OWNABLE_WORKSHOP+1);
        }
        else {
            if(Workshop_GetCount(playerid) >= MAX_OWNABLE_WORKSHOP && GetPlayerVIPLevel(playerid) < 4)
                return SendErrorMessage(playerid, "You can only own %d workshop at a time.", MAX_OWNABLE_WORKSHOP);
            else if(Workshop_GetCount(playerid) >= MAX_OWNABLE_WORKSHOP+1)
                return SendErrorMessage(playerid, "You can only own %d workshop at a time.", MAX_OWNABLE_WORKSHOP+1);
        }

        new
            price = WorkshopData[id][wPrice],
            after_inflation_price = Economy_GetAmountAfterInflation(price)
        ;

        if(WorkshopData[id][wOwner] != 0)
            return SendErrorMessage(playerid, "This workshop is already owned at the moment.");

        if(after_inflation_price > GetMoney(playerid))
            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

        WorkshopData[id][wOwner] = GetPlayerSQLID(playerid);
        format(WorkshopData[id][wText], 128, "Owned by %s", NormalName(playerid));

        Workshop_Refresh(id);
        Workshop_Save(id);

        GiveMoney(playerid, -after_inflation_price, ECONOMY_ADD_SUPPLY, "bought workshop");
        SendServerMessage(playerid, "You have purchased \"%s\" for %s!", WorkshopData[id][wName], FormatNumber(after_inflation_price));

        ShowPlayerFooter(playerid, "You have ~g~purchased~w~ a workshop!");
    }
    else if((id = Business_Inside(playerid)) != -1)
    {
        if(BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner])
            return SendErrorMessage(playerid, "This business is closed!");

        if(Business_EmployeeDuty(id))
            return SendErrorMessage(playerid, "There is an employee currently working, go interact with them!");

        if(BusinessData[id][bizType] == 5) 
        {

        }
        else
        {
            if(PlayerTemp[playerid][temp_selecttextdraw])
                return 0;
                
            // if(Actor_Nearest(playerid) == -1)
            //     return SendErrorMessage(playerid, "You are not near the cashier or business actor!");

            SetPVarInt(playerid, "OfferedPlayerID", INVALID_PLAYER_ID);
            Business_PurchaseMenu(playerid, id);
        }
    }
    else if(GetPlayerInterior(playerid) == 7 && IsPlayerInRangeOfPoint(playerid, 3.0, 308.1450,-140.9854,999.6016))
    {
        //buy weapon menu's

        Dialog_Show(playerid, AmmunationDialog, DIALOG_STYLE_LIST, "Ammunation", "Buy weapon\nBuy ammo", "Select", "Close");
    }
    return 1;
}
//

/*stock const g_buyWeapon[][] =
{
    //weapon id     price       name
    {23,            1000},      //silenced
    {24,            2000},      //desert eagle
    {25,            3000},      //shotgun
    {27,            4000},      //combat shotgun
    {29,            5000},      //mp 5
    {30,            6000},      //ak-47
    {33,            7000},      //rifle
    {34,            8000}      //sniper rifle
};

Dialog:AmmunationDialog(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                new list_weapon[255];

                strcat(list_weapon, "Weapon\tPrice\n");
                for(new i = 0; i != sizeof(g_buyWeapon); i++) {
                    strcat(list_weapon, sprintf("%s\t%s\n", ReturnWeaponName(g_buyWeapon[i][0]), FormatNumber(g_buyWeapon[i][1])));
                }
                Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_TABLIST_HEADERS, "Buy Weapon", list_weapon, "Select", "Back");
            }
            case 1:
            {
                Dialog_Show(playerid, BuyAmmo, DIALOG_STYLE_LIST, "Buy Ammo", "-", "Select", "Back");
            }
        }
    }
    return 1;
}

Dialog:BuyWeapon(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(GetMoney(playerid) < g_buyWeapon[listitem][1])
            return SendErrorMessage(playerid, "Uang yang Kamu miliki tidak mencukupi untuk membeli %s.", ReturnWeaponName(g_buyWeapon[listitem][0]));

        new id = AddWeaponItem(playerid, strval(inputtext), 500);

        if(id == -1)
            return SendErrorMessage(playerid, "Tidak ada slot yang tersedia untukmu.");

        SendServerMessage(playerid, "Anda telah membeli "COL_LIGHTBLUE"%s "WHITE"dengan "YELLOW"%d "WHITE"durability untuk "COL_GREEN"%s "WHITE"(/myweapons).", ReturnWeaponName(g_buyWeapon[listitem][0]), 500, FormatNumber(g_buyWeapon[listitem][1]));
        GiveMoney(playerid, -g_buyWeapon[listitem][1]);
    }
    else Dialog_Show(playerid, AmmunationDialog, DIALOG_STYLE_LIST, "Ammunation", "Buy weapon\nBuy ammo", "Select", "Close");
    return 1;
}*/
//

CMD:abandon(playerid, params[])
{
    static
        id = -1;

    if(!IsPlayerInAnyVehicle(playerid) && (id = ApartmentRoom_Nearest(playerid)) != -1 && ApartmentRoom_IsOwned(playerid, id))
    {
        if(isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
        {
            SendSyntaxMessage(playerid, "/abandon [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" You are about to abandon your apartment with no refund.");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" Including money, gun in your apartment.");
        }
        else if(!strcmp(params, "confirm", true))
        {
            ApartmentRoomData[id][apartmentRoomOwner] = -1;
            format(ApartmentRoomData[id][apartmentRoomOwnerName], 32, "The State");

            Apartment_RemoveAllItems(id);
            ApartmentRoom_Sync(id);
            ApartmentRoom_Save(id);

            SendServerMessage(playerid, "You have abandoned your apartment: %s.", ApartmentRoomData[id][apartmentRoomName]);
            Log_Save(E_LOG_APARTMENT, sprintf("[%s] %s has abandoned apartment ID: %d.", ReturnDate(), ReturnName(playerid), id));
        }
    }
    else if(!IsPlayerInAnyVehicle(playerid) && (id = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, id, false))
    {
        if(isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
        {
            SendSyntaxMessage(playerid, "/abandon [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" You are about to abandon your house with no refund.");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" Including money, gun in your house.");
        }
        else if(!strcmp(params, "confirm", true))
        {
            HouseData[id][houseOwner] = 0;

            // mysql_tquery(g_iHandle, sprintf("UPDATE server_vehicles SET `house_parking`='-1',`state`='%d' WHERE `house_parking`='%d';", VEHICLE_STATE_SPAWNED , HouseData[id][houseID]));
            // Vehicle_PlayerLoad(playerid);

            House_RemoveAllItems(id);
            House_Refresh(id);
            House_Save(id);

            RemoveAllHouseKey(id);

            SendServerMessage(playerid, "You have abandoned your house: %s.", HouseData[id][houseAddress]);
            Log_Save(E_LOG_HOUSE, sprintf("[%s] %s has abandoned house ID: %d.", ReturnDate(), ReturnName(playerid), id));
        }
    }
    else if(!IsPlayerInAnyVehicle(playerid) && (id = Workshop_Nearest(playerid)) != -1 && WorkshopData[id][wOwner] == GetPlayerSQLID(playerid))
    {
        if(isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
        {
            SendSyntaxMessage(playerid, "/abandon [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" You are about to abandon your workshop with no refund.");
        }
        else if(!strcmp(params, "confirm", true))
        {
            if(WorkshopData[id][wSeal]) return SendErrorMessage(playerid, "Can't abandon sealed propery.");
            WorkshopData[id][wOwner] = 0;
            WorkshopData[id][wComponent] = 0;
            WorkshopData[id][wVault] = 0;

            Workshop_Refresh(id);
            Workshop_Save(id);

            SendServerMessage(playerid, "You have abandoned your workshop: %s.", WorkshopData[id][wName]);
        }
    }
    else if(!IsPlayerInAnyVehicle(playerid) && (id = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, id))
    {
        if(isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
        {
            SendSyntaxMessage(playerid, "/abandon [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" You are about to abandon your business with no refund.");
        }
        else if(!strcmp(params, "confirm", true))
        {
            if(BusinessData[id][bizSeal]) return SendErrorMessage(playerid, "Can't abandon sealed propery.");
            BusinessData[id][bizOwner] = 0;
            BusinessData[id][bizVault] = 0;

            Business_Refresh(id);
            Business_Save(id);

            SendServerMessage(playerid, "You have abandoned your business: %s.", BusinessData[id][bizName]);
            Log_Save(E_LOG_BUSINESS, sprintf("[%s] %s has abandoned business ID: %d.", ReturnDate(), ReturnName(playerid), id));
        }
    }
    else SendErrorMessage(playerid, "You are not in range of anything you can abandon.");
    return 1;
}

CMD:switch(playerid, params[])
{
    static
        id = -1;

    if((id = House_Inside(playerid)) != -1)
    {
        if(House_IsOwner(playerid, id))
        {
            if(HouseData[id][houseLights])
            {
                foreach (new i : Player) if(House_Inside(i) == id) {
                    PlayerTextDrawShow(i, PlayerTextdraws[i][textdraw_switch]);
                }
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s flicks the light switch off.", ReturnName(playerid, 0));
                HouseData[id][houseLights] = false;
            }
            else
            {
                foreach (new i : Player) if(House_Inside(i) == id) {
                    PlayerTextDrawHide(i, PlayerTextdraws[i][textdraw_switch]);
                }
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s flicks the light switch on.", ReturnName(playerid, 0));
                HouseData[id][houseLights] = true;
            }
            return 1;
        }
        SendErrorMessage(playerid, "You must be in your house to manage the house lights.");
        return 1;
    }
    SendErrorMessage(playerid, "You must be in a house to use the lights.");
    return 1;
}

CMD:lock(playerid, params[])
{
    static
        id = -1;

    if(!IsPlayerInAnyVehicle(playerid) && (id = (ApartmentRoom_Inside(playerid) == -1) ? (ApartmentRoom_Nearest(playerid)) : (ApartmentRoom_Inside(playerid))) != -1)
    {
        if(ApartmentRoom_IsOwned(playerid, id))
        {
            if(!ApartmentRoomData[id][apartmentRoomLock])
            {
                ApartmentRoomData[id][apartmentRoomLock] = 1;
                ApartmentRoom_Save(id);

                ShowPlayerFooter(playerid, "You have ~r~locked~w~ your apartment!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
            else
            {
                ApartmentRoomData[id][apartmentRoomLock] = 0;
                ApartmentRoom_Save(id);

                ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ your apartment!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
        }
    }
    else if(!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
    {
        if(House_IsOwner(playerid, id))
        {
            if(!HouseData[id][houseLocked])
            {
                HouseData[id][houseLocked] = true;
                House_Save(id);

                ShowPlayerFooter(playerid, "You have ~r~locked~w~ your house!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
            else
            {
                HouseData[id][houseLocked] = false;
                House_Save(id);

                ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ your house!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
        }
    }
    else if(!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
    {
        if(Business_IsOwner(playerid, id))
        {
            if(!BusinessData[id][bizLocked])
            {
                BusinessData[id][bizLocked] = true;

                Business_Refresh(id);
                Business_Save(id);

                ShowPlayerFooter(playerid, "You have ~r~locked~w~ the business!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
            else
            {
                BusinessData[id][bizLocked] = false;

                Business_Refresh(id);
                Business_Save(id);

                ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ the business!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
        }
    }
    else SendErrorMessage(playerid, "You are not in range of anything you can lock.");
    return 1;
}

CMD:sell(playerid, params[])
{
    new
        targetid,
        type[24],
        string[128];

    if(sscanf(params, "us[24]S()[128]", targetid, type, string))
    {
        SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" house, business, workshop, vending, apartment");
        return 1;
    }
    if(targetid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, targetid, 5.0)) return SendErrorMessage(playerid, "The player is disconnected or not near you.");
    if(PlayerData[targetid][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(targetid == playerid) return SendErrorMessage(playerid, "You cannot sell to yourself.");


    if(!strcmp(type, "apartment", true))
    {
        static
            price,
            index = -1;

        if(ApartmentRoom_GetCount(targetid) >= MAX_PLAYER_APARTMENT)
            return SendErrorMessage(playerid, "That player can only own %d apartment at a time.", MAX_PLAYER_APARTMENT);

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [apartment] [price]");

        if(price < 1)
            return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

        if((index = ApartmentRoom_Nearest(playerid)) != -1 && ApartmentRoom_IsOwned(playerid, index)) {
            PlayerData[targetid][pApartmentSeller] = playerid;
            PlayerData[targetid][pApartmentOffered] = index;
            PlayerData[targetid][pApartmentValue] = price;

            SendServerMessage(playerid, "You have requested %s to purchase your apartment (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s has offered you their apartment room for %s (type \"/approve apartment\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
            return 1;
        }
        else SendErrorMessage(playerid, "You are not in range of any of your apartment.");
    }
    else if(!strcmp(type, "vending", true))
    {
        static
            price,
            index = -1;

        if(Vending_GetCount(targetid) >= MAX_OWNABLE_VENDING)
            return SendErrorMessage(playerid, "That player can only own %d vending machine at a time.", MAX_OWNABLE_VENDING);

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [vending] [price]");

        if(price < 1)
            return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

        if((index = Vending_Nearest(playerid)) != -1 && Vending_IsOwned(playerid, index)) {
            PlayerData[targetid][pVendingSeller] = playerid;
            PlayerData[targetid][pVendingOffered] = index;
            PlayerData[targetid][pVendingValue] = price;

            SendServerMessage(playerid, "You have requested %s to purchase your vending machine (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s has offered you their vending machine for %s (type \"/approve vending\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
            return 1;
        }
        else SendErrorMessage(playerid, "You are not in range of any of your vending.");
    }
    else if(!strcmp(type, "house", true))
    {
        static
            price,
            houseid = -1;

        if(GetAdminLevel(targetid) >= 8)
        {
            if(House_GetCount(targetid) >= MAX_OWNABLE_HOUSES+1)
                return SendErrorMessage(playerid, "That player can only own %d houses at a time.", MAX_OWNABLE_HOUSES+1);
        }
        else
        {
            if(House_GetCount(targetid) >= MAX_OWNABLE_HOUSES && GetPlayerVIPLevel(targetid) < 4)
                return SendErrorMessage(playerid, "That player can only own %d houses at a time.", MAX_OWNABLE_HOUSES);

            else if(House_GetCount(targetid) >= MAX_OWNABLE_HOUSES+1)
                return SendErrorMessage(playerid, "That player can only own %d houses at a time.", MAX_OWNABLE_HOUSES+1);
        }

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [house] [price]");

        if(price < 1)
            return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

        if((houseid = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, houseid, false)) {
            PlayerData[targetid][pHouseSeller] = playerid;
            PlayerData[targetid][pHouseOffered] = houseid;
            PlayerData[targetid][pHouseValue] = price;

            SendServerMessage(playerid, "You have requested %s to purchase your house (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s has offered you their house for %s (type \"/approve house\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
            return 1;
        }
        else SendErrorMessage(playerid, "You are not in range of any of your houses.");
    }
    else if(!strcmp(type, "business", true))
    {
        static
            price,
            bizid = -1;

        if(!PlayerData[targetid][pBusinessLicenseExpired])
            return SendErrorMessage(playerid, "That player don't have business licenses.");

        if(GetAdminLevel(targetid) >= 8)
        {
            if(Business_GetCount(targetid) >= MAX_OWNABLE_BUSINESSES+1)
                return SendErrorMessage(playerid, "That player can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES+1);
        }
        else
        {
            if(Business_GetCount(targetid) >= MAX_OWNABLE_BUSINESSES && GetPlayerVIPLevel(targetid) < 4)
                return SendErrorMessage(playerid, "That player can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES);

            else if(Business_GetCount(targetid) >= MAX_OWNABLE_BUSINESSES+1)
                return SendErrorMessage(playerid, "That player can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES+1);
        }

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [business] [price]");

        if(price < 1)
            return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

        if((bizid = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, bizid)) {
            if(BusinessData[bizid][bizSeal]) return SendErrorMessage(playerid, "Can't sell sealed property.");
            PlayerData[targetid][pBusinessSeller] = playerid;
            PlayerData[targetid][pBusinessOffered] = bizid;
            PlayerData[targetid][pBusinessValue] = price;

            SendServerMessage(playerid, "You have requested %s to purchase your business (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s has offered you their business for %s (type \"/approve business\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
            return 1;
        }
        SendErrorMessage(playerid, "You are not in range of any of your businesses.");
    }
    else if(!strcmp(type, "workshop", true))
    {
        static
            price,
            ws = -1;

        if(!PlayerData[targetid][pWorkshopLicenseExpired])
            return SendErrorMessage(playerid, "That player don't have workshop licenses.");

        if(AccountData[targetid][pAdmin] < 1)
        {
            if(Workshop_GetCount(targetid) >= MAX_OWNABLE_WORKSHOP)
                return SendErrorMessage(playerid, "That player can only own %d workshop at a time.", MAX_OWNABLE_WORKSHOP);
        }
        else {
            if(Workshop_GetCount(targetid) >= MAX_OWNABLE_WORKSHOP+1)
                return SendErrorMessage(playerid, "That player can only own %d workshop at a time.", MAX_OWNABLE_WORKSHOP+1);
        }

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [workshop] [price]");

        if(price < 1)
            return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

        if((ws = Workshop_Nearest(playerid)) != -1 && Workshop_IsOwner(playerid, ws)) {
            if(WorkshopData[ws][wSeal]) return SendErrorMessage(playerid, "Can't sell sealed property.");
            PlayerData[targetid][pWorkshopSeller] = playerid;
            PlayerData[targetid][pWorkshopOffered] = ws;
            PlayerData[targetid][pWorkshopValue] = price;

            SendServerMessage(playerid, "You have requested %s to purchase your workshop (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s has offered you their workshop for %s (type \"/approve workshop\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
            return 1;
        }
        SendErrorMessage(playerid, "You are not in range of any of your workshop.");
    }
    return 1;
}

CMD:approve(playerid, params[])
{
    if(isnull(params))
    {
        SendSyntaxMessage(playerid, "/approve [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" house, business, workshop, car, vending, apartment");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" food, faction, greet, frisk, body, stnk, inspect");
        return 1;
    }
    if(!strcmp(params, "car", true) && PlayerData[playerid][pCarSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pCarSeller],
            vehicleid = PlayerData[playerid][pCarOffered],
            price = PlayerData[playerid][pCarValue],
            housevehicleslot = House_CountVehicleSlot(playerid);

        if(GetPlayerVIPLevel(playerid) > 2)
        {
            
            if(Vehicle_PlayerTotalCount(playerid) >= MAX_VIP_VEHICLES+housevehicleslot)
                return SendErrorMessage(playerid, "Kendaraanmu sudah mencapai batas maksimal.");
        }
        else
        {
            if(Vehicle_PlayerTotalCount(playerid) >= MAX_PLAYER_VEHICLES+housevehicleslot)
                return SendErrorMessage(playerid, "Kendaraanmu sudah mencapai batas maksimal.");
        }

        if(!IsPlayerNearPlayer(playerid, sellerid, 5.0))
            return SendErrorMessage(playerid, "Kamu tidak dekat dengan player yang menjual kendaraan!.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "Uang tidak mencukupi!.");

        if(Vehicle_Nearest(playerid, 5) != VehicleData[vehicleid][vehVehicleID])
            return SendErrorMessage(playerid, "Harus dekat dengan kendaraan yang dijual.");

        if(!Vehicle_IsOwned(sellerid, vehicleid))
            return SendErrorMessage(playerid, "This vehicle offer is no longer valid.");

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        SendServerMessage(playerid, "Sukses membeli kendaraan "CYAN"%s "WHITE"milik "YELLOW"%s "WHITE"seharga "GREEN"%s.", GetVehicleNameByModel(VehicleData[vehicleid][vehModel]), ReturnName(sellerid, 0), FormatNumber(price));
        SendServerMessage(sellerid, ""YELLOW"%s "WHITE"sukses membeli "CYAN"%s "WHITE"milikmu seharga "GREEN"%s.", ReturnName(playerid, 0), GetVehicleNameByModel(VehicleData[vehicleid][vehModel]), FormatNumber(price));

        Iter_Remove(OwnedVehicles<sellerid>, vehicleid);
        Vehicle_SetOwner(playerid, vehicleid);
        Vehicle_ExecuteInt(vehicleid, "extraid", GetPlayerSQLID(playerid));

        Log_Save(E_LOG_OFFER_VEH, sprintf("[%s] %s (%s) has sold a %s to %s (%s) for %s.", ReturnDate(), ReturnName(sellerid, 0), AccountData[sellerid][pIP], GetVehicleNameByModel(VehicleData[vehicleid][vehModel]), ReturnName(playerid, 0), AccountData[playerid][pIP], FormatNumber(price)));

        PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pCarOffered] = -1;
        PlayerData[playerid][pCarValue] = 0;
    }
    if(!strcmp(params, "apartment", true) && PlayerData[playerid][pApartmentSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pApartmentSeller],
            index = PlayerData[playerid][pApartmentOffered],
            price = PlayerData[playerid][pApartmentValue];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this apartment.");

        if(ApartmentRoom_Nearest(playerid) != index)
            return SendErrorMessage(playerid, "You must be near the apartment room to purchase it.");

        if(!ApartmentRoom_IsOwned(sellerid, index))
            return SendErrorMessage(playerid, "This apartment offer is no longer valid.");

        SendServerMessage(playerid, "You have successfully purchased %s's apartment for %s.", ReturnName(sellerid, 0), FormatNumber(price));
        SendServerMessage(sellerid, "%s has successfully purchased your apartment for %s.", ReturnName(playerid, 0), FormatNumber(price));

        format(ApartmentRoomData[index][apartmentRoomOwnerName], MAX_PLAYER_NAME, NormalName(playerid));
        ApartmentRoomData[index][apartmentRoomOwner] = GetPlayerSQLID(playerid);

        ApartmentRoom_Sync(index);
        ApartmentRoom_Save(index);

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        Log_Write("logs/offer_log.txt", "[%s] %s (%s) has sold a apartment to %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(sellerid, 0), AccountData[sellerid][pIP], FormatNumber(price));

        PlayerData[playerid][pVendingSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pVendingOffered] = -1;
        PlayerData[playerid][pVendingValue] = 0;
    }
    if(!strcmp(params, "vending", true) && PlayerData[playerid][pVendingSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pVendingSeller],
            index = PlayerData[playerid][pVendingOffered],
            price = PlayerData[playerid][pVendingValue];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this vending machine.");

        if(Vending_Nearest(playerid) != index)
            return SendErrorMessage(playerid, "You must be near the vending machine to purchase it.");

        if(!Vending_IsOwned(sellerid, index))
            return SendErrorMessage(playerid, "This vending machine offer is no longer valid.");

        SendServerMessage(playerid, "You have successfully purchased %s's vending machine for %s.", ReturnName(sellerid, 0), FormatNumber(price));
        SendServerMessage(sellerid, "%s has successfully purchased your vending machine for %s.", ReturnName(playerid, 0), FormatNumber(price));

        format(VendingData[index][vendOwnerName], MAX_PLAYER_NAME, NormalName(playerid));
        VendingData[index][vendOwner] = GetPlayerSQLID(playerid);

        Vending_Save(index);

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        Log_Save(E_LOG_OFFER, sprintf("[%s] %s (%s) has sold a vending machine to %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(sellerid, 0), AccountData[sellerid][pIP], FormatNumber(price)));

        PlayerData[playerid][pVendingSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pVendingOffered] = -1;
        PlayerData[playerid][pVendingValue] = 0;
    }
    if(!strcmp(params, "house", true) && PlayerData[playerid][pHouseSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pHouseSeller],
            houseid = PlayerData[playerid][pHouseOffered],
            price = PlayerData[playerid][pHouseValue];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this house.");

        if(House_Nearest(playerid) != houseid)
            return SendErrorMessage(playerid, "You must be near the house to purchase it.");

        if(!House_IsOwner(sellerid, houseid, false))
            return SendErrorMessage(playerid, "This house offer is no longer valid.");

        SendServerMessage(playerid, "You have successfully purchased %s's house for %s.", ReturnName(sellerid, 0), FormatNumber(price));
        SendServerMessage(sellerid, "%s has successfully purchased your house for %s.", ReturnName(playerid, 0), FormatNumber(price));

        // mysql_tquery(g_iHandle, sprintf("UPDATE server_vehicles SET `house_parking`='-1',`state`='%d' WHERE `house_parking`='%d';", VEHICLE_STATE_SPAWNED , HouseData[houseid][houseID]));
        // Vehicle_PlayerLoad(sellerid);

        format(HouseData[houseid][houseOwnerName], MAX_PLAYER_NAME, NormalName(playerid));
        HouseData[houseid][houseOwner] = GetPlayerSQLID(playerid);
        HouseData[houseid][houseLastVisited] = gettime();

        House_Save(houseid);
        House_Refresh(houseid);

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        RemoveAllHouseKey(houseid);

        Log_Save(E_LOG_OFFER, sprintf("[%s] %s (%s) has sold a house to %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(sellerid, 0), AccountData[sellerid][pIP], FormatNumber(price)));

        PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pHouseOffered] = -1;
        PlayerData[playerid][pHouseValue] = 0;
    }
    if(!strcmp(params, "business", true) && PlayerData[playerid][pBusinessSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pBusinessSeller],
            bizid = PlayerData[playerid][pBusinessOffered],
            price = PlayerData[playerid][pBusinessValue];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this business.");

        if(Business_Nearest(playerid) != bizid)
            return SendErrorMessage(playerid, "You must be near the business to purchase it.");

        if(!Business_IsOwner(sellerid, bizid))
            return SendErrorMessage(playerid, "This business offer is no longer valid.");

        SendServerMessage(playerid, "You have successfully purchased %s's business for %s.", ReturnName(sellerid, 0), FormatNumber(price));
        SendServerMessage(sellerid, "%s has successfully purchased your business for %s.", ReturnName(playerid, 0), FormatNumber(price));

        format(BusinessData[bizid][bOwnerName], MAX_PLAYER_NAME, NormalName(playerid));
        BusinessData[bizid][bizOwner] = GetPlayerSQLID(playerid);

        Business_Save(bizid);
        Business_Refresh(bizid);

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        Log_Save(E_LOG_OFFER, sprintf("[%s] %s (%s) has sold a business to %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(sellerid, 0), AccountData[sellerid][pIP], FormatNumber(price)));

        PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pBusinessOffered] = -1;
        PlayerData[playerid][pBusinessValue] = 0;
    }
    if(!strcmp(params, "workshop", true) && PlayerData[playerid][pWorkshopSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pWorkshopSeller],
            ws = PlayerData[playerid][pWorkshopOffered],
            price = PlayerData[playerid][pWorkshopValue];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this workshop.");

        if(Workshop_Nearest(playerid) != ws)
            return SendErrorMessage(playerid, "You must be near the workshop to purchase it.");

        if(!Workshop_IsOwner(sellerid, ws))
            return SendErrorMessage(playerid, "This business offer is no longer valid.");

        SendServerMessage(playerid, "You have successfully purchased %s's workshop for %s.", ReturnName(sellerid, 0), FormatNumber(price));
        SendServerMessage(sellerid, "%s has successfully purchased your workshop for %s.", ReturnName(playerid, 0), FormatNumber(price));

        WorkshopData[ws][wOwner] = GetPlayerSQLID(playerid);
        WorkshopData[ws][wComponent] = 0;
        WorkshopData[ws][wVault] = 0;

        Workshop_Save(ws);

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        PlayerData[playerid][pWorkshopSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pWorkshopOffered] = -1;
        PlayerData[playerid][pWorkshopValue] = 0;
    }
    if(!strcmp(params, "faction", true) && PlayerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pFactionOffer],
            factionid = PlayerData[playerid][pFactionOffered];

        if(!FactionData[factionid][factionExists] || PlayerData[targetid][pFactionRank] < FactionData[PlayerData[targetid][pFaction]][factionRanks] - 1)
            return SendErrorMessage(playerid, "The faction offer is no longer available.");

        SetFaction(playerid, factionid);
        PlayerData[playerid][pFactionRank] = 1;

        SendServerMessage(playerid, "You have accepted %s's offer to join \"%s\".", ReturnName(targetid, 0), Faction_GetName(targetid));
        SendServerMessage(targetid, "%s has accepted your offer to join \"%s\".", ReturnName(playerid, 0), Faction_GetName(targetid));

        PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFactionOffered] = -1;
    }
    if(!strcmp(params, "greet", true) && PlayerData[playerid][pShakeOffer] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pShakeOffer],
            type = PlayerData[playerid][pShakeType];

        if(!IsPlayerNearPlayer(playerid, targetid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        SetPlayerToFacePlayer(playerid, targetid);
        SetPlayerToFacePlayer(targetid, playerid);

        PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pShakeType] = 0;

        switch (type)
        {
            case 1:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 2:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 3:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 4:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 5:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 6:
            {
                ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
            }
        }
        SendServerMessage(playerid, "You have accepted %s's handshake.", ReturnName(targetid, 0));
        SendServerMessage(targetid, "%s has accepted your handshake.", ReturnName(playerid, 0));
    }
    if(!strcmp(params, "frisk", true) && PlayerData[playerid][pFriskOffer] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pFriskOffer];

        if(!IsPlayerNearPlayer(playerid, targetid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        Player_Item(targetid, playerid);
        PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
    }
    if(!strcmp(params, "examine", true) && PlayerData[playerid][pAcceptInspect] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pAcceptInspect];

        if(!IsPlayerNearPlayer(playerid, targetid, 5.0)) return SendErrorMessage(playerid, "Anda tidak berada di dekat player tersebut.");
        CheckCondition(targetid, playerid);

        PlayerData[playerid][pAcceptInspect] = INVALID_PLAYER_ID;
    }
    return 1;
}
CMD:storage(playerid, params[])
{
    static
        houseid = -1;
    if((houseid = House_Inside(playerid)) != -1) 
    {
        if(House_IsOwner(playerid, houseid))
        {
            House_OpenStorage(playerid, houseid);
        }
        return 1;
    }
    SendErrorMessage(playerid, "You are not in range of your house interior.");
    return 1;
}

CMD:checkstorage(playerid, params[])
{
    if(GetAdminLevel(playerid) < 5 && GetFactionType(playerid) != FACTION_POLICE)
        return PermissionError(playerid);

    if(GetAdminLevel(playerid) < 5 && GetFactionType(playerid) == FACTION_POLICE && !IsPlayerDuty(playerid))
        return SendErrorMessage(playerid, "Duty terlebih dahulu!");

    static
        id = -1;

    if((id = House_Inside(playerid)) != -1) House_OpenStorage(playerid, id);
    else if((id = Business_Nearest(playerid)) != -1)
    {
        if(CheckAdmin(playerid, 5))
            return SendErrorMessage(playerid, "You are not in range of your house interior.");

        SendServerMessage(playerid, "Business money: "GREEN"%s.", FormatNumber(BusinessData[id][bizVault]));
    }
    else SendErrorMessage(playerid, "You are not in range of your house interior.");
    return 1;
}

CMD:edithouse(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 9))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/edithouse [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, intworld, interior, price, address, type, lock, resetstorage, parkslot");
        return 1;
    }
    if((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
        return SendErrorMessage(playerid, "You have specified an invalid house ID.");

    if(!strcmp(type, "location", true))
    {
        GetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
        GetPlayerFacingAngle(playerid, HouseData[id][housePos][3]);

        HouseData[id][houseExterior] = GetPlayerInterior(playerid);
        HouseData[id][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

        House_Refresh(id);
        House_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of house ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "intworld", true))
    {
        GetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
        GetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

        HouseData[id][houseInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
        {
            if(PlayerData[i][pHouse] == HouseData[id][houseID])
            {
                SetPlayerPosEx(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
                SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

                SetPlayerInterior(i, HouseData[id][houseInterior]);
                SetCameraBehindPlayer(i);
            }
        }
        House_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the interior spawn of house ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "parkslot", true))
    {
        new parkslot;

        if(sscanf(string, "d", parkslot))
            return SendSyntaxMessage(playerid, "/edithouse [id] [slot]");

        HouseData[id][houseParkingSlot] = parkslot;

        House_Refresh(id);
        House_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the park slot of house ID: %d to %d.", ReturnName(playerid, 0), id, parkslot);
    }
    else if(!strcmp(type, "price", true))
    {
        new price;

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/edithouse [id] [price] [new price]");

        HouseData[id][housePrice] = price;

        House_Refresh(id);
        House_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the price of house ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
    }
    else if(!strcmp(type, "address", true))
    {
        new address[32];

        if(sscanf(string, "s[32]", address))
            return SendSyntaxMessage(playerid, "/edithouse [id] [address] [new address]");

        format(HouseData[id][houseAddress], 32, address);

        House_Refresh(id);
        House_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the address of house ID: %d to \"%s\".", ReturnName(playerid, 0), id, address);
    }
    else if(!strcmp(type, "lock", true))
    {
        new lockid;

        if(sscanf(string, "d", lockid))
            return SendSyntaxMessage(playerid, "/edithouse [id] [lock] [0/1]");

        HouseData[id][houseLocked] = lockid;
        SendServerMessage(playerid, "You've %s this house.", HouseData[id][houseLocked] ? ("locked") : ("unlock"));
    }
    else if(!strcmp(type, "resetstorage", true))
    {
        House_RemoveAllItems(id);
        SendServerMessage(playerid, "You've reset house storage id %d.", id);
        Log_Save(E_LOG_RESET_STORAGE, sprintf("[%s] %s (%s) mereset storage rumah index %d.", ReturnDate(), ReturnAdminName(playerid), AccountData[playerid][pIP], id));
    }
    else if(!strcmp(type, "interior", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint))
            return SendSyntaxMessage(playerid, "/edithouse [id] [interior] [interior: /goto houseint]");

        if(typeint < 0 || typeint > 13)
            return SendErrorMessage(playerid, "The specified interior must be between 0 - 13.");

        HouseData[id][houseInt][0] = arrHouseInteriors[typeint][eHouseX];
        HouseData[id][houseInt][1] = arrHouseInteriors[typeint][eHouseY];
        HouseData[id][houseInt][2] = arrHouseInteriors[typeint][eHouseZ];
        HouseData[id][houseInt][3] = arrHouseInteriors[typeint][eHouseAngle];
        HouseData[id][houseInterior] = arrHouseInteriors[typeint][eHouseInterior];

        foreach (new i : Player) if(PlayerData[i][pHouse] == HouseData[id][houseID])
        {
            SetPlayerPosEx(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
            SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

            SetPlayerInterior(i, HouseData[id][houseInterior]);
            SetCameraBehindPlayer(i);
        }
        House_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the interior of house ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
    }
    return 1;
}


CMD:nearesthouse(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = House_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near house "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestbiz(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Business_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near business "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestentrance(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Entrance_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near entrance "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestjob(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Job_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near job "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestarrest(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Arrest_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near arrest "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestgarbage(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Garbage_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near garbage "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestspeed(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Speed_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near speedcam "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestobjecttext(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = ObjectText_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near objecttext "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestdealer(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Dealership_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near dealer "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestworkshop(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Workshop_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near workshop "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestbasement(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Underground_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near basement "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestmarketplace(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Marketplace_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near marketplace "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearesttags(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Tags_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near tags "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}

CMD:nearestatm(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = ATM_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near atm "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat atm manapun apapun!");

    return 1;
}

CMD:nearestpump(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Pump_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near pump "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat property apapun!");

    return 1;
}
CMD:nearestanimal(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Animal_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near animal "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat animal apapun!");

    return 1;
}
CMD:nearestlumber(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        id = -1;

    if((id = Lumber_Nearest(playerid)) != -1) SendServerMessage(playerid, "You are standing near lumber "YELLOW"ID: %d.", id);
    else SendServerMessage(playerid, "Kamu tidak berada didekat lumber apapun!");

    return 1;
}

CMD:givelicenses(playerid, params[])
{
    new userid, opsi[10], string[128];

    if(GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "You're not a member of Goverment.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3);
    if(sscanf(params, "us[10]S()[128]", userid, opsi, string)) return SendSyntaxMessage(playerid, "/givelicenses [playerid/PartOfName] [business/workshop]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 3.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't give yourself a license.");

    if(!strcmp(opsi, "business", true)) {
        if(PlayerData[userid][pBusinessLicenseExpired]) return SendErrorMessage(playerid, "That player already has a business license.");
        PlayerData[userid][pBusinessLicense] = 1;
        PlayerData[userid][pBusinessLicenseExpired] = (gettime()+((24*3600)*30));
        SendCustomMessage(playerid, "LICENSE","You've gave business license to "YELLOW"%s.", ReturnName(userid, 0));
        SendCustomMessage(userid, "LICENSE",""YELLOW"%s "WHITE"has given a business license. valid until "COL_GREEN"%s.", ReturnName(playerid, 0), ConvertTimestamp(Timestamp:PlayerData[userid][pBusinessLicenseExpired]));
        Log_Save(E_LOG_LICENSE, sprintf("[%s] %s (%s) has given business license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]));
    }
    else if(!strcmp(opsi, "workshop", true)) {
        if(PlayerData[userid][pWorkshopLicenseExpired]) return SendErrorMessage(playerid, "That player already has a workshop license.");
        PlayerData[userid][pWorkshopLicense] = 1;
        PlayerData[userid][pWorkshopLicenseExpired] = (gettime()+((24*3600)*30));
        SendCustomMessage(playerid, "LICENSE","You've gave workshop license to "YELLOW"%s.", ReturnName(userid, 0));
        SendCustomMessage(userid, "LICENSE",""YELLOW"%s "WHITE"has given a workshop license. valid until "COL_GREEN"%s.", ReturnName(playerid, 0), ConvertTimestamp(Timestamp:PlayerData[userid][pWorkshopLicenseExpired]));
        Log_Save(E_LOG_LICENSE, sprintf("[%s] %s (%s) has given workshop license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]));
    }
    else SendSyntaxMessage(playerid, "/givelicenses [playerid/PartOfName] [business/workshop]");
    return 1;
}

CMD:unseal(playerid, params[])
{
    static
        id;

    if(GetFactionType(playerid) == FACTION_GOV && PlayerData[playerid][pOnDuty])
    {
        if((id = Business_Nearest(playerid)) != -1) if(BusinessData[id][bizSeal])
        {
            BusinessData[id][bizSeal] = 0;
            SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been unsealed this business.", ReturnName2(playerid,1));

            Business_Refresh(id);
            Business_Save(id);
        }
        else SendErrorMessage(playerid, "This business already to unseal");

        if((id = Workshop_Nearest(playerid)) != -1) if(WorkshopData[id][wSeal])
        {
            WorkshopData[id][wSeal] = 0;
            WorkshopData[id][wToggle] = 1;
            SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been unsealed this workshop.", ReturnName2(playerid,1));

            Workshop_Refresh(id);
            Workshop_Save(id);
        }
        else SendErrorMessage(playerid, "This workshop already to unseal");
    }
    else if(GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pOnDuty])
    {
        if((id = House_Nearest(playerid)) != -1) if(HouseData[id][houseSeal])
        {
            HouseData[id][houseSeal] = 0;
            SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "SEAL: %s have been unsealed this workshop.", ReturnName2(playerid,1));

            House_Refresh(id);
            House_Save(id);
        }
        else SendErrorMessage(playerid, "This workshop already to unseal");
    }

    return 1;
}

CMD:seal(playerid, params[])
{
    static
        id;

    if(GetFactionType(playerid) == FACTION_GOV && PlayerData[playerid][pOnDuty])
    {

        if((id = Business_Nearest(playerid)) != -1) if(!BusinessData[id][bizSeal])
        {
            BusinessData[id][bizSeal] = 1;
            SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been sealed this business.", ReturnName2(playerid,1));

            Business_Refresh(id);
            Business_Save(id);
        }
        else SendErrorMessage(playerid, "This business already to seal");

        if((id = Workshop_Nearest(playerid)) != -1) if(!WorkshopData[id][wSeal])
        {
            WorkshopData[id][wSeal] = 1;
            WorkshopData[id][wToggle] = 0;
            SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been sealed this workshop.", ReturnName2(playerid,1));

            Workshop_Refresh(id);
            Workshop_Save(id);
        }
        else SendErrorMessage(playerid, "This Workshop already to seal");
    }
    else if(GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pOnDuty])
    {
        if((id = House_Nearest(playerid)) != -1) if(!HouseData[id][houseSeal])
        {
            HouseData[id][houseSeal] = 1;
            SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "SEAL: %s have been sealed this business.", ReturnName2(playerid,1));

            House_Refresh(id);
            House_Save(id);
        }        
    }
    return 1;
}

CMD:createbiz(playerid, params[])
{
    static
        type,
        price,
        id;

    if (CheckAdmin(playerid, 9))
        return PermissionError(playerid);

    if(sscanf(params, "dd", type, price))
    {
        SendSyntaxMessage(playerid, "/createbiz [type] [price]");
        SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Dealership | 6: Gas Station | 7: Furniture | 8: Electronic Store | 9: Bar.");
        return 1;
    }
    if(type < 1 || type > 9)
        return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 9.");

    if(type == 5)
        return SendErrorMessage(playerid, "This type is locked for a moment.");

    id = Business_Create(playerid, type, price);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for businesses.");

    SendServerMessage(playerid, "You have successfully created business ID: %d.", id);
    return 1;
}

CMD:editbiz(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 9))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editbiz [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, interior, deliver, name, price, stock, type, cars, spawn, lock");
        return 1;
    }
    if((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
        return SendErrorMessage(playerid, "You have specified an invalid business ID.");

    if(!strcmp(type, "location", true))
    {
        GetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
        GetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3]);

        BusinessData[id][bizExterior] = GetPlayerInterior(playerid);
        BusinessData[id][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

        Business_Refresh(id);
        Business_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of business ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "interior", true))
    {
        GetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
        GetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

        BusinessData[id][bizInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
        {
            if(PlayerData[i][pBusiness] == BusinessData[id][bizID])
            {
                SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
                SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

                SetPlayerInterior(i, BusinessData[id][bizInterior]);
                SetCameraBehindPlayer(i);
            }
        }
        Business_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the interior spawn of business ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "deliver", true))
    {
        if(BusinessData[id][bizType] == 5)
            return SendErrorMessage(playerid, "This business doesn't accept deliveries.");

        if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
            return SendErrorMessage(playerid, "You can only place the delivery point outside interiors.");

        GetPlayerPos(playerid, BusinessData[id][bizDeliver][0], BusinessData[id][bizDeliver][1], BusinessData[id][bizDeliver][2]);
        Business_Refresh(id);

        Business_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the deliver point of business ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "price", true))
    {
        new price;

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/editbiz [id] [price] [new price]");

        BusinessData[id][bizPrice] = price;

        Business_Refresh(id);
        Business_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the price of business ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
    }
    else if(!strcmp(type, "lock", true))
    {
        new lock;

        if(sscanf(string, "d", lock))
            return SendSyntaxMessage(playerid, "/editbiz [id] [lock] [0/1]");

        BusinessData[id][bizLocked] = lock;
        SendServerMessage(playerid, "You've %s this business.", BusinessData[id][bizLocked] ? ("locked") : ("unlock"));
    }
    else if(!strcmp(type, "stock", true))
    {
        new amount;

        if(sscanf(string, "d", amount))
            return SendSyntaxMessage(playerid, "/editbiz [id] [stock] [product amount]");

        BusinessData[id][bizProducts] = amount;

        Business_Refresh(id);
        Business_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the static of business ID: %d to %s products.", ReturnName(playerid, 0), id, FormatNumber(amount, ""));
    }
    else if(!strcmp(type, "name", true))
    {
        new name[32];

        if(sscanf(string, "s[32]", name))
            return SendSyntaxMessage(playerid, "/editbiz [id] [name] [new name]");

        format(BusinessData[id][bizName], 32, name);

        Business_Refresh(id);
        Business_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the name of business ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
    }
    else if(!strcmp(type, "type", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint))
        {
            SendSyntaxMessage(playerid, "/editbiz [id] [type] [business type]");
            SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 1: Retail | 2: Ammunation | 3: Clothes | 4: Fast Food | 5: Dealership | 6: Gas Station | 7: Furniture | 8: Electronic Store | 9: Bar");
            return 1;
        }
        if(typeint < 1 || typeint > 9)
            return SendErrorMessage(playerid, "The specified type must be between 1 and 9.");

        if(typeint == 5)
            return SendErrorMessage(playerid, "Dealership move to new system, /dealermenu");

        BusinessData[id][bizType] = typeint;

        switch (typeint) {
            case 1: {
                BusinessData[id][bizInt][0] = -27.3074;
                BusinessData[id][bizInt][1] = -30.8741;
                BusinessData[id][bizInt][2] = 1003.5573;
                BusinessData[id][bizInt][3] = 0.0000;
                BusinessData[id][bizInterior] = 4;
            }
            case 2: {
                BusinessData[id][bizInt][0] = 316.3963;
                BusinessData[id][bizInt][1] = -169.8375;
                BusinessData[id][bizInt][2] = 999.6010;
                BusinessData[id][bizInt][3] = 0.0000;
                BusinessData[id][bizInterior] = 6;
            }
            case 3: {
                BusinessData[id][bizInt][0] = 161.4801;
                BusinessData[id][bizInt][1] = -96.5368;
                BusinessData[id][bizInt][2] = 1001.8047;
                BusinessData[id][bizInt][3] = 0.0000;
                BusinessData[id][bizInterior] = 18;
            }
            case 4: {
                BusinessData[id][bizInt][0] = 363.3402;
                BusinessData[id][bizInt][1] = -74.6679;
                BusinessData[id][bizInt][2] = 1001.5078;
                BusinessData[id][bizInt][3] = 315.0000;
                BusinessData[id][bizInterior] = 10;
            }
            case 5: {
                BusinessData[id][bizInt][0] = 1494.5612;
                BusinessData[id][bizInt][1] = 1304.2061;
                BusinessData[id][bizInt][2] = 1093.2891;
                BusinessData[id][bizInt][3] = 0.0000;
                BusinessData[id][bizInterior] = 3;
            }
            case 6: {
                BusinessData[id][bizInt][0] = -27.3383;
                BusinessData[id][bizInt][1] = -57.6909;
                BusinessData[id][bizInt][2] = 1003.5469;
                BusinessData[id][bizInt][3] = 0.0000;
                BusinessData[id][bizInterior] = 6;
            }
            case 7: {
                BusinessData[id][bizInt][0] = -2240.4954;
                BusinessData[id][bizInt][1] = 128.3774;
                BusinessData[id][bizInt][2] = 1035.4210;
                BusinessData[id][bizInt][3] = 270.0000;
                BusinessData[id][bizInterior] = 6;
            }
        }
        foreach (new i : Player)
        {
            if(PlayerData[i][pBusiness] == BusinessData[id][bizID])
            {
                SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
                SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

                SetPlayerInterior(i, BusinessData[id][bizInterior]);
                SetCameraBehindPlayer(i);
            }
        }
        Business_Refresh(id);

        Business_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the type of business ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
    }
    return 1;
}

CMD:bizstate(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/bizstate [biz id]");

    if((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
        return SendErrorMessage(playerid, "You have specified an invalid business ID.");

    BusinessData[id][bizOwner] = 99999999;

    Business_Refresh(id);
    Business_Save(id);

    SendServerMessage(playerid, "This business is now owned by the state.", id);
    return 1;
}

CMD:destroybiz(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroybiz [biz id]");

    if((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
        return SendErrorMessage(playerid, "You have specified an invalid business ID.");

    Business_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed business ID: %d.", id);
    return 1;
}
IsNearDropItemModel(playerid, model)
{
    new itemid = -1;
    if((itemid = Item_Nearest(playerid)) != -1 && DroppedItems[itemid][droppedModel] == model && IsPlayerInRangeOfPoint(playerid, 2.0, DroppedItems[itemid][droppedPos][0], DroppedItems[itemid][droppedPos][1], DroppedItems[itemid][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[itemid][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[itemid][droppedWorld])
        return 1;

    return 0;
}
CMD:cook(playerid, params[])
{
    new 
        houseid = House_Inside(playerid), 
        insideRV = GetPlayerVirtualWorld(playerid),
        apartid = ApartmentRoom_Inside(playerid)
    ;

    if(PlayerData[playerid][pTied])
        return SendErrorMessage(playerid, "Kamu di ikat, lepas dulu ikatan baru gunakan perintah ini");

    if(PlayerData[playerid][pCuffed])
        return SendErrorMessage(playerid, "Tangan sedang diborgol, tidak dapat menggunakan perintah ini!.");

    if(PlayerData[playerid][pCuffed])
        return SendErrorMessage(playerid, "Kamu dalam kondisi injured, tidak dapat menggunakan perintah ini!.");

    if(PlayerData[playerid][pCooking])
        return SendErrorMessage(playerid, "Kamu sedang memasak.");
    
    if(IsNearDropItemModel(playerid, 19632) || houseid != -1 || insideRV > MIN_VIRTUAL_WORLD || apartid != -1)
    {
        if(isnull(params))
            return SendSyntaxMessage(playerid, "/cook [burger/pizza/fish]");

        if(!strcmp(params, "burger", true))
        {
            if(!Inventory_HasItem(playerid, "Frozen Burger"))
                return SendErrorMessage(playerid, "Kamu tidak memiliki (Frozen Burger).");

            PlayerData[playerid][pCooking] = 1;
            PlayerData[playerid][pCookingTime] = 20;
            PlayerData[playerid][pCookingHouse] = houseid;
            PlayerData[playerid][pCookingApart] = apartid;    
            
            Inventory_Remove(playerid, "Frozen Burger");
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s prepares cooking equipment and heats up a frozen burger (20 seconds).", ReturnName(playerid, 0));
        }
        else if(!strcmp(params, "pizza", true))
        {
            if(!Inventory_HasItem(playerid, "Frozen Pizza"))
                return SendErrorMessage(playerid, "Kamu tidak memiliki (Frozen Pizza).");

            PlayerData[playerid][pCooking] = 2;
            PlayerData[playerid][pCookingTime] = 55;
            PlayerData[playerid][pCookingHouse] = houseid;
            PlayerData[playerid][pCookingApart] = apartid;                
            
            Inventory_Remove(playerid, "Frozen Pizza");
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s prepares cooking equipment and heats up a frozen pizza (55 seconds).", ReturnName(playerid, 0));
        }
        else if(!strcmp(params, "fish", true))
        {
            cmd_myfish(playerid, "\0");
        }
    }
    else SendErrorMessage(playerid, "Perintah ini hanya dapat dilakukan didalam rumah atau di dalam RV.");
    return 1;
}

CMD:vest(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
        return SendErrorMessage(playerid, "You can't use this command now.");

    if(!Inventory_HasItem(playerid, "Armored Vest"))
        return SendErrorMessage(playerid, "You don't have an armored vest.");

    if(GetArmour(playerid) > 49)
        return SendErrorMessage(playerid, "You already have a full vest on.");

    SetArmour(playerid, 50.0);

    Inventory_Remove(playerid, "Armored Vest");
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out a kevlar vest and puts it on.", ReturnName(playerid, 0));
    return 1;
}

CMD:board(playerid, params[])
{
    static
        text[128];

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must in faction member to use this command");

    if(PlayerData[playerid][pFactionRank] < 2)
        return SendErrorMessage(playerid, "You must rank 2 to manage this board");

    if(sscanf(params,"s[128]",text))
        return SendSyntaxMessage(playerid,"/board [text]");

    if(strval(text) > 128)
        return SendErrorMessage(playerid, "Text length is too long maximum is 128 character's.");

    FixText(text);

    if(GetFactionType(playerid) == FACTION_GOV)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 4,284.399,1915.851,908.906))
            return SendErrorMessage(playerid, "You're not in range of and board");

        SetDynamicObjectMaterialText(board[1], 0, ColouredText(text), 130, "Ariel", 30, 1, -1, -16777216, 1);
    }
    if(GetFactionType(playerid) == FACTION_NEWS)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 4,701.3701,-1372.0260,500.2203))
            return SendErrorMessage(playerid, "You're not in range of any board");

        SetDynamicObjectMaterialText(board[2], 0, ColouredText(text), 130, "Ariel", 30, 1, -1, -16777216, 1);
    }
    else if(GetFactionType(playerid) == FACTION_POLICE)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 4,2320.6140,732.3339,1013.5460))
            return SendErrorMessage(playerid, "You're not in range of any board");

        SetDynamicObjectMaterialText(board[0], 0, ColouredText(text), 130, "Ariel", 33, 1, -1, -16777216, 1);
    }
    else
        return SendErrorMessage(playerid, "This faction don't have board");
    return 1;
}


CMD:createobjecttext(playerid, params[])
{
    static
        text[128],
        backcolor,
        fontcolor,
        Float:x,
        Float:y,
        Float:z,
        Float:angle,
        id;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params,"hhs[128]", fontcolor, backcolor,text))
    {
        SendSyntaxMessage(playerid, "/createobjecttext [font color (0xFFFFFFFF)] [back color (0xFFFFFFFF)] [name]");
        SendSyntaxMessage(playerid, "For name you can use format '\n' (new line) '\t' (new tab)");
        return 1;
    }

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, angle);

    x += 1.5 * floatsin(-angle, degrees);
    y += 1.5 * floatcos(-angle, degrees);

    if(strlen(text) > 128)
        return SendErrorMessage(playerid, "The name to long, maximum character is 128.");

    id = ObjectText_Create(playerid, ColouredText(text), x, y, z, 0, 0, 0, fontcolor, backcolor);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for object.");

    EditDynamicObject(playerid, ObjectData[id][objectText]);
    PlayerData[playerid][pEditTextObject] = id;
    PlayerData[playerid][pEditingMode] = OBJECTTEXT;
    SendServerMessage(playerid, "You have successfully created object ID: %d", id);
    return 1;
}

CMD:destroyobjecttext(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyobjecttext [object id]");

    if((id < 0 || id >= MAX_TEXTOBJECT) || !ObjectData[id][oExists])
        return SendErrorMessage(playerid, "You have specified an invalid object ID.");

    ObjectText_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed object ID: %d.", id);
    return 1;
}

CMD:editobjecttext(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editobjecttext [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" position, name, fontcolor, backcolor, duplicate, fontsize, font, model");
        return 1;
    }
    if((id < 0 || id >= MAX_TEXTOBJECT) || !ObjectData[id][oExists])
        return SendErrorMessage(playerid, "You have specified an invalid object text ID.");

    if(!strcmp(type, "position", true))
    {
        EditDynamicObject(playerid, ObjectData[id][objectText]);
        PlayerData[playerid][pEditingMode] = OBJECTTEXT;
        PlayerData[playerid][pEditTextObject] = id;
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s now edit object text ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "name", true))
    {
        new name[128];
        if(sscanf(string,"s[128]", name))
            return SendSyntaxMessage(playerid, "/editobjecttext [id] [name] [text]");

        FixText(name);
        format(ObjectData[id][oText], 255, ColouredText(name));
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has edited name of object text ID: %d.", ReturnName(playerid, 0), id);
        ObjectText_Refresh(id);
    }
    else if(!strcmp(type, "fontcolor", true))
    {
        new hax;
        if(sscanf(string,"h", hax))
            return SendSyntaxMessage(playerid, "/editobjecttext [id] [fontcolor] [hax color]");

        ObjectData[id][oFontColor] = hax;
        ObjectText_Refresh(id);
    }
    else if(!strcmp(type, "fontsize", true))
    {
        SetPVarInt(playerid, "FontSizes",id);

        for (new i = 0, j = sizeof(FontSizes); i < j; i++)
        {
            format(string,sizeof(string),"%s%s\n",string,FontSizes[i][1]);
        }
        Dialog_Show(playerid, FontSizes, DIALOG_STYLE_LIST, "FontSize", string, "Select","Close");
    }
    else if(!strcmp(type, "font", true))
    {
        SetPVarInt(playerid, "FontNames",id);
        Dialog_Show(playerid, FontNames, DIALOG_STYLE_LIST, "Font Name's", object_font, "Select","Close");
    }
    else if(!strcmp(type, "model", true))
    {
        new textModel[256];

        SetPVarInt(playerid, "ObjectList",id);

        for (new i = 0, j = sizeof(ObjectList); i < j; i++)
        {
            strcat(textModel, sprintf("%d\t%s\n", ObjectList[i][0], ObjectList[i][1]));
        }
        Dialog_Show(playerid, ObjectList, DIALOG_STYLE_LIST, "Object's Model", textModel, "Select","Close");
    }
    else if(!strcmp(type, "backcolor", true))
    {
        SetPVarInt(playerid, "BackColor",id);
        Dialog_Show(playerid, WarnaBelakang, DIALOG_STYLE_LIST,"BackColor","Custom Color\nAvailable Color\nTransparant","Next","Close");
    }
    else if(!strcmp(type, "duplicate", true))
    {
        new name[128], ids;
        if(sscanf(string,"s[128]", name))
            return SendSyntaxMessage(playerid, "/editobjecttext [id] [duplicate] [name]");

        if(strlen(name) > 128)
            return SendErrorMessage(playerid, "The name to long, maximum character is 128.");

        ids = ObjectText_Create(playerid, ColouredText(name), ObjectData[id][oPos][0], ObjectData[id][oPos][1], ObjectData[id][oPos][2], ObjectData[id][oPos][3], ObjectData[id][oPos][4], ObjectData[id][oPos][5], ObjectData[id][oFontColor], ObjectData[id][oBackColor]);

        if(ids == -1)
            return SendErrorMessage(playerid, "The server has reached the limit for object.");

        EditDynamicObject(playerid, ObjectData[ids][objectText]);
        PlayerData[playerid][pEditTextObject] = ids;
        PlayerData[playerid][pEditingMode] = OBJECTTEXT;
        SendServerMessage(playerid, "You have successfully created object ID: %d.", ids);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has duplicate object text ID: %d, new object text (id %d).", ReturnName(playerid, 0), id, ids);
    }
    return 1;
}
CMD:objecttextid(playerid, params[])
{
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);


    static
        id;
    if((id = ObjectText_Nearest(playerid)) != -1)

    {
        SendServerMessage(playerid, "You are standing near Object Text ID: %d.", id);
    }
    return 1;
}

CMD:createentrance(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(isnull(params) || strlen(params) > 32)
        return SendSyntaxMessage(playerid, "/createentrance [name]");

    new id = Entrance_Create(playerid, ColouredText(params));

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for entrances.");

    SendServerMessage(playerid, "You have successfully created entrance ID: %d.", id);
    return 1;
}

CMD:editentrance(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editentrance [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, interior, password, name, locked, type, custom, virtual, vehable");
        return 1;
    }
    if((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
        return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

    if(!strcmp(type, "location", true))
    {
        GetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
        GetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);

        EntranceData[id][entranceExterior] = GetPlayerInterior(playerid);
        EntranceData[id][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

        Entrance_Refresh(id);
        Entrance_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of entrance ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "interior", true))
    {
        GetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
        GetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

        EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
        {
            if(PlayerData[i][pEntrance] == EntranceData[id][entranceID])
            {
                SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
                SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

                SetPlayerInterior(i, EntranceData[id][entranceInterior]);
                SetCameraBehindPlayer(i);
            }
        }
        Entrance_Refresh(id);
        Entrance_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the interior spawn of entrance ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "custom", true))
    {
        new status;

        if(sscanf(string, "d", status))
            return SendSyntaxMessage(playerid, "/editentrance [id] [custom] [0/1]");

        if(status < 0 || status > 1)
            return SendErrorMessage(playerid, "You must specify at least 0 or 1.");

        EntranceData[id][entranceCustom] = status;
        Entrance_Save(id);

        if(status) {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has enabled custom interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
        }
        else {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has disabled custom interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
        }
    }
    else if(!strcmp(type, "virtual", true))
    {
        new worldid;

        if(sscanf(string, "d", worldid))
            return SendSyntaxMessage(playerid, "/editentrance [id] [virtual] [interior world]");

        EntranceData[id][entranceWorld] = worldid;

        foreach (new i : Player) if(Entrance_Inside(i) == id) {
            SetPlayerVirtualWorld(i, worldid);
        }
        Entrance_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the virtual of entrance ID: %d to %d.", ReturnName(playerid, 0), id, worldid);
    }
    else if(!strcmp(type, "vehable", true))
    {
        new vehable;

        if(sscanf(string, "d", vehable))
            return SendSyntaxMessage(playerid, "/editentrance [id] [vehable] [0/1]");

        if(vehable < 0 || vehable > 1)
            return SendErrorMessage(playerid, "Invalid value. Use 0 for not-able and 1 for able.");

        EntranceData[id][entranceVehAble] = vehable;
        Entrance_Save(id);
        Entrance_Refresh(id);

        if(vehable) {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has locked vehicle entrable entrance ID: %d.", ReturnName(playerid, 0), id);
        } else {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has unlocked vehicle enterable entrance ID: %d.", ReturnName(playerid, 0), id);
        }
    }
    else if(!strcmp(type, "password", true))
    {
        new password[32];

        if(sscanf(string, "s[32]", password))
            return SendSyntaxMessage(playerid, "/editentrance [id] [password] [entrance pass] (use 'none' to disable)");

        if(!strcmp(password, "none", true)) EntranceData[id][entrancePass][0] = 0;
        else format(EntranceData[id][entrancePass], 32, password);

        Entrance_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the password of entrance ID: %d to \"%s\".", ReturnName(playerid, 0), id, password);
    }
    else if(!strcmp(type, "locked", true))
    {
        new locked;

        if(sscanf(string, "d", locked))
            return SendSyntaxMessage(playerid, "/editentrance [id] [locked] [locked 0/1]");

        if(locked < 0 || locked > 1)
            return SendErrorMessage(playerid, "Invalid value. Use 0 for unlocked and 1 for locked.");

        EntranceData[id][entranceLocked] = locked;
        Entrance_Save(id);

        if(locked) {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has locked entrance ID: %d.", ReturnName(playerid, 0), id);
        } else {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has unlocked entrance ID: %d.", ReturnName(playerid, 0), id);
        }
    }
    else if(!strcmp(type, "name", true))
    {
        new name[128];

        if(sscanf(string, "s[128]", name))
            return SendSyntaxMessage(playerid, "/editentrance [id] [name] [new name]");

        format(EntranceData[id][entranceName], 128, ColouredText(name));

        Entrance_Refresh(id);
        Entrance_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the name of entrance ID: %d to \"%s\".", ReturnName(playerid, 0), id, ColouredText(name));
    }
    else if(!strcmp(type, "type", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint))
        {
            SendSyntaxMessage(playerid, "/editentrance [id] [type] [entrance type]");
            SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 0: None | 1: DMV | 2: Bank | 3: City Hall | 4: Shooting Range");
            SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 5: Newbie School | 6: Police Department | 7: Parking Lot | 8: Hospital");
            SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 9: Fish Factory | 10: News | 11: Auction 12: GangBAse");

            return 1;
        }
        if(typeint < 0 || typeint > 11)
            return SendErrorMessage(playerid, "The specified type must be between 0 and 11.");

        if(EntranceData[id][entranceType] == 3 && typeint != 3) {
            DestroyForklifts(id);
        }
        else if(EntranceData[id][entranceType] != 3 && typeint == 3) {
            CreateForklifts(id);
        }
        EntranceData[id][entranceType] = typeint;

        switch (typeint) {
            case 1: {
                EntranceData[id][entranceInt][0] = -2029.5531;
                EntranceData[id][entranceInt][1] = -118.8003;
                EntranceData[id][entranceInt][2] = 1035.1719;
                EntranceData[id][entranceInt][3] = 0.0000;
                EntranceData[id][entranceInterior] = 3;
            }
            case 2: { //1332.0400,1579.6100,14.3463,267.0560
                EntranceData[id][entranceInt][0] = 1332.0400;
                EntranceData[id][entranceInt][1] = 1579.6100;
                EntranceData[id][entranceInt][2] = 14.3463;
                EntranceData[id][entranceInt][3] = 267.0560;
                EntranceData[id][entranceInterior] = BANK_INTERIOR;
            }
            case 3: { //2249.5200,-2372.4500,13.6328,273.7730
                EntranceData[id][entranceInt][0] = 1399.6113;
                EntranceData[id][entranceInt][1] = -0.5399;
                EntranceData[id][entranceInt][2] = 1000.8535;
                EntranceData[id][entranceInt][3] = 182.2641;
                EntranceData[id][entranceInterior] = -1;
            }
            case 4: {
                EntranceData[id][entranceInt][0] = 303.9586;
                EntranceData[id][entranceInt][1] = 1894.5961;
                EntranceData[id][entranceInt][2] = 904.4109;
                EntranceData[id][entranceInt][3] = 180.8089;
                EntranceData[id][entranceInterior] = 3;
                EntranceData[id][entranceWorld] = 225;
            }
            case 5: { //NS
                EntranceData[id][entranceInt][0] = 1498.9725;
                EntranceData[id][entranceInt][1] = -1540.2023;
                EntranceData[id][entranceInt][2] = 15.0255;
                EntranceData[id][entranceInt][3] = 175.0971;
                EntranceData[id][entranceInterior] = 5;
            }
            case 6: { //-1080.1744,-974.4135,129.3047,359.1500
                EntranceData[id][entranceInt][0] = -1080.1744;
                EntranceData[id][entranceInt][1] = -974.4135;
                EntranceData[id][entranceInt][2] = 129.3047;
                EntranceData[id][entranceInt][3] = 359.1500;
                EntranceData[id][entranceInterior] = LSPD_LOBBY;
                EntranceData[id][entranceWorld] = PRISON_WORLD;
            }
            case 7: {
                EntranceData[id][entranceInt][0] = -1744.3235;
                EntranceData[id][entranceInt][1] = 982.0571;
                EntranceData[id][entranceInt][2] = 17.4917;
                EntranceData[id][entranceInt][3] = 271.2382;
                EntranceData[id][entranceInterior] = 0;
            }
            case 8: { //975.9190,2420.0200,10.9062,271.6290
                EntranceData[id][entranceInt][0] = 975.9190;
                EntranceData[id][entranceInt][1] = 2420.0200;
                EntranceData[id][entranceInt][2] = 10.9062;
                EntranceData[id][entranceInt][3] = 271.6290;
                EntranceData[id][entranceInterior] = ASGH_INTERIOR;
            }
            case 9: { // Fish Factory
                EntranceData[id][entranceInt][0] = 1353.6514;
                EntranceData[id][entranceInt][1] = 1326.0586;
                EntranceData[id][entranceInt][2] = 10.8862;
                EntranceData[id][entranceInt][3] = 260.5;
                EntranceData[id][entranceInterior] = FISHFAC_INTERIOR_MAP;
            }
            case 10: { //2148.2820,-2142.7788,13.6403,179.8506
                // EntranceData[id][entranceInt][0] = 2148.2820;
                // EntranceData[id][entranceInt][1] = -2142.7788;
                // EntranceData[id][entranceInt][2] = 13.6403;
                // EntranceData[id][entranceInt][3] = 179.8506;
                // EntranceData[id][entranceInterior] = NEWS_INTERIOR_MAP;
            }
            case 11: { //Tandain sini buat pacution ,,,
                EntranceData[id][entranceInt][0] = 1117.5333;
                EntranceData[id][entranceInt][1] = -1611.9575;
                EntranceData[id][entranceInt][2] = 789.4451;
                EntranceData[id][entranceInt][3] = 1.9508;
                EntranceData[id][entranceInterior] = 13;                
            }
            case 12: {
                EntranceData[id][entranceInt][0] = -111.40;
                EntranceData[id][entranceInt][1] = 80.10;
                EntranceData[id][entranceInt][2] = 4006.101;
                EntranceData[id][entranceInt][3] = 0.00;
                EntranceData[id][entranceInterior] = -1; 
            }
            default: SendErrorMessage(playerid, "Tidak ada slot!");
        }
        foreach (new i : Player)
        {
            if(PlayerData[i][pEntrance] == EntranceData[id][entranceID])
            {
                SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
                SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

                SetPlayerInterior(i, EntranceData[id][entranceInterior]);
                SetCameraBehindPlayer(i);
            }
        }
        Entrance_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the type of entrance ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
    }
    return 1;
}

CMD:destroyentrance(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyentrance [entrance id]");

    if((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
        return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

    Entrance_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed entrance ID: %d.", id);
    return 1;
}

CMD:faq(playerid, params[])
{
    Dialog_Show(playerid, FAQ, DIALOG_STYLE_LIST, "Frequently Asked Questions", "Saya harus kemana?\nBagaimana cara untuk masuk ke ruangan?\nBagaimana saya bisa mengakses inventory?\nBagaimana saya mengambil item yang ada di bawah tanah?\nApa maksudnya gambar pojok kanan bawah di layar saya?\nBagaimana saya bisa mengisi energy saya kembali?\nBagaimana saya bisa mengetahui lokasi yang ada di server ini?\nBagaimana keluar dari kontrak pekerjaan yang di lakoni?\nBagaimana cara untuk menggunakan weapon serta mengisi peluru di dalamnya\nBagaimana cara memodifikasi rumah dengan system furniture?", "Select", "Cancel");
    return 1;
}

CMD:atm(playerid, params[])
{
    new id;
    id = ATM_Nearest(playerid);
    if(id == -1)
        return SendErrorMessage(playerid, "Harus berada dekat dengan ATM untuk menggunakan perintah ini!");

    // if(IsMoneytransWorking(playerid))
    //     return SendErrorMessage(playerid, "Kamu masih bekerja sebagai money transporter, selesaikan terlebih dahulu!");

    if(!PlayerData[playerid][pCanPaycheck]) Dialog_Show(playerid, Atm, DIALOG_STYLE_LIST, "Bank Account (%s)", "Withdraw\nTransfer", "Select", "Cancel", FormatNumber(PlayerData[playerid][pBankMoney]));
	else Dialog_Show(playerid, Atm, DIALOG_STYLE_LIST, "Bank Account (%s)", "Withdraw\nTransfer\nSigncheck", "Select", "Cancel", FormatNumber(PlayerData[playerid][pBankMoney]));
    return 1;
}
CMD:charity(playerid, params[])
{
    new amount;
    if(!IsPlayerInCityHall(playerid))
        return SendErrorMessage(playerid, "You are not in range of city hall charity point");
    if(sscanf(params,"d", amount))
        return SendSyntaxMessage(playerid, "/amount [amount]");

    if(amount < 1 || amount > 1000000)
        return SendErrorMessage(playerid, "You can charity between $1 - $1,000,000");

    if(GetMoney(playerid) < amount)
        return SendErrorMessage(playerid, "You can't charity %s, you have only %s in your hand.", FormatNumber(amount), FormatNumber(GetMoney(playerid)));

    // for(new i = 0; i != MAX_FACTIONS; i++) if(FactionData[i][factionExists] && FactionData[i][factionType] == FACTION_GOV) {
    //         FactionData[i][factionMoney] += amount;
    // }

    GiveMoney(playerid, -amount, ECONOMY_ADD_SUPPLY, "charity");

    SendServerMessage(playerid, "You have charity %s into government.", FormatNumber(amount));
    Log_Save(E_LOG_CHARITY, sprintf("[%s] %s charity for %s.", ReturnDate(), ReturnName(playerid), FormatNumber(amount)));
    return 1;
}
CMD:deposit(playerid, params[])
{
    new deposit;

    if(!IsPlayerInBank(playerid))
        return SendErrorMessage(playerid, "You are not in range of any bank.");

    if(sscanf(params,"d", deposit))
        return SendSyntaxMessage(playerid, "/deposit [amount]");

    if(deposit < 1 || deposit > 100000)
        return SendErrorMessage(playerid, "You can deposit between $1 - $100,000");

    if(GetMoney(playerid) < deposit)
        return SendErrorMessage(playerid, "You can't deposit %s, you have only %s in your hand.", FormatNumber(deposit), FormatNumber(GetMoney(playerid)));

    PlayerData[playerid][pBankMoney] += deposit;
    GiveMoney(playerid, -deposit);

    SendServerMessage(playerid, "You have deposited %s into your bank account (bank balance: %s).", FormatNumber(deposit), FormatNumber(PlayerData[playerid][pBankMoney]));
    Log_Save(E_LOG_DEPOSIT, sprintf("[%s] %s deposit for %s, current bank: %s.", ReturnDate(), ReturnName(playerid), FormatNumber(deposit), FormatNumber(PlayerData[playerid][pBankMoney])));

    Discord_Log(DEPOSITLOG, sprintf("%s deposit for %s, current bank: %s.", ReturnName(playerid), FormatNumber(deposit), FormatNumber(PlayerData[playerid][pBankMoney])));
    return 1;
}

CMD:balance(playerid, params[])
{
    if(!IsPlayerInBank(playerid))
        return SendErrorMessage(playerid, "You are not in range of any bank.");

    SendClientMessage(playerid, -1, "|__________ "COL_GREEN"CHECK BALANCE "WHITE"__________|");
    SendClientMessageEx(playerid, -1,"Bank balance: "COL_GREEN"%s", FormatNumber(PlayerData[playerid][pBankMoney]));
    return 1;
}

CMD:transfer(playerid, params[])
{
    if(!IsPlayerInBank(playerid))
        return SendErrorMessage(playerid, "You are not in range of any bank.");

    Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
    return 1;
}

CMD:withdraw(playerid, params[])
{
    new deposit;
    if(!IsPlayerInBank(playerid))
        return SendErrorMessage(playerid, "You are not in range of any bank.");

    if(sscanf(params,"d", deposit))
        return SendSyntaxMessage(playerid, "/withdraw [amount]");

    if(deposit < 1 || deposit > 100000)
        return SendErrorMessage(playerid, "You can withdraw between $1 - $100,000");

    if(PlayerData[playerid][pBankMoney] < deposit)
        return SendErrorMessage(playerid, "You can't withdraw %s, you have %s in your bank account.", FormatNumber(deposit), FormatNumber(PlayerData[playerid][pBankMoney]));

    PlayerData[playerid][pBankMoney] -= deposit;
    GiveMoney(playerid, deposit);

    SendServerMessage(playerid, "You have withdrawn %s from your bank account.", FormatNumber(deposit));
    Log_Save(E_LOG_WITHDRAW, sprintf("[%s] %s has withdraws %s from bank, current bank: %s.", ReturnDate(), ReturnName(playerid), FormatNumber(deposit), FormatNumber(PlayerData[playerid][pBankMoney])));
    Discord_Log(WITHDRAWLOG, sprintf("%s has withdraws %s from bank, current bank: %s.", ReturnName(playerid), FormatNumber(deposit), FormatNumber(PlayerData[playerid][pBankMoney])));
    return 1;
}

CMD:paycheck(playerid, params[])
{
    if(!IsPlayerInBank(playerid))
        return SendErrorMessage(playerid, "You are not in range of any bank.");

    Paycheck(playerid);
    return 1;
}

CMD:bm(playerid, params[])
{
    new
        id = -1;

    id = Business_Inside(playerid);

    if(id == -1)
        return SendErrorMessage(playerid, "You are not in interior of your business.");

    if(Business_IsOwner(playerid, id) || Business_IsEmployee(playerid, id))
    {
        SetPVarInt(playerid,"BM", id);
        Dialog_Show(playerid, DialogBusiness, DIALOG_STYLE_LIST, "Business Management","Show Info\nChange Name\nSet Message\nVault\nProduct Menu\nSell Product Price\nSet Music\nKitchen Repairment\nBusiness Employee","Next","Close");
    }
    return 1;
}

CMD:refillgas(playerid, params[])
{
    static pump_id;

    if((pump_id = Pump_Nearest(playerid)) != -1)
    {
        new business_id = Pump_BusinessID(pump_id);

        if(!Business_IsOwner(playerid, business_id))
            return SendErrorMessage(playerid, "Ini bukan pompa bahan bakar milik bisnis mu!");

        if(BusinessData[business_id][bizProducts] < 10)
            return SendErrorMessage(playerid, "Minimal 10 produk untuk mengisi pompa bahan bakar!");

        if(PumpData[pump_id][pumpFuel] >= 1000)
            return SendErrorMessage(playerid, "Persediaan pada pompa bahan bakar masih penuh!");

        Dialog_Show(playerid, RefillGasPump, DIALOG_STYLE_MSGBOX, "Refill Gas Station", WHITE"Apa kamu yakin ingin menggunakan "YELLOW"10 produk "WHITE"untuk digunakan...\nsebagai penambahan "YELLOW"200 liter "WHITE"pada gas station?", "Ya", "Tidak");
    }
    else SendErrorMessage(playerid, "Kamu tidak berada didekat pompa bahan bakar!");
    return 1;
}

CMD:ojail(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);
    {
        new name[MAX_PLAYER_NAME], minutes, reason[64], query[512], jailedby[32];
        if(sscanf(params, "s[24]ds[64]", name, minutes,reason)) return SendClientMessageEx(playerid, X11_WHITE, "USAGE: /ojail [player name] [time (minutes)] [reason]");

        //SendClientMessageEx(playerid, X11_TOMATO_1, "Attempting to jail %s's account for %d minutes for %s", name, minutes, reason);

        AdminActivity_Write(
		playerid,
		INVALID_PLAYER_ID,
		ADMIN_ACTIVITY_JAIL,
		sprintf(
			"Admin %s (playerid=%d, IP=%s) offline jails %s for %d minutes. Reason: %s"
			,ReturnAdminName(playerid)
			,playerid
			,ReturnIP(playerid)
            ,name
            ,minutes
            ,reason
		)
	);

        format(query,sizeof(query),"SELECT `JailTime` FROM `characters`  WHERE `Character` = '%s'", name);
        mysql_tquery(g_iHandle, query, "OnJailAccount", "ddsss", playerid, (minutes*60), reason, jailedby, name);
    }
    return 1;
}

CMD:furniture(playerid, params[])
{
    new
        houseid = House_Inside(playerid)
    ;

    if((houseid >= 0 && House_IsOwner(playerid, houseid, false)))
    {
        new
            count = 0,
            string[4096]
        ;

        if(!Furniture_GetCount(houseid))
            return SendErrorMessage(playerid, "This house doesn't have any furniture spawned.");

        strcat(string, "Model\tDistance\n");
        for (new i = 0; i < MAX_HOUSE_FURNITURE; i ++)
        {
            new furnitureid = HouseData[houseid][furniture][i];

            if(furnitureid >= 0 && FurnitureData[furnitureid][furnitureExists] && FurnitureData[furnitureid][furnitureHouse] == houseid)
            {
                if(FurnitureData[furnitureid][furnitureUnused])
                {
                    strcat(string, sprintf("%s\t(New)\n", FurnitureData[furnitureid][furnitureName]));
                }
                else
                {
                    strcat(string, sprintf("%s\t%.2f\n", FurnitureData[furnitureid][furnitureName], GetPlayerDistanceFromPoint(playerid, FurnitureData[furnitureid][furniturePos][0], FurnitureData[furnitureid][furniturePos][1], FurnitureData[furnitureid][furniturePos][2])));
                }

                if (count < MAX_HOUSE_FURNITURE)
                {
                    ListedFurniture[playerid][count] = furnitureid;
                    count = count + 1;
                }
            }
        }
        Dialog_Show(playerid, ListedFurniture, DIALOG_STYLE_TABLIST_HEADERS, "Listed Furniture", string, "Select", "Cancel");
        return 1;
    }
    SendErrorMessage(playerid, "You are not in range of your house interior.");
    return 1;
}

CMD:createjob(playerid, params[])
{
    static
        type,
        id = -1;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", type))
    {
        SendSyntaxMessage(playerid, "/createjob [type]");
        SendClientMessageEx(playerid, X11_YELLOW_2,"TYPES: "WHITE"1: Trucker | 2: Mechanic | 3: Taxi Driver | 4: Cargo Unloader");
        SendClientMessageEx(playerid, X11_YELLOW_2,"TYPES: "WHITE"5: Miner | 6: Food Vendor | 7: Package sorter | 8: Arms Dealer | 9: Lumberjack");
        SendClientMessageEx(playerid, X11_YELLOW_2,"TYPES: "WHITE"10: Hauler | 11 Farmer");
        return 1;
    }
    if(type < 1 || type > 11)
        return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 11.");

    // switch(type) {
    //     case JOB_UNLOADER, JOB_MINER, JOB_SORTER: return SendErrorMessage(playerid, "This job locked for some reason.");
    // }

    id = Job_Create(playerid, type);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for jobs.");

    SendServerMessage(playerid, "You have successfully created job ID: %d.", id);
    return 1;
}

CMD:destroyjob(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyjob [job id]");

    if((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
        return SendErrorMessage(playerid, "You have specified an invalid job ID.");

    Job_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed job ID: %d.", id);
    return 1;
}

CMD:editjob(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editjob [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, type, point, deliver, stock, prison");
        return 1;
    }
    if((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
        return SendErrorMessage(playerid, "You have specified an invalid job ID.");

    if(!strcmp(type, "location", true))
    {
        static
            Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);

        JobData[id][jobPos][0] = x;
        JobData[id][jobPos][1] = y;
        JobData[id][jobPos][2] = z;

        JobData[id][jobInterior] = GetPlayerInterior(playerid);
        JobData[id][jobWorld] = GetPlayerVirtualWorld(playerid);

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of job ID: %d.", ReturnName(playerid, 0), id);
        Log_Save(E_LOG_DYNAMIC_JOB, sprintf("[%s] %s has adjusted the location of JOB ID: (%d) to %s.", ReturnDate(), ReturnName(playerid, 0), id, JobData[id][jobPos]));
    }
    else if(!strcmp(type, "jobids", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint))
        {
            SendSyntaxMessage(playerid, "/editjob [id] [type] [new type]");
            SendClientMessageEx(playerid, X11_YELLOW_2,"TYPES: "WHITE"1: Trucker | 2: Mechanic | 3: Taxi Driver | 4: Cargo Unloader.");
            SendClientMessageEx(playerid, X11_YELLOW_2,"TYPES: "WHITE"5: Miner | 6: Food Vendor | 7: Package sorter | 8: Arms Dealer | 9: Lumberjack.");
            return 1;
        }
        if(typeint < 1 || typeint > 11)
            return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 11.");

        JobData[id][jobType] = typeint;

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the type of job ID: %d to %s.", ReturnName(playerid, 0), id, Job_GetName(typeint));
        Log_Save(E_LOG_DYNAMIC_JOB, sprintf("[%s] %s has adjusted the type of JOB ID: (%d) to %s.", ReturnDate(), ReturnName(playerid, 0), id, Job_GetName(typeint)));
    }
    else if(!strcmp(type, "stock", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint)) return SendSyntaxMessage(playerid, "/editjob [id] [stock] [stock]");

        if(typeint < 0 || typeint > JOB_STOCK_LIMIT)
            return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 15000.");

        JobData[id][jobStock] = typeint;

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the stock of job ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
    }
    else if(!strcmp(type, "prison", true))
    {
        new prison;

        if(sscanf(string, "d", prison)) return SendSyntaxMessage(playerid, "/editjob [id] [prison] [0/1]]");

        if(prison < 0 || prison > 1)
            return SendErrorMessage(playerid, "Invalid type specified. Prison Type : 1 , 0 None.");

        JobData[id][jobPrison] = prison;

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the prison type of job ID: %d to %d.", ReturnName(playerid, 0), id, prison);
    }
    else if(!strcmp(type, "point", true))
    {
        static
            Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);

        JobData[id][jobPoint][0] = x;
        JobData[id][jobPoint][1] = y;
        JobData[id][jobPoint][2] = z;
        JobData[id][jobPointInt] = GetPlayerInterior(playerid);
        JobData[id][jobPointWorld] = GetPlayerVirtualWorld(playerid);

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the point of job ID: %d.", ReturnName(playerid, 0), id);
        Log_Save(E_LOG_DYNAMIC_JOB, sprintf("[%s] %s has adjusted the point of JOB ID: (%d)", ReturnDate(), ReturnName(playerid, 0), id));

    }
    else if(!strcmp(type, "deliver", true))
    {
        if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
            return SendErrorMessage(playerid, "You can't place the deliver point inside interiors.");

        static
            Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);

        JobData[id][jobDeliver][0] = x;
        JobData[id][jobDeliver][1] = y;
        JobData[id][jobDeliver][2] = z;

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the deliver point of job ID: %d.", ReturnName(playerid, 0), id);
        Log_Save(E_LOG_DYNAMIC_JOB, sprintf("[%s] %s has adjusted the deliver point of JOB ID: (%d).", ReturnDate(), ReturnName(playerid, 0), id));
    }
    return 1;
}

CMD:quitjob(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_NONE)
    {
        if(GetPlayerVIPLevel(playerid) < 2 && PlayerData[playerid][pJobLeave] >= 1)
            return SendClientMessageEx(playerid, X11_GREY_60,"* You can't leave from the job before getting %d paycheck",PlayerData[playerid][pJobLeave]);

        if(PlayerData[playerid][pMinedRock])
        {
            PlayerData[playerid][pMinedRock] = 0;
            PlayerData[playerid][pMineCount] = 0;
            if(PlayerData[playerid][pMineSalary] > 0)
            {
                AddPlayerSalary(playerid, PlayerData[playerid][pMineSalary], "Miner");
                PlayerData[playerid][pMineSalary] = 0;
            }
            DisablePlayerCheckpoint(playerid);

            RemovePlayerAttachedObject(playerid, JOB_SLOT);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        }
        if(PlayerData[playerid][pJobDuty])
        {
            SetPlayerColor(playerid, DEFAULT_COLOR);
            PlayerData[playerid][pSalary] = 0;
            PlayerData[playerid][pJobDuty] = false;

            if(PlayerData[playerid][pJob] == JOB_TAXI)
            {
                foreach (new i : Player) if(PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
                    LeaveTaxi(i, playerid);
                }
            }
        }
        SendServerMessage(playerid, "You have quit your job as a "YELLOW"%s.", Job_GetName(PlayerData[playerid][pJob]));
        PlayerData[playerid][pJob] = JOB_NONE;
        PlayerData[playerid][pJobLeave] = 0;
    }
    else SendErrorMessage(playerid, "You don't have a job to quit.");
    return 1;
}

CMD:takejob(playerid, params[])
{
    static
        id = -1;

    if((id = Job_Nearest(playerid)) != -1)
    {
        if(PlayerData[playerid][pJob])
            return SendErrorMessage(playerid, "You must '/quitjob' to get new job.");

        if(PlayerData[playerid][pJob] == JobData[id][jobType])
            return SendErrorMessage(playerid, "You have this job already.");

        if(JobData[id][jobType] == JOB_LUMBERJACK && PlayerData[playerid][pScore] < 2)
            return SendErrorMessage(playerid, "You must level 2 to join this job.");

        if(isnull(params))
        {
            SendServerMessage(playerid, "/takejob [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" /takejob 'confirm' to take this job.");
            return 1;
        }
        if(!strcmp(params, "confirm", true))
        {
            PlayerData[playerid][pJob] = JobData[id][jobType];
            PlayerData[playerid][pJobLeave] = 2;

            SendServerMessage(playerid, "You are now a "YELLOW"%s "WHITE"- type "YELLOW"\"/help > Job Commands\" "WHITE"for job commands.", Job_GetName(JobData[id][jobType]));

/*            if(PlayerData[playerid][pJob] == JOB_COURIER)
            {
                SendCustomMessage(playerid, "TRUCKER","Untuk memulai pekerjaan ini, telebih dahulu Kamu menggunakan perintah (/shipments) untuk memulai pekerjaan awal.");
                SendCustomMessage(playerid, "TRUCKER","Setelah itu, Kamu bisa menggunakan perintah /startdelivery untuk mengumpulkan crate ke dalam truck, sesuai dengan jenis ..-");
                SendCustomMessage(playerid, "TRUCKER","Yang Kamu pilih sewaktu menggunakan perintah /shipments.");
            }*/
        }
        else
        {
            SendServerMessage(playerid, "/takejob [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" /takejob 'confirm' to take this job.");
        }
        return 1;
    }
    SendErrorMessage(playerid, "You are not in range of any job pickup.");
    return 1;
}

CMD:buycomponent(playerid, params[])
{
    static
        id = -1,
        component;

    if(PlayerData[playerid][pJob] != JOB_MECHANIC)
        return SendErrorMessage(playerid, "You aren't mechanic.");

    if((id = Job_NearestPoint(playerid)) != -1)
    {
        if(JobData[id][jobType] != JOB_MECHANIC)
            return SendErrorMessage(playerid, "You're not in job point of mechanic.");
        
        if(JobData[id][jobStock] <= 0)
            return SendErrorMessage(playerid, "Component warehouse is empty, hire or ask a trucker to restock it!");

        if(sscanf(params, "d", component))
            return SendSyntaxMessage(playerid, "/buycomponent [amount]");

        if(JobData[id][jobStock] < component)
            return SendErrorMessage(playerid, "Component warehouse don't have enough parts!");

        if(component > 2000 || component < 1)
            return SendErrorMessage(playerid, "Amount of component must between 1 - 2000 component.");

        new
            price = (component * Economy_GetComponentPrice()),
            after_inflation_price = Economy_GetAmountAfterInflation(price)
        ;

        if(GetMoney(playerid) < after_inflation_price)
            return SendErrorMessage(playerid, "You don't have enough money to buy component.");

        if((Inventory_Count(playerid, "Component")+component) > 2000)
            return SendErrorMessage(playerid, "You have maximmum component on you, put on your vehicle first to get more.");

        if(Inventory_Add(playerid, "Component", 18633, component) != -1)
        {
            GiveMoney(playerid, -after_inflation_price, ECONOMY_ADD_SUPPLY, "bought component");
            JobData[id][jobStock] -= component;
            Job_Refresh(id);
            SendCustomMessage(playerid, "COMPONENT","You have buy "YELLOW"%d component "WHITE"for "COL_GREEN"%s"WHITE". Now you have "YELLOW"%d component on your inventory.", component, FormatNumber(after_inflation_price), Inventory_Count(playerid, "Component"));
        }
    }
    return 1;
}

CMD:acceptcall(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_TAXI && PlayerData[playerid][pJob] != JOB_MECHANIC)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(!PlayerData[playerid][pJobDuty])
        return SendErrorMessage(playerid, "You must be on duty to accept calls.");

    switch(PlayerData[playerid][pJob])
    {
        case JOB_TAXI: Taxi_ShowCalls(playerid);
        case JOB_MECHANIC: Mechanic_ShowCalls(playerid);
    }
    return 1;
}
CMD:offermenu(playerid, params[])
{
    new targetid, id;

    if(PlayerData[playerid][pBizJobDuty] == -1)
        return SendErrorMessage(playerid, "You need to start your shift before using this command!");

    if(sscanf(params, "d", targetid))
        return SendSyntaxMessage(playerid, "/offermenu [playerid]");

    if(targetid == playerid)
        return SendErrorMessage(playerid, "You cannot offer any menu or buy something from the business to yourself!");

    if(targetid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, targetid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if((id = Business_Inside(playerid)) != -1 && (id = Business_Inside(targetid)) != -1)
    {
        if(!Business_IsEmployee(playerid, id))
            return SendErrorMessage(playerid, "You're not working for this business!");

        if(BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner])
            return SendErrorMessage(playerid, "This business is closed!");

        if(BusinessData[id][bizType] == 5) {

        }
        else
        {
            if(PlayerTemp[playerid][temp_selecttextdraw])
                return 0;
            SetPVarInt(targetid, "OfferedPlayerID", playerid);
            SendClientMessageEx(playerid, COLOR_WHITE, "You send an "GREEN" offer "WHITE"for business menu! to %s", ReturnName(targetid));
            SendClientMessageEx(targetid, COLOR_WHITE, "%s send you an "GREEN" offer "WHITE"for the business menu! to %s", ReturnName(playerid));
            Business_PurchaseMenu(targetid, id);
        }
    }
    return 1;
}
CMD:dutyshift(playerid, params[])
{
    new id;
    if((id = Business_Inside(playerid)) != -1)
    {
        if(!Business_IsEmployee(playerid, id))
            return SendErrorMessage(playerid, "You're not working for this business!");

        if(PlayerData[playerid][pInjured])
            return SendErrorMessage(playerid, "You can't use this action when injured.");

        if(PlayerData[playerid][pMaskOn])
            return SendErrorMessage(playerid, "Disable your mask first.");

        if(PlayerData[playerid][pBizJobDuty] == -1)
        {
            PlayerData[playerid][pBizJobDuty] = id;
            SendClientMessageEx(playerid, COLOR_WHITE, "BUSINESS: Now you're "GREEN"starting "WHITE"your shift working inside this business!");
        }
        else
        {
            PlayerData[playerid][pBizJobDuty] = -1;
            SendClientMessageEx(playerid, COLOR_WHITE, "BUSINESS: Now you're "RED"ending "WHITE"your shift from this business!");           
        }
    }
    else SendErrorMessage(playerid, "You need to be inside business to use this command!");
    return 1;
}
CMD:jobduty(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_MECHANIC && PlayerData[playerid][pJob] != JOB_TAXI)
        return SendErrorMessage(playerid, "This job can't on duty.");

    if(PlayerData[playerid][pInjured])
        return SendErrorMessage(playerid, "You can't use this action when injured.");

    if(PlayerData[playerid][pMaskOn])
        return SendErrorMessage(playerid, "Disable your mask first.");

    if(PlayerData[playerid][pJobDuty])
    {
        switch (PlayerData[playerid][pJob])
        {
            case JOB_MECHANIC: SendCustomMessage(playerid, "MECHANIC","You are no longer on mechanic duty!");
            case JOB_TAXI: SendCustomMessage(playerid, "TAXI","You are no longer on taxi duty!"), Taxi_GUI(playerid, false);
        }
        PlayerData[playerid][pJobDuty] = 0;
        SetPlayerColor(playerid, DEFAULT_COLOR);
    }
    else
    {
        switch (PlayerData[playerid][pJob])
        {
            case JOB_MECHANIC:
            {
                if(Inventory_Count(playerid, "Component") < 50)
                    return SendErrorMessage(playerid, "Anda tidak mencukupi komponen untuk bekerja mekanik (50 komponen).");

                if(PlayerData[playerid][pHunger] < 20)
                    return SendErrorMessage(playerid, "Anda terlalu lelah untuk bekerja.");

                if(!IsPlayerInDynamicArea(playerid, mechanic_zone_main) && !IsPlayerInDynamicArea(playerid, mechanic_zone_ship))
                    return SendErrorMessage(playerid, "You're not in mechanic center.");

                SendCustomMessage(playerid, "MECHANIC","You're now duty as mechanic.");
                SetPlayerColor(playerid, 0xADFF2F00);
            }
            case JOB_TAXI:
            {
                new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

                if(modelid != 438 && modelid != 420)
                    return SendErrorMessage(playerid, "You must be inside a taxi.");

                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
                    return SendErrorMessage(playerid, "You must be in driver to taxi duty.");

                foreach (new i : Player) if(PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
                    LeaveTaxi(i, playerid);
                }

                SendCustomMessage(playerid, "TAXI","You're now duty as taxi driver.");
                SetPlayerColor(playerid, 0xFFFF0000);

                Taxi_GUI(playerid, true);
            }
        }
        PlayerData[playerid][pSalary] = 0;
        PlayerData[playerid][pJobDuty] = 1;
    }
    return 1;
}

CMD:usekit(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
        return SendErrorMessage(playerid, "You can't use this command now.");

    if(PlayerData[playerid][pFirstAid])
        return SendErrorMessage(playerid, "You are already using a first aid kit.");

    if(!Inventory_HasItem(playerid, "First Aid"))
        return SendErrorMessage(playerid, "You don't have any first aid kits on you.");

    if(GetHealth(playerid) > 99)
        return SendErrorMessage(playerid, "You don't need to use a first aid kit right now.");

    if(!IsPlayerInAnyVehicle(playerid))
        ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

    PlayerData[playerid][pFirstAid] = true;
    PlayerData[playerid][pAidTimer] = repeat FirstAidUpdate(playerid, 1);
    
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s opens a first aid kit and uses it.", ReturnName(playerid, 0));
    Inventory_Remove(playerid, "First Aid");

    ShowPlayerFooter(playerid, "You have used a ~g~first aid kit!");
    return 1;
}

TogglePhone(playerid)
{
    if (!IsPlayerConnected(playerid))
    {
        return 0;
    }

    if (GetPVarInt(playerid, "TogglePhone"))
    {
        SetPVarInt(playerid, "TogglePhone", 0);
    }
    else
    {
        SetPVarInt(playerid, "TogglePhone", 1);
    }

    return 1;
}

CMD:togphone(playerid, params[])
{
    if(PlayerData[playerid][pPhoneBattery] <= 0)
        return SendErrorMessage(playerid, "Your phone battery is 0%% you need to charge it inside your vehicle or house.");

    if(!Inventory_HasItem(playerid, "Cellphone"))
        return SendErrorMessage(playerid, "You don't have a cellphone on you.");

    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid)  || PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "You can't use your phone now.");

    TogglePhone(playerid);
    return 1;
}

CMD:phone(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "Cellphone"))
        return SendErrorMessage(playerid, "You don't have a cellphone on you.");

    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid)  || PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "You can't use this command now.");

    Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, PlayerData[playerid][pPhone] ? (sprintf("Phone (#%d)", PlayerData[playerid][pPhone])) : (""COL_RED"Insert sim first.."), "Dial Number\nMy Contacts\nSend Text Message\nTurn %s Phone\n \nMiss call list\nCheck Credits\nTransfer Credits", "Select", "Cancel", (PlayerData[playerid][pPhoneOff]) ? ("On") : ("Off"));
    return 1;
}
CMD:sms(playerid, params[])
    return cmd_text(playerid, params);

CMD:text(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "Cellphone"))
        return SendErrorMessage(playerid, "Kamu tidak memiliki Handphone.");

    if(!PlayerData[playerid][pPhone])
        return SendErrorMessage(playerid, "Kami tidak memiliki SIM Card.");

    if(PlayerData[playerid][pPhoneOff])
        return SendErrorMessage(playerid, "Aktifkan handphonemu terlebih dahulu.");

    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid)  || PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "Perintah ini dinonaktifkan dalam keadaan ini.");

    new targetid, number, text[128];

    if(sscanf(params, "ds[128]", number, text))
        return SendSyntaxMessage(playerid, "/sms [phone number] [message]");

    if(!number)
        return SendErrorMessage(playerid, "Tidak ada pengguna dinomor tersebut.");

    if((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
    {
        if(targetid == playerid)
            return SendErrorMessage(playerid, "Tidak bisa mengirim ke nomor anda sendiri!");

        if(PlayerData[targetid][pPhoneOff])
            return SendErrorMessage(playerid, "Orang yang akan anda kirimkan pesan mematikan handphonenya.");

        if(PlayerData[playerid][pCredits] < 25)
            return SendErrorMessage(playerid, "You don't have enough phone credits to text this number!");

        if(PlayerData[playerid][pPhoneBattery] <= 0)
            return SendErrorMessage(playerid, "Your phone battery is 0%% you need to charge it inside your vehicle or house.");

        PlayerData[playerid][pCredits] -= 25;
        PlayerPlaySoundEx(targetid, 21001);
        ShowPlayerFooter(playerid, "Biaya ~r~terpotong~w~ 25 credits untuk sekali sms.");

        SendClientMessageEx(targetid, X11_YELLOW_2, "[MESSAGE]: %s - %s (#%d)", text, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
        SendClientMessageEx(playerid, X11_LIGHT_GOLDENROD_1, "[MESSAGE]: %s - %s (#%d)", text, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out their phone and sends a text.", ReturnName(playerid, 0, 1));
    }
    else SendErrorMessage(playerid, "Tidak ada pengguna dinomor tersebut.");
    return 1;
}
// HangupCall(playerid)
// {
//     new targetid = CallerPlayerID[playerid];

//     if(PlayerData[playerid][pEmergency])
//     {
//         PlayerData[playerid][pEmergency] = 0;
//         SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has hung up their cellphone.", ReturnName(playerid, 0, 1));
//         return 1;
//     }
//     if(targetid == INVALID_PLAYER_ID)
//         return SendErrorMessage(playerid, "There are no calls to hangup.");

//     if(makeCall[playerid])
//     {
//         PlayerData[playerid][pCredits] -= kuranginCredits[playerid];
//         SendClientMessageEx(playerid, X11_YELLOW_2, "[PHONE]:"WHITE" You use %d Phone Credits, you have %d phone credits now", kuranginCredits[playerid], PlayerData[playerid][pCredits]);
//     }
//     else
//     {
//         PlayerData[targetid][pCredits] -= kuranginCredits[targetid];
//         SendClientMessageEx(targetid, X11_YELLOW_2, "[PHONE]:"WHITE" You use %d Phone Credits, you have %d phone credits now", kuranginCredits[targetid], PlayerData[targetid][pCredits]);
//     }

//     if(PlayerData[playerid][pIncomingCall])
//     {
//         SendClientMessage(playerid, X11_YELLOW_2, "[PHONE]:"WHITE" You have declined the incoming call.");
//         SendClientMessage(targetid, X11_YELLOW_2, "[PHONE]:"WHITE" The other line has declined the call.");

//         SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has declined the call.", ReturnName(playerid, 0, 1));
//     }
//     else
//     {
//         SendClientMessage(playerid, X11_YELLOW_2, "[PHONE]:"WHITE" You have hung up the call.");
//         SendClientMessage(targetid, X11_YELLOW_2, "[PHONE]:"WHITE" The other line has hung up the call.");

//         SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has hung up their cellphone.", ReturnName(playerid, 0, 1));
//         SendNearbyMessage(targetid, 15.0, X11_PLUM, "** %s has hung up their cellphone.", ReturnName(targetid, 0, 1));

//     }
//     SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
//     SetPlayerSpecialAction(targetid,SPECIAL_ACTION_STOPUSECELLPHONE);

//     PlayerData[playerid][pIncomingCall] = 0;
//     PlayerData[targetid][pIncomingCall] = 0;

//     kuranginCredits[targetid] = 0;
//     kuranginCredits[playerid] = 0;

//     makeCall[playerid] = false;
//     makeCall[targetid] = false;
    
//     CallerPlayerID[playerid] = INVALID_PLAYER_ID;
//     CallerPlayerID[targetid] = INVALID_PLAYER_ID;

//     PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
//     PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

//     return 1;
// }
// VehicleTrack(playerid)
// {
//     if(!Vehicle_PlayerCount(playerid) && !Vehicle_RentedCount(playerid))
//         return ShowPlayerFooter(playerid, "~r~ERROR: ~w~Kamu tidak memiliki kendaraan!");

//     new vehicle_list[500], count, Float:x, Float:y, Float:z;

//     strcat(vehicle_list, "Name (id)\tStatus\tDistance (m)\n");
//     foreach(new vehicle : OwnedVehicles<playerid>)
//     {
//         GetVehiclePos(VehicleData[vehicle][vehVehicleID], x, y, z);
//         strcat(vehicle_list, sprintf(""CYAN"%s (%d)\t%s\t"WHITE"%.2f\n", GetVehicleNameByVehicle(VehicleData[vehicle][vehVehicleID]), VehicleData[vehicle][vehVehicleID], GetDoorStatus(VehicleData[vehicle][vehVehicleID]) ? (RED"Locked") : (GREEN"Unlocked"), GetPlayerDistanceFromPoint(playerid, x, y, z)));
//         g_selected_vehicle[playerid][count++] = vehicle;
//     }

//     foreach(new vehicle : RentedVehicles<playerid>)
//     {
//         GetVehiclePos(VehicleData[vehicle][vehVehicleID], x, y, z);
//         strcat(vehicle_list, sprintf(""LIGHTBLUE"%s (%d)\t%s\t"WHITE"%.2f\n", GetVehicleNameByVehicle(VehicleData[vehicle][vehVehicleID]), VehicleData[vehicle][vehVehicleID], GetDoorStatus(VehicleData[vehicle][vehVehicleID]) ? (RED"Locked") : (GREEN"Unlocked"), GetPlayerDistanceFromPoint(playerid, x, y, z)));
//         g_selected_vehicle[playerid][count++] = vehicle;
//     }

//     DisableWaypoint(playerid);
//     Dialog_Show(playerid, TrackVehicle, DIALOG_STYLE_TABLIST_HEADERS, "Track Vehicle", vehicle_list, "Select", "Close");
//     return 1;
// }
// AnswerCall(playerid)
// {
//     if(!Inventory_HasItem(playerid, "Cellphone"))
//     return SendErrorMessage(playerid, "Kamu tidak memiliki Handphone.");

//     if(!PlayerData[playerid][pPhone])
//         return SendErrorMessage(playerid, "Kami tidak memiliki SIM Card.");

//     if(PlayerData[playerid][pPhoneOff])
//         return SendErrorMessage(playerid, "Aktifkan handphonemu terlebih dahulu.");

//     if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid)  || PlayerData[playerid][pJailTime])
//         return SendErrorMessage(playerid, "Perintah ini dinonaktifkan dalam keadaan ini.");

//     new targetid = CallerPlayerID[playerid];
//     if(PlayerData[playerid][pIncomingCall] == 0 || PlayerData[targetid][pIncomingCall] == 1)
// 		return SendErrorMessage(playerid, "Tidak ada yang menelpon kamu");
    

//     SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);

//     PlayerData[playerid][pCallLine] = CallerPlayerID[playerid];

//     PlayerData[playerid][pIncomingCall] = 0;
//     PlayerData[targetid][pIncomingCall] = 0;

//     //CallerPlayerID[playerid] = 0;
//     //CallerPlayerID[targetid] = 0;

//     SendClientMessage(playerid, X11_YELLOW_2, "[SERVER]:"WHITE" Kamu menerima panggilan telpon.");
//     SendClientMessage(targetid, X11_YELLOW_2, "[SERVER]:"WHITE" Penerima mengangkat telpon darimu, silahkan berbicara.");

//     SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has accepted the incoming call.", ReturnName(playerid, 0, 1));
//     return 1;
// }
CMD:answer(playerid, params[])
{

    if(!Inventory_HasItem(playerid, "Cellphone"))
        return SendErrorMessage(playerid, "Kamu tidak memiliki Handphone.");

    if(!PlayerData[playerid][pPhone])
        return SendErrorMessage(playerid, "Kami tidak memiliki SIM Card.");

    if(PlayerData[playerid][pPhoneOff])
        return SendErrorMessage(playerid, "Aktifkan handphonemu terlebih dahulu.");

    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid)  || PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "Perintah ini dinonaktifkan dalam keadaan ini.");

    new targetid = CallerPlayerID[playerid];
    if(PlayerData[playerid][pIncomingCall] == 0 || PlayerData[targetid][pIncomingCall] == 1)
		return SendErrorMessage(playerid, "Tidak ada yang menelpon kamu");
    

    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);

    PlayerData[playerid][pCallLine] = CallerPlayerID[playerid];

    PlayerData[playerid][pIncomingCall] = 0;
    PlayerData[targetid][pIncomingCall] = 0;

    //CallerPlayerID[playerid] = 0;
    //CallerPlayerID[targetid] = 0;

    SendClientMessage(playerid, X11_YELLOW_2, "[SERVER]:"WHITE" Kamu menerima panggilan telpon.");
    SendClientMessage(targetid, X11_YELLOW_2, "[SERVER]:"WHITE" Penerima mengangkat telpon darimu, silahkan berbicara.");

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has accepted the incoming call.", ReturnName(playerid, 0, 1));
    return 1;
}

CMD:energy(playerid, params[])
{
    SendCustomMessage(playerid, "HUNGER", "%.1f/"GREEN"100.0", PlayerData[playerid][pHunger]);
    SendCustomMessage(playerid, "ENERGY", "%.1f/"GREEN"100.0", PlayerData[playerid][pEnergy]);
    return 1;
}

CMD:h(playerid, params[]) {
    return cmd_hangup(playerid,"");
}

CMD:hangup(playerid, params[])
{
    new targetid = CallerPlayerID[playerid];

    if(PlayerData[playerid][pEmergency] || PlayerData[playerid][pFactionCall])
    {
        PlayerData[playerid][pEmergency] = 0;
        PlayerData[playerid][pFactionCall] = 0;
        PlayerData[playerid][pFactionCallID] = -1;
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has hung up their cellphone.", ReturnName(playerid, 0, 1));
        return 1;
    }
    if(targetid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "There are no calls to hangup.");

    if(makeCall[playerid])
    {
        PlayerData[playerid][pCredits] -= kuranginCredits[playerid];
        SendClientMessageEx(playerid, X11_YELLOW_2, "[PHONE]:"WHITE" You use %d Phone Credits, you have %d phone credits now", kuranginCredits[playerid], PlayerData[playerid][pCredits]);
    }
    else
    {
        PlayerData[targetid][pCredits] -= kuranginCredits[targetid];
        SendClientMessageEx(targetid, X11_YELLOW_2, "[PHONE]:"WHITE" You use %d Phone Credits, you have %d phone credits now", kuranginCredits[targetid], PlayerData[targetid][pCredits]);
    }

    if(PlayerData[playerid][pIncomingCall])
    {
        SendClientMessage(playerid, X11_YELLOW_2, "[PHONE]:"WHITE" You have declined the incoming call.");
        SendClientMessage(targetid, X11_YELLOW_2, "[PHONE]:"WHITE" The other line has declined the call.");

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has declined the call.", ReturnName(playerid, 0, 1));
    }
    else
    {
        SendClientMessage(playerid, X11_YELLOW_2, "[PHONE]:"WHITE" You have hung up the call.");
        SendClientMessage(targetid, X11_YELLOW_2, "[PHONE]:"WHITE" The other line has hung up the call.");

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has hung up their cellphone.", ReturnName(playerid, 0, 1));
        SendNearbyMessage(targetid, 15.0, X11_PLUM, "** %s has hung up their cellphone.", ReturnName(targetid, 0, 1));

    }
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
    SetPlayerSpecialAction(targetid,SPECIAL_ACTION_STOPUSECELLPHONE);

    PlayerData[playerid][pIncomingCall] = 0;
    PlayerData[targetid][pIncomingCall] = 0;

    kuranginCredits[targetid] = 0;
    kuranginCredits[playerid] = 0;

    makeCall[playerid] = false;
    makeCall[targetid] = false;
    
    CallerPlayerID[playerid] = INVALID_PLAYER_ID;
    CallerPlayerID[targetid] = INVALID_PLAYER_ID;

    PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
    PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

    return 1;
}

CMD:id(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/id [playerid/PartOfName]");

    new count;

    foreach (new i : Player)
    {
        if(strfind(ReturnName(i), params, true) != -1)
        {
            SendClientMessageEx(playerid, X11_WHITE, "** %s - ID: %d", ReturnName(i), i);
            count++;
        }
    }

    if(!count)
        SendErrorMessage(playerid, "No users matched the search criteria: \"%s\".", params);

    return 1;
}

CMD:loadcomponent(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_HAULER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You can't use this in vehicle");

    if(PlayerData[playerid][pHunger] < 15 || PlayerData[playerid][pEnergy] < 15)
        return SendErrorMessage(playerid, "You're too tired to work at this time");

    if(CarryWoods[playerid] > 0 || CarryComponent[playerid] > 0)
        return SendErrorMessage(playerid, "You're carrying something!");

    if(!IsPlayerNearTruckPoint(playerid))
        return SendErrorMessage(playerid, "You must be near the trucker storage.");

    return 1;
}

CMD:loadwoods(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_HAULER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You can't use this in vehicle");

    if(PlayerData[playerid][pHunger] < 15 || PlayerData[playerid][pEnergy] < 15)
        return SendErrorMessage(playerid, "You're too tired to work at this time");

    if(CarryWoods[playerid] > 0 || CarryComponent[playerid] > 0)
        return SendErrorMessage(playerid, "You're carrying a something!");

    if(!IsPlayerNearLumber(playerid))
        return SendErrorMessage(playerid, "You must be near the lumber storage.");

    return 1;
}
CMD:mine(playerid, params[])
{
    static id = -1;
    if(PlayerData[playerid][pJob] != JOB_MINER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You can't use this in vehicle");

    if(!IsPlayerNearMine(playerid))
        return SendErrorMessage(playerid, "You must be near the mine.");

    if((id = Job_NearestPoint(playerid, 10.0)) != -1 && JobData[id][jobStock] > 0 && !PlayerData[playerid][pMining])
    {
        PlayerData[playerid][pMining] = true;
        PlayerData[playerid][pMineCount] = 0;

        SendServerMessage(playerid, "You are now mining! Use the fire key to begin digging.");
        SetPlayerAttachedObject(playerid, JOB_SLOT, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
    }
    else
    {
        PlayerData[playerid][pMining] = false;
        PlayerData[playerid][pMineCount] = 0;
        PlayerData[playerid][pMinedRock] = 0;
        LuckyMine[playerid] = 0;
        if(PlayerData[playerid][pMineSalary] > 0)
        {
            AddPlayerSalary(playerid, PlayerData[playerid][pMineSalary], "Miner");
            PlayerData[playerid][pMineSalary] = 0;
        }
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);  
        RemovePlayerAttachedObject(playerid, JOB_SLOT);
        SendServerMessage(playerid, "You have finished your mining job.");
    }
    return 1;
}

CMD:checkfood(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_FOOD_VENDOR)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 588)
        return SendErrorMessage(playerid, "You are not inside a food truck.");

    SendErrorMessage(playerid,"This vehicle isn't loaded any food.");
    return 1;
}

CMD:createcrate(playerid, params[])
{
    static
        id = -1,
        type,
        Float:x, Float:y, Float:z, Float:a;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", type))
    {
        SendSyntaxMessage(playerid, "/createcrate [type]");
        SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 1: Melee | 2: Pistol Parts | 3: SMG Parts | 4: Shotgun Parts | 5: Rifle Parts | 6: Drugs");
        return 1;
    }
    if(type < 1 || type > 6)
        return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 6.");

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);

    id = Crate_Create(playerid,type, x, y, z, a);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for crates.");

    SendServerMessage(playerid, "You have successfully created crate ID: %d.", id);
    return 1;
}

CMD:destroycrate(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroycrate [crate id]");

    if((id < 0 || id >= MAX_CRATES) || !CrateData[id][crateExists])
        return SendErrorMessage(playerid, "You have specified an invalid crate ID.");

    Crate_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed crate ID: %d.", id);
    return 1;
}

CMD:crates(playerid, params[])
{
    static
        string[512];

    string[0] = '\0';

    for (new i = 1, l = GetVehiclePoolSize(); i <= l; i ++) if(IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
    {
        if(GetVehicleCrates(i) < 1)
            return SendErrorMessage(playerid, "There are no crates in this vehicle.");

        for (new  j = 0; j != MAX_CRATES; j ++) if(CrateData[j][crateExists] && CrateData[j][crateVehicle] == i) {
            format(string, sizeof(string), "%sCrate #%d: %s Parts\n", string, j, Crate_GetType(CrateData[j][crateType]));
        }
        PlayerData[playerid][pCrateVehicle] = i;
        return Dialog_Show(playerid, Crates, DIALOG_STYLE_LIST, "Vehicle Crates", string, "Take", "Cancel");
    }
    SendErrorMessage(playerid, "You are not in range of any loadable vehicle.");
    return 1;
}

/*CMD:craftparts(playerid, params[])
{
    new id = -1;

    if(PlayerData[playerid][pJob] != JOB_WEAPON_SMUGGLER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_WEAPON_SMUGGLER)
        return SendErrorMessage(playerid, "You are not in range of the craft factory.");

    if(PlayerData[playerid][pCarryCrate] == -1)
        return SendErrorMessage(playerid, "You are not carrying any crate.");

    if(PlayerData[playerid][pCrafting])
        return SendErrorMessage(playerid, "You are already crafting weapon parts.");

    if(CrateData[PlayerData[playerid][pCarryCrate]][crateType] < 1 || CrateData[PlayerData[playerid][pCarryCrate]][crateType] > 5)
        return SendErrorMessage(playerid, "There are no weapon parts in this crate.");

    PlayerData[playerid][pCrafting] = 1;

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s begins crafting their %s Parts.", ReturnName(playerid, 0), Crate_GetType(CrateData[PlayerData[playerid][pCarryCrate]][crateType]));
    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Crafting parts...", 11000, 3);

    TogglePlayerControllable(playerid, 0);
    SetTimerEx("CraftParts", 8000, false, "dd", playerid, PlayerData[playerid][pCarryCrate]);
    return 1;
}*/

CMD:createfaction(playerid, params[])
{
    static
        id = -1,
        type,
        name[128];

    if (CheckAdmin(playerid, 9))
        return PermissionError(playerid);

    if(sscanf(params, "ds[128]", type, name))
    {
        SendSyntaxMessage(playerid, "/createfaction [type] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 1: Police | 2: News | 3: Medical");
        SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 4: Government | 5: Gang | 6: Correctional | 7: Legal Faction");
        return 1;
    }
    if(type < 1 || type > 7)
        return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 7.");

    id = Faction_Create(name, type);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for factions.");

    SendServerMessage(playerid, "You have successfully created faction ID: %d.", id);
    return 1;
}

CMD:destroyfaction(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyfaction [faction id]");

    if((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
        return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    Faction_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed faction ID: %d.", id);
    return 1;
}

CMD:editfaction(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 9))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editfaction [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" name, color, type, models, locker, ranks, maxranks, motd");
        return 1;
    }
    if((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
        return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    if(!strcmp(type, "name", true))
    {
        new name[128];

        if(sscanf(string, "s[128]", name))
            return SendSyntaxMessage(playerid, "/editfaction [id] [name] [new name]");

        format(FactionData[id][factionName], 128, name);

        Faction_Save(id);
        SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the name of faction ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
    }
    else if(!strcmp(type, "number", true))
    {
        new number;

        if(sscanf(string, "d", number))
            return SendSyntaxMessage(playerid, "/editfaction [id] [number]");

        FactionData[id][factionNumber] = number;

        Faction_Save(id);
        SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the number of faction ID: %d to \"%d\".", ReturnName(playerid, 0), id, number);
    }
    // if(!strcmp(type, "stock", true))
    // {
    //     new amount;

    //     if(sscanf(string, "d", amount))
    //         return SendSyntaxMessage(playerid, "/editfaction [id] [stock] [amount]");

    //     FactionData[id][factionStock] = amount;

    //     Faction_Save(id);
    //     SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the storage of faction ID: %d to \"%s\".", ReturnName(playerid, 0), id, amount);
    // }
    else if(!strcmp(type, "motd", true))
    {
        new name[225];

        if(sscanf(string, "s[225]", name))
            return SendSyntaxMessage(playerid, "/editfaction [id] [motd] [faction motd]");

        format(FactionData[id][factionMotd], 225, ColouredText(name));

        Faction_Save(id);
        SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the motd of faction ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
    }
    else if(!strcmp(type, "maxranks", true))
    {
        new ranks;

        if(sscanf(string, "d", ranks))
            return SendSyntaxMessage(playerid, "/editfaction [id] [maxranks] [maximum ranks]");

        if(ranks < 1 || ranks > 15)
            return SendErrorMessage(playerid, "The specified ranks can't be below 1 or above 15.");

        FactionData[id][factionRanks] = ranks;

        Faction_Save(id);
    }
    else if(!strcmp(type, "color", true))
    {
        new color;

        if(sscanf(string, "h", color))
            return SendSyntaxMessage(playerid, "/editfaction [id] [color] [hex color]");

        FactionData[id][factionColor] = color;
        Faction_Update(id);

        Faction_Save(id);
        SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the {%06x}color{FF6347} of faction ID: %d.", ReturnName(playerid, 0), color >>> 8, id);
    }
    else if(!strcmp(type, "type", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint)) return SendSyntaxMessage(playerid, "/editfaction [id] [type] [id (1. Police | 2. News | 3. Medic | 4. Gov | 5. Gang | 6. Correctional | 7. Legal])");

        FactionData[id][factionType] = typeint;
        if(typeint == FACTION_GANG || typeint == FACTION_LEGAL)
            FactionData[id][factionColor] = X11_TURQUOISE_1;

        Faction_Save(id);
        SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the type of faction ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
    }
    else if(!strcmp(type, "models", true))
    {
        static
            skins[8];

        for (new i = 0; i < sizeof(skins); i ++)
            skins[i] = (FactionData[id][factionSkins][i]) ? (FactionData[id][factionSkins][i]) : (19300);

        PlayerData[playerid][pFactionEdit] = id;
        ShowModelSelectionMenu(playerid, "Faction Skins", MODEL_SELECTION_SKINS, skins, sizeof(skins), -16.0, 0.0, -55.0);
    }
    else if(!strcmp(type, "bank", true))
    {
        static
            bank;

        if(sscanf(string, "d", bank))
            return SendSyntaxMessage(playerid, "/editfaction id bank [money value] (current bank %s)", FactionData[id][factionMoney]);

        if(bank < 0)
            return SendErrorMessage(playerid, "Faction bank can't unser $0.");

        FactionData[id][factionMoney] = bank;
        SendFactionAlert(X11_TOMATO_1,"AdmCmd: %s has adjusted the faction bank ID: %d to %s", ReturnName2(playerid), id, FormatNumber(bank));
    }
    else if(!strcmp(type, "locker", true))
    {
        PlayerData[playerid][pFactionEdit] = id;
        Dialog_Show(playerid, FactionLocker, DIALOG_STYLE_LIST, "Faction Locker", "Set Location\nLocker Weapons", "Select", "Cancel");
    }
    return 1;
}

CMD:colorrgb(playerid, params[])
{
    new r, g, b;

    if(sscanf(params, "ddd", r, g, b))
        return SendSyntaxMessage(playerid, "/colorrgb [r] [g] [b]");

    SendClientMessage(playerid, RGBAToInt(r, g, b, 255), "Color");
    return 1;
}

CMD:color(playerid, params[])
{
    static
        color;

    if(sscanf(params, "h", color)) {
        SendSyntaxMessage(playerid, "/color [hex color]");
        SendClientMessage(playerid, X11_YELLOW_2, "[EXAMPLE]:"WHITE" 0xFFFFFFFF is white, 0xFF0000FF is red, etc.");
    }
    else {
        SendClientMessageEx(playerid, color, "This is a test message, testing color 0x%06xFF.", color >>> 8);
    }
    return 1;
}

CMD:database(playerid, params[])
{
    new
        userid,
        Cache:charges,
        str[400];

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "This faction can't accese a database.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(!IsNearFactionLocker(playerid)) return SendErrorMessage(playerid, "Must be in near faction locker.");
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/database [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");

    charges = mysql_query(g_iHandle, sprintf("SELECT * FROM `warrants` WHERE `Arrest` = '1' AND `Suspect` = '%s' ORDER BY `ID` DESC", ReturnName(userid)));

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i=0; i<cache_num_rows(); i++) {
        new reason[128],date[64], suspect[24];
        cache_get_field_content(i, "Suspect", suspect);
        cache_get_field_content(i, "Description", reason);
        cache_get_field_content(i, "Date", date);

        strcat(str, sprintf("%d. {BDF38B}%s\n"WHITE"Issuer: "YELLOW"%s"WHITE" - (%s)\n", i+1, reason, suspect, date));
    }
    cache_delete(charges);

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Database", ""WHITE"You have a valid database from:\n\n"YELLOW"Name: "WHITE"%s\n"YELLOW"Birthdate: "WHITE"%s\n"YELLOW"Phone Number: "WHITE"%d\n"YELLOW"Origin: "WHITE"%s\n\n"YELLOW"Criminal Record: \n"WHITE"%s", "Close", "", ReturnName(userid, 0), PlayerData[userid][pBirthdate], PlayerData[userid][pPhone] ? (sprintf("%d",PlayerData[userid][pPhone])) : ("None"), PlayerData[userid][pOrigin], str);
    return 1;
}

CMD:odatabase(playerid, params[])
{
    static
        username[24];

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "This faction can't accese a database.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(!IsNearFactionLocker(playerid)) return SendErrorMessage(playerid, "Must be in near faction locker.");
    if(sscanf(params, "s[24", username)) return SendSyntaxMessage(playerid, "/odatabase [username]");

    mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character`='%s'", username), "OfflineDatabase", "ds", playerid, username);
    return 1;
}

Function:OfflineDatabase(playerid, username[])
{
    if(!cache_num_rows()) return SendErrorMessage(playerid, "You've entered invalid player name.");

    new
        birthdate[24],
        origin[24],
        phone,
        str[400],
        Cache:charges;

    phone = cache_get_field_int(0, "Phone");
    cache_get_field_content(0, "Birthdate", birthdate);
    cache_get_field_content(0, "Origin", origin);

    charges = mysql_query(g_iHandle, sprintf("SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", username));

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i=0; i<cache_num_rows(); i++) {
        new reason[128],date[64], suspect[24], arrest;
        cache_get_field_content(i, "Suspect", suspect);
        cache_get_field_content(i, "Description", reason);
        cache_get_field_content(i, "Date", date);
        arrest = cache_get_field_int(i, "Arrest");

        if(arrest >= 1)
        {
            strcat(str, sprintf("%d. {BDF38B}%s\n"WHITE"Issuer: "YELLOW"%s"WHITE" - (%s) "RED"(Arrested)\n", i+1, reason, suspect, date));
        }
        else
        {
            strcat(str, sprintf("%d. {BDF38B}%s\n"WHITE"Issuer: "YELLOW"%s"WHITE" - (%s)\n", i+1, reason, suspect, date));
        }
    }
    cache_delete(charges);

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Offline Database", ""WHITE"You have a valid database from:\n\n"YELLOW"Name: "WHITE"%s\n"YELLOW"Birthdate: "WHITE"%s\n"YELLOW"Phone Number: "WHITE"%d\n"YELLOW"Origin: "WHITE"%s\n\n"YELLOW"Criminal Record: \n"WHITE"%s", "Close", "", username, birthdate, phone, origin, str);
    return 1;
}
//Temporary Disabled till further information
// UnloadStock(playerid)
// {
//     new factionid = PlayerData[playerid][pFaction];
//     if(FactionData[factionid][factionStock] >= 100 && PlayerData[playerid][pFactionStock] < 100)
//     {
//         FactionData[factionid][factionStock] -= 100;
//         PlayerData[playerid][pFactionStock] += 100;
//         SendClientMessageEx(playerid, COLOR_WHITE, "You takes 100 faction stock from storage, you need to deliver it to another faction storage!");
//         SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
//         SetPlayerAttachedObject(playerid, JOB_SLOT, 2969, 1, 0.0000, 0.4599, 0.0000, 0.0000, 89.7000, 0.0000, 1.000000, 1.000000, 1.000000);
//     }
//     return 1;
// }
// LoadStock(playerid, factionid)
// {
//     if(FactionData[factionid][factionStock] <= FACTION_STOCK_LIMIT)
//     {
//         FactionData[factionid][factionStock] += 100;
//         PlayerData[playerid][pFactionStock] = 0;
//         SendClientMessageEx(playerid, COLOR_WHITE, "You store 100 faction stock into storage!");
//         SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
//         RemovePlayerAttachedObject(playerid, JOB_SLOT);
//     }
//     return 1;
// }
// CMD:unloadstock(playerid, params[])
// {
//     new factionid = PlayerData[playerid][pFaction];

//     if(AccountData[playerid][pAdminDuty] > 0)
//         return SendErrorMessage(playerid, "You're on admin duty.");

//     if(factionid == -1)
//         return SendErrorMessage(playerid, "You must be a faction member.");

//     if(!IsNearFactionLocker(playerid))
//         return SendErrorMessage(playerid, "You are not in range of your faction's locker.");

//     UnloadStock(playerid);
//     return 1;
// }
// CMD:loadstock(playerid, params[])
// {
//     new factionid;
//     if(AccountData[playerid][pAdminDuty] > 0)
//         return SendErrorMessage(playerid, "You're on admin duty.");

//     if(factionid == -1)
//         return SendErrorMessage(playerid, "You must be a faction member.");

//     if((factionid = IsNearLocker(playerid)) != -1 && PlayerData[playerid][pFactionStock] > 0)
//     {
//         LoadStock(playerid, factionid);
//     }
//     return 1;
// }
CMD:flocker(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

    if(AccountData[playerid][pAdminDuty] > 0)
        return SendErrorMessage(playerid, "You're on admin duty.");

    if(factionid == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(!IsNearFactionLocker(playerid))
        return SendErrorMessage(playerid, "You are not in range of your faction's locker.");

    if(FactionData[factionid][factionType] == FACTION_GANG)
        return Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Locker Weapons\nFamily Bank\nRespawn Faction Vehicles", "Select", "Cancel");

    if(FactionData[factionid][factionType] == FACTION_LEGAL)
        return Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Family Bank\nRespawn Faction Vehicles", "Select", "Cancel");

    if(FactionData[factionid][factionType] == FACTION_POLICE) 
        return Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Toggle Duty\nArmored Vest\nLocker Skins\nLocker Weapons\nFaction Bank\nRespawn Faction Vehicles\nUndercover Skin\nCustom Skin", "Select", "Cancel");
    
    Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Toggle Duty\nArmored Vest\nLocker Skins\nLocker Weapons\nFaction Bank\nRespawn Faction Vehicles", "Select", "Cancel"); 
    return 1;
}

CMD:setleader(playerid, params[])
{
    static
        userid,
        id;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, id))
        return SendSyntaxMessage(playerid, "/setleader [playerid/PartOfName] [faction id] (Use -1 to unset)");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
        return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    if(id == -1)
    {
        ResetFaction(userid);

        SendServerMessage(playerid, "You have removed %s's faction leadership.", ReturnName(userid, 0));
        SendServerMessage(userid, "%s has removed your faction leadership.", ReturnName(playerid, 0));
    }
    else
    {
        SetFaction(userid, id);
        PlayerData[userid][pFactionRank] = FactionData[id][factionRanks];

        SendServerMessage(playerid, "You have made %s the leader of \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
        SendServerMessage(userid, "%s has made you the leader of \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
    }
    return 1;
}

CMD:asetfaction(playerid, params[])
{
    static
        userid,
        id;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, id))
        return SendSyntaxMessage(playerid, "/asetfaction [playerid/PartOfName] [faction id] (Use -1 to unset)");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
        return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    if(id == -1)
    {
        ResetFaction(userid);

        SendServerMessage(playerid, "You have removed %s from their faction.", ReturnName(userid, 0));
        SendServerMessage(userid, "%s has removed you from your faction.", ReturnName(playerid, 0));
    }
    else
    {
        SetFaction(userid, id);

        if(!PlayerData[userid][pFactionRank])
            PlayerData[userid][pFactionRank] = 1,

        SendServerMessage(playerid, "You have set %s's faction to \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
        SendServerMessage(userid, "%s has set your faction to \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
    }
    return 1;
}

CMD:asetrank(playerid, params[])
{
    static
        userid,
        rank,
        factionid;

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, rank))
        return SendSyntaxMessage(playerid, "/asetrank [playerid/PartOfName] [rank id]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if((factionid = PlayerData[userid][pFaction]) == -1)
        return SendErrorMessage(playerid, "That player is not a member of any faction.");

    if(rank < 1 || rank > FactionData[factionid][factionRanks])
        return SendErrorMessage(playerid, "Invalid rank. Ranks for this faction range from 1 to %d.", FactionData[factionid][factionRanks]);

    PlayerData[userid][pFactionRank] = rank;

    SendServerMessage(playerid, "You have set %s's faction rank to %d.", ReturnName(userid, 0), rank);
    SendServerMessage(userid, "%s has set your faction rank to %d.", ReturnName(playerid, 0), rank);

    return 1;
}

CMD:customooc(playerid, params[])
{
    if(!IsPlayerVIP(playerid))
        return SendErrorMessage(playerid, "Hanya member donatur yang dapat menggunakan perintah ini!");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/customooc [ooc name \"(null)\" to disable]");

    if(strlen(params) > 12)
        return SendErrorMessage(playerid, "Custom ooc hanya dibatasi sebanyak 12 karakter.");

    format(PlayerData[playerid][pAlias], 24, "%s", params);
    UpdateCharacterString(playerid, "Alias", params);
    SendServerMessage(playerid, "OOC name changed to "YELLOW"%s", PlayerData[playerid][pAlias]);
    return 1;
}

CMD:offlineremove(playerid, params[])
{
    new
        str[128];

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

    format(str, sizeof(str), "SELECT * FROM `characters` WHERE `Faction`='%d'", PlayerData[playerid][pFactionID]);
    mysql_tquery(g_iHandle, str, "OfflineRemove", "d", playerid);
    return 1;
}

Function:OfflineRemove(playerid)
{
    new
        name[MAX_PLAYER_NAME],
        str[64 * 30];

    for(new id; id != cache_num_rows(); id++)
    {
        cache_get_field_content(id, "Character", name);

        format(str, sizeof(str), "%s%s\n", str, name);
    }
    if(strlen(str)) Dialog_Show(playerid, RemoveMember, DIALOG_STYLE_LIST, "Remove Offline Member", str, "Remove", "Close");
    else SendErrorMessage(playerid, "There are no one member for this faction/family.");
    return 1;
}

CMD:online(playerid, params[])
{
    new dialog[4098],
        factionid = PlayerData[playerid][pFaction];

    if(factionid == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    strcat(dialog, "ID\tName\tRank Name\tRank\n");
    foreach (new i : Player) if(PlayerData[i][pFaction] == factionid) {
        strcat(dialog, sprintf("%d\t%s\t%s\t%d\n", i, ReturnName(i, 0), Faction_GetRank(i), PlayerData[i][pFactionRank]));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS,"Online Members", dialog,"Close","");
    return 1;
}

CMD:setbadge(playerid, params[])
{
    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_NEWS)
        return SendErrorMessage(playerid, "This faction can't set a badge.");

    static
        userid,
        badge;

    if(sscanf(params, "ud", userid, badge)) return SendSyntaxMessage(playerid, "/setbadge [playerid] [badge id]");
    if(PlayerData[userid][pFaction] != PlayerData[playerid][pFaction]) return SendErrorMessage(playerid, "This player is'nt in your faction.");

    PlayerData[userid][pBadge] = badge;
    SendCustomMessage(userid, "BADGE", "%s have set your badge to %s. %03d", ReturnName(playerid), GetInitials(Faction_GetRank(userid)), badge);
    SendCustomMessage(playerid, "BADGE", "You have set badge for %s to %s. %03d", ReturnName(userid), GetInitials(Faction_GetRank(userid)), badge);
    return 1;
}

CMD:showbadge(playerid, params[])
{
    static
        userid;

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(GetFactionType(playerid) == FACTION_GANG || GetFactionType(playerid) == FACTION_LEGAL)
        return SendErrorMessage(playerid, "This faction can't show a badge.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/showbadge [playerid]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    SendClientMessageEx(userid, X11_WHITE,"Official badge of {%06x}%s", FactionData[PlayerData[playerid][pFaction]][factionColor] >>> 8, FactionData[PlayerData[playerid][pFaction]][factionName]);
    SendClientMessageEx(userid, COLOR_CLIENT, "Full Name: "COL_GREEN"%s.", ReturnName(playerid, 0));
    SendClientMessageEx(userid, COLOR_CLIENT, "Badge Number: "COL_GREEN"%s. %03d.", GetInitials(Faction_GetRank(playerid)), PlayerData[playerid][pBadge]);
    SendClientMessageEx(userid, COLOR_CLIENT, "Rank: "COL_GREEN"%s.", Faction_GetRank(playerid));
    cmd_me(playerid, sprintf("showing his badge to %s", ReturnName(userid, 0, 1)));
    return 1;
}

CMD:oocradio(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(GetGVarInt("toggleOOCRadio", GLOBAL_VARTYPE_INT))
        return SendErrorMessage(playerid, "Chat OOC radio dinonaktifkan sementara oleh admin.");

    if(PlayerData[playerid][pDisableFaction])
        return SendErrorMessage(playerid, "Aktifkan faction chat terlebih dahulu pada perintah (/toggle)!");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/(o)oc r(adio[message]");

    SendFactionMessage(factionid, FactionData[PlayerData[playerid][pFaction]][factionColor], "(( %s %s: %s ))", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
    Log_Save(E_LOG_FACTION_CHAT, sprintf("[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params));
    return 1;
}

CMD:finvite(playerid, params[])
{
    new
        userid;

    if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "You must be a faction member.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/finvite [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");
    if(PlayerData[userid][pFaction] == PlayerData[playerid][pFaction]) return SendErrorMessage(playerid, "That player is already part of your faction.");
    if(PlayerData[userid][pFaction] != -1) return SendErrorMessage(playerid, "That player is already part of another faction.");
    if(PlayerData[userid][pScore] < 2) return SendErrorMessage(playerid, "That player isn't level 2.");

    PlayerData[userid][pFactionOffer] = playerid;
    PlayerData[userid][pFactionOffered] = PlayerData[playerid][pFaction];

    SendServerMessage(playerid, "You have requested %s to join \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s has offered you to join \"%s\" (type \"/approve faction\").", ReturnName(playerid, 0), Faction_GetName(playerid));

    return 1;
}

CMD:fmotd(playerid, params[])
{
    new
        motd[128];

    if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "You must be a faction member.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);
    if(sscanf(params, "s[128]", motd)) return SendSyntaxMessage(playerid, "/fmotd [faction motd]");

    format(FactionData[PlayerData[playerid][pFaction]][factionMotd], 128, ColouredText(motd));

    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "Faction Motd: "YELLOW"%s "WHITE"update motd this faction to %s.", ReturnName(playerid, 0), ColouredText(motd));
    return 1;
}

CMD:fremove(playerid, params[])
{
    new
        userid;

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/fremove [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
        return SendErrorMessage(playerid, "That player is not part of your faction.");

    SendServerMessage(playerid, "You have removed %s from \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s has removed you from the \"%s\" faction.", ReturnName(playerid, 0), Faction_GetName(playerid));

    ResetFaction(userid);

    return 1;
}

// CMD:fdivname(playerid, params[])
// {
//     if(PlayerData[playerid][pFaction] == -1)
//         return SendErrorMessage(playerid, "You must be a faction member.");

//     if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
//         return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

//     Faction_ShowDivision(playerid, PlayerData[playerid][pFaction]);
//     return 1;
// }

CMD:frankname(playerid, params[])
{
    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

    Faction_ShowRanks(playerid, PlayerData[playerid][pFaction]);
    return 1;
}

CMD:franksalary(playerid, params[])
{
    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(GetFactionType(playerid) == FACTION_GANG || GetFactionType(playerid) == FACTION_LEGAL)
        return SendErrorMessage(playerid, "You're not in right faction type!");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

    Faction_ShowSalary(playerid, PlayerData[playerid][pFaction]);
    return 1;
}

CMD:frank(playerid, params[])
{
    new
        userid,
        rankid;

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

    if(sscanf(params, "ud", userid, rankid))
        return SendSyntaxMessage(playerid, "/frank [playerid/PartOfName] [rank (1-%d)]", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
        return SendErrorMessage(playerid, "That player is not part of your faction.");

    if(rankid < 1 || rankid > FactionData[PlayerData[playerid][pFaction]][factionRanks])
        return SendErrorMessage(playerid, "Invalid rank specified. Ranks range from 1 to %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

    PlayerData[userid][pFactionRank] = rankid;

    SendServerMessage(playerid, "You have promoted %s to %s (%d).", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
    SendServerMessage(userid, "%s has promoted you to %s (%d).", ReturnName(playerid, 0), Faction_GetRank(userid), rankid);

    return 1;
}

CMD:beanbullets(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid))
        return SendErrorMessage(playerid, "You can't use this command right now.");

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SADOC)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!IsPlayerDuty(playerid))
        return SendErrorMessage(playerid, "You must on duty to use bean bullets.");
    
    if(GetPlayerWeapon(playerid) != WEAPON_SHOTGUN)
        return SendErrorMessage(playerid, "You need to carry a shotgun to use this!");

    if(!PlayerData[playerid][pBeanBullets])
    {
        PlayerData[playerid][pBeanBullets] = 1;
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out a bean bullets as he reload it into their shotgun.", ReturnName(playerid, 0));
    }
    else
    {
        PlayerData[playerid][pBeanBullets] = 0;
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s removes bean bullets as he reload it and change into normal bullets.", ReturnName(playerid, 0));
    }
    return 1;
}

CMD:tazer(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid))
        return SendErrorMessage(playerid, "You can't use this command right now.");

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SADOC)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!IsPlayerDuty(playerid))
        return SendErrorMessage(playerid, "You must on duty to use tazer.");

    if(!PlayerData[playerid][pTazer])
    {
        PlayerData[playerid][pTazer] = 1;
        GivePlayerWeapon(playerid, 23, 20000);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out a tazer from their holster.", ReturnName(playerid, 0));
    }
    else
    {
        RefreshFactionWeapon(playerid);
        PlayerData[playerid][pTazer] = 0;
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s puts their tazer into their holster.", ReturnName(playerid, 0));
    }
    return 1;
}

CMD:tie(playerid, params[])
{    
    new
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/tie [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(!IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "You must be near this player.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't tie yourself!");

    if(GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP)
        return SendErrorMessage(playerid, "The player must be idle or handsup.");

    if(GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
        return SendErrorMessage(playerid, "The player must be onfoot before you can tie them.");

    if(PlayerData[playerid][pTied])
        return SendErrorMessage(playerid, "You're tied up !");
        
    if(PlayerData[userid][pTied])
        return SendErrorMessage(playerid, "The player is already tied!");

    PlayerData[userid][pTied] = 1;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);

    SendServerMessage(userid, "You've been "RED"tied up "WHITE"by "YELLOW"%s.", ReturnName(playerid, 0, 1));
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s tightens a rope as he tie %s's body.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:untie(playerid, params[])
{
    new
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/untie [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You cannot untie yourself.");

    if(!IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "You must be near this player.");

    if(!PlayerData[userid][pTied])
        return SendErrorMessage(playerid, "The player is not tied at the moment.");

    PlayerData[userid][pTied] = 0;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

    SendServerMessage(userid, "You've been "GREEN"untied "WHITE"by "YELLOW"%s.", ReturnName(playerid, 0, 1));
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s loosens the rope on %s's body.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:cuff(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SADOC)
        return SendErrorMessage(playerid, "You must be a police officer.");

    new
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/cuff [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(!IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "You must be near this player.");

    if(PlayerData[userid][pStunned] < 0 && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(userid))
        return SendErrorMessage(playerid, "The player must be idle or stunned.");

    if(GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
        return SendErrorMessage(playerid, "The player must be onfoot before you can cuff them.");

    if(PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "The player is already cuffed.");

    if(PlayerData[userid][pTied])
        return SendErrorMessage(playerid, "The player is tied!");

    PlayerData[userid][pCuffed] = 1;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);

    SendServerMessage(userid, "You've been "RED"cuffed "WHITE"by "YELLOW"%s.", ReturnName(playerid, 0, 1));
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s tightens a pair of handcuffs on %s's wrists.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:uncuff(playerid, params[])
{
    new
        userid;

    if(GetFactionType(playerid) != FACTION_POLICE && AccountData[playerid][pAdminDuty] != 1 && GetFactionType(playerid) != FACTION_SADOC)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/uncuff [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You cannot uncuff yourself.");

    if(!IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "You must be near this player.");

    if(!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "The player is not cuffed at the moment.");

    PlayerData[userid][pCuffed] = 0;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

    SendServerMessage(userid, "You've been "GREEN"cuffed "WHITE"by "YELLOW"%s.", ReturnName(playerid, 0, 1));
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s loosens the pair of handcuffs on %s's wrists.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:undrag(playerid, params[])
{
    new
        userid = PlayerData[playerid][pOnDrag];

    if(userid != INVALID_PLAYER_ID)
    {
        if(PlayerData[userid][pDead] <= 20)
        {
            StopDragging(userid);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s releases %s from their grip.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
            return SendErrorMessage(playerid, "This player already dead you can't help him anymore!");
        }

        new
            is_at_location = Location_IsPlayerAt(playerid, LOCATION_UNDRAG)
        ;

        if(is_at_location == 1 && PlayerData[userid][pInjured] && IsPlayerNearPlayer(playerid, userid, 10.0))
        {
            if(FactionMember_GetTypeCount(FACTION_MEDIC, true) > 2)
            {
                SendErrorMessage(playerid, "There are more than 2 medics on duty, you are not allowed to use this!");
                return 1;
            }

            if(GetMoney(playerid) < 500)
                return SendErrorMessage(playerid, "You don't have enough money to pay for treatment, make sure you have $500 in your pocket.");

            for (new i = 0; i != MAX_FACTIONS; i ++){ 
                if(FactionData[i][factionExists]) {
                    if(FactionData[i][factionType] == FACTION_MEDIC){
                        FactionData[i][factionMoney] += 500;
                    }
                }
            }
            GiveMoney(playerid, -500, ECONOMY_ADD_SUPPLY, "undrag");
            SetHealth(userid, 100);
            PlayerData[userid][pInjured] = 0;
            PlayerData[userid][pBleeding] = 0;
            PlayerData[userid][pBleedTime] = 0;
            PlayerData[userid][pDead] = 100.0;
            PlayerData[userid][pBandage] = 0;
            PlayerDeath[userid] = 0;
            Damage_Reset(userid);
            ClearAnimations(userid);
            TogglePlayerControllable(userid,1);
            InjuredTag(userid, false, false, true);

            TextDrawHideForPlayer(userid, gServerTextdraws[0]);

            SendCustomMessage(playerid, "Treatment", "You have drop %s's injured body to medic.", ReturnName(userid, 0));
            SendCustomMessage(userid, "Treatment", "%s has drop your body to medical center.", ReturnName(playerid, 0));
            SendNearbyMessage(playerid, 20.0, X11_PLUM, "* Medic would come and start medical treatment on %s (( LSES Staff ))", ReturnName(userid, 0, 1));
        }
        TogglePlayerControllable(userid,1);
        StopDragging(userid);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s releases %s from their grip.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        return 1;
    }
    SendErrorMessage(playerid, "You are not dragging any one else!");
    return 1;
}

CMD:drag(playerid, params[])
{
    new userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/drag [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You cannot drag yourself.");

    if(!IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "You must be near this player.");

    if(!PlayerData[userid][pTied] && !PlayerData[userid][pCuffed] && !PlayerData[userid][pStunned] && !PlayerData[userid][pInjured])
        return SendErrorMessage(playerid, "The player is not cuffed or stunned.");

    if(PlayerData[playerid][pOnDrag] != INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You're carrying someone else!");

    if(PlayerData[playerid][pInjured])
        return SendErrorMessage(playerid, "You cannot do this while you're injured!");

    PlayerData[playerid][pOnDrag] = userid;

    PlayerData[userid][pDragged] = 1;
    PlayerData[userid][pDraggedBy] = playerid;
    PlayerData[userid][pDragTimer] = repeat DragUpdate(playerid, userid);

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s grabs %s and starts dragging them.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:detain(playerid, params[])
{
    new
        userid,
        vehicleid = GetNearestVehicle(playerid);

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SADOC) return SendErrorMessage(playerid, "You must be a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/detain [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");
    if(userid == playerid) return SendErrorMessage(playerid, "You cannot detained yourself.");
    if(!IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "You must be near this player.");
    if(!PlayerData[userid][pCuffed]) return SendErrorMessage(playerid, "The player is not cuffed at the moment.");
    if(vehicleid == INVALID_VEHICLE_ID) return SendErrorMessage(playerid, "You are not near any vehicle.");
    if(GetVehicleMaxSeats(vehicleid) < 2) return SendErrorMessage(playerid, "You can't detain that player in this vehicle.");

    if(IsPlayerInVehicle(userid, vehicleid))
    {
        TogglePlayerControllable(userid, 1);

        RemoveFromVehicle(userid);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s opens the door and pulls %s out the vehicle.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    }
    else
    {
        new seatid = GetAvailableSeat(vehicleid, 2);

        if(seatid == -1)
            return SendErrorMessage(playerid, "There are no more seats remaining.");

        SendServerMessage(userid, "You've been "RED"detained "WHITE"by "YELLOW"%s.", ReturnName(playerid, 0, 1));
        TogglePlayerControllable(userid, 0);

        StopDragging(userid);
        PutPlayerInVehicleEx(userid, vehicleid, seatid);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s opens the door and places %s into the vehicle.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    }
    return 1;
}

CMD:createarrest(playerid, params[])
{
    static
        id = -1,
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    id = Arrest_Create(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for arrest points.");

    SendServerMessage(playerid, "You have successfully created arrest point ID: %d.", id);
    return 1;
}

CMD:destroyarrest(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyarrest [point id]");

    if((id < 0 || id >= MAX_ARREST_POINTS) || !ArrestData[id][arrestExists])
        return SendErrorMessage(playerid, "You have specified an invalid arrest point ID.");

    Arrest_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed arrest point ID: %d.", id);
    return 1;
}

CMD:trace(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You are not faction duty.");

    if(IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)))
        return SendErrorMessage(playerid, "You must be inside this vehicle.");

    Dialog_Show(playerid, Trace, DIALOG_STYLE_LIST, "Trace", "Vehicle number plate\nPhone Number", "Select", "Cancel");
    return 1;
}
// CMD:charge(playerid, params[])
// {
//     SendErrorMessage(playerid, "Sedang dibetulin cmdnya sabar.");
//     /*static
//     userid,
//     reason[128];

//     if(userid == INVALID_PLAYER_ID)
//         return SendErrorMessage(playerid, "You have specified an invalid player.");

//     if(GetFactionType(playerid) != FACTION_POLICE)
//         return SendErrorMessage(playerid, "You must be a police officer.");

//     if(sscanf(params, "us[128]", userid, reason))
//     return SendSyntaxMessage(playerid, "/charge [playerid/PartOfName] [reason]");

//     if(!PlayerData[playerid][pOnDuty])
//         return SendErrorMessage(playerid, "You are not faction duty.");

//     PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants]++;

//     AddWarrant(PlayerData[playerid][pMDCPlayer], userid, reason);
//     SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has placed a charge on %s for \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), reason);
//     //Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Please enter the ID of the player:", "Submit", "Back");

//     -------------------------------HARUSNYA GA PAKE INI, KEBAWAH NYA GA PAKE!!!!!----------------------------------------------

//     new targetid;
//     if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)))
//     if(sscanf(params, "u", targetid)) return SendSyntaxMessage(playerid, "/charge [playerid/PartOfName]");

//     if(response)
//     {
//         if(sscanf(inputtext, "u", targetid))
//             return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Please enter a valid user.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

//         if(targetid == INVALID_PLAYER_ID)
//             return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Invalid user specified.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

//         if(PlayerData[targetid][pWarrants] > 14)
//             return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: The user already has 15 active warrants.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

//         PlayerData[playerid][pMDCPlayer] = targetid;
//         Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Place Charge", "Please enter the description of the crime committed by %s:", "Submit", "Back", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
//     }
//     else cmd_mdc(playerid, "\1");*/
//     return 1;
// }

CMD:mdc(playerid, params[])
{
    // new
    //     vehicleid = GetPlayerVehicleID(playerid);

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SADOC)
        return SendErrorMessage(playerid, "Kamu bukan seorang police officer.");

    if(!IsPlayerDuty(playerid))
        return SendErrorMessage(playerid, "Kamu harus duty terlebhi dahulu!.");
    // if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
    //     return SendErrorMessage(playerid, "Perintah hanya dapat digunakan didalan kendaraan, diposisi pengemudi!.");

    if(IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 5.0, 1315.7710,1642.6311,19.8989) || IsPlayerInRangeOfPoint(playerid, 5.0, -2326.0173,176.6534,35.3984))
    {
        // if(IsABike(vehicleid) || !IsEngineVehicle(vehicleid))
        //     return SendErrorMessage(playerid, "Gunakan kendaraan lain untuk menggunakan perintah ini!.");

        OpenMDC(playerid);
    }
    else SendErrorMessage(playerid, "You need to be inside the vehicle or behind office desk to use this!");
    //Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Active Warrants\nPlace Charges\nView Charges\nLook Up", "Select", "Cancel");
    return 1;
}
CMD:giveup(playerid, params[])
{
    if(!PlayerData[playerid][pInjured]) return SendErrorMessage(playerid, "You are not injured at the moment.");
    if(PlayerData[playerid][pGiveupTime]) return SendErrorMessage(playerid, "You must waiting %d minutes for spawn to hospital", (PlayerData[playerid][pGiveupTime]/60) + 1);

    if(PlayerData[playerid][pJailTime] > 0)
    {
        for (new i = 0; i < 100; i ++) {
            SendClientMessage(playerid,-1, "");
        }

        if(PlayerData[playerid][pPrisoned]) 
        {
            SetPlayerInPrison(playerid);
            ResetPlayerHospitalInPrison(playerid);
        }
        else 
        {
            SpawnPlayerInJail(playerid);
            ResetPlayerHospitalInPrison(playerid);
        }
        SendServerMessage(playerid, "Kamu masih dalam masa dipenjara selama "YELLOW"%d menit.", PlayerData[playerid][pJailTime]/60);
    }
    else
    {
        TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
        PlayerData[playerid][pInjured] = 0;
        SetHealth(playerid, 100);
        Body_PrepareCreate(playerid);
        SetHospitalSpawn(playerid);
        PlayerData[playerid][pHospitalTime] = 0;                
    }
    if(PlayerData[playerid][pDraggedBy] != INVALID_PLAYER_ID) {
        SendServerMessage(PlayerData[playerid][pDraggedBy], "Player yang sedang kamu angkat telah /giveup.");
        StopDragging(playerid);
    }
    SendServerMessage(playerid, "You have given up and accepted your death.");
    return 1;
}

static CheckCondition(playerid, userid)
{
    new string[750];
    if(PlayerData[userid][pCough] >= 5)
    {
        new rate[15];

        switch((PlayerData[userid][pCough]/5))
        {
            case 1: rate="LOW";
            case 2: rate="MEDIUM";
            case 3: rate="HIGH";
            default: rate="EXTREME";
        }

        strcat(string, ""COL_LIGHTBLUE"============== "COL_GREEN"HEALTH STATUS "COL_LIGHTBLUE"==============\n");
        strcat(string, ""WHITE"Condition: "YELLOW"SICK (Cough)\n");
        strcat(string, ""WHITE"How to cure: "YELLOW"eat Neladryl Acetate\n");
        strcat(string, sprintf(""WHITE"Sickness rate: "YELLOW"%s\n\n", rate));
    }
    if(PlayerData[userid][pMigrainRate])
    {
        new rate[15];

        switch((PlayerData[userid][pMigrainRate]))
        {
            case 1: rate="LOW";
            case 2: rate="MEDIUM";
            case 3: rate="HIGH";
            default: rate="EXTREME";
        }

        strcat(string, ""COL_LIGHTBLUE"============== "COL_GREEN"HEALTH STATUS "COL_LIGHTBLUE"==============\n");
        strcat(string, ""WHITE"Condition: "YELLOW"SICK (Migrain)\n");
        strcat(string, ""WHITE"How to cure: "YELLOW"eat Kratotamax Plus 1.0\n");
        strcat(string, sprintf(""WHITE"Sickness rate: "YELLOW"%s\n\n", rate));
    }
    if(PlayerData[userid][pFever])
    {
        new rate[15];

        switch((PlayerData[userid][pFever]))
        {
            case 1: rate="LOW";
            case 2: rate="MEDIUM";
            case 3: rate="HIGH";
            default: rate="EXTREME";
        }

        strcat(string, ""COL_LIGHTBLUE"============== "COL_GREEN"HEALTH STATUS "COL_LIGHTBLUE"==============\n");
        strcat(string, ""WHITE"Condition: "YELLOW"SICK (High fever)\n");
        strcat(string, ""WHITE"How to cure: "YELLOW"eat Lazattavitus Extra\n");
        strcat(string, sprintf(""WHITE"Sickness rate: "YELLOW"%s\n", rate));
    }
    if(PlayerData[userid][pInjured] == 1)
    {

        strcat(string, ""COL_LIGHTBLUE"============== "COL_GREEN"HEALTH STATUS "COL_LIGHTBLUE"==============\n");
        strcat(string, ""WHITE"Condition: "YELLOW"Injured\n");
        strcat(string, ""WHITE"How to cure: "YELLOW"Emergency Medical Services Staff\n");
    }

    if(isnull(string)) return SendServerMessage(playerid, "That player healthy!");

    SendServerMessage(userid, ""YELLOW"%s "WHITE"showing your condition.", ReturnName(playerid, 0));
    SendServerMessage(playerid, "You're now showing "YELLOW"%s "WHITE"condition.", ReturnName(userid, 0));
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, sprintf("%s condition", ReturnName(userid, 0)), string, "Close", "");
    return 1;
}
//=========================================> Sick system <==========================================
CMD:inspect(playerid, params[])
{
    new
        userid;

    if(GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "You're not medic.");
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/inspect [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 4.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    
    PlayerData[userid][pAcceptInspect] = playerid;
    CheckCondition(playerid, userid);
    return 1;
}


CMD:examine(playerid, params[])
{
    new
        userid;

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/examine [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 4.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    PlayerData[userid][pAcceptInspect] = playerid;
    SendServerMessage(userid, ""YELLOW"%s "WHITE"want to examine your condition, "COL_GREEN"/approve examine "WHITE"to approve it.", ReturnName(playerid, 0));
    SendServerMessage(playerid, "You're trying to check "YELLOW"%s "WHITE"condition.", ReturnName(userid, 0));
    return 1;
}

CMD:givepills(playerid, params[])
{
    static
        userid,
        id,
        amount;

    if(sscanf(params, "uii", userid, id, amount))
    {
        SendSyntaxMessage(playerid, "/givepills [playerid/PartOfName] [id] [amount]");
        SendCustomMessage(playerid, "ID", "1, Neladryl Acetate. | 2, Kratotamax Plus 1.0. | 3. Lazattavitus Extra.");
        return 1;
    }
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 4.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "That player is you!.");
    if(amount < 1 || amount > 10) return SendErrorMessage(playerid, "You can give only between 1-10");

    if(id == 1)
    {
        if(PlayerData[playerid][pCoughPills] < amount) return SendErrorMessage(playerid, "You don't have enough pills.");

        PlayerData[playerid][pCoughPills] -= amount;
        PlayerData[userid][pCoughPills] += amount;
        cmd_me(playerid, sprintf("take's out %d Neladryl Acetate and give it to %s", amount, ReturnName(userid, 0)));
    }
    else if(id == 2)
    {
        if(PlayerData[playerid][pMigrainPills] < amount) return SendErrorMessage(playerid, "You don't have enough pills.");
        PlayerData[playerid][pMigrainPills] -= amount;
        PlayerData[userid][pMigrainPills] += amount;
        cmd_me(playerid, sprintf("take's out %d Kratotamax Plus 1.0 and give it to %s", amount, ReturnName(userid, 0)));
    }
    else if(id == 3)
    {
        if(PlayerData[playerid][pFiverPills] < amount) return SendErrorMessage(playerid, "You don't have enough pills.");
        PlayerData[playerid][pFiverPills] -= amount;
        PlayerData[userid][pFiverPills] += amount;
        cmd_me(playerid, sprintf("take's out %d Lazattavitus Extra and give it to %s", amount, ReturnName(userid, 0)));
    }
    else SendCustomMessage(playerid, "ID", "1, Neladryl Acetate. | 2, Kratotamax Plus 1.0. | 3. Lazattavitus Extra.");
    return 1;
}

CMD:treatment(playerid, params[])
{
    new
		is_at_location = Location_IsPlayerAt(playerid, LOCATION_TREATMENT)
	;

	if(is_at_location < 1)
        return SendErrorMessage(playerid, "Go to hospital for a medical treatment.");

    if(Economy_GetTreatmentPrice() > 0 && GetMoney(playerid) < Economy_GetTreatmentPrice())
        return SendErrorMessage(playerid, "You don't have enough money to get treatment, make sure you have $%s in your pocket.", FormatNumber(Economy_GetTreatmentPrice()));

    if(!FactionMember_GetTypeCount(FACTION_MEDIC, true))
    {
        if(PlayerData[playerid][pMigrainRate] != 0 || PlayerData[playerid][pFever] != 0 || PlayerData[playerid][pCough] != 0 || PlayerData[playerid][pBleeding])
        {
            GiveMoney(playerid, -Economy_GetTreatmentPrice(), ECONOMY_ADD_SUPPLY, "medical treatment");
            PlayerData[playerid][pCough] = 0;
            PlayerData[playerid][pMigrainRate] = 0;
            PlayerData[playerid][pFever] = 0;
            PlayerData[playerid][pBleeding] = 0;
            PlayerData[playerid][pBleedTime] = 0;
            PlayerData[playerid][pBandage] = 0;
            Damage_Reset(playerid);

            SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"[MEDICAL]"WHITE" Paramedic give you a treatment at hospital now you're healthy!");
            SendServerMessage(playerid,"You paid %s for a "YELLOW"treatment "WHITE"from medical center", FormatNumber(Economy_GetTreatmentPrice()));
        }
        else return SendErrorMessage(playerid, "Your health condition is good you dont need a treatment from paramedic");
    }
    else return SendErrorMessage(playerid, "There are medic member on duty get some treatment from them!");
    return 1;
}

CMD:takepills(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_MEDIC)
        return SendErrorMessage(playerid, "You can't take pills from this locker.");

    new
		is_at_location = Location_IsPlayerAt(playerid, LOCATION_TAKEPILLS)
	;

	if(is_at_location < 1)
        return SendErrorMessage(playerid, "Go to pharmacy to get the pills.");

    Dialog_Show(playerid, TakePills, DIALOG_STYLE_TABLIST_HEADERS, "Medicine", "Obat\tPenyakit\nNeladryl Acetate\tCough\nKratotamax Plus 1.0\tMigrain\nLazattavitus Extra\tHigh Fever", "Take", "Close");
    //\nAmphytum Nanolacetate\tAddiction
    return 1;
}
CMD:heal(playerid, params[])
{
    static
        userid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
        return SendErrorMessage(playerid, "You must be part of a medical faction.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You're are not on duty.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/heal [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    SetHealth(userid, 100);
    PlayerData[userid][pBleeding] = 0;
    PlayerData[userid][pBleedTime] = 0;
    PlayerData[userid][pBandage] = 0;

    SendCustomMessage(playerid, "HEAL", "You have healed %s's character.", ReturnName(userid, 0));
    SendCustomMessage(userid, "HEAL", "%s has healed your character.", ReturnName(playerid, 0));

    Log_Save(E_LOG_HEAL, sprintf("[%s] %s (%s) heal by using (/heal) %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]));
    return 1;
}
CMD:cure(playerid, params[])
{
    static
        userid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
        return SendErrorMessage(playerid, "You must be part of a medical faction.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You're are not on duty.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/cure [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't cure yourself.");

    if(!PlayerData[userid][pInjured])
        return SendErrorMessage(playerid, "That player is not injured.");

    PlayerData[userid][pInjured] = 0;
    PlayerData[userid][pBleeding] = 0;
    PlayerData[userid][pBleedTime] = 0;
    PlayerData[userid][pDead] = 100.0;
    PlayerDeath[userid] = 0;
    PlayerData[userid][pBandage] = 0;
    SetHealth(userid, 100);
    
    Damage_Reset(userid);
    ClearAnimations(userid);
    TogglePlayerControllable(userid,1);
    InjuredTag(userid, false, false, true);

    TextDrawHideForPlayer(userid, gServerTextdraws[0]);

    SendCustomMessage(playerid, "CURE", "You have healed %s's character.", ReturnName(userid, 0));
    SendCustomMessage(userid, "CURE", "%s has healed your character.", ReturnName(playerid, 0));

    Log_Save(E_LOG_CURE, sprintf("[%s] %s (%s) revive by using (/cure) %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]));
    return 1;
}

CMD:loadinjured(playerid, params[])
{
    static
        userid,
        seatid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
        return SendErrorMessage(playerid, "You must be part of a medical faction.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/loadinjured [playerid/PartOfName]");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You're are not on duty.");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't load yourself into an ambulance.");

    if(!PlayerData[userid][pInjured])
        return SendErrorMessage(playerid, "That player is not injured.");

    for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++) if(IsPlayerNearBoot(playerid, i) && GetVehicleModel(i) == 416)
    {
        seatid = GetAvailableSeat(i, 2);

        if(seatid == -1)
            return SendErrorMessage(playerid, "There is no room for the patient.");

        ClearAnimations(userid);
        PlayerData[userid][pInjured] = 2;

        PutPlayerInVehicleEx(userid, i, seatid);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s opens up the ambulance and loads %s on the stretcher.", ReturnName(playerid, 0), ReturnName(userid, 0));

        TogglePlayerControllable(userid, 0);
        SetHealth(userid, 100.0);
        TextDrawSetString(gServerTextdraws[0], "You're injured ~r~now you're on ambulance.");
        return 1;
    }
    SendErrorMessage(playerid, "You must be near an ambulance.");
    return 1;
}

CMD:dropinjured(playerid, params[])
{
    new
        userid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
        return SendErrorMessage(playerid, "You must be part of a medical faction.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/dropinjured [playerid/PartOfName]");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You're are not on duty.");

    if(userid == INVALID_PLAYER_ID || !IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
        return SendErrorMessage(playerid, "That player is disconnected or you are not inside of the ambulance vehicle!");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't deliver yourself to the hospital.");

    if(!PlayerData[userid][pInjured])
        return SendErrorMessage(playerid, "That player is not injured.");

    for (new i = 0; i < sizeof(arrHospitalDeliver); i ++) if(IsPlayerInRangeOfPoint(playerid, 5.0, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]))
    {
        SetHospitalSpawn(userid);
        TextDrawHideForPlayer(userid, gServerTextdraws[0]);
        SendServerMessage(playerid, "You have delivered %s to the hospital.", ReturnName(userid, 0));
        SendServerMessage(userid, "Kamu telah dimasukkan dalam masa penyembuhan.");
        return 1;
    }
    SendErrorMessage(playerid, "You must be near a hospital deliver location.");
    return 1;
}
CMD:m(playerid, params[])
{
    static
        inisial[5];

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
        return SendErrorMessage(playerid, "You can't use the megaphone.");

    if(PlayerData[playerid][pOnDuty] != 1)
        return SendErrorMessage(playerid, "You are not on duty!");

    if(!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You can't make this action if not in any vehicle.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/(m)egaphone [message]");

    switch(FactionData[PlayerData[playerid][pFaction]][factionType])
    {
        case FACTION_POLICE: inisial="PD";
        case FACTION_MEDIC: inisial="MD";
        case FACTION_GOV: inisial="GOV";
    }

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 25.0, X11_YELLOW_2, "(%s Megaphone) %s says: %.64s", inisial, ReturnName(playerid, 0, 1), params);
        SendNearbyMessage(playerid, 25.0, X11_YELLOW_2, "...%s", params[64]);
    }
    else {
        SendNearbyMessage(playerid, 25.0, X11_YELLOW_2, "(%s Megaphone) %s says: %s", inisial, ReturnName(playerid, 0, 1), params);
    }
    return 1;
}

CMD:checkpulse(playerid, params[])
{
    static
        userid;

    new string[128], string2[128];

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/checkpulse [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't use this command for yourself.");

    if(!PlayerData[userid][pInjured])
        return SendErrorMessage(playerid, "You can't check this player pulse that's not injured.");

    format(string, sizeof(string), "reaches %s's hand as he checking for their pulse", ReturnName(userid));
    cmd_me(playerid, string);
    format(string2, sizeof(string2), "%s's pulse would be %.2f", ReturnName(userid), PlayerData[userid][pDead]);
    cmd_do(playerid, string2);
    return 1;
}

CMD:bls(playerid, params[])
{
    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/bls [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't use this command for yourself.");

    if(PlayerData[userid][pFirstAid])
        return SendErrorMessage(playerid, "That player is already being bandaged.");

    if(!PlayerData[userid][pInjured])
        return SendErrorMessage(playerid, "This player is not injured !.");

    if(GetFactionType(playerid) == FACTION_MEDIC || PlayerData[playerid][pBLSLicense])
    {
        if(PlayerData[userid][pDead] > 20 && PlayerData[userid][pDead] < 100) //|| PlayerData[userid][pBleeding] || GetHealth(userid) < 99
        {
            PlayerData[userid][pFirstAid] = true;
            PlayerData[userid][pAidTimer] = repeat FirstAidUpdate(userid, 0);

            PlayerData[userid][pBandage] = 1;
            BleedingNotification[userid] = 1;

            SendClientMessageEx(userid, COLOR_WHITE, "%s hold your wounds using a "YELLOW"BLS kit, "WHITE"it will increase your heartrate pulse!", ReturnName(playerid));
        }
        else return SendErrorMessage(playerid, "You can't bandage this player, player is dead / not bleeding");
    }
    else return SendErrorMessage(playerid, "You don't have BLS License!");
    return 1;
}

CMD:broadcast(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
        return SendErrorMessage(playerid, "You must be part of a news faction.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    if(!IsNewsVehicle(GetPlayerVehicleID(playerid)) && !IsPlayerInRangeOfPoint(playerid, 5, 726.0004,-1371.4176,499.7360))
        return SendErrorMessage(playerid, "You must be inside a news van or chopper or in sanews studio.");

    if(!PlayerData[playerid][pBroadcast])
    {
        PlayerData[playerid][pBroadcast] = true;

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has started a news broadcast.", ReturnName(playerid, 0));
        SendServerMessage(playerid, "You have started a news broadcast (use \"/bc [broadcast text]\" to broadcast).");
    }
    else
    {
        PlayerData[playerid][pBroadcast] = false;

        foreach (new i : Player) if(PlayerData[i][pNewsGuest] == playerid) {
            PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
        }
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has stopped a news broadcast.", ReturnName(playerid, 0));
        SendServerMessage(playerid, "You have stopped the news broadcast.");
    }
    return 1;
}
CMD:adoffer(playerid, params[])
{
    new 
        vehicleid = GetPlayerVehicleID(playerid), 
        userid,
        string[255]
    ;

    if(sscanf(params, "us[60]", userid, params))
        return SendSyntaxMessage(playerid, "/adoffer [playerid] [text]");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You're are not on duty.");

    if(GetFactionType(playerid) != FACTION_NEWS)
        return SendErrorMessage(playerid, "You're not news reporter!");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(!PlayerData[userid][pPhone])
        return SendErrorMessage(playerid, "Player tersebut tidak mempunyai handphone!");

    if(PlayerData[userid][pPlaceAd])
        return SendErrorMessage(playerid, "Player sudah membuat iklan sebelumnya, tunggu dipublikasikan terlebih dahulu!");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/adoffer [playerid] [text]");
    
    if(strlen(params) > 60)
        return SendErrorMessage(playerid, "Text iklan hanya dibatasi sebanyak 60 karakter");

    if(IsPlayerInRangeOfPoint(playerid, 3, 665.6755,-1397.9178,801.3588) || IsPlayerInRangeOfPoint(playerid, 3, 667.7479,-1397.9178,801.3588) || IsPlayerInRangeOfPoint(playerid, 3, 669.6223,-1397.9178,801.3588) || IsNewsVehicle(vehicleid))
    {
        format(string, sizeof(string), "You have offered "YELLOW"%s"WHITE" an advertisement\n"RED"[!] "WHITE"%s\n\nInput the Price you want to offer :", ReturnName(userid), params);
        Dialog_Show(playerid, PriceOffer, DIALOG_STYLE_INPUT, "Advertisement Offer Price", string, "Offer", "Cancel");

        format(PlayerData[userid][pAdvertise], 60, params);
        format(AdsHolder[userid], 60, params);
        PhoneHolder[userid] = PlayerData[userid][pPhone];
        OfferID[userid] = playerid;
        OfferID[playerid] = userid;
    }
    else SendErrorMessage(playerid, "You're not at news headquarter or news vehicle!");
    return 1;
}

Dialog:PriceOffer(playerid, response, listitem, inputtext[])
{
    new 
        userid = OfferID[playerid],
        string[255],
        offeredstring[255]
    ;
    if(response)
    {
        format(offeredstring, sizeof(offeredstring), "You have offered "YELLOW"%s"WHITE" an advertisement\n"RED"[!] "WHITE"%s\n\nInput the Price you want to offer :", ReturnName(userid), PlayerData[userid][pAdvertise]);

        if(isnull(inputtext) || !IsNumeric(inputtext))
            return Dialog_Show(playerid, PriceOffer, DIALOG_STYLE_INPUT, "Advertisement Offer Price", offeredstring, "Offer", "Cancel");

        if(strval(inputtext) < 100 || strval(inputtext) > 500)
            return Dialog_Show(playerid, PriceOffer, DIALOG_STYLE_INPUT, "Advertisement Offer Price", offeredstring, "Offer", "Cancel");

        if(GetMoney(userid) < strval(inputtext))
            return SendErrorMessage(playerid, "Player tidak mempunyai uang untuk membuat iklan! sebanyak %s.", FormatNumber(strval(inputtext)));

        OfferPrice[userid] = strval(inputtext);
        format(string, sizeof(string), ""RED"[!] "WHITE"%s\n[PRICE] "GREEN"%s", PlayerData[userid][pAdvertise], FormatNumber(strval(inputtext)));
        Dialog_Show(userid, AdsBox, DIALOG_STYLE_MSGBOX, "Advertisement Offer", string, "Accept", "Decline");
    }
    else
    {
        OfferID[userid] = INVALID_PLAYER_ID;
        OfferID[playerid] = INVALID_PLAYER_ID;
        OfferPrice[userid] = 0;
    }
    return 1;
}
Dialog:UnrentVehicle(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new vehicleid,
            vehid = GetPlayerVehicleID(playerid),
            Float:health,
            price;

        if((vehicleid = Vehicle_ReturnID(vehid)) != RETURN_INVALID_VEHICLE_ID && Vehicle_IsRented(playerid, vehicleid))
	    {
            GetVehicleHealth(vehid, health);
            price = floatround(floatmul((1000.0 - health), Economy_GetRentVehDamagedFine()), floatround_ceil);
            GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "unrent destroyed vehicle");
            SendServerMessage(playerid, "Kamu telah mengembalikan kendaraan rental "CYAN"%s ", GetVehicleNameByModel(VehicleData[vehicleid][vehModel]));
            SendServerMessage(playerid, "Kamu membayar "YELLOW"%s "WHITE"untuk kerusakan yang ada pada kendaraan", FormatNumber(price));
            Vehicle_RemoveRented(playerid, vehicleid);
            Vehicle_Delete(vehicleid);
        }
    }
    return 1;
}

//Tandain sini  SELECT `pScore`, `Character` FROM `characters` ORDER BY `pScore` DESC LIMIT 10; 

Dialog:AdsBox(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new userid = OfferID[playerid], price = OfferPrice[playerid];
        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "advertisement");
        PlayerData[playerid][pPlaceAd] = 1;
        new time = (GetPlayerVIPLevel(playerid) > 1 ? 15000 : 30000);
        PlayerData[playerid][pAdvertiseTimer] = defer PublishAdvertisement[time](playerid);

        SendClientMessageEx(userid, X11_CYAN_2, "Advertisement Offer:"WHITE" Pelanggan "GREEN"menerima "WHITE"advertisement offer, akan muncul dalam %d detik.", (GetPlayerVIPLevel(playerid) > 1 ? 15 : 30));
        SendClientMessageEx(playerid, X11_CYAN_2, "PUBLISHER:"WHITE" Iklanmu akan dipublikasikan dalam waktu %d detik.", (GetPlayerVIPLevel(playerid) > 1 ? 15 : 30));
        for(new i = 0; i != MAX_FACTIONS; i++) if(FactionData[i][factionExists] && FactionData[i][factionType] == FACTION_NEWS) {
            FactionData[i][factionMoney] += price;
        }
    }
    else
    {
        new userid = OfferID[playerid];
        SendClientMessageEx(userid, X11_CYAN_2, "Advertisement Offer: "WHITE" Pelanggan "RED"menolak "WHITE"advertisement offer!");
        PlayerData[playerid][pAdvertise][0] = EOS;
        format(AdsHolder[playerid], 120, "NULL");
        PhoneHolder[playerid] = 0;
        OfferID[playerid] = INVALID_PLAYER_ID;
        OfferPrice[playerid] = 0; 
    }
    return 1;
}
CMD:ad(playerid, params[])
{
    if(PlayerData[playerid][pScore] < 2)
        return SendErrorMessage(playerid, "Harus level 2 untuk membuat iklan.");

    new
		is_at_location = Location_IsPlayerAt(playerid, LOCATION_ADVERTISEMENT)
	;

	if(is_at_location < 1) 
        return SendErrorMessage(playerid, "Gunakan perintah ini ditempat pengiklanan.");

    // if(GetPlayerVirtualWorld(playerid) < 1 || GetPlayerInterior(playerid) < 1)
    //     return SendErrorMessage(playerid, "Ini bukan lokasi pengiklanan!");

    if(!Inventory_HasItem(playerid, "Cellphone"))
        return SendErrorMessage(playerid, "Kamu tidak memiliki handphone.");

    if(!PlayerData[playerid][pPhone])
        return SendErrorMessage(playerid, "Beli SIM Card terlebih dahulu!");

    if(PlayerData[playerid][pPlaceAd])
        return SendErrorMessage(playerid, "Kamu sudah membuat iklan sebelumnya, tunggu dipublikasikan terlebih dahulu!");

    if(GetMoney(playerid) < 100)
        return SendErrorMessage(playerid, "Uang yang dibutuhkan untuk membuat iklan sebanyak $100.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/ad [advertisement]");

    if(strlen(params) > 60)
        return SendErrorMessage(playerid, "Text iklan hanya dibatasi sebanyak 60 karakter");

    // if(FactionMember_GetTypeCount(FACTION_NEWS, true))
    //     return SendClientMessage(playerid, COLOR_WHITE, "There are "YELLOW"SANews "WHITE"member "GREEN"on-duty"WHITE", go talk to them for "GREEN"advertisement!");

    GiveMoney(playerid, -100, ECONOMY_ADD_SUPPLY, "advertisement");

    PlayerData[playerid][pPlaceAd] = 1;
    format(PlayerData[playerid][pAdvertise], 60, params);
    format(AdsHolder[playerid], 120, params);
    PhoneHolder[playerid] = PlayerData[playerid][pPhone];

    new time = (GetPlayerVIPLevel(playerid) > 1 ? 15000 : 30000);
    PlayerData[playerid][pAdvertiseTimer] = defer PublishAdvertisement[time](playerid);

    for(new i = 0; i != MAX_FACTIONS; i++) if(FactionData[i][factionExists] && FactionData[i][factionType] == FACTION_NEWS) {
        FactionData[i][factionMoney] += 100;
    }
    SendClientMessageEx(playerid, X11_CYAN_2, "PUBLISHER:"WHITE" Iklanmu akan dipublikasikan dalam waktu %d detik.", (GetPlayerVIPLevel(playerid) > 1 ? 15 : 30));
    return 1;
}

CMD:bc(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
        return SendErrorMessage(playerid, "You must be part of a news faction.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/bc [broadcast text]");

    if(!IsNewsVehicle(GetPlayerVehicleID(playerid)) && !IsPlayerInRangeOfPoint(playerid, 7, 2781.4900,-2064.8379,12.1890))
        return SendErrorMessage(playerid, "You must be inside a news van or chopper or in sanews studio.");

    if(!PlayerData[playerid][pBroadcast])
        return SendErrorMessage(playerid, "You must be broadcasting to use this command.");

    if(strlen(params) > 64) {
        foreach (new i : Player) if(!PlayerData[i][pDisableBC]) {
            SendClientMessageEx(i, COLOR_ORANGE, "[SAN] Reporter %s: %.64s", ReturnName(playerid, 0), params);
            SendClientMessageEx(i, COLOR_ORANGE, "...%s", params[64]);
        }
    }
    else {
        foreach (new i : Player) if(!PlayerData[i][pDisableBC]) {
            SendClientMessageEx(i, COLOR_ORANGE, "[SAN] Reporter %s: %s", ReturnName(playerid, 0), params);
        }
    }
    return 1;
}

CMD:live(playerid, params[])
{
    static
        livechat[128];

    if(sscanf(params, "s[128]", livechat))
        return SendSyntaxMessage(playerid, "/live [live chat]");

    if(PlayerData[playerid][pNewsGuest] == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You're not invite by sanews member to live!");

    if(!IsNewsVehicle(GetPlayerVehicleID(playerid)) && !IsPlayerInRangeOfPoint(playerid, 7, 2781.4900,-2064.8379,12.1890))
        return SendErrorMessage(playerid, "You must be inside a news van or chopper or in sanews studio.");

    if(GetFactionType(PlayerData[playerid][pNewsGuest]) == FACTION_NEWS)
    {
        foreach (new i : Player) if(!PlayerData[i][pDisableBC]) {
            SendClientMessageEx(i, COLOR_ORANGE, "[SAN] Guest %s: %s", ReturnName(playerid, 0), livechat);
        }
    }
    return 1;
}
CMD:inviteguest(playerid, params[])
{
    static
        userid;

    if(GetFactionType(playerid) != FACTION_NEWS)
        return SendErrorMessage(playerid, "You must be part of a news faction.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/inviteguest [playerid/PartOfName]");

    if(!PlayerData[playerid][pBroadcast])
        return SendErrorMessage(playerid, "You must be broadcasting to use this command.");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't add yourself as a guest.");

    if(PlayerData[userid][pNewsGuest] == playerid)
        return SendErrorMessage(playerid, "That player is already a guest of your broadcast.");

    if(PlayerData[userid][pNewsGuest] != INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is already a guest of another broadcast.");

    PlayerData[userid][pNewsGuest] = playerid;

    SendServerMessage(playerid, "You have added %s as a broadcast guest.", ReturnName(userid, 0));
    SendServerMessage(userid, "%s has added you as a broadcast guest ((/live to start broadcast)).", ReturnName(userid, 0));
    return 1;
}

CMD:removeguest(playerid, params[])
{
    static
        userid;

    if(GetFactionType(playerid) != FACTION_NEWS)
        return SendErrorMessage(playerid, "You must be part of a news faction.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/removeguest [playerid/PartOfName]");

    if(!PlayerData[playerid][pBroadcast])
        return SendErrorMessage(playerid, "You must be broadcasting to use this command.");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't remove yourself as a guest.");

    if(PlayerData[userid][pNewsGuest] != playerid)
        return SendErrorMessage(playerid, "That player is not a guest of your broadcast.");

    PlayerData[userid][pNewsGuest] = INVALID_PLAYER_ID;

    SendServerMessage(playerid, "You have removed %s from your broadcast.", ReturnName(userid, 0));
    SendServerMessage(userid, "%s has removed you from their broadcast.", ReturnName(userid, 0));
    return 1;
}

CMD:pay(playerid, params[])
{
    static
        userid,
        amount;

    if(PlayerData[playerid][pHour] < 2)
        return SendErrorMessage(playerid, "You must play 2 hours to use /pay");

    if(sscanf(params, "ud", userid, amount))
        return SendSyntaxMessage(playerid, "/pay [playerid/PartOfName] [amount]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(PlayerData[userid][pSpectator] != INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't give yourself money.");

    if(amount < 1)
        return SendErrorMessage(playerid, "Please specify an amount above 1 dollar.");

    if(amount > GetMoney(playerid))
        return SendErrorMessage(playerid, "You don't have that much money.");

    new string[72];

    GiveMoney(playerid, -amount);
    GiveMoney(userid, amount);

    format(string, sizeof(string), "You have received ~g~%s~w~ from %s.", FormatNumber(amount), ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);
    format(string, sizeof(string), "You have given ~r~%s~w~ to %s.", FormatNumber(amount), ReturnName(userid, 0));
    ShowPlayerFooter(playerid, string);

    SendServerMessage(userid, "Anda menerima "COL_GREEN"%s "WHITE"dari "YELLOW"%s.", FormatNumber(amount), ReturnName(playerid,0,1));
    SendServerMessage(playerid, "Anda memberikan uang "COL_GREEN"%s "WHITE"ke "YELLOW"%s.", FormatNumber(amount), ReturnName(userid,0,1));

    ApplyAnimation(userid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
    ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0, 1);

    Log_Save(E_LOG_PAY, sprintf("[%s] %s (%s) has paid %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(userid, 0), AccountData[userid][pIP]));
    return 1;
}

CMD:factions(playerid, params[])
{
    new string[1040], type[32];
    strcat(string, "ID\tName\tType\n");
    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionExists])
    {
        switch(FactionData[i][factionType])
        {
            case FACTION_POLICE: type="POLICE";
            case FACTION_MEDIC: type="MEDIC";
            case FACTION_NEWS: type="NEWS";
            case FACTION_GOV: type="GOVERMENT";
            case FACTION_GANG: type="FAMILY";
            case FACTION_SADOC: type="SADOC";
            case FACTION_LEGAL: type="FAMILY";
        }
        format(string, sizeof(string), "%s"WHITE"%d\t{%06x}%s\t"WHITE"%s\n", string, i, FactionData[i][factionColor] >>> 8, FactionData[i][factionName], type);
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Factions List", string, "Close", "");
    return 1;
}

CMD:dept(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SADOC)
        return SendErrorMessage(playerid, "You must be a civil service worker.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/dept [department radio]");

    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_MEDIC || FactionData[i][factionType] == FACTION_GOV || FactionData[i][factionType] == FACTION_SADOC) {
        SendFactionMessage(i, COLOR_DEPARTMENT, "%s %s: %s", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
    }
    Log_Save(E_LOG_FACTION_CHAT, sprintf("[%s] [/dept] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params));
    return 1;
}

CMD:odept(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SADOC)
        return SendErrorMessage(playerid, "You must be a civil service worker.");

    if(GetGVarInt("toggleOOCDept", GLOBAL_VARTYPE_INT))
        return SendErrorMessage(playerid, "Chat OOC department dinonaktifkan sementara oleh admin.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/odept [ooc department radio]");

    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_MEDIC || FactionData[i][factionType] == FACTION_GOV || FactionData[i][factionType] == FACTION_SADOC) {
        SendFactionMessage(i, COLOR_DEPARTMENT, "(( %s: %s ))", ReturnName(playerid, 0), params);
    }
    Log_Save(E_LOG_FACTION_OOC_CHAT, sprintf("[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params));
    return 1;
}
CMD:clist(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
    return SendErrorMessage(playerid, "You're not allowed to use this command.");
    new header[24],
        string[4096],
        count = 0;

    format(header, sizeof(header), "911 Caller");
    strcat(string, "CID\tFaction\tLocation\tCaller Name\n");

    foreach(new i : Player)
    {
        if(callerData[i][callerExists])
        {
            if(GetFactionType(playerid) == FACTION_POLICE && callerData[i][callerType] == 1)
            {
                strcat(string, sprintf("%d\t[POLICE]\t%s\t%s (%d)\n", i, callerData[i][callerPosName], callerData[i][callerName], callerData[i][callerPhoneNumber]));
                count++;
            }
            else if((GetFactionType(playerid) == FACTION_MEDIC || GetFactionType(playerid) == FACTION_POLICE) && callerData[i][callerType] == 2)
            {
                strcat(string, sprintf("%d\t[MEDIC]\t%s\t%s (%d)\n", i, callerData[i][callerPosName], callerData[i][callerName], callerData[i][callerPhoneNumber]));
                count++;
            }
            else if((GetFactionType(playerid) == FACTION_MEDIC || GetFactionType(playerid) == FACTION_POLICE) && callerData[i][callerType] == 3)
            {
                strcat(string, sprintf("%d\t[MEDIC & POLICE]\t%s\t%s (%d)\n", i, callerData[i][callerPosName], callerData[i][callerName], callerData[i][callerPhoneNumber]));
                count++;
            }
        }
    }

    if (count) Dialog_Show(playerid, TrackCaller, DIALOG_STYLE_TABLIST_HEADERS, header, string, "Choose", "Back");
    else SendErrorMessage(playerid, "There is no 911 caller.");
    return 1;
}
CMD:gps(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "GPS System"))
        return SendErrorMessage(playerid, "You must have a GPS system to use this.");

    if(PlayerData[playerid][pInjured] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0)
        return SendErrorMessage(playerid, "You can't use this command at the moment.");

    Dialog_Show(playerid, MainGPS, DIALOG_STYLE_LIST, "GPS System", "Custom Locations\nFind House\nFind Business\nFind Entrance\nFind Job\nFind Tree\nFind Dealership\nFind Workshop\nFind Garage\nOther\nFind Cargo", "Select", "Cancel");
    return 1;
}

CMD:setmotd(playerid, params[])
{
    static
        motd[225],
        string[255],
        options[32],
        str[225];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params,"s[32]S()[225]", options, str))
        return SendSyntaxMessage(playerid, "/setmotd [amotd/gmotd/hmotd]");

    if(!strcmp(options, "gmotd", true))
    {
        if(sscanf(str,"s[225]", motd))
            return SendSyntaxMessage(playerid, "/setmotd gmotd [motd] 'NULL' for nothing");

        format(ServerData[g_Motd], 225, ColouredText(motd));
        format(string,sizeof(string),"UPDATE `server` SET `g_Motd` = '%s' WHERE `ID`='1'", SQL_ReturnEscaped(ServerData[g_Motd]));
    }
    else if(!strcmp(options, "amotd", true))
    {
        if(sscanf(str,"s[225]", motd))
            return SendSyntaxMessage(playerid, "/setmotd amotd [motd] 'NULL' for nothing");

        format(ServerData[a_Motd], 225, ColouredText(motd));
        format(string,sizeof(string),"UPDATE `server` SET `a_Motd` = '%s' WHERE `ID`='1'", SQL_ReturnEscaped(ServerData[a_Motd]));
    }
    else if(!strcmp(options, "hmotd", true))
    {
        if(sscanf(str,"s[225]", motd))
            return SendSyntaxMessage(playerid, "/setmotd hmotd [motd] 'NULL' for nothing");

        format(ServerData[h_Motd], 225, ColouredText(motd));
        format(string,sizeof(string),"UPDATE `server` SET `h_Motd` = '%s' WHERE `ID`='1'", SQL_ReturnEscaped(ServerData[h_Motd]));
    }
    mysql_tquery(g_iHandle, string);
    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s set new %s (%s{FF6347})", ReturnName(playerid), options, ColouredText(motd));
    return 1;
}

CMD:pm(playerid, params[])
{
    new userid, text[128];

    if(sscanf(params, "us[128]", userid, text))
        return SendSyntaxMessage(playerid, "/pm [playerid/PartOfName] [message]");

    if(PlayerData[playerid][pDisablePM])
        return SendErrorMessage(playerid, "Aktifkan toggle pm terlebih dahulu pada perintah (/toggle).");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "Player tersebut tidak login ke server.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "Tidak diizinkan melakukan ke id sendiri!.");

    if(PlayerData[userid][pDisablePM])
        return SendErrorMessage(playerid, "Player tersebut memblokir private message.");

    if(GetPVarInt(playerid, "PMDelay") > gettime() && !GetAdminLevel(playerid))
        return SendErrorMessage(playerid, "Tunggu %d detik untuk menggunakan perintah ini kembali.", GetPVarInt(playerid, "PMDelay") - gettime());

    GameTextForPlayer(userid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Pesan Baru!", 3000, 3);
    PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);

    new
        line_1[56],
        line_2[84]
    ;

    format(line_1, sizeof(line_1), "%.48s ..", text);
    format(line_2, sizeof(line_2), ".. %s", text[48]);

    if (strlen(text) > 48)
    {
        SendClientMessageEx(userid, X11_YELLOW_2, "(( PM from %s (%d): %s ))", ReturnName2(playerid, 0), playerid, line_1);
        SendClientMessageEx(userid, X11_YELLOW_2, "(( %s ))", line_2);
        //
        SendClientMessageEx(playerid, X11_YELLOW_2, "(( PM to %s (%d): %s ))", ReturnName2(userid, 0), userid, line_1);
        SendClientMessageEx(playerid, X11_YELLOW_2, "(( %s ))", line_2);
    }
    else
    {
        SendClientMessageEx(userid, X11_YELLOW_2, "(( PM from %s (%d): %s ))", ReturnName2(playerid, 0), playerid, text);
        SendClientMessageEx(playerid, X11_YELLOW_2, "(( PM to %s (%d): %s ))", ReturnName2(userid, 0), userid, text);
    }

    SetPVarInt(playerid, "PMDelay", gettime()+5);

    if(GetAdminLevel(playerid) < 8)
    {
        foreach(new i : Player)
        {
            if (SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] && !PlayerData[i][pDisableAPM])
            {
                if (strlen(text) > 48)
                {
                    SendClientMessageEx(i, X11_GREEN_YELLOW, "PM: %s (%d) to %s (%d): %s", ReturnName2(playerid), playerid, ReturnName2(userid), userid, line_1);
                    SendClientMessageEx(i, X11_GREEN_YELLOW, "PM: %s", line_2);
                }
                else
                {
                    SendClientMessageEx(i, X11_GREEN_YELLOW, "PM: %s (%d) to %s (%d): %s", ReturnName2(playerid), playerid, ReturnName2(userid), userid, text);
                }
            }
        }
    }
    Log_Save(E_LOG_PM, sprintf("[%s] %s pm to %s: %s", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), text));
    Discord_Log(PMLOG, sprintf("[%s] %s pm to %s: %s", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), text));
    return 1;
}

CMD:livemode(playerid, params[]) 
{
    if(!PlayerData[playerid][pLiveMode]) 
    {
        PlayerData[playerid][pLiveMode] = 1;
        SendServerMessage(playerid, "You're on live-streaming mode now!");
        SendServerMessage(playerid, "Sensitive information on your account and screen are "GREEN" HIDDEN");
    }
    else 
    {
        PlayerData[playerid][pLiveMode] = 0;
        SendServerMessage(playerid, "You turn off live-streaming mode now!");
        SendServerMessage(playerid, "Sensitive information on your account and screen are "RED" NOT HIDDEN");
    }
    return 1;
}
CMD:blindfold(playerid, params[]) {
    if(PlayerTemp[playerid][temp_blindfold]) {
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_blindfold]);
        PlayerTemp[playerid][temp_blindfold] = false;

        SendClientMessage(playerid, -1, "Blindfold: false");
    }
    else {
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_blindfold]);
        PlayerTemp[playerid][temp_blindfold] = true;

        SendClientMessage(playerid, -1, "Blindfold: true");
    }
    return 1;
}

CMD:toggle(playerid, params[])
{
    new toggle_message[400];

    strcat(toggle_message, "Menu\tStatus\n");
    strcat(toggle_message, sprintf("OOC Global Chat\t%s\n", PlayerData[playerid][pDisableOOC] ? (""COL_RED"off") : (""COL_GREEN"on")));
    strcat(toggle_message, sprintf("Private Message\t%s\n", PlayerData[playerid][pDisablePM] ? (""COL_RED"off") : (""COL_GREEN"on")));
    strcat(toggle_message, sprintf("Broadcast Message\t%s\n", PlayerData[playerid][pDisableBC] ? (""COL_RED"off") : (""COL_GREEN"on")));
    strcat(toggle_message, sprintf("Faction Chat\t%s\n", PlayerData[playerid][pDisableFaction] ? (""COL_RED"off") : (""COL_GREEN"on")));
    strcat(toggle_message, sprintf("Login Notification\t%s\n", PlayerData[playerid][pDisableLogin] ? (""COL_RED"off") : (""COL_GREEN"on")));
    strcat(toggle_message, sprintf("HUD Display\t%s\n", PlayerData[playerid][pTogHud] ? (""COL_RED"off") : (""COL_GREEN"on")));
    strcat(toggle_message, sprintf("VIP Message\t%s\n", IsToggleVIPMessage(playerid) ? (""COL_RED"off") : (""COL_GREEN"on")));
    strcat(toggle_message, sprintf("Chat Animation\t%s\n", PlayerData[playerid][pDisableAnim] ? (""COL_RED"off") : (""COL_GREEN"on")));
    // strcat(toggle_message, sprintf("Relationship Display\t%s\n", PlayerData[playerid][pTogRelation] ? (""COL_RED"off") : (""COL_GREEN"on")));

    if (GetAdminLevel(playerid))
    {
        strcat(toggle_message, sprintf("Admin Notification\t%s\n", PlayerData[playerid][pDisableAdmin] ? (""COL_RED"off") : (""COL_GREEN"on")));
        strcat(toggle_message, sprintf("Player PM\t%s\n", PlayerData[playerid][pDisableAPM] ? (""COL_RED"off") : (""COL_GREEN"on")));
        strcat(toggle_message, sprintf("Player /ldo\t%s\n", PlayerData[playerid][pDisableLDO] ? (""COL_RED"off") : (""COL_GREEN"on")));
        strcat(toggle_message, sprintf("Player Radio\t%s\n", PlayerData[playerid][pDisableRADIO] ? (""COL_RED"off") : (""COL_GREEN"on")));
    }

    Dialog_Show(playerid, ToggleMenu, DIALOG_STYLE_TABLIST_HEADERS, "Toggle List", toggle_message, "Toggle", "Close");
    return 1;
}

CMD:ticket(playerid, params[])
{
    static
        userid,
        price,
        reason[64];

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(sscanf(params, "uds[64]", userid, price, reason)) return SendSyntaxMessage(playerid, "/ticket [playerid/PartOfName] [price] [reason]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(price < 1 || price > 1000) return SendErrorMessage(playerid, "The price can't be below $1 or above $1,000.");

    new id = Ticket_Add(playerid, userid, price, reason);

    if(id != -1) {
        SendServerMessage(playerid, "You have written "YELLOW"%s "WHITE"a ticket for "GREEN"%s"WHITE", reason: "YELLOW"%s", ReturnName(userid, 0), FormatNumber(price), reason);
        SendServerMessage(userid, ""YELLOW"%s "WHITE"has written you a ticket for "GREEN"%s"WHITE", reason: "YELLOW"%s", ReturnName(playerid, 0), FormatNumber(price), reason);
        Log_Save(E_LOG_TICKET, sprintf("[%s] %s has written a %s ticket to %s, reason: %s", ReturnDate(), ReturnName(playerid, 0), FormatNumber(price), ReturnName(userid, 0), reason));
    }
    else SendErrorMessage(playerid, "That player already has %d outstanding tickets.", MAX_PLAYER_TICKETS);
    return 1;
}
CMD:bizwarnings(playerid, params[])
{
    new Cache:checkwarns, query[255],string[2500], id;

    id = Business_Inside(playerid);

    if(id == -1)
        return SendErrorMessage(playerid, "You are not in interior of your business.");

    if(!Business_IsOwner(playerid, id))
        return SendErrorMessage(playerid, "This is not your business.");

    format(query, sizeof(query), "SELECT * FROM `bizwarn` WHERE `bizID`='%d'", BusinessData[id][bizID]);
    checkwarns = mysql_query(g_iHandle, query);

    if(!cache_num_rows())
        return SendErrorMessage(playerid, "There are no warns record on your biz.");

    format(string, sizeof(string), "WarnID\tWarn Date\tWarn By\tReason\n");

    for(new i; i != cache_num_rows(); i++)
    {
        new warnid,
            warnby[24],
            warndate[64],
            warnreason[64];

        warnid = cache_get_field_int(i, "ID");
        cache_get_field_content(i, "bwarnBy", warnby);
        cache_get_field_content(i, "bwarnDate", warndate);
        cache_get_field_content(i, "bwarnReason", warnreason);

        format(string, sizeof(string), "%s%d\t%s\t%s\t%s\n", string, warnid, warndate, warnby, warnreason);
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Biz Warn Log", string, "Close","");

    cache_delete(checkwarns);
    return 1;
}
CMD:warnings(playerid, params[])
{
    new Cache:checkwarns, query[255],string[1500];

    format(query, sizeof(query), "SELECT * FROM `wanrslog` WHERE `ID`='%d' LIMIT 20", PlayerData[playerid][pID]);
    checkwarns = mysql_query(g_iHandle, query);

    if(!cache_num_rows())
        return SendErrorMessage(playerid, "There are no one warns record on you.");

    format(string, sizeof(string), "Warn Date\tWarn By\tReason\n");

    for(new i; i != cache_num_rows(); i++)
    {
        new warnby[24],
            warndate[64],
            warnreason[64];

        cache_get_field_content(i, "warnBy", warnby);
        cache_get_field_content(i, "warnDate", warndate);
        cache_get_field_content(i, "warnReason", warnreason);

        format(string, sizeof(string), "%s%s\t%s\t%s\n", string, warndate, warnby, warnreason);
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Warn Log", string, "Close","");

    cache_delete(checkwarns);
    return 1;
}

CMD:payticket(playerid, params[])
{
    new
        string[MAX_PLAYER_TICKETS * 64],
        count;

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1083.9651,-968.5424,129.3047))
        return SendErrorMessage(playerid, "You must be at LSPD HQ to pay your ticket.");

    for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) if(TicketData[playerid][i][ticketExists]) {
        format(string, sizeof(string), "%s%s ("COL_GREEN"%s"WHITE" - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
        ListedTickets[playerid][count++] = i;
    }

    if(count) Dialog_Show(playerid, PayTicket, DIALOG_STYLE_LIST, "My Tickets", string, "Pay", "Cancel");
    else SendErrorMessage(playerid, "You're don't have pending tickets.");
    return 1;
}


CMD:tickets(playerid, params[])
{
    new userid,
        string[MAX_PLAYER_TICKETS * 64],
        count;

    if(sscanf(params, "u", userid))
    {
        for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) if(TicketData[playerid][i][ticketExists]) {
            format(string, sizeof(string), "%s%s - ("COL_GREEN"%s"WHITE" - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
            ListedTickets[playerid][count++] = i;
        }
    }
    else {
        if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You are not a police officer.");
        if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Invalid player id.");
        if(!IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "You're not neat that player.");

        for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) if(TicketData[userid][i][ticketExists]) {
            format(string, sizeof(string), "%s%s - ("COL_GREEN"%s"WHITE" - %s)\n", string, TicketData[userid][i][ticketReason], FormatNumber(TicketData[userid][i][ticketFee]), TicketData[userid][i][ticketDate]);
            ListedTickets[playerid][count++] = i;
        }
    }
    if(count) Dialog_Show(playerid, CheckTicket, DIALOG_STYLE_LIST, "Ticket List", string, "Details", "Close");
    else SendErrorMessage(playerid, "Tehre are no one pending ticket.");

    return 1;
}

CMD:ds(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/ds (door shout) [text]");

    new id;

    if((id = House_Nearest(playerid)) != -1)
    {
        foreach (new i : Player)
        {
            if(House_Inside(i) == id) 
            {
                SendClientMessageEx(i, X11_GREY_60, "%s door shouts: %s!", ReturnName(playerid, 0, 1), params);
            }
        }        
    }
    else if((id = Business_Nearest(playerid)) != -1)
    {
        foreach (new i : Player)
        {
            if(Business_Inside(i) == id) 
            {
                SendClientMessageEx(i, X11_GREY_60, "%s door shouts: %s!", ReturnName(playerid, 0, 1), params);
            }
        }       
    }
    else if((id = Entrance_Nearest(playerid)) != -1)
    {
        foreach (new i : Player)
        {
            if(Entrance_Inside(i) == id) 
            {
                SendClientMessageEx(i, X11_GREY_60, "%s door shouts: %s!", ReturnName(playerid, 0, 1), params);
            }
        }
    }
    else return SendErrorMessage(playerid, "You are not near any houses, businesses or door entrance!");
    SendClientMessageEx(playerid, X11_GREY_60, "%s door shouts: %s!", ReturnName(playerid, 0, 1), params);
    return 1;
}
CMD:charge(playerid, params[])
{
    new  
        id = House_Inside(playerid),
        vw = GetPlayerVirtualWorld(playerid),
        apartid = ApartmentRoom_Inside(playerid)
    ;
    
    if(id != -1 || IsPlayerInAnyVehicle(playerid) || vw > MIN_VIRTUAL_WORLD || apartid != -1)  // Ketika player di rumah atau player dalam mobil atau di RV 
    {
        ChargePhone[playerid] = 1;
        SendClientMessage(playerid, COLOR_WHITE, "You're now start charging your phone!");
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out charger and start charging their phone.", ReturnName(playerid, 0));

    }
    else SendErrorMessage(playerid, "You're not inside any vehicle, house or RV");

    return 1;
}
CMD:doorbell(playerid, params[])
{
    new id;

    if((id = House_Nearest(playerid)) != -1)
    {
        foreach (new i : Player) if(House_Inside(i) == id) 
        {
            SendClientMessage(i, X11_PLUM, "** You can hear the doorbell ringing.");
            PlayerPlaySound(i, 20801, 0, 0, 0);
        }
        PlayerPlaySoundEx(playerid, 20801);      
        SendServerMessage(playerid, "Kamu telah menekan bell rumah seseorang.");
    }
    else if((id = ApartmentRoom_Nearest(playerid)) != -1)
    {
        foreach (new i : Player) if(ApartmentRoom_Inside(i) == id) 
        {
            SendClientMessage(i, X11_PLUM, "** You can hear the doorbell ringing.");
            PlayerPlaySound(i, 20801, 0, 0, 0);
        }
        PlayerPlaySoundEx(playerid, 20801);      
        SendServerMessage(playerid, "Kamu telah menekan bell apartment seseorang.");
    }
    else SendErrorMessage(playerid, "You are not near any houses / apartment!");
    return 1;
}

/*CMD:givecash(playerid, params[])
{
    static
        userid,
        amount;

    if(AccountData[playerid][pAdmin] < 6)
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

    if(sscanf(params, "ud", userid, amount))
        return SendSyntaxMessage(playerid, "/givecash [playerid/PartOfName] [amount]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    GiveMoney(userid, amount);

    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has given %s to %s.", ReturnName2(playerid, 0), FormatNumber(amount), ReturnName2(userid, 0));
    Log_Write("logs/admin_log.txt", "[%s] %s has given %s to %s.", ReturnDate(), ReturnAdminName(playerid), FormatNumber(amount), ReturnName2(userid, 0));

    return 1;
}*/

CMD:fingerprint(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFingerTime] > 0) return SendErrorMessage(playerid, "You are already using the fingerprint scanner.");

    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if(DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2])) {
        //SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s runs the fingerprint scanner over the item.", ReturnName(playerid, 0));

        PlayerData[playerid][pFingerTime] = 3;
        PlayerData[playerid][pFingerItem] = i;

        return 1;
    }
    SendErrorMessage(playerid, "There is no item nearby.");
    return 1;
}

/*CMD:backpack(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "Backpack"))
        return SendErrorMessage(playerid, "You don't have a backpack on you.");

    Backpack_Open(playerid);
    return 1;
}*/

/*CMD:dropbackpack(playerid, params[])
{
    new
        id = GetPlayerBackpack(playerid);

    if(!Inventory_HasItem(playerid, "Backpack") || id == -1)
        return SendErrorMessage(playerid, "You don't have a backpack on you.");

    if(!Backpack_GetItems(id))
        return SendErrorMessage(playerid, "You can't drop an empty backpack.");

    if(IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
        return SendErrorMessage(playerid, "You can't drop your backpack right now.");

    static
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);

    BackpackData[id][backpackPlayer] = 0;
    BackpackData[id][backpackPos][0] = x;
    BackpackData[id][backpackPos][1] = y;
    BackpackData[id][backpackPos][2] = z;
    BackpackData[id][backpackInterior] = GetPlayerInterior(playerid);
    BackpackData[id][backpackWorld] = GetPlayerVirtualWorld(playerid);

    Backpack_Refresh(id);
    Backpack_Save(id);

    Inventory_Remove(playerid, "Backpack");
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has dropped their backpack.", ReturnName(playerid, 0, 1));

    SetAccessories(playerid);

    return 1;
}*/

CMD:setitem(playerid, params[])
{
    static
        userid,
        item[32],
        amount;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "uds[32]", userid, amount, item))
        return SendSyntaxMessage(playerid, "/setitem [playerid/PartOfName] [amount] [item name]");

    if(IsFurnitureItem(item))
    {
        for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if(!strcmp(g_aFurnitureData[i][e_FurnitureName], item, true))
        {
            Inventory_Set(userid, g_aFurnitureData[i][e_FurnitureName], g_aFurnitureData[i][e_FurnitureModel], amount);
            SendServerMessage(playerid, "You have set %s's \"%s\" to %d.", ReturnName(userid, 0), item, amount);
            Log_Save(E_LOG_SET_ITEM, sprintf("[%s] %s has set item furniture %s (amount: %d) to %s.", ReturnDate(), ReturnName(playerid, 0), item, amount, NormalName(userid)));
            return 1;
        }
    }
    else for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true))
    {
        if(amount > g_aInventoryItems[i][e_InventoryMax]) return SendErrorMessage(playerid, "Maximmum ammount for this item is %d.", g_aInventoryItems[i][e_InventoryMax]);

        if(!strcmp(item, "Cellphone", true)) {
            PlayerData[userid][pPhone] = random(90000) + 10000;
        }
        Inventory_Set(userid, g_aInventoryItems[i][e_InventoryItem], g_aInventoryItems[i][e_InventoryModel], amount);
        Log_Save(E_LOG_SET_ITEM, sprintf("[%s] %s has set item %s (amount: %d) to %s.", ReturnDate(), ReturnName(playerid, 0), item, amount, NormalName(userid)));
        Discord_Log(SETITEMLOG, sprintf("[%s] %s has set item %s (amount: %d) to %s.", ReturnDate(), ReturnName(playerid, 0), item, amount, NormalName(userid)));
        return SendServerMessage(playerid, "You have set %s's \"%s\" to %d.", ReturnName(userid, 0), item, amount);
    }
    SendErrorMessage(playerid, "Invalid item name (use /itemlist for a list).");
    return 1;
}

CMD:itemlist(playerid, params[])
{
    new string[2000];
    strcat(string, "Name\tMax\n");
    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) {
        strcat(string, sprintf("%s\t%d\n", g_aInventoryItems[i][e_InventoryItem], g_aInventoryItems[i][e_InventoryMax]));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "List of Items", string, "Select", "Cancel");
    return 1;
}

CMD:createimpound(playerid, params[])
{
    static
        id = -1,
        Float:x,
        Float:y,
        Float:z;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
        return SendErrorMessage(playerid, "You can only create impound lots outside interiors.");

    GetPlayerPos(playerid, x, y, z);

    id = Impound_Create(x, y, z);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for impound lots.");

    SendServerMessage(playerid, "You have successfully created impound lot ID: %d.", id);
    return 1;
}

CMD:destroyimpound(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyimpound [impound id]");

    if((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
        return SendErrorMessage(playerid, "You have specified an invalid impound lot ID.");

    Impound_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed impound lot ID: %d.", id);
    return 1;
}

CMD:editimpound(playerid, params[])
{
    static
        id,
            type[24],
        string[128];

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editimpound [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, release");
        return 1;
    }
    if((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
        return SendErrorMessage(playerid, "You have specified an invalid impound lot ID.");

    if(!strcmp(type, "location", true))
    {
        static
            Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);

        ImpoundData[id][impoundLot][0] = x;
        ImpoundData[id][impoundLot][1] = y;
        ImpoundData[id][impoundLot][2] = z;

        Impound_Refresh(id);
        Impound_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of impound ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "release", true))
    {
        static
            Float:x,
            Float:y,
            Float:z,
            Float:angle;

        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        ImpoundData[id][impoundRelease][0] = x;
        ImpoundData[id][impoundRelease][1] = y;
        ImpoundData[id][impoundRelease][2] = z;
        ImpoundData[id][impoundRelease][3] = angle;

        Impound_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the release point of impound ID: %d.", ReturnName(playerid, 0), id);
    }
    return 1;
}

CMD:backup(playerid, params[])
{
    // if(GetFactionType(playerid) != FACTION_POLICE)
    //     return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You are not faction duty.");

    Dialog_Show(playerid, BackupSystem, DIALOG_STYLE_LIST, "Faction Emergency Call", "LSPD\nLSES", "Backup", "Close");
    return 1;
}

CMD:channel(playerid, params[])
{
    new channel;

    if(!Inventory_HasItem(playerid, "Portable Radio"))
        return SendErrorMessage(playerid, "You must have a portable radio.");

    if(sscanf(params, "d", channel))
    {
        SendSyntaxMessage(playerid, "/channel [radio channel] (0 to disable)");

        if(PlayerData[playerid][pFaction] != -1)
            SendClientMessage(playerid, X11_GREY_60,"CHANNEL: 911: Police Department | 992: SAMD | 1922: Goverment | 789: SADOC | 123: SaNews.");

        if(PlayerData[playerid][pChannel] > 0)
            SendClientMessageEx(playerid, X11_YELLOW_2, "[NOTE]:"WHITE" Your current radio channel is set to %d.", PlayerData[playerid][pChannel]);

        return 1;
    }
    if(channel < 0 || channel > 9999)
        return SendErrorMessage(playerid, "The channel can't be below 0 or above 9999.");

    switch(channel)
    {
        case 911:
        {
            if(GetFactionType(playerid) != FACTION_POLICE)
                return SendErrorMessage(playerid, "This is police department's frequency only.");
        }
        case 992:
        {
            if(GetFactionType(playerid) != FACTION_MEDIC)
                return SendErrorMessage(playerid, "This is SAMD frequency only.");
        }
        case 1922:
        {
            if(GetFactionType(playerid) != FACTION_GOV)
                return SendErrorMessage(playerid, "This is goverment frequency only.");
        }
        case 789:
        {
            if(GetFactionType(playerid) != FACTION_SADOC)
                return SendErrorMessage(playerid, "This is SADOC frequency only.");
        }
        case 123:
        {
            if(GetFactionType(playerid) != FACTION_NEWS)
                return SendErrorMessage(playerid, "This is NEWS Reporter frequency only");
        }
    }

    PlayerData[playerid][pChannel] = channel;

    if(channel == 0)
            SendServerMessage(playerid, "You have disabled your portable radio.");

    else SendServerMessage(playerid, "You have set your radio's channel to %d (\"/pr [text]\" to chat).", channel);
    return 1;
}

CMD:pr(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/pr [Radio IC]");

    if(!Inventory_HasItem(playerid, "Portable Radio"))
        return SendErrorMessage(playerid, "You must have a portable radio.");

    if(!PlayerData[playerid][pChannel])
        return SendErrorMessage(playerid, "Your portable radio is disabled (/channel).");

    if(PlayerData[playerid][pJailTime] > 0)
        return SendErrorMessage(playerid, "You are jailed, you can't use Portable Radio!");

    switch(PlayerData[playerid][pChannel])
    {
        case 911: if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "This is police department's freqency only.");
        case 992: if(GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "This is SAMD freqency only.");
        case 1922: if(GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "This is goverment freqency only.");
        case 789: if(GetFactionType(playerid) != FACTION_SADOC) return SendErrorMessage(playerid, "This is SADOC freqency only.");
    }
    static
        string[128];

    if(strlen(params) > 64)
    {
    
        format(string, sizeof(string), "** [RADIO: %d] %s: %.64s",PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
        SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);
        
        format(string, sizeof(string), "...%s **",params[64]);
        SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);

        // SendNearbyMessage(playerid, 15.0, X11_WHITE, "%s "ORANGE"(radio)"WHITE" %.64s ..", ReturnName(playerid, 0, 1), params);
        // SendNearbyMessage(playerid, 15.0, X11_WHITE, ".. %s", params[64]);

        SetPlayerChatBubble(playerid, string, X11_PLUM, 10.0, 3000);
    }
    else 
    {
        SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, sprintf("** [RADIO: %d] %s: %s **", PlayerData[playerid][pChannel],ReturnName(playerid, 0), params));
       
        SetPlayerChatBubble(playerid, sprintf("* [RADIO] *\n%s", params), COLOR_SERVER, 10.0, 3000);

        //ProxDetector(playerid, 15.0, X11_WHITE, sprintf("%s "ORANGE"(radio)"WHITE": %.128s", ReturnName(playerid, 0, 1), params));
    }
    if(GetAdminLevel(playerid) < 8)
    {
        foreach(new i : Player) if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] && !PlayerData[i][pDisableRADIO])
            SendClientMessageEx(i, X11_GREEN_YELLOW, "RADIO %d %s (%d) : %s", PlayerData[playerid][pChannel], ReturnName2(playerid), playerid, params);
    }
    return 1;
}
CMD:prlow(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/prlow [Radio IC]");

    if(!Inventory_HasItem(playerid, "Portable Radio"))
        return SendErrorMessage(playerid, "You must have a portable radio.");

    if(!PlayerData[playerid][pChannel])
        return SendErrorMessage(playerid, "Your portable radio is disabled (/channel).");

    if(PlayerData[playerid][pJailTime] > 0)
        return SendErrorMessage(playerid, "You are jailed, you can't use Portable Radio!");

    switch(PlayerData[playerid][pChannel])
    {
        case 911: if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "This is police department's freqency only.");
        case 992: if(GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "This is SAMD freqency only.");
        case 1922: if(GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "This is goverment freqency only.");
        case 789: if(GetFactionType(playerid) != FACTION_SADOC) return SendErrorMessage(playerid, "This is SADOC freqency only.");
    }
    static
        string[128];

    if(strlen(params) > 64)
    {
        format(string, sizeof(string), "** [RADIO: %d] %s: %.64s",PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
        SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);

        format(string, sizeof(string), "...%s **",params[64]);
        SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);

        // SendNearbyMessage(playerid, 5.0, X11_WHITE, "%s "ORANGE"(radio)"WHITE"(low) %.64s ..", ReturnName(playerid, 0, 1), params);
        // SendNearbyMessage(playerid, 5.0, X11_WHITE, ".. %s", params[64]);

        SetPlayerChatBubble(playerid, string, X11_PLUM, 5.0, 3000);
    }
    else {
        SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, sprintf("** [RADIO: %d] %s: %s **", PlayerData[playerid][pChannel],ReturnName(playerid, 0), params));
        SetPlayerChatBubble(playerid, sprintf("* [RADIO] *\n%s", params), COLOR_SERVER, 5.0, 3000);

        // ProxDetector(playerid, 5.0, X11_WHITE, sprintf("%s "ORANGE"(radio)"WHITE"(low): %.128s", ReturnName(playerid, 0, 1), params));
    }
    return 1;
}

CMD:clearcp(playerid, params[])
    return cmd_disablecp(playerid, "\0");

CMD:disablecp(playerid, params[])
{
    PlayerData[playerid][pCP] = 0;

    if(PlayerData[playerid][pSorting] != -1)
    {
        PlayerData[playerid][pSorting] = -1;
        PlayerData[playerid][pSortCrate] = 0;

        RemovePlayerAttachedObject(playerid, JOB_SLOT);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    }
    if(PlayerData[playerid][pMinedRock])
    {
        PlayerData[playerid][pMinedRock] = 0;
        PlayerData[playerid][pMineCount] = 0;

        RemovePlayerAttachedObject(playerid, JOB_SLOT);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    }
    if(PlayerData[playerid][pUnloading] != -1)
    {
        PlayerData[playerid][pUnloading] = -1;
        PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
    }
    if(PlayerData[playerid][pLoading])
    {
        PlayerData[playerid][pLoading] = 0;
        PlayerData[playerid][pLoadType] = 0;
    }
    if(PlayerData[playerid][pLoadCrate])
    {
        PlayerData[playerid][pLoadCrate] = 0;

        RemovePlayerAttachedObject(playerid, JOB_SLOT);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    }
    if(BackupCheckPoint[playerid])
    {
        GameTextForPlayer(playerid, "~r~Disabled!", 1500, 1);
        DisablePlayerRaceCheckpoint(playerid);
        BackupCheckPoint[playerid] = 0;
    }
    if(ShareLocationCP[playerid])
    {
        GameTextForPlayer(playerid, "~r~Disabled!", 1500, 1);
        DisablePlayerRaceCheckpoint(playerid);
        ShareLocationCP[playerid] = 0;        
    }
    DisableWaypoint(playerid);
    DisablePlayerCheckpoint(playerid);
    SendServerMessage(playerid, "You have disabled any active checkpoints.");
    return 1;
}

CMD:restart(playerid, params[])
{
    new times;

    if (CheckAdmin(playerid, 9))
        return PermissionError(playerid);

    if(g_ServerRestart)
    {
        g_ServerRestart = 0;
        g_RestartTime = 0;
        TextDrawHideForAll(gServerTextdraws[1]);
        foreach(new i : Player)
        {
            TogglePlayerControllable(i, 1);
        }
        return SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s has postponed the server restart.", ReturnName(playerid, 0));
    }
    if(sscanf(params, "d", times))
        return SendSyntaxMessage(playerid, "/restart [seconds]");

    if(times < 5 || times > 600)
        return SendErrorMessage(playerid, "The specified seconds can't be below 3 or above 600.");

    g_ServerRestart = 1;
    g_RestartTime = times;
    TextDrawShowForAll(gServerTextdraws[1]);
    foreach(new i : Player)
    {
        TogglePlayerControllable(i, 0);
    }
    SendClientMessageToAllEx(X11_TOMATO_1, "RESTART: %s has initiated a server restart in %d seconds.", ReturnName(playerid, 0), times);
    return 1;
}

CMD:properties(playerid, params[])
{
    new count, string[1024], userid;

    if(sscanf(params, "u", userid)) {
        for (new i = 0; i < MAX_HOUSES; i ++) if(House_IsOwner(playerid, i, false)) {
            format(string,sizeof(string),"%sHouse ID: %d | Address: %s | Location: %s\n", string, i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));
            count++;
        }
        for (new i = 0; i < MAX_BUSINESSES; i ++) if(Business_IsOwner(playerid, i)) {
            format(string,sizeof(string),"%sBusiness ID: %d | Name: %s | Location: %s\n", string, i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));
            count++;
        }
        for (new i = 0; i < MAX_WORKSHOP; i ++) if(Workshop_IsOwner(playerid, i)) {
            format(string,sizeof(string),"%sWorkshop ID: %d | Name: %s | Location: %s\n", string, i, WorkshopData[i][wName], GetLocation(WorkshopData[i][wPos][0], WorkshopData[i][wPos][1], WorkshopData[i][wPos][2]));
            count++;
        }
        foreach(new i : ApartmentRoom) if(ApartmentRoom_IsOwned(playerid, i)){
            format(string,sizeof(string),"%sApartment Room ID: %d | Name: %s\n", string, i, ApartmentRoomData[i][apartmentRoomName]);            
        }
        if(!count) SendErrorMessage(playerid, "You don't own any properties.");
        else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Properties List", string, "Close", "");
        return 1;
    }

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Invalid Player ID!");

    if(!SQL_IsCharacterLogged(userid)) return SendErrorMessage(playerid, "Invalid player id.");

    for (new i = 0; i < MAX_HOUSES; i ++) if(House_IsOwner(userid, i, false)) {
        format(string,sizeof(string),"%sHouse ID: %d | Address: %s | Location: %s\n", string, i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));
        count++;
    }
    for (new i = 0; i < MAX_BUSINESSES; i ++) if(Business_IsOwner(userid, i)) {
        format(string,sizeof(string),"%sBusiness ID: %d | Name: %s | Location: %s\n", string, i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));
        count++;
    }
    for (new i = 0; i < MAX_WORKSHOP; i ++) if(Workshop_IsOwner(userid, i)) {
        format(string,sizeof(string),"%sWorkshop ID: %d | Name: %s | Location: %s\n", string, i, WorkshopData[i][wName], GetLocation(WorkshopData[i][wPos][0], WorkshopData[i][wPos][1], WorkshopData[i][wPos][2]));
        count++;
    }
    foreach(new i : ApartmentRoom) if(ApartmentRoom_IsOwned(userid, i)){
            format(string,sizeof(string),"%sApartment Room ID: %d | Name: %s\n", string, i, ApartmentRoomData[i][apartmentRoomName]);            
    }
    if(!count) SendErrorMessage(playerid, "This player don't own any properties.");
    else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, sprintf("%s Properties", ReturnName(userid, 0)), string, "Close", "");
    return 1;
}

CMD:asellvending(playerid, params[])
{
    new index = -1;

    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    if(sscanf(params, "d", index))
        return SendSyntaxMessage(playerid, "/asellvending [index]");

    if(Vending_IsExists(index))
        return SendErrorMessage(playerid, "You have specified an invalid vending id.");

    if(VendingData[index][vendOwner] == INVALID_OWNER_ID)
        return SendErrorMessage(playerid, "This house owned by goverment.");

    VendingData[index][vendOwner] = 0;
    VendingData[index][vendVault] = 0;
    format(VendingData[index][vendOwnerName], 32, "The State");

    Vending_Save(index);

    SendServerMessage(playerid, "You have sold vending ID: %d.", index);
    Log_Save(E_LOG_ADMIN_SELL, sprintf("[%s] %s menjual kepemilikan rumah id %d.", ReturnDate(), ReturnAdminName(playerid), index));
    return 1;
}

CMD:asellapartment(playerid, params[])
{
    new index = -1;

    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    if(sscanf(params, "d", index))
        return SendSyntaxMessage(playerid, "/asellapartment [apartment ID]");

    if(ApartmentRoomData[index][apartmentRoomOwner] == -1)
        return SendErrorMessage(playerid, "This apartment owned by goverment.");

    if(ApartmentRoom_IsExists(index))
    {
        ApartmentRoomData[index][apartmentRoomOwner] = -1;
        format(ApartmentRoomData[index][apartmentRoomOwnerName], 32, "The State");

        Apartment_RemoveAllItems(index);
        ApartmentRoom_Sync(index);
        ApartmentRoom_Save(index);

        SendServerMessage(playerid, "You have sold apartment ID: %d.", index);
        Log_Save(E_LOG_ADMIN_SELL, sprintf("[%s] %s menjual kepemilikan apartment id %d.", ReturnDate(), ReturnAdminName(playerid), index));
    }
    else SendErrorMessage(playerid, "Invalid apartment ID!");
    return 1;
}

CMD:asellhouse(playerid, params[])
{
    new houseid = -1;

    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    if(sscanf(params, "d", houseid))
        return SendSyntaxMessage(playerid, "/asellhouse [house ID]");

    if((houseid < 0 || houseid >= MAX_HOUSES) || !HouseData[houseid][houseExists])
        return SendErrorMessage(playerid, "You have specified an invalid house ID.");

    if(!HouseData[houseid][houseOwner])
        return SendErrorMessage(playerid, "This house owned by goverment.");

    HouseData[houseid][houseOwner] = 0;
    HouseData[houseid][houseMoney] = 0;
    format(HouseData[houseid][houseOwnerName], 32, "The State");

    House_RemoveAllItems(houseid);
    House_Refresh(houseid);
    House_Save(houseid);

    SendServerMessage(playerid, "You have sold house ID: %d.", houseid);
    Log_Save(E_LOG_ADMIN_SELL, sprintf("[%s] %s menjual kepemilikan rumah id %d.", ReturnDate(), ReturnAdminName(playerid), houseid));
    return 1;
}

CMD:asellbiz(playerid, params[])
{
    new bizid = -1;

    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    if(sscanf(params, "d", bizid))
        return SendSyntaxMessage(playerid, "/asellbiz [business ID]");

    if((bizid < 0 || bizid >= MAX_HOUSES) || !BusinessData[bizid][bizExists])
        return SendErrorMessage(playerid, "You have specified an invalid business ID.");

    BusinessData[bizid][bizOwner] = 0;

    BusinessData[bizid][bizVault] = 0;
    Business_Refresh(bizid);
    Business_Save(bizid);

    SendServerMessage(playerid, "You have sold business ID: %d.", bizid);

    Log_Save(E_LOG_ADMIN_SELL, sprintf("[%s] %s menjual kepemilikan bisnis id %d.", ReturnDate(), ReturnAdminName(playerid), bizid));
    return 1;
}
CMD:grantbls(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "You're not LSES member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/grantbls [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't grant yourself a BLS certificate.");
    if(PlayerData[userid][pScore] < 2) return SendErrorMessage(playerid, "That player must be level 2.");
    if(PlayerData[userid][pBLSLicenseExpired]) return SendErrorMessage(playerid, "That player already has a BLS certificate.");

    PlayerData[userid][pBLSLicense] = 1;
    PlayerData[userid][pBLSLicenseExpired] = (gettime()+((24*3600)*30));

    SendServerMessage(playerid, "You have granted a BLS Certified to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "You've been granted a BLS Certified by %s expired date %s.", ReturnName(playerid, 0), ConvertTimestamp(Timestamp:PlayerData[playerid][pBLSLicenseExpired]));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has granted %s with a firearm license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    Log_Save(E_LOG_LICENSE, sprintf("[%s] %s (%s) has given BLS license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]));
    return 1;
}
CMD:granttrucker(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/granttrucker [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't grant yourself a trucker license.");
    if(PlayerData[userid][pScore] < 2) return SendErrorMessage(playerid, "That player must be level 2.");
    if(PlayerData[userid][pTruckLicenseExpired]) return SendErrorMessage(playerid, "That player already has a trucker license.");

    PlayerData[userid][pTruckLicense] = 1;
    PlayerData[userid][pTruckLicenseExpired] = (gettime()+((24*3600)*30));

    SendServerMessage(playerid, "You have granted a trucker license to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "You've been granted a trucker license by %s expired date %s.", ReturnName(playerid, 0), ConvertTimestamp(Timestamp:PlayerData[playerid][pTruckLicenseExpired]));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has granted %s with a firearm license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    Log_Save(E_LOG_LICENSE, sprintf("[%s] %s (%s) has given trucker license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]));
    return 1;
}
CMD:revokebls(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "You're not LSES member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/revokebls [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't revoke your own BLS certificate.");
    if(!PlayerData[userid][pBLSLicense]) return SendErrorMessage(playerid, "That player doesn't have a BLS certificate.");

    PlayerData[userid][pBLSLicense] = 0;
    PlayerData[userid][pBLSLicenseExpired] = 0;

    SendServerMessage(playerid, "You have revoked %s's BLS certificate.", ReturnName(userid, 0));
    SendServerMessage(userid, "Your BLS certificate was revoked by %s.", ReturnName(playerid, 0));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has revoked %s's firearm license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}
CMD:revoketrucker(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/revoketrucker [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't revoke your own trucker license.");
    if(!PlayerData[userid][pTruckLicense]) return SendErrorMessage(playerid, "That player doesn't have a trucker license.");

    PlayerData[userid][pTruckLicense] = 0;
    PlayerData[userid][pTruckLicenseExpired] = 0;

    SendServerMessage(playerid, "You have revoked %s's trucker license.", ReturnName(userid, 0));
    SendServerMessage(userid, "Your trucker license was revoked by %s.", ReturnName(playerid, 0));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has revoked %s's firearm license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}
CMD:grantweapon(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/grantweapon [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't grant yourself a firearm license.");
    if(PlayerData[userid][pScore] < 2) return SendErrorMessage(playerid, "That player must be level 2.");
    if(PlayerData[userid][pFirearmLicenseExpired]) return SendErrorMessage(playerid, "That player already has a firearm license.");

    PlayerData[userid][pFirearmLicense] = 1;
    PlayerData[userid][pFirearmLicenseExpired] = (gettime()+((24*3600)*30));

    SendServerMessage(playerid, "You have granted a firearm license to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "You've been granted a firearm license by %s expired date %s.", ReturnName(playerid, 0), ConvertTimestamp(Timestamp:PlayerData[playerid][pFirearmLicenseExpired]));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has granted %s with a firearm license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    Log_Save(E_LOG_LICENSE, sprintf("[%s] %s (%s) has given firearm license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]));
    return 1;
}

CMD:revokeweapon(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/revokeweapon [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't revoke your own firearm license.");
    if(!PlayerData[userid][pFirearmLicense]) return SendErrorMessage(playerid, "That player doesn't have a firearm license.");

    PlayerData[userid][pFirearmLicense] = 0;
    PlayerData[userid][pFirearmLicenseExpired] = 0;

    SendServerMessage(playerid, "You have revoked %s's firearm license.", ReturnName(userid, 0));
    SendServerMessage(userid, "Your firearm license was revoked by %s.", ReturnName(playerid, 0));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has revoked %s's firearm license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:grantlumber(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/grantlumber [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't grant yourself a lumber license.");
    if(PlayerData[userid][pLumberLicenseExpired]) return SendErrorMessage(playerid, "That player already has a lumber license.");

    PlayerData[userid][pLumberLicense] = 1;
    PlayerData[userid][pLumberLicenseExpired] = (gettime()+((24*3600)*30));

    SendServerMessage(playerid, "You have granted a lumber license to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "You've been granted a lumber license by %s expired date %s.", ReturnName(playerid, 0), ConvertTimestamp(Timestamp:PlayerData[playerid][pLumberLicenseExpired]));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has granted %s with a lumber license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    Log_Save(E_LOG_LICENSE, sprintf("[%s] %s (%s) has given lumber license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]));
    return 1;
}

CMD:revokelumber(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be an officer member.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/revokelumber [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't revoke your own lumber license.");

    if(!PlayerData[userid][pLumberLicense])
        return SendErrorMessage(playerid, "That player doesn't have a lumber license.");

    PlayerData[userid][pLumberLicense] = 0;
    PlayerData[userid][pLumberLicenseExpired] = 0;

    SendServerMessage(playerid, "You have revoked %s's lumber license.", ReturnName(userid, 0));
    SendServerMessage(userid, "Your lumber license was revoked by %s.", ReturnName(playerid, 0));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has revoked %s's lumber license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}


CMD:setcarhp(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    static
        id = 0,
        Float:amount;

    if(sscanf(params, "df", id, amount))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            id = GetPlayerVehicleID(playerid);

            if(sscanf(params, "f", amount))
                return SendSyntaxMessage(playerid, "/setcarhp [amount]");

            if(amount < 0.0)
                return SendErrorMessage(playerid, "The amount can't be below 0.");

            SetVehicleHealth(id, amount);
            SendServerMessage(playerid, "You have set the health of vehicle ID: %d to %.1f.", id, amount);
            return 1;
        }
        else return SendSyntaxMessage(playerid, "/setcarhp [vehicle id] [amount]");
    }
    if(!IsValidVehicle(id))
        return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

    if(amount < 0.0)
        return SendErrorMessage(playerid, "The amount can't be below 0.");

    SetVehicleHealth(id, amount);
    SendServerMessage(playerid, "You have set the health of vehicle ID: %d to %.1f.", id, amount);
    return 1;
}

CMD:creategarbage(playerid, params[])
{
    static
        id = -1,
        type;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", type))
    {
        SendSyntaxMessage(playerid, "/creategarbage [type]");
        SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 1: Dumpster | 2: Trash Can");
        return 1;
    }
    if(type < 1 || type > 2)
        return SendErrorMessage(playerid, "The specified type can't be below 1 or above 2.");

    id = Garbage_Create(playerid, type);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for garbage bins.");

    SendServerMessage(playerid, "You have successfully created garbage bin ID: %d.", id);
    return 1;
}

CMD:destroygarbage(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroygarbage [garbage id]");

    if((id < 0 || id >= MAX_GARBAGE_BINS) || !GarbageData[id][garbageExists])
        return SendErrorMessage(playerid, "You have specified an invalid garbage ID.");

    Garbage_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed garbage bin ID: %d.", id);
    return 1;
}

CMD:panel(playerid, params[])
{
    if(AccountData[playerid][pAdmin] < 6 || !IsPlayerAdmin(playerid))
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

    if(g_ServerLocked)
        Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Unlock Server\nSet Hostname\nExecute Query\nServer Info", "Select", "Cancel");

    else Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Lock Server\nSet Hostname\nExecute Query\nServer Info", "Select", "Cancel");
    return 1;
}

CMD:spawnitem(playerid, params[])
{
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/spawnitem [item name] (/itemlist for a list)");

    static
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);

    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], params, true))
    {
        new id = DropItem(g_aInventoryItems[i][e_InventoryItem], "Admin", g_aInventoryItems[i][e_InventoryModel], 1, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

        if(id == -1)
            return SendErrorMessage(playerid, "The server has reached a limit for spawned items.");

        Log_Save(E_LOG_SPAWN_ITEM, sprintf("[%s] %s has spawned %s", ReturnDate(), ReturnName(playerid, 0), g_aInventoryItems[i][e_InventoryItem]));
        SendServerMessage(playerid, "You have spawned a \"%s\" (type /setquantity to set the quantity).", g_aInventoryItems[i][e_InventoryItem]);
        return 1;
    }
    SendErrorMessage(playerid, "Invalid item name (use /itemlist for a list).");
    return 1;
}

CMD:setquantity(playerid, params[])
{
    static
        id = -1,
        amount;

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if((id = Item_Nearest(playerid)) == -1)
        return SendErrorMessage(playerid, "You are not in range of any spawned items.");

    if(sscanf(params, "d", amount))
        return SendSyntaxMessage(playerid, "/setquantity [amount]");

    if(amount < 1)
        return SendErrorMessage(playerid, "The specified amount can't be below 1");

    Item_SetQuantity(id, amount);
    Log_Save(E_LOG_SPAWN_ITEM, sprintf("[%s] %s has set the quantity of %s to %d.", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem], amount));
    SendServerMessage(playerid, "You have set the quantity of \"%s\" to %d.", DroppedItems[id][droppedItem], amount);
    return 1;
}

CMD:destroyitem(playerid, params[])
{
    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);

    static
        id = -1;

    if((id = Item_Nearest(playerid)) == -1)
        return SendErrorMessage(playerid, "You are not in range of any spawned items.");

    SendServerMessage(playerid, "You have deleted a \"%s\".", DroppedItems[id][droppedItem]);
    Item_Delete(id);
    Log_Save(E_LOG_DESTROY_ITEM, sprintf("[%s] %s has destroyed a %s item.", DroppedItems[id][droppedItem]));
    return 1;
}

CMD:search(playerid, params[])
{
    new userid;

    if(sscanf(params, "u", userid))
    {
        SendSyntaxMessage(playerid, "/search [playerid/PartOfName]");
        return 1;
    }
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(Inventory_HasItem(userid, "Marijuana Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Marijuana Seeds (%d)", Inventory_Count(userid, "Marijuana Seeds"));

    if(Inventory_HasItem(userid, "Cocaine Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Cocaine Seeds (%d)", Inventory_Count(userid, "Cocaine Seeds"));

    if(Inventory_HasItem(userid, "Heroin Opium Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Heroin Opium Seeds (%d)", Inventory_Count(userid, "Heroin Opium Seeds"));

    if(Inventory_HasItem(userid, "Steroids"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Steroids (%d)", Inventory_Count(userid, "Steroids"));

    if(Inventory_HasItem(userid, "Marijuana"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Marijuana (%d)", Inventory_Count(userid, "Marijuana"));
    
    if(Inventory_HasItem(userid, "LSD"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** LSD (%d)", Inventory_Count(userid, "LSD"));

    if(Inventory_HasItem(userid, "Ecstasy"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Ecstasy (%d)", Inventory_Count(userid, "Ecstasy"));

    if(Inventory_HasItem(userid, "Cocaine"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Cocaine (%d)", Inventory_Count(userid, "Cocaine"));

    if(Inventory_HasItem(userid, "Heroin"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Heroin (%d)", Inventory_Count(userid, "Heroin"));

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s starts to search %s for illegal items.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

/*CMD:searchbp(playerid, params[])
{
    new userid, backpack;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/searchbp [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(!Inventory_HasItem(userid, "Backpack") || (backpack = GetPlayerBackpack(userid)) == -1)
        return SendErrorMessage(playerid, "That player doesn't have a backpack.");

    if(Backpack_HasItem(backpack, "Marijuana Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Marijuana Seeds (%d)", Backpack_Count(backpack, "Marijuana Seeds"));

    if(Backpack_HasItem(backpack, "Cocaine Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Cocaine Seeds (%d)", Backpack_Count(backpack, "Cocaine Seeds"));

    if(Backpack_HasItem(backpack, "Heroin Opium Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Heroin Opium Seeds (%d)", Backpack_Count(backpack, "Heroin Opium Seeds"));

    if(Backpack_HasItem(backpack, "Steroids"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Steroids (%d)", Backpack_Count(backpack, "Steroids"));

    if(Backpack_HasItem(backpack, "Marijuana"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Marijuana (%d)", Backpack_Count(backpack, "Marijuana"));

    if(Backpack_HasItem(backpack, "Cocaine"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Cocaine (%d)", Backpack_Count(backpack, "Cocaine"));

    if(Backpack_HasItem(backpack, "Heroin"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Heroin (%d)", Backpack_Count(backpack, "Heroin"));

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has searched %s's backpack for illegal items.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}*/

CMD:take(playerid, params[])
{
    new
        userid,
        string[128];

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/take [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(ReturnWeaponCount(userid) > 0)
        strcat(string, "Take Weapons\n");

    if(Inventory_HasItem(userid, "Marijuana Seeds") || Inventory_HasItem(userid, "Cocaine Seeds") || Inventory_HasItem(userid, "Heroin Opium Seeds"))
        strcat(string, "Take Seeds\n");

    if(Inventory_HasItem(userid, "Marijuana") || Inventory_HasItem(userid, "LSD") || Inventory_HasItem(userid, "Ecstasy") || Inventory_HasItem(userid, "Cocaine") || Inventory_HasItem(userid, "Heroin") || Inventory_HasItem(userid, "Steroids"))
        strcat(string, "Take Drugs\n");

    if(Inventory_HasItem(userid, "Portable Radio"))
        strcat(string, "Take Radio\n");

    if(PlayerData[userid][pDrivingLicense])
        strcat(string, "Take Driving License\n");

    if(PlayerData[userid][pFirearmLicense])
        strcat(string, "Take Firearm License\n");

    if(PlayerData[userid][pBusinessLicense])
        strcat(string, "Take Business License\n");

    if(PlayerData[userid][pLumberLicense])
        strcat(string, "Take Lumber License\n");

    if(PlayerData[userid][pWorkshopLicense])
        strcat(string, "Take Workshop License\n");

    if(PlayerData[userid][pTruckLicense])
        strcat(string, "Take Trucking License\n");

    if(!strlen(string))
        return SendErrorMessage(playerid, "This player has no illegal items to take.");

    PlayerData[playerid][pTakeItems] = userid;
    Dialog_Show(playerid, TakeItems, DIALOG_STYLE_LIST, "Take Items", string, "Take", "Cancel");
    return 1;
}

CMD:kickdoor(playerid, params[])
{
    static
        id = -1;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    if((id = House_Nearest(playerid)) != -1)
    {
        if(!HouseData[id][houseLocked])
        return SendErrorMessage(playerid, "This house is already unlocked.");

        ShowPlayerFooter(playerid, "Attempting to ~r~break~w~ door...");
        ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

        SendServerMessage(playerid, "You are trying to kick the house door!");
        SetTimerEx("KickHouse", 1500, false, "dd", playerid, id);
    }
    else if((id = Business_Nearest(playerid)) != -1)
    {
        if(!BusinessData[id][bizLocked])
                return SendErrorMessage(playerid, "This business is already unlocked.");

        ShowPlayerFooter(playerid, "Attempting to ~r~break~w~ door...");
        ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s attempts to kick the business door down.", ReturnName(playerid, 0));
        SetTimerEx("KickBusiness", 1500, false, "dd", playerid, id);
    }
    else {
        SendErrorMessage(playerid, "You must be in range of a house or business.");
    }
    return 1;
}


CMD:tracenumber(playerid, params[])
{
    new number;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You are not a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You are not faction duty.");

    if(sscanf(params, "d", number))
        return SendSyntaxMessage(playerid, "/tracenumber [phone number]");

    if(number == 0)
        return SendErrorMessage(playerid, "You have specified an invalid number.");

    if(GetNumberOwner(number) != INVALID_PLAYER_ID)
        return SendServerMessage(playerid, "The phone number %d is owned by %s.", number, ReturnName(GetNumberOwner(number), 0));

    SendErrorMessage(playerid, "There is no player online with that phone number.");
    return 1;
}

CMD:flip(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid > 0 && isnull(params))
    {
        FlipVehicle(vehicleid);
        SendServerMessage(playerid, "You have flipped your current vehicle.");
    }
    else
    {
        if(sscanf(params, "d", vehicleid))
            return SendSyntaxMessage(playerid, "/flipcar [vehicle ID]");

        else if(!IsValidVehicle(vehicleid))
            return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

        FlipVehicle(vehicleid);
        SendServerMessage(playerid, "You have flipped vehicle ID: %d.", vehicleid);
    }
    return 1;
}

CMD:licenses(playerid, params[])
{
    SendClientMessage(playerid, X11_GREY_60, "----------------------------------------------------------------");
    if(PlayerData[playerid][pDrivingLicense])
    {
        if(PlayerData[playerid][pDrivingLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Driving license: ["COL_GREEN"Valid %s"WHITE"]", ConvertTimestamp(Timestamp:PlayerData[playerid][pDrivingLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Driving License: ["COL_RED"Expired"WHITE"]");
    }
    else
        SendClientMessageEx(playerid, X11_WHITE, "* Driving License: ["COL_RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pTruckLicense])
    {
        if(PlayerData[playerid][pTruckLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Trucker license: ["COL_GREEN"Valid %s"WHITE"]", ConvertTimestamp(Timestamp:PlayerData[playerid][pTruckLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Trucker License: ["COL_RED"Expired"WHITE"]");
    }
    else
        SendClientMessageEx(playerid, X11_WHITE, "* Trucker License: ["COL_RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pFirearmLicense])
    {
        if(PlayerData[playerid][pFirearmLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Firearm license: ["COL_GREEN"Valid %s"WHITE"]", ConvertTimestamp(Timestamp:PlayerData[playerid][pFirearmLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Firearm License: ["COL_RED"Expired"WHITE"]");
    }
    else
        SendClientMessageEx(playerid, X11_WHITE, "* Firearm License: ["COL_RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pBusinessLicense])
    {
        if(PlayerData[playerid][pBusinessLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Business license: ["COL_GREEN"Valid %s"WHITE"]", ConvertTimestamp(Timestamp:PlayerData[playerid][pBusinessLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Business License: ["COL_RED"Expired"WHITE"]");
    }
    else
        SendClientMessageEx(playerid, X11_WHITE, "* Business License: ["COL_RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pWorkshopLicense])
    {
        if(PlayerData[playerid][pWorkshopLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Workshop license: ["COL_GREEN"Valid %s"WHITE"]", ConvertTimestamp(Timestamp:PlayerData[playerid][pWorkshopLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Workshop License: ["COL_RED"Expired"WHITE"]");
    }
    else
        SendClientMessageEx(playerid, X11_WHITE, "* Workshop License: ["COL_RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pLumberLicense])
    {
        if(PlayerData[playerid][pLumberLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Lumber license: ["COL_GREEN"Valid %s"WHITE"]", ConvertTimestamp(Timestamp:PlayerData[playerid][pLumberLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Lumber License: ["COL_RED"Expired"WHITE"]");
    }
    else
        SendClientMessageEx(playerid, X11_WHITE, "* Lumber License: ["COL_RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pBLSLicense])
    {
        if(PlayerData[playerid][pBLSLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* BLS Certificate: ["COL_GREEN"Valid %s"WHITE"]", ConvertTimestamp(Timestamp:PlayerData[playerid][pBLSLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* BLS Certificate: ["COL_RED"Expired"WHITE"]");
    }
    else
        SendClientMessageEx(playerid, X11_WHITE, "* BLS Certificate: ["COL_RED"Not Passed"WHITE"]");

    SendClientMessage(playerid, X11_GREY_60, "----------------------------------------------------------------");
    return 1;
}

CMD:showlicenses(playerid, params[])
{
    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/showlicenses [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't show your licenses to yourself.");

    SendClientMessage(userid, X11_GREY_60, "-----------------------------------------------------------");

    if(PlayerData[playerid][pDrivingLicense])
    {
        if(PlayerData[playerid][pDrivingLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Driving license: "COL_GREEN"Valid %s", ConvertTimestamp(Timestamp:PlayerData[playerid][pDrivingLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Driving License "COL_RED"(Expired)");
    }
    else
        SendClientMessageEx(userid, X11_WHITE, "* Driving License "COL_RED"(Not Passed)");

    if(PlayerData[playerid][pTruckLicense])
    {
        if(PlayerData[playerid][pTruckLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Trucker license: "COL_GREEN"Valid %s", ConvertTimestamp(Timestamp:PlayerData[playerid][pTruckLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Trucker License "COL_RED"(Expired)");
    }
    else
        SendClientMessageEx(userid, X11_WHITE, "* Trucker License "COL_RED"(Not Passed)");

    if(PlayerData[playerid][pFirearmLicense])
    {
        if(PlayerData[playerid][pFirearmLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Firearm license: "COL_GREEN"Valid %s", ConvertTimestamp(Timestamp:PlayerData[playerid][pFirearmLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Firearm License "COL_RED"(Expired)");
    }
    else
        SendClientMessageEx(userid, X11_WHITE, "* Firearm License "COL_RED"(Not Passed)");

    if(PlayerData[playerid][pBusinessLicense])
    {
        if(PlayerData[playerid][pBusinessLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Business license: "COL_GREEN"Valid %s", ConvertTimestamp(Timestamp:PlayerData[playerid][pBusinessLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Business License "COL_RED"(Expired)");
    }
    else
        SendClientMessageEx(userid, X11_WHITE, "* Business License "COL_RED"(Not Passed)");

    if(PlayerData[playerid][pWorkshopLicense])
    {
        if(PlayerData[playerid][pWorkshopLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Workshop license: "COL_GREEN"Valid %s", ConvertTimestamp(Timestamp:PlayerData[playerid][pWorkshopLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Workshop License "COL_RED"(Expired)");
    }
    else
        SendClientMessageEx(userid, X11_WHITE, "* Workshop License "COL_RED"(Not Passed)");

    if(PlayerData[playerid][pBLSLicense])
    {
        if(PlayerData[playerid][pBLSLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* BLS Certificate: "COL_GREEN"Valid %s", ConvertTimestamp(Timestamp:PlayerData[playerid][pBLSLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* BLS Certificate "COL_RED"(Expired)");
    }
    else
        SendClientMessageEx(userid, X11_WHITE, "* BLS Certificate "COL_RED"(Not Passed)");

    SendClientMessage(userid, X11_GREY_60, "-----------------------------------------------------------");
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out their licenses and shows them to %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:deletechar(playerid, params[])
{
    static
        query[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(isnull(params) || strlen(params) > 24)
        return SendSyntaxMessage(playerid, "/deletechar [character name]");

    if(!IsValidRoleplayName(params))
        return SendErrorMessage(playerid, "You have specified an invalid name format.");

    format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
    mysql_tquery(g_iHandle, query, "OnDeleteCharacter", "ds", playerid, params);

    return 1;
}

/*CMD:stoploading(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_COURIER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(!PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadType])
        return SendErrorMessage(playerid, "You are not loading any crates right now.");

    PlayerData[playerid][pLoading] = 0;
    PlayerData[playerid][pLoadType] = 0;
    PlayerData[playerid][pLoadCrate] = 0;

    RemovePlayerAttachedObject(playerid, JOB_SLOT);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

    DisablePlayerCheckpoint(playerid);
    SendServerMessage(playerid, "You are no longer loading crates.");

    return 1;
}*/

/*CMD:startdelivery(playerid, params[])
{
    new id = Job_NearestPoint(playerid);

    if(PlayerData[playerid][pJob] != JOB_COURIER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(id == -1 || JobData[id][jobType] != JOB_COURIER)
        return SendErrorMessage(playerid, "You are not in range of any loading point.");

    if(PlayerData[playerid][pShipment] == -1)
        return SendErrorMessage(playerid, "You are't accepted a shipment (/shipment).");

    if(PlayerData[playerid][pDelayTruck])
        return SendErrorMessage(playerid, "Tunggu %d menit untuk bekerja kembali.",PlayerData[playerid][pDelayTruck]);

    if(PlayerData[playerid][pLoadType] > 0)
        return SendErrorMessage(playerid, "You have already started a delivery.");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must exit the vehicle first.");

    if(IsLoadableVehicle(GetPlayerVehicleID(playerid)))
        return SendErrorMessage(playerid, "You must be in truck to use this action.");

    Dialog_Show(playerid, StartDelivery, DIALOG_STYLE_LIST, "Select Type", "Retail Supplies\nAmmunition\nClothing\nFood Supplies\nGasoline\nFurniture\nElectronic", "Select", "Cancel");
    return 1;
}*/

CMD:bshipment(playerid, params[])
{
    new id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid));

    if(id == -1 || !Business_IsOwner(playerid, id))
        return SendErrorMessage(playerid, "You are not in range of your business.");

    if(BusinessData[id][bizType] == 5)
        return SendErrorMessage(playerid, "You can't request shipment for this business type.");

    if(BusinessData[id][bizSeal] == 1)
        return SendErrorMessage(playerid, "You can't request shipment for this business type.");

    if(BusinessData[id][bizVault] < BusinessData[id][bizCargo])
        return SendErrorMessage(playerid, "Your vault isn't enough to restock!");

    if(BusinessData[id][bizShipment])
    {
        foreach (new i : Player) if(PlayerData[i][pShipment] == id)
        {
            CancelShipment(i);
            SendServerMessage(i, "The shipment request has been cancelled.");
        }
        BusinessData[id][bizShipment] = 0;
        Business_Save(id);

        SendServerMessage(playerid, "Your business is no longer requesting a shipment.");
        SendJobMessage(1, X11_YELLOW_2, "** %s is no longer requesting a shipment for %s"YELLOW". **", ReturnName(playerid, 0), BusinessData[id][bizName]);
    }
    else
    {
        if(BusinessData[id][bizDeliver][0] == 0.0 && BusinessData[id][bizDeliver][1] == 0.0 && BusinessData[id][bizDeliver][2] == 0.0)
            return SendErrorMessage(playerid, "The delivery point for your business is not set.");

        BusinessData[id][bizShipment] = 1;
        Business_Save(id);

        SendServerMessage(playerid, "Your have requested a shipment for your business.");
        SendJobMessage(JOB_COURIER, X11_YELLOW_2, "** %s is requesting a shipment for %s "YELLOW"(/shipments to accept). **", ReturnName(playerid, 0), BusinessData[id][bizName]);
    }
    return 1;
}

CMD:cancelshipment(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_COURIER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(PlayerData[playerid][pShipment] == -1)
        return SendErrorMessage(playerid, "You haven't accepted any shipments yet.");

    CancelShipment(playerid);
    SendServerMessage(playerid, "You have cancelled the accepted shipment.");
    return 1;
}

CMD:shipments(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_COURIER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(PlayerData[playerid][pShipment] != -1)
        return SendErrorMessage(playerid, "You have already accepted a shipment (type /cancelshipment to cancel it).");

    if(!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must be in vehicle to take this action.");

    ShowShipments(playerid);
    return 1;
}
CMD:clearinventory(playerid, params[])
{
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/clearinventory [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    Inventory_Clear(userid);

    SendAdminAction(playerid, "You have cleared %s's inventory from all items.", ReturnName(userid, 0));
    SendAdminAction(userid, "%s has cleared your inventory from all items.", ReturnName(playerid, 0));

    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has cleared %s's inventory.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:listwarns(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new Cache:checkwarns, query[255],string[1024],userid;
    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/listwarns [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    format(query, sizeof(query), "SELECT * FROM `wanrslog` WHERE `ID`='%d' LIMIT 20", PlayerData[userid][pID]);
    checkwarns = mysql_query(g_iHandle, query);

    if(!cache_num_rows())
        return SendErrorMessage(playerid, "There player doen't have warn log.");

    format(string, sizeof(string), "Warn Date\tWarn By\tReason\n");

    for(new i; i != cache_num_rows(); i++)
    {
        new warnby[24],
            warndate[64],
            warnreason[64];

        cache_get_field_content(i, "warnBy", warnby);
        cache_get_field_content(i, "warnDate", warndate);
        cache_get_field_content(i, "warnReason", warnreason);

        format(string, sizeof(string), "%s%s\t%s\t%s\n", string, warndate, warnby, warnreason);
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Warn Log", string, "Close","");

    cache_delete(checkwarns);
    return 1;
}

CMD:owarn(playerid, params[])
{
    static
        name[MAX_PLAYER_NAME],
        reason[128];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "s["#MAX_PLAYER_NAME"]s[128]", name, reason)) return SendSyntaxMessage(playerid, "/owarn [username]");
    mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character`='%s'", name), "OfflineWarn", "dss", playerid, name, reason);
    return 1;
}

Function:OfflineWarn(playerid, name[], reason[])
{
    if(!cache_num_rows())
        return SendErrorMessage(playerid, "Username isn't exists.");

    new warn = cache_get_field_int(0, "Warnings"),
        id = cache_get_field_int(0, "ID");

    new query[255];
    format(query, sizeof(query), "INSERT INTO `wanrslog` (`ID`, `warnBy`, `warnReason`, `warnDate`) VALUES ('%d','%s','%s','%s')", id, ReturnAdminName(playerid), SQL_ReturnEscaped(reason), SQL_ReturnEscaped(ReturnDate()));
    mysql_tquery(g_iHandle, query);
    mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `Warnings`='%d' WHERE `Character`='%s'", (warn+1), name));

    SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s was offline warned by admin/helper %s reason: %s", name, ReturnAdminName(playerid), reason);

    if(warn >= 20)
    {
        SendTesterMessage(X11_TOMATO_1, "AdmCmd: %s was banned for 20 warnings by %s, reason: %s", name, ReturnName(playerid, 0), reason);
        Blacklist_Add("0.0.0.0", "", NormalName(playerid), "BOT", "Maximum warning 20/20.");
    }
    return 1;
}

CMD:clearwarns(playerid, params[])
{
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/clearwarns [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    ResetWarnings(userid);

    SendAdminAction(playerid, "You have cleared %s's warnings.", ReturnName(userid, 0));
    SendAdminAction(userid, "%s has cleared your warnings.", ReturnName(playerid, 0));

    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has cleared %s's warnings.", ReturnName(playerid, 0), ReturnName(userid, 0));
    mysql_tquery(g_iHandle, sprintf("DELETE FROM `wanrslog` WHERE ID='%d'", PlayerData[userid][pID]));
    return 1;
}

CMD:sorting(playerid, params[])
{
    new id = -1;

    if(PlayerData[playerid][pJob] != JOB_SORTER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_SORTER)
        return SendErrorMessage(playerid, "You are not in range of the sorting facility.");

    switch (PlayerData[playerid][pSorting])
    {
        case -1:
        {
            PlayerData[playerid][pSorting] = id;
            PlayerData[playerid][pSortCrate] = 1;

            SendServerMessage(playerid, "You have started sorting. Please make your way to the marker.");

            SetPlayerAttachedObject(playerid, JOB_SLOT, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

            ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
            SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 1.0);
        }
        default:
        {
            PlayerData[playerid][pSorting] = -1;

            if(PlayerData[playerid][pSortCrate] != 0)
            {
                PlayerData[playerid][pSortCrate] = 0;

                RemovePlayerAttachedObject(playerid, JOB_SLOT);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            }
            DisablePlayerCheckpoint(playerid);
            SendServerMessage(playerid, "You have finished sorting packages.");
        }
    }
    return 1;
}

CMD:vw(playerid, params[]) {
    SendClientMessageEx(playerid, COLOR_CLIENT, "Current Virtual World: %d", GetPlayerVirtualWorld(playerid));
    return 1;
}

static GetMonth(bulan)
{
    static
        month[12];

    switch (bulan) {
        case 1: month = "January";
        case 2: month = "February";
        case 3: month = "March";
        case 4: month = "April";
        case 5: month = "May";
        case 6: month = "June";
        case 7: month = "July";
        case 8: month = "August";
        case 9: month = "September";
        case 10: month = "October";
        case 11: month = "November";
        case 12: month = "December";
    }
    return month;
}

CMD:time(playerid, params[])
{
    new 
        hour, 
        minute, 
        detik,
        reset_duration,
        reset_hour,
        reset_minute,
        reset_second,
        bhour, 
        bminute, 
        bdetik,
        string[128],
        date[6],
        salary_week
    ;

    getdate(date[2], date[1], date[0]);
    gettime(date[3], date[4], date[5]);

    hour = floatround(PlayerData[playerid][pFactionHour]/3600, floatround_floor);
    minute = floatround(PlayerData[playerid][pFactionHour]/60, floatround_floor) % 60;
    detik = PlayerData[playerid][pFactionHour] % 60;
    reset_duration = (PlayerData[playerid][pFactionSalaryResettedAt] - gettime());
    reset_hour = floatround(reset_duration/3600, floatround_floor);
    reset_minute = floatround(reset_duration/60, floatround_floor) % 60;
    reset_second = reset_duration % 60;
    salary_week = PlayerData[playerid][pFactionSalaryCollected];

    if(PlayerData[playerid][pFactionHour] > 0 && GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid != FACTION_LEGAL)) 
    {   
        SendClientMessageEx(playerid, X11_TURQUOISE_1, "FACTION: "YELLOW"Total jam kerja :"WHITE" %d jam %d menit %d detik", hour, minute, detik);

        if (reset_duration < 0)
        {
            SendClientMessageEx(playerid, X11_TURQUOISE_1, "FACTION: "YELLOW"Salary minggu ini :"WHITE" %s / %s", FormatNumber(salary_week), Economy_GetMaxFactSalaryWeekly() ? FormatNumber(Economy_GetMaxFactSalaryWeekly()) : "Unlimited");
        }
        else
        {
            SendClientMessageEx(playerid, X11_TURQUOISE_1, "FACTION: "YELLOW"Salary minggu ini : "WHITE"%s / %s"YELLOW", Di-reset dalam: "WHITE"%d jam %d menit %d detik", FormatNumber(salary_week), Economy_GetMaxFactSalaryWeekly() ? FormatNumber(Economy_GetMaxFactSalaryWeekly()) : "Unlimited", reset_hour, reset_minute, reset_second);
        }
    }
    
    bhour = floatround(PlayerData[playerid][pBizDutyHour]/3600, floatround_floor);
    bminute = floatround(PlayerData[playerid][pBizDutyHour]/60, floatround_floor) % 60;
    bdetik = PlayerData[playerid][pBizDutyHour] % 60;

    for(new i; i < MAX_BUSINESSES; i++)
    {
        if(Business_IsEmployee(playerid, i))
        {
            SendClientMessageEx(playerid, X11_TURQUOISE_1, "YELLOWPAGE: "YELLOW"Total jam kerja :"WHITE" %d Hour %d Minute %d Second", bhour, bminute, bdetik);
            break;
        }
    }

    if (PlayerData[playerid][pCanPaycheck])
    {
        SendServerMessage(playerid, "Paycheck sudah dapat anda ambil di Bank atau ATM (/paycheck).");
    }
    else
    {
        if(PlayerData[playerid][pMinutes] >= 3600) SendServerMessage(playerid, "Paycheck sudah dapat anda ambil di Bank atau ATM (/paycheck).");
        else SendClientMessageEx(playerid, X11_TURQUOISE_1, "PAYCHECK: "YELLOW"Tunggu %d menit untuk mengambil paycheck.", 60-(PlayerData[playerid][pMinutes]/60)); 
    }




    format(string, sizeof(string), "~g~%s %02d %d~n~~b~%02d:%02d:%02d", GetMonth(date[1]), date[0], date[2], date[3], date[4], date[5]);
    GameTextForPlayer(playerid, string, 6000, 1);

    return 1;
}

forward SaveServerSettings();
public SaveServerSettings()
{
    mysql_tquery(g_iHandle, sprintf(
        "UPDATE `server` SET \
        `fish_Price` = '%.1f', \
        `cow_price` = '%d', \
        `deer_price` = '%d', \
        `lsd_price` = '%d', \
        `ecs_price` = '%d', \
        `server_time` = '%d', \
        `server_time_minute` = '%d', \
        `server_time_interval` = '%d', \
        `server_time_sync` = %d,\
        `wheat_price` = '%d' \
        WHERE `ID`='1'"
        , ServerData[fish_Price]
        , ServerData[cow_price]
        , ServerData[deer_price]
        , ServerData[lsd_price]
        , ServerData[ecs_price]
        , ServerData[ServerTime]
        , ServerData[ServerTimeMinute]
        , ServerData[ServerTimeInterval]
        , ServerData[ServerTimeSync]
        , ServerData[wheat_price])
    );
}

SaveAll()
{
    new time = GetTickCount();

    //foreach(new i : ServerActor)
    //{
    //    Actor_Save(i);
    //}

    foreach(new i : Vending)
    {
        Vending_Save(i);
    }
    
    foreach(new i : Vehicle)
    {
        if(Vehicle_GetType(i) == VEHICLE_TYPE_PLAYER || Vehicle_GetType(i) == VEHICLE_TYPE_RENTAL)
        {
            Vehicle_Save(i);
        }
    }
    printf("Done save player and rental vehicle data: %d ms", GetTickCount() - time);

    foreach(new i : Player) if(IsPlayerConnected(i))
    {
        SQL_SaveCharacter(i);
    }
    printf("Done save player data: %d ms", GetTickCount() - time);

    foreach(new i : Workshop) 
    {
        Workshop_Save(i);
    }
    printf("Done save workshop data: %d ms", GetTickCount() - time);

    for (new i; i < MAX_BUSINESSES; i++) if(BusinessData[i][bizExists]) {
        Business_Save(i);
    }

    printf("Done save business data: %d ms", GetTickCount() - time);

    for (new i; i < MAX_HOUSES; i++) if(HouseData[i][houseExists]) {
        House_Save(i);

        for (new id = 0; id != MAX_FURNITURE; id ++) if(FurnitureData[id][furnitureExists] && FurnitureData[id][furnitureHouse] == i) {
            Furniture_Save(id);
        }
    }
    
    printf("Done save houses data: %d ms", GetTickCount() - time);

    SaveServerSettings();
    // UpdateVehicleState();
    printf("Done save all data: %d ms", GetTickCount() - time);
    return 1;
}

CMD:saveall(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    SaveAll();
    SendServerMessage(playerid, "You have saved all "RED"server data");
    return 1;
}

CMD:saveaccounts(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    foreach(new i : Player) if(IsPlayerConnected(i) && SQL_IsCharacterLogged(i)) {
        SQL_SaveAccounts(i);
        //SQL_SaveWeapon(i);
    }
    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has saved all server data.", ReturnName(playerid, 0));
    return 1;
}

CMD:whisper(playerid, params[])
{
    new userid, text[128];
    if(sscanf(params, "us[128]", userid, text)) return SendSyntaxMessage(playerid, "/(w)hisper [playerid/PartOfName] [text]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(PlayerData[userid][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't whisper yourself.");

    if(strlen(text) > 64) {
        SendClientMessageEx(userid, X11_YELLOW_2, "** Whisper from %s (%d): %.64s", ReturnName(playerid, 0, 1), playerid, text);
        SendClientMessageEx(userid, X11_YELLOW_2, "...%s **", text[64]);

        SendClientMessageEx(playerid, X11_YELLOW_2, "** Whisper to %s (%d): %.64s", ReturnName(userid, 0, 1), userid, text);
        SendClientMessageEx(playerid, X11_YELLOW_2, "...%s **", text[64]);
    }
    else {
        SendClientMessageEx(userid, X11_YELLOW_2, "** Whisper from %s (%d): %s **", ReturnName(playerid, 0, 1), playerid, text);
        SendClientMessageEx(playerid, X11_YELLOW_2, "** Whisper to %s (%d): %s **", ReturnName(userid, 0, 1), userid, text);
    }
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s mutters something in %s's ear.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    //SendAdminMessage(X11_GREEN_YELLOW, "WhisperLog: %s to %s for: %s", ReturnName(playerid, 0), ReturnName(userid, 0), text);
    return 1;
}

CMD:mask(playerid, params[])
{
    new string[32];
    if(AccountData[playerid][pAdminDuty])
        return SendErrorMessage(playerid, "You are on an admin duty!");

    if(PlayerData[playerid][pScore] < 5)
        return SendErrorMessage(playerid, "You must level 5 to use mask.");

    if(!Inventory_HasItem(playerid, "Mask"))
        return SendErrorMessage(playerid, "You don't have any mask.");

    if(PlayerData[playerid][pJobDuty])
        return SendErrorMessage(playerid, "You're job duty.");

    if(!PlayerData[playerid][pMaskOn])
    {
        PlayerData[playerid][pMaskOn] = true;
        format(string, sizeof(string), "Mask_#%d", PlayerData[playerid][pMaskID]);

        if(!IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
        {
            PlayerData[playerid][pNameTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.1, 8.0, playerid, INVALID_VEHICLE_ID, 1);
        }
        Attach3DTextLabelToPlayer(PlayerData[playerid][pNameTag], playerid, 0, 0, 0.39);

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out a mask and puts it on.", ReturnName(playerid, 0));
    }
    else
    {
        PlayerData[playerid][pMaskOn] = false;
        ResetNameTag(playerid, true);
        for(new i = GetPlayerPoolSize(); i != -1; --i)
		{
		    ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes their mask off and puts it away.", ReturnName(playerid, 0));
    }
    return 1;
}

CMD:numbers(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    static
        name[24];

    SendClientMessage(playerid, X11_WHITE, "Phone number list:");

    foreach (new i : Player) if(PlayerData[i][pPhone]) {
            GetPlayerName(i, name, sizeof(name));
            SendClientMessageEx(playerid, X11_WHITE, "* %s (%d)", name,PlayerData[i][pPhone]);
    }
    return 1;
}

CMD:myjail(playerid, params[])
{
    if(!PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "You are not jailed!");

    new
        times[3],
        myjail[264] = "Jail Reason\tTimes\tJailed By\n";

    GetElapsedTime(PlayerData[playerid][pJailTime], times[0], times[1], times[2]);
    //format(myjail, sizeof(myjail), "%s\t%02d hours %02d min %02d sec\t%s\n", myjail, PlayerData[playerid][pJailReason], times[0], times[1], times[2], PlayerData[playerid][pJailedBy]);
    //format(string, sizeof(string), "%s%s\t%02d:%02d:%02d\n", string,NormalName(i), hours, minutes, seconds);
    if(PlayerData[playerid][pJailTime] >= 60)
    {
        strcat(myjail, sprintf("%s\t%02d hours %02d min %02d sec\t%s\n", PlayerData[playerid][pJailReason], times[0], times[1], times[2], PlayerData[playerid][pJailedBy]));
    }
    else
    {
         strcat(myjail, sprintf("%s\t %02d min %02d sec\t%s\n", PlayerData[playerid][pJailReason], times[1], times[2], PlayerData[playerid][pJailedBy]));
    }
    Dialog_Show(playerid, DisplayOnly, DIALOG_STYLE_TABLIST_HEADERS, "My Jail", myjail, "Close", "");
    return 1;
}

CMD:listguns(playerid, params[])
{
    new userid;

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/listguns [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "The specified player is disconnected.");

    if(!IsPlayerDuty(userid)) {
        ShowPlayerWeapon(userid, playerid);
    }
    else {
        SendClientMessageEx(playerid, COLOR_ORANGE, "Faction weapons:");
        new weaponid, ammo;

        for(new i = 1; i < MAX_WEAPON_SLOT; i++) {
            GetPlayerWeaponData(userid, i, weaponid, ammo);

            if(weaponid)
                SendClientMessageEx(playerid, -1, "* "RED"%s "WHITE"- %d ammo.", ReturnWeaponName(weaponid), ammo);
        }
        SendClientMessageEx(playerid, COLOR_ORANGE, "________________________________");
    }
    SendServerMessage(playerid, "Kamu melihat senjata milik "YELLOW"%s "WHITE"("LIGHTBLUE"%s weapons"WHITE").", ReturnName(userid, 0), IsPlayerDuty(userid) ? ("faction") : ("player"));
    return 1;
}

CMD:cmc(playerid, params[])
{
    ClearPlayerChat(playerid, 50);
    return 1;
}

CMD:setmaxinventory(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    static
        userid,
        capacity;

    if(sscanf(params, "ud", userid, capacity))
        return SendSyntaxMessage(playerid, "/setmaxinventory [playerid/PartOfName] [amount]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "The specified player is disconnected.");

    if(capacity < 1 || capacity > 36)
        return SendErrorMessage(playerid, "The specified capacity can't exceed 36 items.");

    PlayerData[userid][pCapacity] = capacity;

    SendServerMessage(playerid, "You have set %s's inventory capacity to %d items.", ReturnName(userid, 0), capacity);
    SendServerMessage(userid, "%s has set your inventory capacity to %d items.", ReturnName(playerid, 0), capacity);
    return 1;
}

CMD:breakcuff(playerid, params[])
{
    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/breakcuff [playerid/PartOfName]");

    if(!Inventory_HasItem(playerid, "Bobby Pin"))
        return SendErrorMessage(playerid, "You don't have a Bobby Pin.");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");

    if(!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "The specified player is not cuffed.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't pick your own handcuffs.");

    SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s attempts to pick the cuffs with a bobby pin.", ReturnName(playerid, 0));
    return 1;
}

CMD:dice(playerid, params[])
{
    static
        dice;

    if(sscanf(params, "d", dice))
        return SendSyntaxMessage(playerid, "/dice [1,2,3,4]");

    if(dice < 1 || dice > 4)
        return SendErrorMessage(playerid, "Invalid dice value.");

    switch(dice)
    {
        case 1: SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s rolls a dice landing on the number "COL_RED"%d.", ReturnName(playerid, 0), (random(6) + 1));
        case 2: SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s rolls a dice landing on the number "COL_RED"%d-%d.", ReturnName(playerid, 0), (random(6) + 1), (random(6) + 1));
        case 3: SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s rolls a dice landing on the number "COL_RED"%d-%d-%d.", ReturnName(playerid, 0), (random(6) + 1), (random(6) + 1), (random(6) + 1));
        case 4: SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s rolls a dice landing on the number "COL_RED"%d-%d-%d-%d.", ReturnName(playerid, 0), (random(6) + 1), (random(6) + 1), (random(6) + 1), (random(6) + 1));
    }
    return 1;
}

CMD:shakehand(playerid, params[])
{
    static
        userid,
            type;

    if(sscanf(params, "ud", userid, type))
        return SendSyntaxMessage(playerid, "/shakehand [playerid/PartOfName] [type]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You cannot shake your own hand.");

    if(type < 1 || type > 6)
        return SendErrorMessage(playerid, "You must specify a type from 1 to 6.");

    PlayerData[userid][pShakeOffer] = playerid;
    PlayerData[userid][pShakeType] = type;

    SendServerMessage(userid, "%s has offered to shake your hand (type \"/approve greet\").", ReturnName(playerid, 0));
    SendServerMessage(playerid, "You have offered to shake %s's hand.", ReturnName(userid, 0));
    return 1;
}

CMD:frisk(playerid, params[])
{
    static
        userid;

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/frisk [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0)) return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");
    if(PlayerData[userid][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You cannot frisk yourself.");

    PlayerData[userid][pFriskOffer] = playerid;

    SendServerMessage(userid, "%s has offered to frisk you (type \"/approve frisk\").", ReturnName(playerid, 0));
    SendServerMessage(playerid, "You have offered to frisk %s.", ReturnName(userid, 0));
    return 1;
}

//Tiba sini
/*CMD:picklock(playerid, params[])
{
    new id = Vehicle_Nearest(playerid, 4.0);

    if(!Inventory_HasItem(playerid, "Crowbar"))
        return SendErrorMessage(playerid, "You don't have a crowbar.");

    if(id == -1)
        return SendErrorMessage(playerid, "You are not in range of any vehicle.");

    if(!VehicleData[id][cLocked])
        return SendErrorMessage(playerid, "This vehicle is not locked.");

    PlayerData[playerid][pPicking] = 1;
    PlayerData[playerid][pPickCar] = id;

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out a crowbar and picks the lock.", ReturnName(playerid, 0));
    SendServerMessage(playerid, "Please wait 60 seconds while the lock is picked.");
    return 1;
}*/
CMD:picklock(playerid, params[]) {
    return SendServerMessage(playerid, "This command disable for some reason.");
}

CMD:jobtypes(playerid, params[])
{
    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);
    SendClientMessageEx(playerid, X11_YELLOW_2,"JOBID: "WHITE"1: Trucker | 2: Mechanic | 3: Taxi Driver | 4: Cargo Unloader");
    SendClientMessageEx(playerid, X11_YELLOW_2,"JOBID: "WHITE"5: Miner | 6: Food Vendor | 7: Package sorter | 8: Arms Dealer | 9: Lumberjack");
    return 1;
}

CMD:stopanim(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You don't need to use this command right now.");

    if(PlayerData[playerid][pInjured])
    return SendErrorMessage(playerid, "You can't use this command while injured!.");

    ClearAnimations(playerid, 1);
    HidePlayerFooter(playerid);

    PlayerData[playerid][pLoopAnim] = 0;
    SendServerMessage(playerid, "You have stopped any animations.");
    return 1;
}

CMD:editbillboard(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editbillboard [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, name, price, message, owner, range");
        return 1;
    }
    if((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
        return SendErrorMessage(playerid, "You have specified an invalid business ID.");

    if(!strcmp(type, "location", true))
    {
        GetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);

        Billboard_Refresh(id);
        Billboard_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of billboard ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "price", true))
    {
        new price;

        if(sscanf(string, "d", price))
                return SendSyntaxMessage(playerid, "/editbillboard [id] [price] [new price]");

        BillBoardData[id][bbPrice] = price;

        Billboard_Refresh(id);
        Billboard_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the price of billboard ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
    }
    else if(!strcmp(type, "name", true))
    {
        new name[32];

        if(sscanf(string, "s[32]", name))
                return SendSyntaxMessage(playerid, "/editbillboard [id] [name] [new name]");

        format(BillBoardData[id][bbName], 32, name);

        Billboard_Refresh(id);
        Billboard_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the name of billboard ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
    }
    else if(!strcmp(type, "message", true))
    {
        new name[32];

        if(sscanf(string, "s[230]", name))
                return SendSyntaxMessage(playerid, "/editbillboard [id] [message] [new message] (Max Chars: 230)");

        format(BillBoardData[id][bbMessage], 32, name);

        Billboard_Refresh(id);
        Billboard_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the message of billboard ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
    }
    else if(!strcmp(type, "owner", true))
    {
        new giveplayerid;

        if(sscanf(string, "d", giveplayerid))
        return SendSyntaxMessage(playerid, "/editbillboard [id] [(remove)owner] [playerid]");

        if(giveplayerid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

        BillBoardData[id][bbOwner] = GetPlayerSQLID(giveplayerid);

        Billboard_Refresh(id);
        Billboard_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the owner of billboard ID: %d", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "removeowner", true))
    {
        if(sscanf(string, "d"))
        return SendSyntaxMessage(playerid, "/editbillboard [id] [removeowner]");

        BillBoardData[id][bbOwner] = 0;

        Billboard_Refresh(id);
        Billboard_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has removed the owner of billboard ID: %d", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "range", true))
    {
        new range;

        if(sscanf(string, "d", range))
        return SendSyntaxMessage(playerid, "/editbillboard [id] [range] [new range]");

        if(range < 10)
        {
            SendErrorMessage(playerid, "Range can only be 10-200");
            return 1;
        }

        if(range > 200)
        {
            SendErrorMessage(playerid, "Range can only be 10-200");
            return 1;
        }

        BillBoardData[id][bbRange] = range;

        Billboard_Refresh(id);
        Billboard_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the range of billboard ID: %d to %d.", ReturnName(playerid, 0), id, range);
    }
    return 1;
}

CMD:destroybillboard(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroybillboard [bb id]");

    if((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
        return SendErrorMessage(playerid, "You have specified an invalid billboard ID.");

    Billboard_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed billboard ID: %d.", id);
    return 1;
}

CMD:listafk(playerid, params[])
{
    new string[500],hours, minutes, seconds;
    format(string, sizeof(string), "Name\tTime\n");
    foreach(new i : Player) if(SQL_IsCharacterLogged(i) && IsPlayerPaused(i))
    {
        GetElapsedTime((GetPlayerPausedTime(i)/1000), hours, minutes, seconds);
        format(string, sizeof(string), "%s%s\t%02d:%02d:%02d\n", string,NormalName(i), hours, minutes, seconds);
    }
    Dialog_Show(playerid, DisplayOnly, DIALOG_STYLE_TABLIST_HEADERS, "Afk List", string, "Close", "");
    return 1;
}

CMD:call(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "Cellphone")) return SendErrorMessage(playerid, "You don't have a cellphone on you.");
    if(!PlayerData[playerid][pPhone]) return SendErrorMessage(playerid, "This phone doesn't have SIM Card.");
    if(AccountData[playerid][pAdminDuty]) return SendErrorMessage(playerid, "Your must off duty admin to use this command.");
    if(PlayerData[playerid][pPhoneOff]) return SendErrorMessage(playerid, "Your phone must be powered on.");
    if(PlayerData[playerid][pIncomingCall]) return SendErrorMessage(playerid, "Waiting someone to answer your call.");
    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "You already to call on your phone.");

    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || !IsPlayerSpawned(playerid) || PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "You can't use this command now.");

    static
        targetid,
        number,
        factionid;

    if(sscanf(params, "d", number))
        return SendSyntaxMessage(playerid, "/call [phone number] (1222 for taxi, 911 for emergency, 555 for mechanic, 711 for goverment, 144 for summer sanews)");

    if(!number) return SendErrorMessage(playerid, "The specified phone number is not in service.");
    if(number == 911)
    {
        if(PlayerData[playerid][pEmergency])
            return SendErrorMessage(playerid, "You can't use this command now.");

        PlayerData[playerid][pEmergency] = 1;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out their cellphone and places a call.", ReturnName(playerid, 0));
        SendClientMessage(playerid, X11_TURQUOISE_1, "[OPERATOR]:"WHITE" Which service do you require: \"police\" , \"medics\" or \"both\"?");
    }
    else if(number == 711)
    {
        if(PlayerData[playerid][pEmergency])
            return SendErrorMessage(playerid, "You can't use this command now.");

        if(!FactionMember_GetTypeCount(FACTION_GOV, true))
            return SendErrorMessage(playerid, "There is no one goverment member on duty!");

        PlayerData[playerid][pEmergency] = 4;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

        SendClientMessage(playerid, X11_TURQUOISE_1, "[GOVERMENT OPERATOR]:"WHITE" What can we help you? don't send junk message for this service?.");
    }
    else if(number == 144)
    {
        if(PlayerData[playerid][pEmergency])
            return SendErrorMessage(playerid, "You can't use this command now.");

        if(!FactionMember_GetTypeCount(FACTION_NEWS, true))
            return SendErrorMessage(playerid, "There is no one summer news member on duty!");

        PlayerData[playerid][pEmergency] = 5;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

        SendClientMessage(playerid, X11_TURQUOISE_1, "[SUMMER NEWS OPERATOR]:"WHITE" What can we help you? don't send junk message for this service?.");
    }
    else if(number == 555)
    {
        if(PlayerData[playerid][pInjured])
            return SendErrorMessage(playerid, "You can't use this command now.");

        PlayerData[playerid][pMechanicCalled] = 1;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

        SendClientMessage(playerid, X11_YELLOW_2, "[OPERATOR]:"WHITE" The mechanic has been notified of your call.");
        SendClientMessage(playerid, COLOR_SERVER, "You hung up your phone.");

        SendJobMessage(JOB_MECHANIC, X11_GREEN_YELLOW, "|______________ MECHANIC CALL ______________|", ReturnName(playerid, 0), PlayerData[playerid][pPhone], GetPlayerLocation(playerid));
        SendJobMessage(JOB_MECHANIC, X11_WHITE, "Caller: (ID: %d) %s (Ph: %d)", playerid, ReturnName2(playerid, 0), PlayerData[playerid][pPhone]);
        SendJobMessage(JOB_MECHANIC, X11_WHITE, "Current Location: %s (Type /acceptcall to accept mechanic call.).", GetPlayerLocation(playerid));
    }
    else if(number == 1222)
    {
        if(PlayerData[playerid][pInjured])
            return SendErrorMessage(playerid, "You can't use this command now.");

        PlayerData[playerid][pTaxiCalled] = 1;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

        SendClientMessage(playerid, X11_YELLOW_2, "[OPERATOR]:"WHITE" The taxi department has been notified of your call.");

        SendClientMessage(playerid, COLOR_SERVER, "You hung up your phone.");
        SendJobMessage(JOB_TAXI, X11_YELLOW_2, "** %s (PHONE NUMBER: %d) is requesting a taxi at %s (use /acceptcall to accept).", ReturnName(playerid, 0), PlayerData[playerid][pPhone], GetPlayerLocation(playerid));
    }
    else if((factionid = GetFactionNumber(number)) != -1)
    {
        if(PlayerData[playerid][pInjured])
            return SendErrorMessage(playerid, "You can't use this command now.");

        PlayerData[playerid][pFactionCall] = 1;
        PlayerData[playerid][pFactionCallID] = factionid;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

        new string[255];
        format(string, sizeof(string), "[%s]:"WHITE" What can we help you? don't send junk message for this service?", FactionData[factionid][factionName]);
        SendClientMessage(playerid, X11_TURQUOISE_1, string);
    }
    else if((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
    {
        if(PlayerData[playerid][pInjured]) return SendErrorMessage(playerid, "You can't use this command now.");
        if(targetid == playerid) return SendErrorMessage(playerid, "You can't call yourself!");
        if(PlayerData[targetid][pPhoneOff])
        {
            AddMissCall(targetid, PlayerData[playerid][pPhone]);
            SendErrorMessage(playerid, "The recipient has their cellphone powered off.");
            return 1;
        }

        if(PlayerData[targetid][pCallLine] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "The recipient has calling someone, try again later.");
        if(PlayerData[targetid][pIncomingCall]) return SendErrorMessage(playerid, "Hangup first (/h) to call someone.");
        if(PlayerData[playerid][pCredits] <= 0) return SendErrorMessage(playerid, "You dont have enough phone credits to use a phone call");
        if(PlayerData[playerid][pPhoneBattery] <= 0)
            return SendErrorMessage(playerid, "Your phone battery is 0%% you need to charge it inside your vehicle or house.");



        PlayerData[playerid][pIncomingCall] = 0;
        PlayerData[targetid][pIncomingCall] = 1;

        CallerPlayerID[targetid] = playerid;
        CallerPlayerID[playerid] = targetid;

        makeCall[playerid] = true;

        //PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;
        PlayerData[playerid][pCallLine] = targetid;

        SendClientMessageEx(playerid, X11_YELLOW_2, "[PHONE]:"WHITE" Attempting to dial #%d, please wait for an answer...", number);
        SendClientMessageEx(targetid, X11_YELLOW_2, "[PHONE]:"WHITE" Incoming call from #%d (type \"/answer\" to answer the phone).", PlayerData[playerid][pPhone]);

        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);

        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        PlayerPlaySoundEx(targetid, 23000);
    }
    else SendErrorMessage(playerid, "The specified phone number is not in service.");

    return 1;
}
CMD:setfq(playerid, params[])
	return cmd_setfreq(playerid, params);

CMD:fq(playerid, params[])
    return cmd_switchfreq(playerid, params);

CMD:setfreq(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "Portable Radio"))
        return SendErrorMessage(playerid, "You must have a portable radio.");

    new slot, freq;
    if(sscanf(params, "dd", slot, freq)) 
        return SendSyntaxMessage(playerid, "/setfreq [slot 1 - 5] [channel] ('0' to remove)");

    if(slot < 1 || slot > 5)
        return SendErrorMessage(playerid, "The slot can't be below 1 or above 5.");

    if(freq < 0 || freq > 9999)
        return SendErrorMessage(playerid, "The channel can't be below 0 or above 9999.");

    switch(freq)
    {
        case 911: {
            if(GetFactionType(playerid) != FACTION_POLICE)
                return SendErrorMessage(playerid, "This is police department's frequency only.");
        }
        case 992:{
            if(GetFactionType(playerid) != FACTION_MEDIC)
                return SendErrorMessage(playerid, "This is SAMD frequency only.");
        }
        case 1922:{
            if(GetFactionType(playerid) != FACTION_GOV)
                return SendErrorMessage(playerid, "This is goverment frequency only.");
        }
        case 789:{
            if(GetFactionType(playerid) != FACTION_SADOC)
                return SendErrorMessage(playerid, "This is SADOC frequency only.");
        }
        case 123:{
            if(GetFactionType(playerid) != FACTION_NEWS)
                return SendErrorMessage(playerid, "This is NEWS Reporter frequency only");
        }
    }

    PlayerData[playerid][pFreq][slot] = freq;

    if(freq == 0) {
        SendServerMessage(playerid, "You have remove the frequency from your portable radio.");
    }
    else {
        SendServerMessage(playerid, "You set your frequency slot number "RED"%d "WHITE"for channel"YELLOW" %d", slot, freq);
    }
    return 1;
}
CMD:switchfreq(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "Portable Radio"))
        return SendErrorMessage(playerid, "You must have a portable radio.");

    new slot;
    if(sscanf(params, "d", slot)) 
        return SendSyntaxMessage(playerid, "/switchfreq [1-5]");

    if(slot < 1 || slot > 5)
        return SendErrorMessage(playerid, "The slot can't be below 1 or above 5.");

    if(PlayerData[playerid][pFreq][slot] == 0)
        return SendErrorMessage(playerid, "You have not set this frequency slot yet!");

    PlayerData[playerid][pChannel] = PlayerData[playerid][pFreq][slot];
    SendServerMessage(playerid, "You switch to freq slot number %d - %d", slot, PlayerData[playerid][pFreq][slot]);
    return 1;
}
CMD:createbillboard(playerid, params[])
{
    static
        id = -1;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    id = Billboard_Create(playerid, -1);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for billboards.");

    SendServerMessage(playerid, "You have successfully created billboard ID: %d.", id);
    return 1;
}

CMD:billboards(playerid, params[])
{
    // if (CheckAdmin(playerid, 1))
    // {
    //         PermissionError(playerid);
    //         return 1;
    // }
    ViewBillboards(playerid);
    return 1;
}

CMD:mybillboard(playerid, params[])
{
    if(PlayerData[playerid][pOwnsBillboard] == -1)
    {
        SendErrorMessage(playerid, "You do not own a billboard");
        return 1;
    }
    Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Manage Billboard", "Edit Message\nUnrent Billboard", "Proceed", "Cancel");
    return 1;
}

CMD:helmet(playerid,params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(IsPlayerInAnyVehicle(playerid) && Helmet[playerid] == 0)
    {
        if(IsABike(vehicleid) || IsABicycle(vehicleid))
        {
            Helmet[playerid] = 1;
            SetPlayerAttachedObject(playerid,JOB_SLOT , 18645, 2, 0.07, 0.017, 0, 88, 75, 0);
            SendClientMessage(playerid, COLOR_GREEN, "You have put on a bike helmet. This will supress the impact of a crash.");
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s reaches for their helmet, and takes it off.", ReturnName(playerid, 0));
        }
    }
    else if(IsPlayerInAnyVehicle(playerid) && Helmet[playerid] == 1)
    {
        if(IsABike(vehicleid) || IsABicycle(vehicleid))
        {
            Helmet[playerid] = 0;
            SendClientMessage(playerid, COLOR_GREEN, "You have taken off your helmet. You will no longer be protected from crashes.");
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s reaches for their helmet, and unbuckles it.", ReturnName(playerid, 0));
            if(IsPlayerAttachedObjectSlotUsed(playerid, JOB_SLOT)) RemovePlayerAttachedObject(playerid, JOB_SLOT);
        }
    }
    return 1;
}

CMD:seatbelt(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid) && Seatbelt{playerid} == 0 && IsFourWheelVehicle(GetPlayerVehicleID(playerid)))
    {
        Seatbelt{playerid} = 1;
        SetPlayerAttachedObject(playerid, JOB_SLOT, 18634, 7,0.000000, 0.100000, 0.350000, -35.224993, 45.215000, 1.500000, 5.000000, 1.500000, 1.500000);
        SendServerMessage(playerid, "You have put on your seatbelt. This will supress the impact of a crash.");
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s reaches for their seatbelt, and puts it on.", ReturnName(playerid, 0, 1));
    }
    else if(IsPlayerInAnyVehicle(playerid) && Seatbelt{playerid} == 1 && IsFourWheelVehicle(GetPlayerVehicleID(playerid)))
    {
        Seatbelt{playerid} = 0;
        
        SendServerMessage(playerid, "You have taken off your seatbelt. You will no longer be protected from crashes.");
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s reaches for their seatbelt, and unbuckles it.", ReturnName(playerid, 1));
        if(IsPlayerAttachedObjectSlotUsed(playerid, JOB_SLOT)) RemovePlayerAttachedObject(playerid, JOB_SLOT);
    }
    return 1;
}

CMD:checkseatbelt(playerid, params[])
{
    new userID,string[128];
    if(sscanf(params, "u", userID)) return SendSyntaxMessage(playerid, "/checkseatbelt [playerid]");
    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(IsPlayerConnected(userID) && userID != INVALID_PLAYER_ID)
    {
        new Float:x, Float:y, Float:z;
        GetPlayerPos(userID, x, y, z);
        if(PlayerToPoint(6.0, playerid, x, y, z) && Seatbelt{userID} == 1)
        {
            format(string, sizeof(string), "%s is wearing their seatbelt", ReturnName(playerid));
            SendClientMessage(playerid, COLOR_GREEN, string);
            return 1;
        }
        else if(PlayerToPoint(6.0, playerid, x, y, z) && Seatbelt{userID} == 0)
        {
            format(string, sizeof(string), "%s is not wearing their seatbelt", ReturnName(playerid));
            SendClientMessage(playerid, COLOR_GREEN, string);
            return 1;
        }
        else
        {
            SendClientMessage(playerid, X11_RED_2, "You are not near that player");
            return 1;
        }
    }
    else SendClientMessage(playerid, X11_RED_2, "The ID you have entered does not exist");
    return 1;
}

Function:PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    new Float:oldposx, Float:oldposy, Float:oldposz;
    new Float:tempposx, Float:tempposy, Float:tempposz;
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    tempposx = (oldposx -x);
    tempposy = (oldposy -y);
    tempposz = (oldposz -z);
    if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
    {
        return 1;
    }
    return 0;
}

stock SetPlayerSkinEx(playerid, skin, choice = 0, update = 0)
{
    if(!update) {
        if(!choice) PlayerData[playerid][pSkin] = skin;
        else PlayerData[playerid][pSkinFaction] = skin;
    }

    if(!PlayerData[playerid][pTogHud]) {
        if(PlayerData[playerid][pHudStyle] == 0)
	    {
            PlayerTextDrawSetPreviewModel(playerid, PlayerSkinTD[playerid], skin);
            PlayerTextDrawHide(playerid, PlayerSkinTD[playerid]);
            PlayerTextDrawShow(playerid, PlayerSkinTD[playerid]);
        } else {
            PlayerTextDrawSetPreviewModel(playerid, HUDTextdraws[playerid][3], skin);
            PlayerTextDrawHide(playerid, HUDTextdraws[playerid][3]);
            PlayerTextDrawShow(playerid, HUDTextdraws[playerid][3]);
        }
    }
    SetPlayerSkin(playerid,skin);
    return 1;
}

Business_Type(bizid) 
{
    new pickup[24];
    switch (BusinessData[bizid][bizType]) {
        case 1: pickup = "Retail";
        case 2: pickup = "Weapons";
        case 3: pickup = "Clothes";
        case 4: pickup = "Fast Food";
        case 5: pickup = "Dealership";
        case 6: pickup = "Gas Station";
        case 7: pickup = "Furniture";
        case 8: pickup = "Electronic Store";
        case 9: pickup = "Bar And Lounge";
    }
    return pickup;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	#if defined DEBUG_MODE
	    printf("[debug] OnPlayerCommandPerformed(PID : %d CMD : %s Succes : %d)", playerid, cmdtext, success);
	#endif

    new 
        bool:cmdTextLimit = false;

    if (strlen(cmdtext) > 20) {
        cmdtext[20] = EOS;
        cmdTextLimit = true;
    }
    
    if(!success)
        return SendErrorMessage(playerid, "Unknown Command '%s'!",cmdtext, (cmdTextLimit) ? ("...") : (""));
    
    return 1;
}

Auction_Reset()
{
    foreach(new id : Player) if(GetPVarInt(id, "IkutLelang") == 1)
    {
        SetPVarInt(id, "IkutLelang", 0);
    }

    SetGVarInt("AuctionType", 0, GLOBAL_VARTYPE_INT);
    SetGVarInt("AuctionCount", 0, GLOBAL_VARTYPE_INT);
    SetGVarInt("AuctionStart", 0, GLOBAL_VARTYPE_INT);
    SetGVarInt("AuctionDiff", 0, GLOBAL_VARTYPE_INT);
    SetGVarString("AuctionLelang", "none", GLOBAL_VARTYPE_STRING);
    SetGVarString("AuctionHighest", "none", GLOBAL_VARTYPE_STRING);
    KillTimer(Auction);
    return 1;
}

Function:AuctionTime()
{
    new text[255], property[128],name[MAX_PLAYER_NAME];
    GetGVarString("AuctionLelang", property, sizeof(property), GLOBAL_VARTYPE_STRING);
    GetGVarString("AuctionHighest", name, sizeof(name), GLOBAL_VARTYPE_STRING);

    switch(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT))
    {
        case 1:
        {
            SetGVarInt("AuctionTime", GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT)-1, GLOBAL_VARTYPE_INT);
            format(text,sizeof(text),"{00FFFF}%s\n"COL_GREEN"Start: "WHITE"%s\n"COL_GREEN"Diff: "WHITE"%s\n"COL_GREEN"Participants: "WHITE"%d\nStart in: %d", property, FormatNumber(GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)), FormatNumber(GetGVarInt("AuctionDiff", GLOBAL_VARTYPE_INT)), GetGVarInt("AuctionCount", GLOBAL_VARTYPE_INT), GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT));

            if(GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT) == 0)
            {
                if(!GetGVarInt("AuctionCount", GLOBAL_VARTYPE_INT))
                {
                    SetDynamicObjectMaterialText(newbieschool, 0, "No one join this auction.", 130, "Ariel", 27, 1, -1, -16777216, 1);
                    Auction_Reset();
                }
                else
                {
                    SetGVarInt("AuctionType", 2, GLOBAL_VARTYPE_INT);
                    SetGVarInt("AuctionTime", 10, GLOBAL_VARTYPE_INT);
                }
            }
        }
        case 2:
        {
            SetGVarInt("AuctionTime", GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT)-1, GLOBAL_VARTYPE_INT);
            format(text,sizeof(text),"{00FFFF}%s\n"COL_GREEN"Highest bidder: "WHITE"%s\n"COL_GREEN"Offer: "WHITE"%s\nCountdown: %d", property, name, FormatNumber(GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)), GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT));

            if(GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT) == 0)
            {
                format(text,sizeof(text),"{00FFFF}%s\n"WHITE"%s - "COL_GREEN"%s", property, name, FormatNumber(GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)));

                foreach(new id : Player) if(IsPlayerInNewbieSchool(id))
                {
                    SetPVarInt(id, "IkutLelang", 0);
                    SendClientMessageEx(id, X11_TURQUOISE_1, "AUCTION: "WHITE"%s: %s - "COL_GREEN"%s.", property, name, FormatNumber(GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)));

                    if(!strcmp(name,ReturnName(id), true))
                    {
                        SendClientMessageEx(id, X11_TURQUOISE_1, "AUCTION: "WHITE"Anda telah memenangkan %s - "COL_GREEN"%s", property,FormatNumber(GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)));
                        GiveMoney(id, -GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT), ECONOMY_ADD_SUPPLY, "win auction");
                    }
                }
                Auction_Reset();
            }
        }
    }
    SetDynamicObjectMaterialText(newbieschool, 0, text, 130, "Ariel", 27, 1, -1, -16777216, 1);
    return 1;
}

Function:VoteTime()
{
    new pertanyaan[128], unknown, count = Iter_Count(Player);
    unknown = count-(GetGVarInt("Yes")+GetGVarInt("No"));

    GetGVarString("VoteQuest", pertanyaan, 128);

    SendClientMessageToAllEx(X11_TURQUOISE_1, "VOTE: "YELLOW"%s", pertanyaan);
    SendClientMessageToAllEx(X11_TURQUOISE_1, "VOTE: "WHITE"%d "COL_GREEN"yes, "WHITE"%d"COL_RED" no, "WHITE"%d {C0C0C0}unknown", GetGVarInt("Yes"), GetGVarInt("No"), (unknown < 0) ? (unknown*-1) : unknown);

    foreach(new i : Player) {
        SetPVarInt(i, "Vote", 0);
    }
    SetGVarInt("Yes", 0);
    SetGVarInt("No", 0);
    SetGVarInt("Vote", 0);
    return 1;
}

CMD:vote(playerid, params[])
{
    new vote[10], string[64];

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "s[10]S()[64]", vote, string))
        return SendSyntaxMessage(playerid, "/vote [create/end]");

    if(!strcmp(vote, "create", true))
    {
        new pertanyaan[128];

        if(sscanf(string,"s[128]", pertanyaan))
            return SendSyntaxMessage(playerid, "/vote create [vote]");

        SendClientMessageToAllEx(X11_TURQUOISE_1, "VOTE: "YELLOW"%s", pertanyaan);
        SendClientMessageToAllEx(X11_TURQUOISE_1, "VOTE: "COL_GREEN"/yes "WHITE"to accept, "COL_RED"/no"WHITE" to deny");
        SetGVarString("VoteQuest", pertanyaan);
        SetGVarInt("Yes", 0);
        SetGVarInt("No", 0);
        SetGVarInt("Vote", 1);

        TimerVote = SetTimer("VoteTime", 45000, false);

        foreach(new i : Player) {
            SetPVarInt(i, "Vote", 0);
        }
    }
    if(!strcmp(vote, "end", true))
    {
        if(!GetGVarInt("Vote"))
        return SendErrorMessage(playerid, "Tidak ada vote yang sedang berlangsung.");

        SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s ended this voting.",ReturnName2(playerid, 0));
        SetGVarString("VoteQuest", "(null)");

        SetGVarInt("Vote", 0);
        SetGVarInt("Yes", 0);
        SetGVarInt("No", 0);

        foreach(new i : Player) {
            SetPVarInt(i, "Vote", 0);
        }

        KillTimer(TimerVote);
    }
    return 1;
}

CMD:no(playerid, params[])
{
    if(!GetGVarInt("Vote"))
        return SendErrorMessage(playerid, "Tidak ada vote yang sedang berlangsung.");

    if(GetPVarInt(playerid, "Vote"))
        return SendErrorMessage(playerid, "Anda sudah memvoting sebelumnya.");

    SetGVarInt("No", GetGVarInt("No")+1);
    SetPVarInt(playerid, "Vote", 1);
    SendServerMessage(playerid, "You're vote "COL_RED"No");
    return 1;
}

CMD:yes(playerid, params[])
{
    if(!GetGVarInt("Vote"))
        return SendErrorMessage(playerid, "Tidak ada vote yang sedang berlangsung.");

    if(GetPVarInt(playerid, "Vote"))
        return SendErrorMessage(playerid, "Anda sudah memvoting sebelumnya.");

    SetGVarInt("Yes", GetGVarInt("Yes")+1);
    SetPVarInt(playerid, "Vote", 1);
    SendServerMessage(playerid, "You're vote "COL_GREEN"Yes");
    return 1;
}

CMD:quiz(playerid, params[])
{
    new choice[10], subparam[128];
    if(sscanf(params, "s[10]S()[128]", choice, subparam))
        return SendSyntaxMessage(playerid, "/quiz [create/answer/end]");

    if(!strcmp(choice, "create"))
    {
        if (CheckAdmin(playerid, 1))
            return PermissionError(playerid);

        new quest[128], answer[128];
        if(GetGVarInt("QuizReady", GLOBAL_VARTYPE_INT))
            return SendErrorMessage(playerid, "You can't create more than 1 quiz.");

        if(sscanf(subparam, "p<:>s[128]s[128]", quest,answer))
            return SendSyntaxMessage(playerid, "/quiz create [questions] : [answer]");

        SetGVarInt("QuizReady", 1, GLOBAL_VARTYPE_INT);
        SetGVarString("QuizQuest", quest, GLOBAL_VARTYPE_STRING);
        SetGVarString("QuizAnswer", answer, GLOBAL_VARTYPE_STRING);

        SendClientMessageToAllEx(X11_TURQUOISE_1, "QUIZ: "WHITE"%s", quest);
        SendClientMessageToAll(X11_TURQUOISE_1, "QUIZ: "WHITE"Use '"YELLOW"/quiz answer"WHITE"' to answer the quiz.");
        SendAdminMessage(X11_TOMATO_1, "Quiz added by %s", ReturnAdminName(playerid));
    }
    else if(!strcmp(choice, "answer"))
    {
        new answer[128],answered[128];

        GetGVarString("QuizAnswer", answer, sizeof(answer), GLOBAL_VARTYPE_STRING);

        if(sscanf(subparam,"s[128]", answered))
        return SendSyntaxMessage(playerid, "/quiz answer [answer]");

        if(!GetGVarInt("QuizReady", GLOBAL_VARTYPE_INT))
        return SendErrorMessage(playerid, "There is no available quiz.");

        if(!strcmp(answered, answer, true))
        {
            SendClientMessageToAllEx(X11_TURQUOISE_1, "QUIZ: "YELLOW"%s "WHITE"won the quiz. The quiz answer was '"YELLOW"%s"WHITE"'",ReturnName(playerid), answer);

            SetGVarInt("QuizReady", 0, GLOBAL_VARTYPE_INT);
            SetGVarString("QuizQuest", "(null)", GLOBAL_VARTYPE_STRING);
            SetGVarString("QuizAnswer", "(null)", GLOBAL_VARTYPE_STRING);
        }
        else
            SendErrorMessage(playerid, "Wrong answer.");
    }
    else if(!strcmp(choice, "end"))
    {
        new quest[128],answer[128];

        GetGVarString("QuizQuest", quest, sizeof(quest), GLOBAL_VARTYPE_STRING);
        GetGVarString("QuizAnswer", answer, sizeof(answer), GLOBAL_VARTYPE_STRING);

        if (CheckAdmin(playerid, 1))
            return PermissionError(playerid);

        if(!GetGVarInt("QuizReady", GLOBAL_VARTYPE_INT))
        return SendErrorMessage(playerid, "There is no available quiz.");

        SendClientMessageToAllEx(X11_TURQUOISE_1, "QUIZINFO"WHITE": Admin "YELLOW"%s"WHITE" ended the quiz.The correct answer was '"YELLOW"%s"WHITE"", ReturnName(playerid), answer);
        SetGVarInt("QuizReady", 0, GLOBAL_VARTYPE_INT);
        SetGVarString("QuizQuest", "(null)", GLOBAL_VARTYPE_STRING);
        SetGVarString("QuizAnswer", "(null)", GLOBAL_VARTYPE_STRING);
    }
    else return SendClientMessage(playerid, 0xAFAFAFAA, "USAGE: /quiz [create/answer/end]");
    return 1;
}

CMD:auction(playerid, params[])
{
    new option[32], string[128], property[128];

    if(!IsPlayerInNewbieSchool(playerid))
        return SendErrorMessage(playerid, "You're not in newbie school.");

    if(sscanf(params, "s[32]S()[128]", option, string))
        return SendSyntaxMessage(playerid, "/auction [create/join/bid/cancel]");

    if(!strcmp(option,"create", true))
    {
        new lelang[128], start, bid;

        if (CheckAdmin(playerid, 5))
            return PermissionError(playerid);

        if(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT) != 0)
            return SendErrorMessage(playerid, "Auction sedang berjalan, /auction cancel tuntuk menunda.");

        if(sscanf(string, "dds[128]", start, bid, lelang))
            return SendSyntaxMessage(playerid, "/auction create [start money] [diff] [property name]");

        if(start < 0)
            return SendErrorMessage(playerid, "Jangan memasukkan uang awal di bawah 0.");

        if(bid < 0)
        return SendErrorMessage(playerid, "Jangan memasukkan jumlah diff di bawah 0.");

        SetGVarInt("AuctionType", 1, GLOBAL_VARTYPE_INT);
        SetGVarInt("AuctionTime", 15, GLOBAL_VARTYPE_INT);
        SetGVarInt("AuctionCount", 0, GLOBAL_VARTYPE_INT);
        SetGVarInt("AuctionStart", start, GLOBAL_VARTYPE_INT);
        SetGVarInt("AuctionDiff", bid, GLOBAL_VARTYPE_INT);
        SetGVarString("AuctionLelang", lelang, GLOBAL_VARTYPE_STRING);
        SetGVarString("AuctionHighest", "none", GLOBAL_VARTYPE_STRING);

        foreach(new id : Player) if(IsPlayerInNewbieSchool(id))
        {
            SendClientMessageEx(id, X11_TURQUOISE_1, "AUCTION: "YELLOW"Item: "WHITE"%s | "YELLOW"Start price: "COL_GREEN"%s | "YELLOW"Diff: "COL_GREEN"%s", lelang, FormatNumber(start), FormatNumber(bid));
            SendClientMessageEx(id, X11_TURQUOISE_1, "AUCTION: "WHITE"Use command "YELLOW"'/auction join' "WHITE"to join auction.");
        }
        Auction = SetTimer("AuctionTime", 1000, true);
        new text[255];
        format(text,sizeof(text),"{00FFFF}%s\n"COL_GREEN"Start: "WHITE"%s\n"COL_GREEN"Diff: "WHITE"%s\n"COL_GREEN"Participants: "WHITE"%d\nSeart in: %d", lelang, FormatNumber(start), FormatNumber(bid), GetGVarInt("AuctionCount", GLOBAL_VARTYPE_INT), GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT));
        SetDynamicObjectMaterialText(newbieschool, 0, text, 130, "Ariel", 27, 1, -1, -16777216, 1);

        SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s start the auction, start: [%s] diff: [%s]", ReturnName(playerid, 0), FormatNumber(start), FormatNumber(bid));
    }
    else if(!strcmp(option, "join", true))
    {
        if(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT) != 1) return SendErrorMessage(playerid, "Auction belum di mulai.");
        if(GetPVarInt(playerid, "IkutLelang")) return SendErrorMessage(playerid, "Anda sedang mengikuti auction ini.!");
        if(GetMoney(playerid) < 100) return SendErrorMessage(playerid, "Anda tidak memiliki modal uang $100 untuk mengikuti auction ini.");

        GetGVarString("AuctionLelang", property, sizeof(property), GLOBAL_VARTYPE_STRING);

        GiveMoney(playerid, -100, ECONOMY_ADD_SUPPLY, "join auction");
        SendClientMessageEx(playerid, X11_TURQUOISE_1, "AUCTION: "WHITE"Gunakan perintah "YELLOW"'/auction bid' "WHITE"untuk memenangkan auction.");

        for(new i = 0; i != MAX_FACTIONS; i++) if(FactionData[i][factionExists] && FactionData[i][factionType] == FACTION_GOV) {
            FactionData[i][factionMoney] += 5;
        }
        SetPVarInt(playerid, "IkutLelang", 1);
        SetGVarInt("AuctionCount", GetGVarInt("AuctionCount", GLOBAL_VARTYPE_INT)+1, GLOBAL_VARTYPE_INT);

    }
    else if(!strcmp(option, "bid", true))
    {
        new money = (GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)+GetGVarInt("AuctionDiff", GLOBAL_VARTYPE_INT)),
            name[MAX_PLAYER_NAME];

        GetGVarString("AuctionHighest", name, sizeof(name), GLOBAL_VARTYPE_STRING);

        if(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT) == 1)
        return SendErrorMessage(playerid, "Auction belum di mulai.");

        if(!strcmp(name, ReturnName(playerid), true))
        return SendErrorMessage(playerid, "Anda masih berada di peringkat teratas auction ini!.");

        if(!GetPVarInt(playerid, "IkutLelang"))
        return SendErrorMessage(playerid, "Anda tidak mengikuti auction ini.");

        if(GetMoney(playerid) < money)
        return SendErrorMessage(playerid, "Anda tidak memiliki uang sebesar %s untuk mengikuti auction ini.", FormatNumber(money));

        SetGVarInt("AuctionStart", money, GLOBAL_VARTYPE_INT);
        SetGVarString("AuctionHighest", ReturnName(playerid), GLOBAL_VARTYPE_STRING);
        SetGVarInt("AuctionTime", 10, GLOBAL_VARTYPE_INT);
    }
    else if(!strcmp(option, "cancel", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);
        if(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT) == 0)
        return SendErrorMessage(playerid, "Auction sedang tidak berlangsung!.");

        foreach(new id : Player) if(IsPlayerInNewbieSchool(id))
        {
            SendClientMessageEx(id, X11_TURQUOISE_1, "AUCTION: "YELLOW"%s "WHITE"menunda auction.", ReturnName(playerid));
        }
        Auction_Reset();
        SetDynamicObjectMaterialText(newbieschool, 0, "Auction di tunda.", 130, "Ariel", 27, 1, -1, -16777216, 1);
    }
    else
        SendSyntaxMessage(playerid, "/auction [create/join/bid/cancel]");

    return 1;
}

CMD:gunauthority(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/gunauthority [playerid]");

    if(!SQL_IsCharacterLogged(userid))
        return SendErrorMessage(playerid, "Player tersebut tidak login.");

    if(PlayerData[userid][pGunAuthority])
        return SendErrorMessage(playerid, "This player already have a authority.");

    PlayerData[userid][pGunAuthority] = 1;

    SendServerMessage(playerid, "You've give authority verified gun maker to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "%s give you authority to make special wapon on blackmarket.", ReturnAdminName(playerid));

    Log_Save(E_LOG_GUN_AUTH, sprintf("[%s] %s give authority to make hard gun to %s.", ReturnDate(), ReturnAdminName(playerid), ReturnName(userid, 0)));
    return 1;
}

CMD:nearplayer(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        userid,
        range;

    if(sscanf(params, "ud", userid, range))
        return SendSyntaxMessage(playerid, "/nearplayer [playerid] [range]");

    new Float:x,
        Float:y,
        Float:z,
        nearhim[255];

    GetPlayerPos(userid, x, y, z);

    foreach(new i : Player) if(SQL_IsCharacterLogged(i) && i != userid && IsPlayerInRangeOfPoint(i, range, x, y, z)) {
        strcat(nearhim, sprintf("%s\n", ReturnName2(i, 0)));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, sprintf("Nearest %s", ReturnName2(userid, 0)), nearhim, "Close", "");
    return 1;
}

Dialog:Stuck(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        switch(listitem)
        {
            case 0: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %.19s )  current vw: [ %d ] | location: [%s] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerVirtualWorld(playerid), GetLocation(x, y, z), (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes"));
            case 1: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %.14s )  current interior: [ %d ] | location: [%s] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerInterior(playerid), GetLocation(x, y, z), (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes"));
            case 2: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %s )  current vw/int: [ %d/%d ] | location: [%s] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), GetLocation(x,y,z), (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes"));
            case 3: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %s )  curr vw/int: [ %d/%d ] | loc / curr position: [%s, %.1f|%.1f|%.1f] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), GetLocation(x, y, z), x, y, z, (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes"));
            case 4: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %.5s )  curr vw/int: [ %d/%d ] | location: [%s] | injured: [%s] | last shooter: [PID #%s] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), GetLocation(x, y, z), (!PlayerData[playerid][pInjured]) ? ("No") : ("Yes"), ReturnName2(PlayerData[playerid][pLastShot]), (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes"));
            case 5: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %.6s )  curr vw/int: [ %d/%d ] | freeze: [%s] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), (!PlayerData[playerid][pFreeze]) ? ("No") : ("Yes"), (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes"));
        }
        PlayerData[playerid][pStuck] = gettime();
    }
    return 1;
}

Dialog:ReleaseFish(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new list = GetPVarInt(playerid, "ReleaseFish");
        SendServerMessage(playerid, "You have release %s (%.3f lbs) fish from you.", FishName[playerid][list], FishWeight[playerid][list]);
        FishWeight[playerid][list] = 0.0;
        FishName[playerid][list] = "\0";
        FishListItem[playerid] = -1;
    }
    return 1;
}

Dialog:ShowFish(playerid, response, listitem, inputtext[])
{
    if(response) 
    {
        if(FishWeight[playerid][listitem]) {
            FishListItem[playerid] = listitem;
            Dialog_Show(playerid, FishMenu, DIALOG_STYLE_LIST, "Fish Menu", "Cook Fish\nRelease Fish", "Choose", "Close");
        }
        else ShowPlayerFooter(playerid, "~n~~r~( ! ) ~w~Ikan tidak tersedia"), cmd_myfish(playerid, "\0");
    }
    return 1;
}
Dialog:FishMenu(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                new houseid = House_Inside(playerid);
                new insideRV = GetPlayerVirtualWorld(playerid);
                new apartid = ApartmentRoom_Inside(playerid);

                if(PlayerData[playerid][pCooking])
                    return SendErrorMessage(playerid, "Kamu sedang memasak.");

                if(IsNearDropItemModel(playerid, 19632) || houseid != -1 || insideRV > MIN_VIRTUAL_WORLD || apartid != -1)
                {
                    PlayerData[playerid][pCooking] = 3;
                    PlayerData[playerid][pCookingTime] = 50;
                    PlayerData[playerid][pCookingHouse] = houseid;
                    PlayerData[playerid][pCookingApart] = apartid;

                    SendServerMessage(playerid, "You cooks %s (%.3f lbs) fish from your fish inventory.", FishName[playerid][FishListItem[playerid]], FishWeight[playerid][FishListItem[playerid]]);
                    FishWeight[playerid][FishListItem[playerid]] = 0.0;
                    FishName[playerid][FishListItem[playerid]] = "\0";
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s prepares cooking equipment and heats up a %s fish (50 seconds).", FishName[playerid][FishListItem[playerid]], ReturnName(playerid, 0));
                    FishListItem[playerid] = -1;
                }
            }
            case 1:
            {
                Dialog_Show(playerid, ReleaseFish, DIALOG_STYLE_MSGBOX, "Release Fish", ""WHITE"Do you want to release this fish?\n\nFish Name: "YELLOW"%s\n"WHITE"Fish Weight: "YELLOW"%.3f\n\n"WHITE"Select \"release\" to release this fish.", "Release", "Cancel", FishName[playerid][FishListItem[playerid]], FishWeight[playerid][FishListItem[playerid]]);
                SetPVarInt(playerid, "ReleaseFish", FishListItem[playerid]);
            }
        }
    }
    return 1;
}
Dialog:SellFish(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new reward = GetPVarInt(playerid, "TotalPrice");

        SendServerMessage(playerid, "Sukses menjual semua ikan dan anda mendapat "YELLOW"%s "WHITE"dari hasil penjualan.", FormatNumber(reward));
        AddPlayerSalary(playerid, reward, "Sell Fish");

        for(new i = 0; i < MAX_FISH; i++) {
            FishWeight[playerid][i] = 0.0;
            FishName[playerid][i][0] = EOS;
        }

        PlayerData[playerid][pDelayFishing] = 1200;
    }
    return 1;
}

Dialog:BuyBait(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new value = strval(inputtext);

        if(value < 1)
            return Dialog_Show(playerid, BuyBait, DIALOG_STYLE_INPUT, "Buy Bait", WHITE"Berapa banyak umpan yang akan anda beli?\nAnda akan mendapatkan "YELLOW"dua umpan/"GREEN"$5.\n"WHITE"Masukkan jumlah uang untuk membeli:", "Buy", "Close");

        if(value > GetMoney(playerid))
            return ShowPlayerFooter(playerid, "~r~ ERROR: ~w~Uang anda tidak mencukupi.");

        if(Inventory_Count(playerid, "Bait")+(value*2) > Inventory_MaxCount("Bait"))
            return Dialog_Show(playerid, BuyBait, DIALOG_STYLE_INPUT, "Buy Bait", WHITE"Berapa banyak umpan yang akan anda beli?\nAnda akan mendapatkan "YELLOW"dua umpan/"GREEN"$5.\n"WHITE"Masukkan jumlah uang untuk membeli:\n\nHINT: Anda hanya dapat membeli dengan uang "GREEN"%s.", "Buy", "Close", FormatNumber(floatround((Inventory_MaxCount("Bait")-Inventory_Count(playerid, "Bait"))/2)));

        if(Inventory_Add(playerid, "Bait", 19630, (value * 2)) != -1)
        {
            GiveMoney(playerid, -value*5, ECONOMY_ADD_SUPPLY, "bought bait");
            SendServerMessage(playerid, "Anda telah membeli "YELLOW"%d umpan "WHITE"dengan harga "COL_GREEN"%s "WHITE"(total umpamu: "YELLOW"%d"WHITE").", (value*2), FormatNumber(value*5), Inventory_Count(playerid, "Bait"));
        }
    }
    return 1;
}

Dialog:GiveOnly(playerid, response, listitem, inputtext[]) {

    if(response)
    {
        new weaponid = strval(inputtext);
        new userid = selectedTarget[playerid];
		if(IsPlayerInAnyVehicle(userid))
			return ShowPlayerFooter(playerid, "~r~ERROR: ~w~Player tersebut harus turun terlebih dahulu dari kendaraan!.");

        if(PlayerHasWeaponInSlot(userid, weaponid))
        	return ShowPlayerFooter(playerid, "~r~ERROR: ~w~Player tersebut memiliki senjata di slot yang sama.");

		GivePlayerWeaponEx(userid, weaponid, PlayerGuns[playerid][g_aWeaponSlots[weaponid]][weapon_ammo], PlayerGuns[playerid][g_aWeaponSlots[weaponid]][weapon_durability], PlayerGuns[playerid][g_aWeaponSlots[weaponid]][weapon_serial]);
        ResetWeaponID(playerid, weaponid);

		SendServerMessage(playerid, "Kamu telah memberi "RED"%s"WHITE" kepada "YELLOW"%s.", ReturnWeaponName(weaponid), ReturnName(userid));
		SendServerMessage(userid, ""YELLOW"%s"WHITE" memberikan "RED"%s"WHITE" kepadamu.", ReturnName(playerid), ReturnWeaponName(weaponid));
    }
    return 1;
}
Dialog:RepairOnly(playerid, response, listitem, inputtext[]) {

    if(response)
    {
        new weaponid = strval(inputtext); 
        new repairment = (WEAPON_DURABILITY - PlayerGuns[playerid][g_aWeaponSlots[weaponid]][weapon_durability]);

	    if(Inventory_Count(playerid, "Materials") < repairment)
        	return SendErrorMessage(playerid, "You don't have enough materials.");

        if(PlayerGuns[playerid][g_aWeaponSlots[weaponid]][weapon_durability] >= 500)
            return SendErrorMessage(playerid, "You only able to repair a weapon with durability below 500!");

        Inventory_Remove(playerid, "Materials", repairment);
        PlayerGuns[playerid][g_aWeaponSlots[weaponid]][weapon_durability] = WEAPON_DURABILITY;
        ShowPlayerFooter(playerid, "~g~INFO: ~w~Kamu telah memperbaiki durability senjata mu."); 
    }
    return 1;
}
Dialog:ShowOnly(playerid, response, listitem, inputtext[]) {
    playerid = INVALID_PLAYER_ID;
    response = 0;
    listitem = 0;
    inputtext[0] = '\0';
}

Dialog:MissCallList(playerid, response, listitem, inputtext[]) {
    if(response) {
        Dialog_Show(playerid, ApproveClearMC, DIALOG_STYLE_MSGBOX, "Clear Miss Call", "Are you sure want to clear miss call list?.", "Yes", "No");
    }
    return 1;
}

Dialog:ApproveClearMC(playerid, response, listitem, inputtext[]) {
    if(response) {
        for(new i = 0; i != 10; i++) if(strcmp(misscallList[playerid][i], "null")) {
            format(misscallList[playerid][i], 128, "null");
        }
        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Miss Call List", "There is nothing miss call on your phone now.", "Close", "");
    }
    return 1;
}

Dialog:Billboards(playerid, response, listitem, inputtext[]) {
    if(response)
    {
        new string[500], szString[100];
        if(BillBoardData[listitem][bbExists] >= 1)
        {
            if(!BillBoardData[listitem][bbOwner])
            {
                BillboardCheckout[playerid] = listitem;
                format(szString, sizeof(szString), ""WHITE"Rent Billboard - {FF8000}%i"WHITE" - {FF8000}$%d", listitem, BillBoardData[listitem][bbPrice]);
                format(string, sizeof(string), ""WHITE"Billboard Name: {FF8000}%s"WHITE" ({FF8000}%i"WHITE")\nBillboard Price: {FF8000}$%d"WHITE"\n\n\n((Rent Fees are collected each payday from your bank account!))", BillBoardData[listitem][bbName], listitem, BillBoardData[listitem][bbPrice]);
                Dialog_Show(playerid, BillboardRent, DIALOG_STYLE_MSGBOX, szString, string, "Rent", "Cancel");
                return 1;
            }
            if(BillBoardData[listitem][bbOwner] == GetPlayerSQLID(playerid))
            {
                Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Manage Billboard", "Edit Message\nUnrent Billboard", "Proceed", "Cancel");
                return 1;
            }
            else
            {
                SendErrorMessage(playerid, "Sorry, this billboard is already being rented!");
            }
        }
    }
    return 1;
}

Dialog:MyBillboardMenu(playerid, response, listitem, inputtext[]) {
    if(response)
    {
        if(listitem == 0)
        {
            Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Billboard Message", "Enter in a new billboard message!\n\n(Max Chars: 230)", "Proceed", "Cancel");
        }
        if(listitem == 1)
        {
            Dialog_Show(playerid, MyBillboardUnrent, DIALOG_STYLE_MSGBOX, "Unrent Billboard", "Are you sure you wish to unrent your billboard?\n\nYou'll get half the rent fee back", "Confirm", "Cancel");
        }
    }
    return 1;
}

Dialog:MyBillboardMessage(playerid, response, listitem, inputtext[]) {
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Billboard Message", "Enter in a new billboard message!\n\n(Max Chars: 230)", "Proceed", "Cancel");

        if(strlen(inputtext) > 230)
            return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Billboard Message", "Too many characters (Max is 230)\n\nEnter in a new billboard message!\n\n(Max Chars: 230)", "Proceed", "Cancel");

        format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, inputtext);

        Billboard_Save(PlayerData[playerid][pOwnsBillboard]);
        Billboard_Refresh(PlayerData[playerid][pOwnsBillboard]);
    }
    return 1;
}

Dialog:MyBillboardUnrent(playerid, response, listitem, inputtext[]) {
    if(response)
    {
        new bbid = PlayerData[playerid][pOwnsBillboard];

        GiveMoney(playerid, BillBoardData[bbid][bbPrice]/2, ECONOMY_TAKE_SUPPLY, "unrent billboard");
        BillBoardData[bbid][bbOwner] = 0;
        format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, "Not Owned");
        Billboard_Save(bbid);
        Billboard_Refresh(bbid);
        PlayerData[playerid][pOwnsBillboard] = -1;
        SendClientMessageEx(playerid, X11_OLIVE_DRAB_1, "You have unrented your billboard");
    }
    return 1;
}

Dialog:BillboardRent(playerid, response, listitem, inputtext[]) {
    if(response)
    {
        new bbid = BillboardCheckout[playerid];
        if(PlayerData[playerid][pBankMoney] < BillBoardData[bbid][bbPrice])
        {
            SendErrorMessage(playerid, "You do not have enough cash in your bank account for the billboard rental fee");
            return 1;
        }
        else
        {
            PlayerData[playerid][pBankMoney] -= BillBoardData[playerid][bbPrice];
            PlayerData[playerid][pOwnsBillboard] = bbid;
            BillBoardData[bbid][bbOwner] = GetPlayerSQLID(playerid);
            Billboard_Save(bbid);
            Billboard_Refresh(bbid);
            SendClientMessageEx(playerid, X11_OLIVE_DRAB_1, "You have purchased a billboard, use /mybillboard to edit the message");
        }
    }
    return 1;
}

Dialog:PickupItems(playerid, response, listitem, inputtext[])
{
    static
        string[64];

    if(response)
    {
        new id = NearestItems[playerid][listitem];

        if(id != -1 && DroppedItems[id][droppedModel])
        {
            if(DroppedItems[id][droppedWeaponId] != 0)
            {
                SendServerMessage(playerid, "Can't get this weapon for some reason, only scripter can pickup this.");
                /*if(PlayerData[playerid][pScore] < 2)
                    return SendErrorMessage(playerid, "You must level 2 to use this.");

                GivePlayerWeaponEx(playerid, DroppedItems[id][droppedWeaponId], DroppedItems[id][droppedAmmo]);

                Item_Delete(id);
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has picked up a %s.", ReturnName(playerid, 0, 1), ReturnWeaponName(DroppedItems[id][droppedWeaponId]));
                ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);*/
            }
            else
            {
                for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], DroppedItems[id][droppedItem], true)) {
                    if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+DroppedItems[id][droppedQuantity]) > g_aInventoryItems[i][e_InventoryMax]) return SendErrorMessage(playerid, "You're limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], g_aInventoryItems[i][e_InventoryItem]);
                }
                if(DroppedItems[id][droppedModel] == 19632)
                    return SendErrorMessage(playerid, "You can't pick up a fire camp");

                if(PickupItem(playerid, id))
                {
                    format(string, sizeof(string), "~g~%s~w~ added to inventory!", DroppedItems[id][droppedItem]);
                    ShowPlayerFooter(playerid, string);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has picked up a \"%s\".", ReturnName(playerid, 0, 1), DroppedItems[id][droppedItem]);
                    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
                }
                else SendErrorMessage(playerid, "You don't have any room in your inventory.");
            }
        }
        else SendErrorMessage(playerid, "This item was already picked up.");
    }
    return 1;
}

Dialog:StartDelivery(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = Job_NearestPoint(playerid);

        if(id == -1)
            return 0;

        PlayerData[playerid][pLoadType] = listitem + 1;
        PlayerData[playerid][pLoadCrate] = 1;
        PlayerData[playerid][pLoading] = 1;

        SendServerMessage(playerid, "You have selected \"%s\". Load the crates into a truck to begin.", inputtext);
        SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 1.0);

        ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
        SetPlayerAttachedObject(playerid, JOB_SLOT, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

        ShowPlayerFooter(playerid, "Tekan ~y~'N'~w~ untuk memasukkan box ke mobil.");
    }
    return 1;
}

Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
            return 0;

        PlayerData[playerid][pSelectedSlot] = listitem;
        Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nPlease enter a new name for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
    }
    return 1;
}

Dialog:EditSalary(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
            return 0;

        PlayerData[playerid][pSelectedSlot] = listitem;
        Dialog_Show(playerid, SetFactionSalary, DIALOG_STYLE_INPUT, "Set Salary", "Rank: %s (%d)\n\nPlease enter a new salary for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
    }
    return 1;
}
Dialog:SetFactionSalary(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, SetFactionSalary, DIALOG_STYLE_INPUT, "Set Salary", "Rank: %s (%d)\n\nPlease enter a new salary for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

        if(strval(inputtext) < 500 || strval(inputtext) > 10000)
            return Dialog_Show(playerid, SetFactionSalary, DIALOG_STYLE_INPUT, "Set Salary", "Error: The salary can't exceed $5000 or lower than 500.\n\nRank: %s (%d)\n\nPlease enter a new salary for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

        FactionData[PlayerData[playerid][pFactionEdit]][factionSalary][PlayerData[playerid][pSelectedSlot]] = strval(inputtext);
        Faction_SaveSalary(PlayerData[playerid][pFactionEdit]);

        Faction_ShowSalary(playerid, PlayerData[playerid][pFactionEdit]);
        SendServerMessage(playerid, "You have set the faction salary of rank %d to \"%d\".", PlayerData[playerid][pSelectedSlot] + 1, strval(inputtext));
    }
    else Faction_ShowSalary(playerid, PlayerData[playerid][pFactionEdit]);
    return 1;
}
Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nPlease enter a new name for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

        if(strlen(inputtext) > 32)
            return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Error: The rank can't exceed 32 characters.\n\nRank: %s (%d)\n\nPlease enter a new name for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

        format(FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
        Faction_SaveRanks(PlayerData[playerid][pFactionEdit]);

        Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
        SendServerMessage(playerid, "You have set the name of rank %d to \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
    }
    else Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
    return 1;
}


Dialog:AcceptTaxi(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new targetid = strval(inputtext);

        if(!IsPlayerConnected(targetid))
            return SendErrorMessage(playerid, "The specified player has disconnected.");

        if(!PlayerData[targetid][pTaxiCalled])
            return SendErrorMessage(playerid, "That player's call was accepted by another taxi driver.");

        PlayerData[targetid][pTaxiCalled] = 0;

        SendServerMessage(playerid, "You have accepted %s's taxi call.", ReturnName(targetid, 0));
        SendServerMessage(targetid, "%s has accepted your taxi call and is on their way.", ReturnName(playerid, 0));
    }
    return 1;
}

Dialog:AcceptMechanic(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new targetid = strval(inputtext);

        if(!IsPlayerConnected(targetid))
            return SendErrorMessage(playerid, "The specified player has disconnected.");

        if(!PlayerData[targetid][pMechanicCalled])
            return SendErrorMessage(playerid, "That player's call was accepted by another taxi driver.");

        PlayerData[targetid][pMechanicCalled] = 0;

        SendCustomMessage(playerid, "MECHANIC", "You have accepted %s's mechanic call.", ReturnName(targetid, 0));
        SendCustomMessage(targetid, "MECHANIC", "%s has accepted your mechanic call.", ReturnName(playerid, 0));
    }
    return 1;
}
Dialog:ApplyJob(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(Business_IsOwner(playerid, strval(inputtext)))
            return SendErrorMessage(playerid, "You're not allowed to work in your own business!");

        if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_MEDIC || GetFactionType(playerid) == FACTION_NEWS || GetFactionType(playerid) == FACTION_GOV)
            return SendErrorMessage(playerid, "You're part of faction, you're not allowed to work as business employee!");

        Dialog_Show(playerid, ApplyJobConfirm, DIALOG_STYLE_MSGBOX, "Yellow Page", "Are you sure do you want to work at this business ?", "Yes", "No");
        SetPVarInt(playerid, "BizID", strval(inputtext));
    }
    return 1;
}
Dialog:ApplyJobConfirm(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new bizid = GetPVarInt(playerid, "BizID");

        if(!BusinessData[bizid][bizExists])
            return SendErrorMessage(playerid, "This is invalid business id, report to admin index this business now!.");

        if(Business_EmployeGetCount(bizid) >= MAX_BUSINESS_EMPLOYEE)
            return SendErrorMessage(playerid, "This business is no longer requesting an employee.");

        SetPlayerWaypoint(playerid, "Business Job", BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
        SendServerMessage(playerid, "You're now attempts to apply at this business, please set your way to the"YELLOW" Business "WHITE"on your gps.");
        SendServerMessage(playerid, "This business is owned by :"YELLOW" %s", BusinessData[bizid][bOwnerName]);
        SetPVarInt(playerid, "BizID", -1);
    }
    return 1;
}
Dialog:AcceptShipment(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new bizid = strval(inputtext);

        if(!BusinessData[bizid][bizExists])
            return SendErrorMessage(playerid, "This is invalid business id, report to admin index this business now!.");

        if(!BusinessData[bizid][bizShipment])
            return SendErrorMessage(playerid, "This business is no longer requesting a shipment.");

        if(IsShipmentAccepted(bizid))
            return SendErrorMessage(playerid, "This shipment was already accepted.");

        foreach (new i : Player) if(Business_IsOwner(i, bizid)) {
            SendServerMessage(i, "%s has accepted your shipment request.", ReturnName(playerid, 0));
        }
        PlayerData[playerid][pShipment] = bizid;
        SetPlayerWaypoint(playerid, "Business Shipments", BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
        SendServerMessage(playerid, "You have accepted the shipment.");
        SendServerMessage(playerid, "Now, please go to "YELLOW"CARGO DOCK"WHITE" to buy this business cargo! (/gps) and go back to this delivery point!");
    }
    return 1;
}

Dialog:TakeItems(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || PlayerData[playerid][pTakeItems] == INVALID_PLAYER_ID)
        return 0;

    if(response)
    {
        new
            userid = PlayerData[playerid][pTakeItems]
        ;
        if(!strcmp(inputtext, "Take Weapons")) {
            ResetWeapons(userid);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has confiscated %s's weapons.", ReturnName(playerid, 0), ReturnName(userid, 0));
        }
        else if(!strcmp(inputtext, "Take Seeds")) {
            Inventory_Remove(userid, "Marijuana Seeds", -1);
            Inventory_Remove(userid, "Cocaine Seeds", -1);
            Inventory_Remove(userid, "Heroin Opium Seeds", -1);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has confiscated %s's drug seeds.", ReturnName(playerid, 0), ReturnName(userid, 0));
        }
        else if(!strcmp(inputtext, "Take Drugs")) {
            Inventory_Remove(userid, "Marijuana", -1);
            Inventory_Remove(userid, "LSD", -1);
            Inventory_Remove(userid, "Ecstasy", -1);
            Inventory_Remove(userid, "Cocaine", -1);
            Inventory_Remove(userid, "Heroin", -1);
            Inventory_Remove(userid, "Steroids", -1);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has confiscated %s's drugs.", ReturnName(playerid, 0), ReturnName(userid, 0));
        }
        else if(!strcmp(inputtext, "Take Radio")) {
            Inventory_Remove(userid, "Portable Radio", -1);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has confiscated %s's portable radio.", ReturnName(playerid, 0), ReturnName(userid, 0));
        }
        else if(!strcmp(inputtext, "Take Driving License")) {
            PlayerData[userid][pDrivingLicense] = PlayerData[userid][pDrivingLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has confiscated %s's driving license.", ReturnName(playerid, 0), ReturnName(userid, 0));
        }
        else if(!strcmp(inputtext, "Take Trucker License")) {
            PlayerData[userid][pTruckLicense] = PlayerData[userid][pTruckLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has confiscated %s's trucker license.", ReturnName(playerid, 0), ReturnName(userid, 0));
        }
        else if(!strcmp(inputtext, "Take Firearm License")) {
            PlayerData[userid][pFirearmLicense] = PlayerData[userid][pFirearmLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has confiscated %s's firearm license.", ReturnName(playerid, 0), ReturnName(userid, 0));
        }
        else if(!strcmp(inputtext, "Take Business License")) {
            PlayerData[userid][pBusinessLicense] = PlayerData[userid][pBusinessLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has confiscated %s's business license.", ReturnName(playerid, 0), ReturnName(userid, 0));
        }
        else if(!strcmp(inputtext, "Take Workshop License")) {
            PlayerData[userid][pWorkshopLicense] = PlayerData[userid][pWorkshopLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has confiscated %s's Workshop license.", ReturnName(playerid, 0), ReturnName(userid, 0));
        }
        else if(!strcmp(inputtext, "Take Lumber License")) {
            PlayerData[userid][pLumberLicense] = PlayerData[userid][pLumberLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has confiscated %s's Lumber license.", ReturnName(playerid, 0), ReturnName(userid, 0));
        }
    }
    return 1;
}

Dialog:ServerPanel(playerid, response, listitem, inputtext[])
{
    if (CheckAdmin(playerid, 9))
        return 0;

    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                if(g_ServerLocked)
                {
                    g_ServerLocked = false;

                    SendRconCommand("password 0");
                    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has unlocked the server.", ReturnName(playerid, 0));
                }
                else Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Lock Server", "Please enter the specified password below to lock the server with:", "Lock", "Back");
            }
            case 1: Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Set Hostname", "Please enter the new server hostname below:", "Submit", "Back");
            case 2: Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Please specify the MySQL query to execute below:", "Execute", "Back");
            case 3: Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Server Information", "Category\tValue\nDynamic Object:\t%d\nVehicle's Count:\t%d", "Close", "", Streamer_CountItems(STREAMER_TYPE_OBJECT), GetVehiclePoolSize());
        }
    }
    return 1;
}

Dialog:LockServer(playerid, response, listitem, inputtext[])
{
    if (CheckAdmin(playerid, 9))
        return 0;

    if(response)
    {
        if(isnull(inputtext) || !strcmp(inputtext, "0"))
            return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Lock Server", "Please enter the specified password below to lock the server with:", "Lock", "Back");

        if(strlen(inputtext) > 32)
            return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Lock Server", "Error: Please type a password shorter than 32 characters.\n\nPlease enter the specified password below to lock the server with:", "Lock", "Back");

        static
            str[48];

        format(str, sizeof(str), "password %s", inputtext);
        g_ServerLocked = true;

        SendRconCommand(str);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has locked the server (password: %s).", ReturnName(playerid, 0), inputtext);
    }
    else cmd_panel(playerid, "\1");
    return 1;
}

Dialog:SetHostname(playerid, response, listitem, inputtext[])
{
    if (CheckAdmin(playerid, 9))
        return 0;

    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Set Hostname", "Please enter the new server hostname below:", "Submit", "Back");

        static
            str[128];

        format(str, sizeof(str), "hostname %s", inputtext);

        SendRconCommand(str);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has set the hostname to \"%s\".", ReturnName(playerid, 0), inputtext);
    }
    else cmd_panel(playerid, "\1");
    return 1;
}

Dialog:ExecuteQuery(playerid, response, listitem, inputtext[])
{
    if (CheckAdmin(playerid, 9))
        return 0;

    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Please specify the MySQL query to execute below:", "Execute", "Back");

        if(strfind(inputtext, "DELETE", true) != -1 || strfind(inputtext, "DROP", true) != -1)
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Error: You can't execute \"DROP\" or \"DELETE\" queries.\n\nPlease specify the MySQL query to execute below:", "Execute", "Back");

        PlayerData[playerid][pExecute] = 1;
        mysql_tquery(g_iHandle, inputtext, "OnQueryExecute", "ds", playerid, inputtext);
    }
    else cmd_panel(playerid, "\1");
    return 1;
}

Dialog:EntrancePass(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static
            id;

        if((id = Entrance_Nearest(playerid)) == -1)
            return SendErrorMessage(playerid, "You are not in range of any entrance.");

        if(strcmp(EntranceData[id][entrancePass], inputtext) != 0)
            return SendErrorMessage(playerid, "Invalid password specified.");

        if(EntranceData[id][entranceCustom]) SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2], 2500);
        else SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

        SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);
        SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
        SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

        PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];

        SetPlayerWeather(playerid, 1);
        SetPlayerTime(playerid, 12, 0);
        SetCameraBehindPlayer(playerid);
    }
    return 1;
}

Dialog:GiveItem(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static
            userid = -1,
            itemid = -1,
            string[32];

        if(sscanf(inputtext, "u", userid))
            return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Please enter the name or the ID of the player:", "Submit", "Cancel");

        if(userid == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Error: Invalid player specified.\n\nPlease enter the name or the ID of the player:", "Submit", "Cancel");

        if(!IsPlayerNearPlayer(playerid, userid, 6.0))
            return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Error: You are not near that player.\n\nPlease enter the name or the ID of the player:", "Submit", "Cancel");

        if(userid == playerid)
            return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Error: You can't give items to yourself.\n\nPlease enter the name or the ID of the player:", "Submit", "Cancel");

        itemid = PlayerData[playerid][pInventoryItem];

        if(itemid == -1)
            return 0;

        strunpack(string, InventoryData[playerid][itemid][invItem]);

        if(!strcmp(string, "Bobby Pin") && PlayerData[userid][pScore] < 4)
            return SendErrorMessage(playerid, "They must level 4 to use this.");

        //tiba sini
        if(InventoryData[playerid][itemid][invQuantity] == 1)
        {
/*            if(!strcmp(string, "Backpack") && Inventory_HasItem(userid, "Backpack"))
                return SendErrorMessage(playerid, "That player is already carrying a backpack.");

            if(!strcmp(string, "Mask") && Inventory_HasItem(userid, "Mask"))
                return SendErrorMessage(playerid, "That player is already have a mask.");*/

            for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
                if((Inventory_Count(userid, g_aInventoryItems[i][e_InventoryItem])+1) > g_aInventoryItems[i][e_InventoryMax]) return SendErrorMessage(playerid, "That player limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], g_aInventoryItems[i][e_InventoryItem]);
            }

            if(Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel]) != -1)
            {
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out a \"%s\" and gives it to %s.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
                SendServerMessage(userid, "%s has given you \"%s\" (added to inventory).", ReturnName(playerid, 0), string);

                Inventory_Remove(playerid, string);
                Log_Save(E_LOG_GIVE, sprintf("[%s] %s (%s) has given a %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], string, ReturnName(userid, 0), AccountData[userid][pIP]));
            }
        }
        else
        {
            Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Give Item", "Item: %s (Quantity: %d)\n\nPlease enter the amount of this item you wish to give %s:", "Give", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));
            PlayerData[playerid][pGiveItem] = userid;
        }
    }
    return 1;
}

Dialog:GiveQuantity(playerid, response, listitem, inputtext[])
{
    if(response && PlayerData[playerid][pGiveItem] != INVALID_PLAYER_ID)
    {
        new
            userid = PlayerData[playerid][pGiveItem],
            itemid = PlayerData[playerid][pInventoryItem],
            string[32];

        strunpack(string, InventoryData[playerid][itemid][invItem]);

        if(isnull(inputtext))
            return Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Give Item", "Item: %s (Quantity: %d)\n\nPlease enter the amount of this item you wish to give %s:", "Give", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

        if(strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
            return  Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Give Item", "Error: You don't have that much.\n\nItem: %s (Quantity: %d)\n\nPlease enter the amount of this item you wish to give %s:", "Give", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

        for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
            if((Inventory_Count(userid, g_aInventoryItems[i][e_InventoryItem])+strval(inputtext)) > g_aInventoryItems[i][e_InventoryMax]) return SendErrorMessage(playerid, "You can give only %d %s.", (g_aInventoryItems[i][e_InventoryMax]-Inventory_Count(userid, g_aInventoryItems[i][e_InventoryItem])), g_aInventoryItems[i][e_InventoryItem]);
        }

        if(Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel], strval(inputtext)) != -1)
        {
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out a \"%s\" and gives it to %s.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
            SendServerMessage(userid, "%s has given you \"%s\" (added to inventory).", ReturnName(playerid, 0), string);

            Inventory_Remove(playerid, string, strval(inputtext));
            Log_Save(E_LOG_GIVE, sprintf("[%s] %s (%s) has given %d %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], strval(inputtext), string, ReturnName(userid, 0), AccountData[userid][pIP]));
        }
    }
    return 1;
}

Dialog:MyTickets(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!TicketData[playerid][listitem][ticketExists])
            return SendErrorMessage(playerid, "There is no ticket in the selected slot.");

        if(GetMoney(playerid) < TicketData[playerid][listitem][ticketFee])
            return SendErrorMessage(playerid, "You can't afford to pay this ticket.");

        GiveMoney(playerid, -TicketData[playerid][listitem][ticketFee], ECONOMY_ADD_SUPPLY, "paid ticket fine");

        SendServerMessage(playerid, "You have paid off a %s ticket for \"%s\".", FormatNumber(TicketData[playerid][listitem][ticketFee]), TicketData[playerid][listitem][ticketReason]);
        Ticket_Remove(playerid, listitem);
    }
    return 1;
}
Dialog:TrackConfirm(playerid, response, listitem, inputtext[])
{
    new callerid = selectedCaller[playerid];

    if(response && callerid != INVALID_CALLER_CP)
    {
        // Menetapkan waypoint berdasarkan posisi caller.
        SetPlayerWaypoint(playerid, callerData[callerid][callerName], callerData[callerid][callerPos][0], callerData[callerid][callerPos][1], callerData[callerid][callerPos][2]);

        // Jika belum pernah di-accept, maka cukup mengirim pesan operator sekali.
        if (!callerData[callerid][accepted])
        {
            SendClientMessage(callerid, COLOR_ORANGE, "[OPERATOR]:"WHITE" Seseorang sedang menuju ke lokasi anda.");
            // Jangan lupa mengubah accepted menjadi true.
            callerData[callerid][accepted] = true;
        }
        if(IsPlayerInAnyVehicle(playerid) && IsCallsignActive(GetPlayerVehicleID(playerid)))
        {
            new callsign[64];
            GetDynamic3DTextLabelText(ReturnCallsignLabelID(GetPlayerVehicleID(playerid)), callsign, sizeof(callsign));
            if(callerData[callerid][callerType] == 1 && GetFactionType(playerid) == FACTION_POLICE)
            {
                SendFactionMessageEx(FACTION_POLICE, COLOR_WHITE, ""YELLOW"[DISPATCHER] "WHITE"Unit "YELLOW"%s "WHITE"has responded to 911 Call ID:"YELLOW" %d", callsign, callerid);
            }
            else if(callerData[callerid][callerType] == 2 && GetFactionType(playerid) == FACTION_MEDIC)
            {
                SendFactionMessageEx(FACTION_MEDIC, COLOR_WHITE, ""YELLOW"[DISPATCHER] "WHITE"Unit "YELLOW"%s "WHITE"has responded to 911 Call ID: "YELLOW"%d", callsign, callerid);
            }
            else if(callerData[callerid][callerType] == 2 && GetFactionType(playerid) == FACTION_POLICE)
            {
                SendFactionMessageEx(FACTION_POLICE, COLOR_WHITE, ""YELLOW"[DISPATCHER] "WHITE"Unit "YELLOW"%s "WHITE"has responded to 911 Call ID:"YELLOW" %d", callsign, callerid);
            }
            else if(callerData[callerid][callerType] == 3)
            {
                SendFactionMessageEx(FACTION_POLICE, COLOR_WHITE, ""YELLOW"[DISPATCHER] "WHITE"Unit "YELLOW"%s "WHITE"has responded to 911 Call ID:"YELLOW" %d", callsign, callerid);
                SendFactionMessageEx(FACTION_MEDIC, COLOR_WHITE, ""YELLOW"[DISPATCHER] "WHITE"Unit "YELLOW"%s "WHITE"has responded to 911 Call ID: "YELLOW"%d", callsign, callerid);
            }
        }
    }
    else
    {
        callerCP_Delete(callerid);
    }

    // Reset caller yang dipilih oleh player.
    selectedCaller[playerid] = INVALID_CALLER_CP;
    return 1;
}
Dialog:TrackCaller(playerid, response, listitem, inputtext[])
{
    // Mendapatkan ID caller-nya (yaitu playerid-nya) dan menetapkan pilihan emergency call list. (/clist)
    selectedCaller[playerid] = strval(inputtext);

    if(response)
    {
        Dialog_Show(playerid, TrackConfirm, DIALOG_STYLE_MSGBOX, "911 Tracker", "Anda yakin ingin mengambil panggilan ini ?", "Accept", "Delete");
    }
    return 1;
}
Dialog:MainGPS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                static
                    string[MAX_GPS_LOCATIONS * 32];

                string = "Add Location\n";

                for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if(LocationData[playerid][i][locationExists]) {
                    format(string, sizeof(string), "%s%s\n", string, LocationData[playerid][i][locationName]);
                }
                Dialog_Show(playerid, CustomLocations, DIALOG_STYLE_LIST, "Custom Locations", string, "Select", "Back");
            }
            case 1:
            {
                new string[128], count;
                strcat(string,"House ID\tAddress\tLocation\n");
                for (new i = 0; i != MAX_HOUSES; i ++) if(HouseData[i][houseExists] && House_IsOwner(playerid, i, false))
                {
                    strcat(string, sprintf("%d\t%s\t%s\n", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2])));
                    ListedHouse[playerid][count++] = i;
                }
                if(!count) return SendErrorMessage(playerid, "You don't have house.");
                Dialog_Show(playerid, FindHouse, DIALOG_STYLE_TABLIST_HEADERS, "Find House", string, "Find", "Cancel");
            }
            case 2: Dialog_Show(playerid, FindBusiness, DIALOG_STYLE_LIST, "Find Business", "Retail Store\nWeapon Store\nClothing Store\nFast Food\nDealership\nGas Station\nFurniture Store\nElectronic Store\nBar & Lounge", "Submit", "Cancel");
            case 3: Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_LIST, "Find Entrance", "Nearest DMV\nNearest Bank\nNearest Warehouse\nNearest City Hall", "Select", "Back");
            case 4: Dialog_Show(playerid, FindJob, DIALOG_STYLE_LIST, "Find Job", "Trucker\nMechanic\nTaxi Driver\nCargo Unloader\nMiner\nFood Vendor\nPackage Sorter\nArms Dealer\nLumberjack\nHauler\nFarmer", "Select", "Cancel");
            case 5: Show_Lumber(playerid);
            case 6: Dealership_GPS(playerid);
            case 7:
            {
                new string[255];
                format(string, sizeof(string), "#\tName\n");
                for(new id = 0; id < MAX_WORKSHOP; id++) if(WorkshopData[id][wExists]) {
                    format(string, sizeof(string), "%s%d\t%s\n", string, id, WorkshopData[id][wName]);
                }
                Dialog_Show(playerid, ListWorkshop, DIALOG_STYLE_TABLIST_HEADERS, "GPS Workshop", string, "Select", "Close");
            }
            case 9: Dialog_Show(playerid, OtherLocation, DIALOG_STYLE_LIST, "Other Location", "Component Warehouse\nWheels & Hydraulics Shop\nFish Shop\nModshop\nMechanic Center\nSweeper Sidejob\nInsurance Center\nBus Sidejob\nDMV\nRodeo Bank\nAdvertisement Agency\nButcher\nPublic Parking Downtown\nPublic Parking Market\nMoney Transporter Sidejob\nBoxville Sidejob\nTrashmaster\nFarm Warehouse", "Select", "Close");
            case 10: Dialog_Show(playerid, FindCargo, DIALOG_STYLE_LIST, "Find Cargo (Trucker Only)", "Retail Cargo\nClothes Cargo\nFuel Cargo\nFood Cargo\nFurniture Cargo\nElectronics Cargo\nAmmunation Cargo\nBar Cargo", "Select", "Close");
        }
    }
    return 1;
}

Dialog:FindCargo(playerid, response, listitem, inputtext[])
{
    if(response) {
        switch(listitem) {
            case 0: SetPlayerWaypoint(playerid, inputtext, 2354.1101,-2288.1799,17.4219); // Retail Cargo
            case 1: SetPlayerWaypoint(playerid, inputtext, 2255.5000,-2387.4399,17.4219); // Clothes Cargo
            case 2: SetPlayerWaypoint(playerid, inputtext, 2719.2700,-2517.8201,17.3672); // Fuel Cargo
            case 3: SetPlayerWaypoint(playerid, inputtext, 2444.5801,-2548.1599,17.9107); // Food Cargo
            case 4: SetPlayerWaypoint(playerid, inputtext, 2721.2700,-2380.0400,17.3403); // Furniture Cargo
            case 5: SetPlayerWaypoint(playerid, inputtext, 2530.7200,-2434.4099,17.8828); // Electronics Cargo
            case 6: SetPlayerWaypoint(playerid, inputtext, 2734.8364,-2465.6392,13.6484); // Ammunation Cargo
            case 7: SetPlayerWaypoint(playerid, inputtext, 2699.7881,-2386.3250,13.6328);
        }
        SendServerMessage(playerid, "Waypoint %s marked on your map.", inputtext);
    }
    return 1;
}
Dialog:OtherLocation(playerid, response, listitem, inputtext[])
{
    if(response) {
        switch(listitem) {
            case 0: SetPlayerWaypoint(playerid, inputtext, 2195.5840,-1972.5920,13.6881);
            case 1: SetPlayerWaypoint(playerid, inputtext, 1953.6633,-1997.0308,13.5469);
            case 2: SetPlayerWaypoint(playerid, inputtext, 128.7940,-1813.1044,2.2147);
            case 3: SetPlayerWaypoint(playerid, inputtext, 2246.1946,-2016.3121,13.5469);
            case 4: SetPlayerWaypoint(playerid, inputtext, 2427.5293,-2089.8679,13.5469);
            case 5: SetPlayerWaypoint(playerid, inputtext, 1700.1438,-1543.4144,13.3828); 
            case 6: SetPlayerWaypoint(playerid, inputtext, 1111.6385,-1795.5822,16.5938);
            case 7: SetPlayerWaypoint(playerid, inputtext, 1789.9645,-1911.4059,13.5041);
            case 8: SetPlayerWaypoint(playerid, inputtext, 1081.1970,-1696.7852,13.5469);
            case 9: SetPlayerWaypoint(playerid, inputtext, 588.4249,-1239.4244,17.82159);
            case 10: SetPlayerWaypoint(playerid, inputtext, 643.9781,-1357.1801,13.5695);
            case 11: SetPlayerWaypoint(playerid, inputtext, -384.0056,-1438.9092,26.3203);
            case 12: SetPlayerWaypoint(playerid, inputtext, 1630.7808,-1139.1279,23.9063);
            case 13: SetPlayerWaypoint(playerid, inputtext, 1224.6685,-1376.7126,14.9861);
            case 14: SetPlayerWaypoint(playerid, inputtext, 891.3865,-1208.2157,16.9766);
            case 15: SetPlayerWaypoint(playerid, inputtext, 1363.1598,-1648.3190,13.3828);
            case 16: SetPlayerWaypoint(playerid, inputtext, 2286.7566,-1981.7808,13.5699);
            case 17: SetPlayerWaypoint(playerid, inputtext, -64.8065,-1120.8037,1.0781);
        }
        SendServerMessage(playerid, "Waypoint %s marked on your map.", inputtext);
    }
    return 1;
}

Dialog:ListWorkshop(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = strval(inputtext);
        SetPlayerWaypoint(playerid, "Go to workshop", WorkshopData[id][wPos][0], WorkshopData[id][wPos][1], WorkshopData[id][wPos][2]);
        SendServerMessage(playerid, "Waypoint set to workshop id \"%d\" (marked on radar).", id);
    }
    return 1;
}

Dialog:FindHouse(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new i = ListedHouse[playerid][listitem];
        SetPlayerWaypoint(playerid, HouseData[i][houseAddress], HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]);
        SendServerMessage(playerid, "Waypoint set to \"%s\" (marked on radar).", HouseData[i][houseAddress]);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:FindBusiness(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new header[24],
            string[1024],
            count = 0;

        format(header, sizeof(header), "Business type %s", inputtext);

        strcat(string, "Index\tBusiness Name\n");
        for(new i = 0; i != MAX_BUSINESSES; i++) 
        {
            if(BusinessData[i][bizExists] && BusinessData[i][bizType] == (listitem+1))
            {
                if(Business_EmployeeDuty(i))
                {
                    strcat(string, sprintf("%d\t%s "GREEN"(Active Business)\n", i, BusinessData[i][bizName]));
                    count++;
                }
                else
                {
                    strcat(string, sprintf("%d\t%s "RED"(Inactive Business)\n", i, BusinessData[i][bizName]));
                    count++;                    
                }
            }
        }
        if ( count ) Dialog_Show(playerid, TrackBusiness, DIALOG_STYLE_TABLIST_HEADERS, header, string, "Track", "Back");
        else SendErrorMessage(playerid, "Unable to find business with this type."), cmd_gps(playerid, "\1");
    }
    else cmd_gps(playerid, "\1");//Dialog_Show(playerid, FindBusiness, DIALOG_STYLE_LIST, "Find Business", "Retail Store\nWeapon Store\nClothing Store\nFast Food\nDealership\nGas Station\nFurniture Store\nElectronic Store", "Submit", "Cancel");
    return 1;
}

Dialog:TrackBusiness(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new bizid = strval(inputtext);
        SetPlayerWaypoint(playerid, BusinessData[bizid][bizName], BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
        SendServerMessage(playerid, "Waypoint set to closest %s (marked on radar).", inputtext);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:FindEntrance(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetClosestEntrance(playerid, listitem + 1);

        if(id != -1)
        {
            SetPlayerWaypoint(playerid, EntranceData[id][entranceName], EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
            SendServerMessage(playerid, "Waypoint set to %s (marked on radar).", inputtext);
        }
        else
        {
            SendErrorMessage(playerid, "The GPS was unable to locate any entrance.");
        }
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:FindJob(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetClosestJob(playerid, listitem + 1);

        if(id != -1)
        {
            static
                str[32];

            format(str, 32, "%s Job", inputtext);

            SetPlayerWaypoint(playerid, str, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
            SendServerMessage(playerid, "Waypoint set to %s (marked on radar).", str);
        }
        else
        {
            SendErrorMessage(playerid, "The GPS was unable to locate any job.");
        }
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:CustomLocations(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!listitem) {
            Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Location", "Please enter the desired name of the location below:", "Submit", "Cancel");
        }
        else
        {
            new id = Location_GetID(playerid, inputtext);

            if(id != -1) {
                PlayerData[playerid][pSelectedSlot] = id;

                Dialog_Show(playerid, LocationInfo, DIALOG_STYLE_LIST, inputtext, "Set Waypoint\nDelete Location", "Select", "Back");
            }
        }
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:AddLocation(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Location", "Please enter the desired name of the location below:", "Submit", "Cancel");

        if(strlen(inputtext) > 32)
            return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Location", "Error: The name can't exceed 32 characters.\n\nPlease enter the desired name of the location below:", "Submit", "Cancel");

        static
            Float:fX,
            Float:fY,
            Float:fZ,
            id = -1;

        if((id = House_Inside(playerid)) != -1) {
            fX = HouseData[id][housePos][0];
            fY = HouseData[id][housePos][1];
            fZ = HouseData[id][housePos][2];
        }
        else if((id = Business_Inside(playerid)) != -1) {
            fX = BusinessData[id][bizPos][0];
            fY = BusinessData[id][bizPos][1];
            fZ = BusinessData[id][bizPos][2];
        }
        else if((id = Entrance_Inside(playerid)) != -1) {
            fX = EntranceData[id][entrancePos][0];
            fY = EntranceData[id][entrancePos][1];
            fZ = EntranceData[id][entrancePos][2];
        }
        else GetPlayerPos(playerid, fX, fY, fZ);

        Location_Add(playerid, inputtext, fX, fY, fZ);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:LocationInfo(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pSelectedSlot];

        switch (listitem)
        {
            case 0:
            {
                SetPlayerWaypoint(playerid, LocationData[playerid][id][locationName], LocationData[playerid][id][locationPos][0], LocationData[playerid][id][locationPos][1], LocationData[playerid][id][locationPos][2]);
                SendServerMessage(playerid, "Waypoint set to \"%s\" (marked on radar).", LocationData[playerid][id][locationName]);
            }
            case 1:
            {
                SendServerMessage(playerid, "You have removed \"%s\" from your GPS.", LocationData[playerid][id][locationName]);

                Location_Delete(playerid, LocationData[playerid][id][locationName]);
                dialog_MainGPS(playerid, 1, 4, "\1");
            }
        }
    }
    else dialog_MainGPS(playerid, 1, 4, "\1");
    return 1;
}

Dialog:Warrants(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)))
        return 0;

    if(response)
    {
        static
            name[64],
            targetid = INVALID_PLAYER_ID;

        strmid(name, inputtext, 0, strfind(inputtext, "(") - 1);

        if((targetid = GetPlayerID(name, 0)) == INVALID_PLAYER_ID)
            return SendErrorMessage(playerid, "The player is no longer connected.");

        if(PlayerData[targetid][pWarrants] < 1)
            return SendErrorMessage(playerid, "The player no longer has any warrants.");

        PlayerData[playerid][pMDCPlayer] = targetid;

        format(name, sizeof(name), "MDC: %s", name);
        Dialog_Show(playerid, WarrantList, DIALOG_STYLE_LIST, name, "Track Player\nClear Warrants", "Select", "Back");
    }
    else cmd_mdc(playerid, "\1");
    return 1;
}

Dialog:WarrantList(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
        return 0;

    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                SendServerMessage(playerid, "The MDC Satellite System is now trying to track %s...", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
                PlayerData[playerid][pTrackTime] = 3;
            }
            case 1:
            {
                PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants] = 0;

                SendServerMessage(playerid, "You have cleared %s's warrants.", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
                SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has cleared %s's active warrants.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0));

                PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
            }
        }
    }
    else
    {
        PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
        dialog_MainMDC(playerid, 1, 0, "\1");
    }
    return 1;
}

Dialog:ChargeName(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)))
        return 0;

    if(response)
    {
        new targetid;

        if(sscanf(inputtext, "u", targetid))
            return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Please enter a valid user.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

        if(targetid == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Invalid user specified.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

        if(PlayerData[targetid][pWarrants] > 14)
            return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: The user already has 15 active warrants.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

        PlayerData[playerid][pMDCPlayer] = targetid;
        Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Place Charge", "Please enter the description of the crime committed by %s:", "Submit", "Back", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
    }
    else cmd_mdc(playerid, "\1");
    return 1;
}

Dialog:PlaceCharge(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
        return 0;

    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Place Charge", "Please enter the description of the crime committed by %s:", "Submit", "Back", ReturnName(PlayerData[playerid][pMDCPlayer], 0));

        PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants]++;

        AddWarrant(PlayerData[playerid][pMDCPlayer], playerid, inputtext);
        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has placed a charge on %s for \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);

        cmd_mdc(playerid, "\1");
    }
    else
    {
        PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
        cmd_mdc(playerid, "\1");
    }
    return 1;
}

Dialog:MainMDC(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)))
        return 0;

    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                static
                    string[512];

                string[0] = 0;

                foreach (new i : Player) if(PlayerData[i][pWarrants] > 4) {
                    format(string, sizeof(string), "%s%s (%d warrants)\n", string, ReturnName(i, 0), PlayerData[i][pWarrants]);
                }
                if(!strlen(string))
                    return SendErrorMessage(playerid, "There are no active warrants.");

                Dialog_Show(playerid, Warrants, DIALOG_STYLE_LIST, "Active Warrants", string, "Select", "Back");
            }
            case 1: Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Please enter the ID of the player:", "Submit", "Back");
            case 2: Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Please enter the ID of the player:", "Submit", "Back");
            // case 3: Dialog_Show(playerid, PersonalIdentification, DIALOG_STYLE_INPUT, "Personal Identification", "Please enter the ID of the player:", "Submit", "Back");
            case 3: Dialog_Show(playerid, LookupList, DIALOG_STYLE_LIST, "MDC Lookup", "Lookup by Name\nLookup By Plate", "Choose", "Back"); //MDCmark
        }
    }
    return 1;
}
Dialog:LookupList(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                Dialog_Show(playerid, OfflineIdentification, DIALOG_STYLE_INPUT, "Personal Identification", "Please enter the name you want to lookup:", "Submit", "Back");
            }
            case 1:
            {
                Dialog_Show(playerid, PlateIdentification, DIALOG_STYLE_INPUT, "Personal Identification", "Please enter the plate numnber you want to lookup:", "Submit", "Back");
            }
            case 2:
            {
                Dialog_Show(playerid, SerialIdentification, DIALOG_STYLE_INPUT, "Serial Number Lookup", "Please enter weapon serial number :", "Lookup", "Back");
            }
        }
    }
    return 1;
}
Dialog:PlateIdentification(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` LEFT JOIN `server_vehicles` ON characters.ID=server_vehicles.extraid WHERE `plate` = '%s';", SQL_ReturnEscaped(inputtext)), "OfflinePI", "ds", playerid, inputtext);
    }
    return 1;
}

Dialog:SerialIdentification(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new 
            serial_id[10], 
            length = strlen(inputtext)
        ;
        strmid(serial_id, inputtext, 5, length);
        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `ID`='%d';", strval(serial_id)), "OfflinePI", "ds", playerid, serial_id);
    }
    return 1;
}

Dialog:OfflineIdentification(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character`='%s';", SQL_ReturnEscaped(inputtext)), "OfflinePI", "ds", playerid, inputtext);
    }
    return 1;
}

Dialog:PersonalIdentification(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)))
        return 0;

    if(response)
    {
        new
            id,
            str[1024],
            query[128],
            Cache:charges;

        if(sscanf(inputtext, "u", id))
            return Dialog_Show(playerid, PersonalIdentification, DIALOG_STYLE_INPUT, "Personal Identification", "(error) Invalid player id!\n\nPlease enter the ID of the player:", "Submit", "Back");

        if(id == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, PersonalIdentification, DIALOG_STYLE_INPUT, "Personal Identification", "(error) Invalid player id!\n\nPlease enter the ID of the player:", "Submit", "Back");

        strcat(str, sprintf("{AAC4E5}I. Personal information\n"WHITE"Personal ID: "YELLOW"SA%09d\n"WHITE"Name: "YELLOW"%s\n", PlayerData[id][pID], ReturnName(id)));
        strcat(str, sprintf(""WHITE"Phone Number: "YELLOW"%d\n"WHITE"Job: "YELLOW"%s\n", PlayerData[id][pPhone], Job_GetName(PlayerData[playerid][pJob])));
        if(PlayerData[id][pFaction] != -1) {
            strcat(str, sprintf(""WHITE"Faction/Family: "YELLOW"%s\n"WHITE"Rank: "YELLOW"%s\n", Faction_GetName(id), Faction_GetRank(id)));
        }
        strcat(str, "\n{AAC4E5}II. Licenses"WHITE"\n");
        //---------------------------
        if(PlayerData[id][pDrivingLicense])  {
            if(PlayerData[id][pDrivingLicenseExpired] != 0) strcat(str, sprintf("Driving: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:PlayerData[id][pDrivingLicenseExpired])));
            else strcat(str, "Driving: ["COL_RED"Expired"WHITE"]\n");
        }
        else strcat(str, "Driving: ["COL_RED"Not Passed"WHITE"]\n");

        if(PlayerData[id][pTruckLicense])  {
            if(PlayerData[id][pTruckLicenseExpired] != 0) strcat(str, sprintf("Trucker: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:PlayerData[id][pTruckLicenseExpired])));
            else strcat(str, "Trucker: ["COL_RED"Expired"WHITE"]\n");
        }
        else strcat(str, "Trucker: ["COL_RED"Not Passed"WHITE"]\n");

        if(PlayerData[id][pFirearmLicense])  {
            if(PlayerData[id][pFirearmLicenseExpired] != 0) strcat(str, sprintf("Firearm: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:PlayerData[id][pFirearmLicenseExpired])));
            else strcat(str, "Firearm: ["COL_RED"Expired"WHITE"]\n");
        }
        else strcat(str, "Firearm: ["COL_RED"Not Passed"WHITE"]\n");

        if(PlayerData[id][pBusinessLicense])  {
            if(PlayerData[id][pBusinessLicenseExpired] != 0) strcat(str, sprintf("Business: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:PlayerData[id][pBusinessLicenseExpired])));
            else strcat(str, "Business: ["COL_RED"Expired"WHITE"]\n");
        }
        else strcat(str, "Business: ["COL_RED"Not Passed"WHITE"]\n");

        if(PlayerData[id][pWorkshopLicense])  {
            if(PlayerData[id][pWorkshopLicenseExpired] != 0) strcat(str, sprintf("Workshop: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:PlayerData[id][pWorkshopLicenseExpired])));
            else strcat(str, "Workshop: ["COL_RED"Expired"WHITE"]\n");
        }
        else strcat(str, "Workshop: ["COL_RED"Not Passed"WHITE"]\n");

        if(PlayerData[id][pLumberLicense])  {
            if(PlayerData[id][pLumberLicenseExpired] != 0) strcat(str, sprintf("Lumber: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:PlayerData[id][pLumberLicenseExpired])));
            else strcat(str, "Lumber: ["COL_RED"Expired"WHITE"]\n");
        }
        else strcat(str, "Lumber: ["COL_RED"Not Passed"WHITE"]\n");

        if(PlayerData[id][pBLSLicense])  {
            if(PlayerData[id][pBLSLicenseExpired] != 0) strcat(str, sprintf("BLS Certificate: ["COL_GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Timestamp:PlayerData[id][pBLSLicenseExpired])));
            else strcat(str, "BLS Certificate: ["COL_RED"Expired"WHITE"]\n");
        }
        else strcat(str, "BLS Certificate: ["COL_RED"Not Passed"WHITE"]\n");

        strcat(str, "\n{AAC4E5}III. Active Charges\n"WHITE"");
        mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `warrants` WHERE `Arrest` = '0' AND `Suspect` = '%s' ORDER BY `ID` DESC", ReturnName(id));
        charges = mysql_query(g_iHandle, query);

        if(!cache_num_rows())
            strcat(str, "None\n");

        for(new i=0; i<cache_num_rows(); i++) {
            new reason[128],date[64], suspect[24], username[24];
            cache_get_field_content(i, "Suspect", suspect);
            cache_get_field_content(i, "Description", reason);
            cache_get_field_content(i, "Date", date);
            cache_get_field_content(i, "Username", username);
            strcat(str, sprintf("%d. {BDF38B}%s\n"WHITE"Issuer: "YELLOW"%s"WHITE" - (%s)\n", i+1, reason, username, date));
        }
        cache_delete(charges);

        strcat(str, "\n{AAC4E5}IV. Owned Vehicle"WHITE"\n");

        new count = 0, platenumber[20];
        foreach(new vehicle : OwnedVehicles<id>)
        {
            format(platenumber, sizeof(platenumber), "%s", GetVehicleNumberPlate(VehicleData[vehicle][vehVehicleID]));
            if(!strcmp(platenumber, "None", true))
            {
                continue;
            }
            else
            {
                strcat(str, sprintf("%d. "CYAN"%s - "YELLOW"P: %s"WHITE"\n", (count + 1), GetVehicleNameByVehicle(VehicleData[vehicle][vehVehicleID]), GetVehicleNumberPlate(VehicleData[vehicle][vehVehicleID])));
            }
            count++;
        }

        if(!count)
            strcat(str, "None");

        strcat(str, "\n{AAC4E5}V. Unpaid Ticket"WHITE"\n");

        count = 0;
        for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) if(TicketData[id][i][ticketExists]) {
            strcat(str, sprintf("%d. {BDF38B}%s "WHITE"(%s - %s)\n", i+1, TicketData[id][i][ticketReason], FormatNumber(TicketData[id][i][ticketFee]), TicketData[id][i][ticketDate]));
            count++;
        }
        if(!count)
            strcat(str, "None");

        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Summary", str, "Close", "");
    }
    return 1;
}

Dialog:ViewCharges(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)))
        return 0;

    if(response)
    {
        if(isnull(inputtext) || strlen(inputtext) > 24)
            return Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Please enter the name or ID of the player:", "Submit", "Back");

        if(IsNumeric(inputtext) && IsPlayerConnected(strval(inputtext))) {
            ViewCharges(playerid, ReturnName(strval(inputtext)));
        }
        else if(!IsNumeric(inputtext)) {
            ViewCharges(playerid, inputtext);
        }
        else {
            Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Error: Invalid user specified.\n\nPlease enter the name or ID of the player:", "Submit", "Back");
        }
    }
    else cmd_mdc(playerid, "\1");
    return 1;
}

Dialog:Locker(playerid, response, listitem, inputtext[])
{
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1 || !IsNearFactionLocker(playerid))
        return 0;

    if(response)
    {
        new skins[8], string[1024];

        string[0] = 0;

        if(FactionData[factionid][factionType] != FACTION_GANG)
        {
            switch (listitem)
            {
                case 0:
                {
                    if(!PlayerData[playerid][pOnDuty])
                    {
                        if(!PlayerData[playerid][pSkinFaction])
                            return SendErrorMessage(playerid, "Faction skin isn't set. (/flocker > Locker Skins)");

                        if(ReturnWeaponCount(playerid))
                            return SendErrorMessage(playerid, "Kamu masih memegang senjata milikmu (/weapons), letakkan dirumah atau kendaraan.");

                        PlayerData[playerid][pOnDuty] = true;

                        SetFactionColor(playerid);
                        SetHealth(playerid, 100);
                        SetPlayerSkinEx(playerid, PlayerData[playerid][pSkinFaction], 1);

                        if (PlayerData[playerid][pFactionSalaryResettedAt] == 0)
                        {
                            PlayerData[playerid][pFactionSalaryResettedAt] = gettime() + (3600 * 24 * 7); // 1 minggu
                        }

                        if (Player_IsFactionSalaryExceeded(playerid))
                        {
                            SendCustomMessage(playerid, "DUTY", "You are now "COL_GREEN"on "WHITE"duty, but you're not receive any salary right now.");
                        }
                        else
                        {
                            SendCustomMessage(playerid, "DUTY", "You are now "COL_GREEN"on "WHITE"duty.");
                        }
                    }
                    else
                    {
                        if(PlayerData[playerid][pTazer]) {
                            cmd_tazer(playerid, "\1");
                        }

                        ResetFactionWeapon(playerid);
                        ResetWeapons(playerid);

                        PlayerData[playerid][pOnDuty] = false;
                        PlayerData[playerid][pUndercoverDuty] = false;
                        SetPlayerColor(playerid, DEFAULT_COLOR);

                        SetArmour(playerid, 0.0);
                        SetPlayerSkinEx(playerid, PlayerData[playerid][pSkin]);
                        SendCustomMessage(playerid, "DUTY", "You are now "COL_RED"off "WHITE"duty.");
                    }
                }
                case 1:
                {
                    if(!PlayerData[playerid][pOnDuty])
                        return SendErrorMessage(playerid, "You can't take Armored Vest if not in duty");

                    SetArmour(playerid, 100.0);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s reaches into the locker and takes out a vest.", ReturnName(playerid, 0));
                }
                case 2:
                {
                    for (new i = 0; i < sizeof(skins); i ++)
                        skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

                    ShowModelSelectionMenu(playerid, "Choose Skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
                }
                case 3:
                {
                    if(!PlayerData[playerid][pOnDuty])
                        return SendErrorMessage(playerid, "You can't use this if you're not duty");

                    if(PlayerData[playerid][pScore] < 2)
                        return SendErrorMessage(playerid, "You're not allowed to accese this locker if you're not level 2.");

                    for (new i = 0; i < 10; i ++)
                    {
                        if(FactionData[factionid][factionWeapons][i]) format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));
                        else format(string, sizeof(string), "%sEmpty Slot\n", string);
                    }
                    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Select", "Cancel");
                }
                case 4: Dialog_Show(playerid, FactionBank, DIALOG_STYLE_LIST, "Faction Bank", "Check balance\nDeposit money (%s)\nWithdraw money (%s)", "Select", "Close", FormatNumber(GetMoney(playerid)), FormatNumber(FactionData[PlayerData[playerid][pFaction]][factionMoney]));
                case 5: {
                    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
                        return SendErrorMessage(playerid, "You can't use this menu.");

                    Vehicle_FactionRespawn(GetPlayerFactionID(playerid));
                    SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s respawned all unused vehicle for faction id %d", ReturnName(playerid,0), PlayerData[playerid][pFaction]);
                    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "FACTIONCARS: "YELLOW"%s "WHITE"now is respawned all unused vehicle on this faction.", ReturnName(playerid, 0));
                }
                case 6:
                {
                    if(!PlayerData[playerid][pOnDuty])
                        return SendErrorMessage(playerid, "You can't use this if you're not duty");

                    Dialog_Show(playerid, undercoverSkin, DIALOG_STYLE_INPUT, "Undercover Skin","Input Skin ID Number :", "Take", "Cancel");
                }
                case 7:
                {
                    if(!PlayerData[playerid][pOnDuty])
                        return SendErrorMessage(playerid, "You can't use this if you're not duty");

                    Dialog_Show(playerid, customSkin, DIALOG_STYLE_INPUT, "Custom Skin","ID 20022 - 20056, 20070 - 20074\n\nInput Skin ID Number :", "Take", "Cancel");
                }
            }
        }
        else
        {
            if(FactionData[factionid][factionType] == FACTION_GANG)
            {
                switch (listitem)
                {
                    case 0:
                    {
                        if(PlayerData[playerid][pScore] < 2) return SendErrorMessage(playerid, "You're not allowed to accese this locker if you're not level 2.");
                        if(PlayerData[playerid][pFactionRank] < 2) return SendErrorMessage(playerid, "Level 1 family can'taccese this weapon locker.");

                        for (new i = 0; i < 10; i ++)
                        {
                            if(FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) != FACTION_GANG)
                                format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

                            else if(FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) == FACTION_GANG)
                                format(string, sizeof(string), "%s#%d: %s ("YELLOW"ammo: %d"WHITE") ("GREEN"durability: %d"WHITE")\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]), FactionData[factionid][factionAmmo][i], FactionData[factionid][factionDurability][i]);

                            else format(string, sizeof(string), "%sEmpty Slot\n", string);
                        }
                        Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Select", "Cancel");
                    }
                    case 1: Dialog_Show(playerid, FactionBank, DIALOG_STYLE_LIST, "Faction Bank", "Check balance\nDeposit money (%s)\nWithdraw money (%s)", "Select", "Close", FormatNumber(GetMoney(playerid)), FormatNumber(FactionData[PlayerData[playerid][pFaction]][factionMoney]));
                    case 2: {
                        if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
                            return SendErrorMessage(playerid, "You can't use this menu.");

                        Vehicle_FactionRespawn(GetPlayerFactionID(playerid));
                        SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s respawned all unused vehicle for faction id %d", ReturnName(playerid,0), PlayerData[playerid][pFaction]);
                        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "FACTIONCARS: "WHITE""COL_RED"%s "WHITE"now is respawned all unused vehicle on this faction.", ReturnName(playerid, 0));
                    }
                }
            }
            else if(FactionData[factionid][factionType] == FACTION_LEGAL)
            {
                switch (listitem)
                {
                    case 0: Dialog_Show(playerid, FactionBank, DIALOG_STYLE_LIST, "Faction Bank", "Check balance\nDeposit money (%s)\nWithdraw money (%s)", "Select", "Close", FormatNumber(GetMoney(playerid)), FormatNumber(FactionData[PlayerData[playerid][pFaction]][factionMoney]));
                    case 1: {
                        if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
                            return SendErrorMessage(playerid, "You can't use this menu.");

                        Vehicle_FactionRespawn(GetPlayerFactionID(playerid));
                        SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s respawned all unused vehicle for faction id %d", ReturnName(playerid,0), PlayerData[playerid][pFaction]);
                        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "FACTIONCARS: "WHITE""COL_RED"%s "WHITE"now is respawned all unused vehicle on this faction.", ReturnName(playerid, 0));
                    }
                }
            }
        }
    }
    return 1;
}

Dialog:FactionBank(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pFaction];
        switch(listitem)
        {
            case 0:
            {
                Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Faction Bank", ""WHITE"Faction bank status\n\nFaction bank of: %s\n"WHITE"Current money on bank faction: "COL_GREEN"%s\n"WHITE"Last deposit: "YELLOW"%s "WHITE"for "COL_GREEN"%s\n"WHITE"Last withdrawn: "YELLOW"%s "WHITE"for "COL_RED"-%s", "Close", "", FactionData[id][factionName], FormatNumber(FactionData[id][factionMoney]), FactionData[id][factionDeposit], FormatNumber(FactionData[id][factionDepositMoney]), FactionData[id][factionWithdraw], FormatNumber(FactionData[id][factionWithdrawMoney]));
            }
            case 1:
            {
                Dialog_Show(playerid, DepositFaction, DIALOG_STYLE_INPUT, "Deposit For Faction Bank", "Bank of faction: %s\nYour money: %s\n\nHow much money you have to added to bank account?.", "Deposit", "Close", FactionData[id][factionName], FormatNumber(GetMoney(playerid)));
            }
            case 2:
            {
                if(PlayerData[playerid][pFactionRank] < FactionData[id][factionRanks] - 1)
                    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[id][factionRanks] - 1);

                Dialog_Show(playerid, WithdrawFaction, DIALOG_STYLE_INPUT, "Withdraw Faction Bank", "Bank of faction: %s\nCurrent Balance: %s\n\nHow much money you want to withdraw?.", "Withdraw", "Close", FactionData[id][factionName], FormatNumber(FactionData[id][factionMoney]));
            }
        }
    }
    return 1;
}

Dialog:WithdrawFaction(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pFaction];

        if(strval(inputtext) < 1)
            return SendErrorMessage(playerid, "You can't withdraw money under $0.");

        if(strval(inputtext) > FactionData[id][factionMoney])
            return SendErrorMessage(playerid, "Uang di bank faction tidak mencukupi.");

        FactionData[id][factionMoney] -= strval(inputtext);
        FactionData[id][factionWithdrawMoney] = strval(inputtext);
        GiveMoney(playerid, strval(inputtext));
        format(FactionData[id][factionWithdraw], MAX_PLAYER_NAME, NormalName(playerid));
        SendCustomMessage(playerid, "BANK FACTION", "Anda telah mengambil "YELLOW"%s "WHITE"dari bank faction. bank faction sekarang tersisa "COL_GREEN"%s", FormatNumber(strval(inputtext)), FormatNumber(FactionData[id][factionMoney]));
        Log_Save(E_LOG_WITHDRAW, sprintf("[%s] %s withdrawn %s for %s.", ReturnDate(), ReturnName2(playerid, 0), FormatNumber(strval(inputtext)), FactionData[id][factionName]));
        Faction_Save(id);
    }
    return 1;
}

Dialog:DepositFaction(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
            id = PlayerData[playerid][pFaction]
        ;
        if(strval(inputtext) < 1)
            return SendErrorMessage(playerid, "You can't deposit money under $0.");

        if(GetMoney(playerid) < strval(inputtext))
            return SendErrorMessage(playerid, "You don't have enough money.");

        FactionData[id][factionMoney] += strval(inputtext);
        FactionData[id][factionDepositMoney] = strval(inputtext);

        GiveMoney(playerid, -strval(inputtext));
        format(FactionData[id][factionDeposit], MAX_PLAYER_NAME, NormalName(playerid));

        SendCustomMessage(playerid, "BANK FACTION", "Anda telah menyimpan "GREEN"%s"WHITE" dalam bank faction "YELLOW"(total: %d).", FormatNumber(strval(inputtext)), FormatNumber(FactionData[id][factionMoney]));

        Faction_Save(id);
    }
    return 1;
}

Dialog:LockerWeapons(playerid, response, listitem, inputtext[])
{
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1 || !IsNearFactionLocker(playerid))
        return 0;

    if(response)
    {
        new
            weaponid = FactionData[factionid][factionWeapons][listitem],
            ammo = FactionData[factionid][factionAmmo][listitem],
            durability = FactionData[factionid][factionDurability][listitem],
            rank = FactionData[factionid][factionGunRank][listitem];

        new serial[128];
        valstr(serial, FactionData[factionid][factionSerial][listitem]);

        if(weaponid)
        {
            if(GetFactionType(playerid) == FACTION_GANG)
            {
                if(PlayerHasWeaponInSlot(playerid, weaponid))
                    return SendErrorMessage(playerid, "Kamu memiliki senjata dislot yang sama, simpan terlebih dahulu.");

                if(PlayerData[playerid][pFactionRank] < rank)
                    return SendErrorMessage(playerid, "Rank kamu tidak cukup untuk mengambil senjata dari locker.");

                GivePlayerWeaponEx(playerid, weaponid, ammo, durability, serial);

                FactionData[factionid][factionWeapons][listitem] = 0;
                FactionData[factionid][factionAmmo][listitem] = 0;
                FactionData[factionid][factionDurability][listitem] = 0;
                FactionData[factionid][factionSerial][listitem] = 0;

                Faction_Save(factionid);
            }
            else
            {
                if(PlayerData[playerid][pFactionRank] < rank)
                    return SendErrorMessage(playerid, "Rank belum tercapai untuk menggunakan senjata ini.");

                // if(ReturnWeaponCount(playerid))
                //     return SendErrorMessage(playerid, "Kamu masih memegang senjata milikmu (/weapons), letakkan dirumah atau kendaraan.");

                GiveFactionWeapon(playerid, weaponid, ammo); //Temporary
            }
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s reaches inside the locker and equips a %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
        }
        else
        {
            if(GetFactionType(playerid) == FACTION_GANG)
            {
                if((weaponid = GetWeapon(playerid)) == 0)
                    return SendErrorMessage(playerid, "You are not holding any weapon.");

                FactionData[factionid][factionWeapons][listitem]    = weaponid;
                FactionData[factionid][factionAmmo][listitem]       = ReturnWeaponAmmo(playerid, weaponid);
                FactionData[factionid][factionDurability][listitem] = ReturnWeaponDurability(playerid, weaponid);

                new slot = g_aWeaponSlots[weaponid];
                FactionData[factionid][factionSerial][listitem] = strval(PlayerGuns[playerid][slot][weapon_serial]);

                Faction_Save(factionid);

                ResetWeaponID(playerid, weaponid);
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out a %s and stores it in the locker.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
            }
            else SendErrorMessage(playerid, "The selected weapon slot is empty.");
        }
    }
    else cmd_flocker(playerid, "\1");
    return 1;
}

Dialog:FactionLocker(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                static
                    Float:x,
                    Float:y,
                    Float:z;

                GetPlayerPos(playerid, x, y, z);

                FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][0] = x;
                FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][1] = y;
                FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][2] = z;

                FactionData[PlayerData[playerid][pFactionEdit]][factionLockerInt] = GetPlayerInterior(playerid);
                FactionData[PlayerData[playerid][pFactionEdit]][factionLockerWorld] = GetPlayerVirtualWorld(playerid);

                Faction_Refresh(PlayerData[playerid][pFactionEdit]);
                Faction_Save(PlayerData[playerid][pFactionEdit]);
                SendServerMessage(playerid, "You have adjusted the locker position of faction ID: %d.", PlayerData[playerid][pFactionEdit]);
            }
            case 1:
            {
                static
                    string[512];

                string[0] = 0;

                for (new i = 0; i < 10; i ++)
                {
                    if(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]) format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]));
                    else format(string, sizeof(string), "%sEmpty Slot\n", string);
                }
                Dialog_Show(playerid, FactionWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Select", "Cancel");
            }
        }
    }
    return 1;
}

Dialog:FactionWeapons(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        PlayerData[playerid][pSelectedSlot] = listitem;
        Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nSet Rank (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]]);
    }
    return 1;
}

Dialog:FactionWeapon(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        switch (listitem)
        {
            case 0: Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Set Weapon", "Current Weapon: %s (%d)\n\nPlease enter the new weapon ID for slot %d:", "Submit", "Cancel", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);
            case 1: Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Set Ammunition", "Current Ammo: %d\n\nPlease enter the new ammunition for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);
            case 2: Dialog_Show(playerid, FactionWeaponRank, DIALOG_STYLE_INPUT, "Set Rank", "Current Rank: %d\n\nPlease enter the new rank for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);
            case 3:
            {
                FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = 0;
                FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = 0;

                Faction_Save(PlayerData[playerid][pFactionEdit]);

                dialog_FactionLocker(playerid, 1, 1, "\1");
                SendServerMessage(playerid, "You have removed the weapon in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
            }
        }
    }
    else {
        dialog_FactionLocker(playerid, 1, 1, "\1");
    }
    return 1;
}

Dialog:FactionWeaponID(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        new weaponid = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Set Weapon", "Current Weapon: %s (%d)\n\nPlease enter the new weapon ID for slot %d:", "Submit", "Cancel", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        if(weaponid < 0 || weaponid > 46)
            return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Set Weapon", "Error: The weapon ID can't be below 0 or above 46.\n\nCurrent Weapon: %s (%d)\n\nPlease enter the new weapon ID for slot %d:", "Submit", "Cancel", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = weaponid;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

        Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nSet Rank (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]]);

        if(weaponid) {
            SendServerMessage(playerid, "You have set the weapon in slot %d to %s.", PlayerData[playerid][pSelectedSlot] + 1, ReturnWeaponName(weaponid));
        }
        else {
            SendServerMessage(playerid, "You have removed the weapon in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
        }
    }
    return 1;
}

Dialog:FactionWeaponRank(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        new rank = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, FactionWeaponRank, DIALOG_STYLE_INPUT, "Set Rank", "Current Rank: %d\n\nPlease enter the new rank for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        if(rank < 1 || rank > FactionData[PlayerData[playerid][pFactionEdit]][factionRanks])
            return Dialog_Show(playerid, FactionWeaponRank, DIALOG_STYLE_INPUT, "Set Rank", "Error: The rank can't be below 1 or above %d.\n\nCurrent Rank: %d\n\nPlease enter the new rank for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionRanks], FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]] = rank;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

        Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nSet Rank (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]]);
        SendServerMessage(playerid, "You have set the rank in slot %d to %d.", PlayerData[playerid][pSelectedSlot] + 1, rank);
    }
    return 1;
}

Dialog:FactionWeaponAmmo(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        new ammo = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Set Ammunition", "Current Ammo: %d\n\nPlease enter the new ammunition for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        if(ammo < 1 || ammo > 15000)
            return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Set Ammunition", "Error: The ammo can't be below 1 or above 15,000.\n\nCurrent Ammo: %d\n\nPlease enter the new ammunition for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = ammo;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

        Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nSet Rank (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]]);
        SendServerMessage(playerid, "You have set the ammunition in slot %d to %d.", PlayerData[playerid][pSelectedSlot] + 1, ammo);
    }
    return 1;
}

Dialog:FactionSkin(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        static
            skins[311];

        switch (listitem)
        {
            case 0:
                Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Please enter the model ID of the skin below (0-311):", "Add", "Cancel");

            case 1:
            {
                for (new i = 0; i < sizeof(skins); i ++)
                    skins[i] = i + 1;

                ShowModelSelectionMenu(playerid, "Add Skin", MODEL_SELECTION_ADD_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
            }
            case 2:
            {
                FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = 0;

                Faction_Save(PlayerData[playerid][pFactionEdit]);
                SendServerMessage(playerid, "You have removed the skin ID in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
            }
        }
    }
    return 1;
}
IsNormalSkin(skinid)
{
    if(skinid >= 1 && skinid <= 311)
    {
        return 1;
    }
    return 0;
}
IsCustomSkin(skinid)
{
    if(skinid >= 20001 && skinid <= 20074)
    {
        return 1;
    }
    return 0;
}
Dialog:FactionModel(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        new skin = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Please enter the model ID of the skin below (0-311):", "Add", "Cancel");

        // if(skin < 0 || skin > 311)
        //     return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Error: The skin ID can't be below 0 or above 311.\n\nPlease enter the model ID of the skin below (0-309):", "Add", "Cancel");

        if(IsNormalSkin(skin) || IsCustomSkin(skin))
        {
            FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = skin;
            Faction_Save(PlayerData[playerid][pFactionEdit]);

            if(skin) {
                SendServerMessage(playerid, "You have set the skin ID in slot %d to %d.", PlayerData[playerid][pSelectedSlot] + 1, skin);
            }
            else {
                SendServerMessage(playerid, "You have removed the skin ID in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
            }
        }
        else Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Error: The skin ID can't be below 0 or above 311 || 20001 or above 20056.\n\nPlease enter the model ID of the skin below (0-309):", "Add", "Cancel");
    }
    return 1;
}

Dialog:Crates(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(PlayerData[playerid][pCarryCrate] != -1)
            return SendErrorMessage(playerid, "You are already carrying a crate.");

        new id = strfind(inputtext, "#");

        if(id != -1) {
            id = strval(inputtext[id + 1]);

            CrateData[id][crateVehicle] = INVALID_VEHICLE_ID;
            PlayerData[playerid][pCarryCrate] = id;

            SetPlayerAttachedObject(playerid, JOB_SLOT, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes a crate out of the vehicle.", ReturnName(playerid, 0));
            SendServerMessage(playerid, "You have taken a %s crate out of the vehicle.", Crate_GetType(CrateData[id][crateType]));
        }
    }
    return 1;
}

Dialog:EnterNumber(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static
            name[32],
            string[128];

        strunpack(name, PlayerData[playerid][pEditingItem]);

        if(isnull(inputtext) || !IsNumeric(inputtext))
            return Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Contact Number", "Contact Name: %s\n\nPlease enter the phone number for this contact:", "Submit", "Back", name);

        for (new i = 0; i != MAX_CONTACTS; i ++)
        {
            if(!ContactData[playerid][i][contactExists])
            {
                ContactData[playerid][i][contactExists] = true;
                ContactData[playerid][i][contactNumber] = strval(inputtext);

                format(ContactData[playerid][i][contactName], 32, name);

                format(string, sizeof(string), "INSERT INTO `contacts` (`ID`, `contactName`, `contactNumber`) VALUES('%d', '%s', '%d')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), ContactData[playerid][i][contactNumber]);
                mysql_tquery(g_iHandle, string, "OnContactAdd", "dd", playerid, i);

                SendServerMessage(playerid, "You have added \"%s\" to your contacts.", name);
                return cmd_phone(playerid, "");
            }
        }
        SendErrorMessage(playerid, "There is no room left for anymore contacts.");
    }
    else {
        ShowContacts(playerid);
    }
    return 1;
}

Dialog:NewContact(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "New Contact", "Error: Please enter a contact name.\n\nPlease enter the name of the contact below:", "Submit", "Back");

        if(strlen(inputtext) > 32)
            return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "New Contact", "Error: The contact name can't exceed 32 characters.\n\nPlease enter the name of the contact below:", "Submit", "Back");

        strpack(PlayerData[playerid][pEditingItem], inputtext, 32);

        Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Contact Number", "Contact Name: %s\n\nPlease enter the phone number for this contact:", "Submit", "Back", inputtext);
    }
    else {
        ShowContacts(playerid);
    }
    return 1;
}

Dialog:ContactInfo(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
            id = PlayerData[playerid][pContact],
            string[72];

        switch (listitem)
        {
            case 0:
            {
                format(string, 16, "%d", ContactData[playerid][id][contactNumber]);
                cmd_call(playerid, string);
            }
            case 1:
            {
                format(string, sizeof(string), "DELETE FROM `contacts` WHERE `ID` = '%d' AND `contactID` = '%d'", PlayerData[playerid][pID], ContactData[playerid][id][contactID]);
                mysql_tquery(g_iHandle, string);

                SendServerMessage(playerid, "You have deleted \"%s\" from your contacts.", ContactData[playerid][id][contactName]);

                ContactData[playerid][id][contactExists] = false;
                ContactData[playerid][id][contactNumber] = 0;
                ContactData[playerid][id][contactID] = 0;

                ShowContacts(playerid);
            }
        }
    }
    else {
        ShowContacts(playerid);
    }
    return 1;
}

Dialog:Contacts(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!listitem) {
            Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "New Contact", "Please enter the name of the contact below:", "Submit", "Back");
        }
        else {
            PlayerData[playerid][pContact] = ListedContacts[playerid][listitem - 1];

            Dialog_Show(playerid, ContactInfo, DIALOG_STYLE_LIST, ContactData[playerid][PlayerData[playerid][pContact]][contactName], "Call Contact\nDelete Contact", "Select", "Back");
        }
    }
    // else {
    //     cmd_phone(playerid, "\1");
    // }
    for (new i = 0; i != MAX_CONTACTS; i ++) {
        ListedContacts[playerid][i] = -1;
    }
    return 1;
}

Dialog:DialNumber(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
            string[16];

        if(isnull(inputtext) || !IsNumeric(inputtext))
            return Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Dial Number", "Please enter the number that you wish to dial below:", "Dial", "Back");

        format(string, 16, "%d", strval(inputtext));
        cmd_call(playerid, string);
    }
    // else {
    //     cmd_phone(playerid, "\1");
    // }
    return 1;
}

Dialog:SendText(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new 
            number = strval(inputtext)
        ;

        if(isnull(inputtext) || !IsNumeric(inputtext))
            return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Please enter the number that you wish to send a text message to:", "Dial", "Back");

        if(GetNumberOwner(number) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Error: That number is not online right now.\n\nPlease enter the number that you wish to send a text message to:", "Dial", "Back");

        PlayerData[playerid][pContact] = GetNumberOwner(number);
        Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Text Message", "Please enter the message to send to %s:", "Send", "Back", ReturnName(PlayerData[playerid][pContact], 0));
    }
    // else {
    //     cmd_phone(playerid, "\1");
    // }
    return 1;
}
Dialog:ShareLoc(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new 
            number = strval(inputtext),
            targetid,
            Float:x,
            Float:y,
            Float:z
        ;

        if(isnull(inputtext) || !IsNumeric(inputtext))
            return Dialog_Show(playerid, ShareLoc, DIALOG_STYLE_INPUT, "Share Location", "Please enter the number that you wish to send a location to:", "Send", "Back");

        if(GetNumberOwner(number) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, ShareLoc, DIALOG_STYLE_INPUT, "Share Location", "ERROR : This phone number is not in service!\n\nPlease enter the number that you wish to send a location to:", "Send", "Back");

        if(PlayerData[playerid][pCredits] < 250)
            return SendErrorMessage(playerid, "You don't have enough phone credits to share location to this number!");

        PlayerData[playerid][pCredits] -= 250;
        ShowPlayerFooter(playerid, "You've been ~r~charged~w~ 250 credits to share your location.");

        GetPlayerPos(playerid, x, y, z);

        targetid = GetNumberOwner(number);

        ShareLocationCP[targetid] = 1;
        DisablePlayerRaceCheckpoint(targetid);
        SetPlayerRaceCheckpoint(targetid, 1, x, y, z, 0, 0, 0, 2.0);
        SendServerMessage(targetid, ""RED"%s "WHITE"just share their location to your phone, check GPS!", ReturnName(playerid));
        PlayerPlaySoundEx(playerid, 21001);
        PlayerPlaySoundEx(targetid, 21001);
    }
    return 1;
}

Dialog:TextMessage(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Text Message", "Error: Please enter a message to send.\n\nPlease enter the message to send to %s:", "Send", "Back", ReturnName(PlayerData[playerid][pContact], 0));

        new targetid = PlayerData[playerid][pContact];

        if(!IsPlayerConnected(targetid) || !PlayerData[targetid][pPhone])
            return SendErrorMessage(playerid, "The specified phone number went offline.");

        if(PlayerData[playerid][pCredits] < 25)
            return SendErrorMessage(playerid, "You don't have enough phone credits to text this number!");

        PlayerData[playerid][pCredits] -= 25;
        ShowPlayerFooter(playerid, "You've been ~r~charged~w~ 25 credits to send a text.");

        SendClientMessageEx(targetid, X11_YELLOW_2, "[TEXT]: %s - %s (%d)", inputtext, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
        SendClientMessageEx(playerid, X11_YELLOW_2, "[TEXT]: %s - %s (%d)", inputtext, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s takes out their phone and sends a text.", ReturnName(playerid, 0));
    }
    else {
        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Please enter the number that you wish to send a text message to:", "Submit", "Back");
    }
    return 1;
}

Dialog:MyPhone(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                if(!PlayerData[playerid][pPhone])
                    return SendErrorMessage(playerid, "You dont have SIM card on your phone.");

                if(PlayerData[playerid][pPhoneOff])
                    return SendErrorMessage(playerid, "Your phone must be powered on.");

                Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Dial Number", "Please enter the number that you wish to dial below:", "Dial", "Back");
            }
            case 1:
            {
                if(PlayerData[playerid][pPhoneOff])
                    return SendErrorMessage(playerid, "Your phone must be powered on.");

                ShowContacts(playerid);
            }
            case 2:
            {
                if(!PlayerData[playerid][pPhone])
                    return SendErrorMessage(playerid, "You dont have SIM card on your phone.");

                if(PlayerData[playerid][pPhoneOff])
                    return SendErrorMessage(playerid, "Your phone must be powered on.");

                Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Please enter the number that you wish to send a text message to:", "Dial", "Back");
            }
            case 3:
            {
                if(!PlayerData[playerid][pPhoneOff])
                {
                    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) {
                        CancelCall(playerid);
                    }
                    PlayerData[playerid][pPhoneOff] = 1;
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has powered off their cellphone.", ReturnName(playerid, 0));
                }
                else
                {
                    PlayerData[playerid][pPhoneOff] = 0;

                    SendCustomMessage(playerid, "CELLPHONE", "There is total %d miss call on your phone.", GetMissCallCount(playerid));
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has powered on their cellphone.", ReturnName(playerid, 0));
                }
            }
            case 5: ShowMissCallList(playerid);
            case 6:
            {
                Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Phone Credits", "%d", "Close", "", PlayerData[playerid][pCredits]);
            }
            case 7:
            {
                Dialog_Show(playerid, NomorTujuan, DIALOG_STYLE_INPUT, "Transfer Credits", "Insert Phone Number : ", "Submit", "Cancel");
            }
        }
    }
    return 1;
}
Dialog:CreditsMenu(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Phone Credits", " Your Phone Credits : %d", "Close", "", PlayerData[playerid][pCredits]);
            }
            case 1:
            {
                Dialog_Show(playerid, NomorTujuan, DIALOG_STYLE_INPUT, "Transfer Credits", "Insert Phone Number : ", "Submit", "Cancel");
            }
        }
    }
    return 1;
}
Dialog:NomorTujuan(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static targetid;
        if((targetid = GetNumberOwner(strval(inputtext))) != INVALID_PLAYER_ID)
        {
            TransferAmount[playerid] = targetid;
            Dialog_Show(playerid, TransferPulsa, DIALOG_STYLE_INPUT, "Transfer Credits", "Your phone credits : %d\nHow much you want to transfer ?", "Transfer", "Cancel", PlayerData[playerid][pCredits]);
        }
        else
        {
            Dialog_Show(playerid, NomorTujuan, DIALOG_STYLE_INPUT, "Transfer Credits", "Invalid Number\nInsert Phone Number : ", "Submit", "Cancel");
        }
    }
    return 1;
}
Dialog:TransferPulsa(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(strval(inputtext) > PlayerData[playerid][pCredits]) return Dialog_Show(playerid, TransferPulsa, DIALOG_STYLE_INPUT, "Transfer Credits", "Invalid Amount!\nYour phone credits : %d\nHow much you want to transfer ?", "Transfer", "Cancel", PlayerData[playerid][pCredits]);
        else if(strval(inputtext) <= 0) return Dialog_Show(playerid, TransferPulsa, DIALOG_STYLE_INPUT, "Transfer Credits", "Invalid Amount!\nYour phone credits : %d\nHow much you want to transfer ?", "Transfer", "Cancel", PlayerData[playerid][pCredits]);

        new targetid = TransferAmount[playerid];
        PlayerData[playerid][pCredits] -= strval(inputtext);
        PlayerData[targetid][pCredits] += strval(inputtext);
        SendClientMessageEx(playerid, COLOR_WHITE, "You transfer "RED"%d "WHITE"Phone Credits to "YELLOW"%d,"WHITE"You have "GREEN"%d "WHITE"phone credits remaining", strval(inputtext), PlayerData[targetid][pPhone], PlayerData[playerid][pCredits]);
        SendClientMessageEx(targetid, COLOR_WHITE, "You received "RED"%d "WHITE"Phone Credits from "YELLOW"%d,"WHITE"Now you have "GREEN"%d "WHITE"phone credits", strval(inputtext), PlayerData[playerid][pPhone], PlayerData[targetid][pCredits]);
    }
    return 1;
}
Dialog:ListedFurniture(playerid, response, listitem, inputtext[])
{
    if(response && listitem >= 0)
    {
        new id = House_Inside(playerid);

        if(id != -1 && House_IsOwner(playerid, id, false))
        {
            PlayerData[playerid][pEditFurniture] = ListedFurniture[playerid][listitem];
            Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], "Edit Position\nMove to in front me\nDestroy Furniture", "Select", "Cancel");
        }
    }
    return 1;
}

Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = House_Inside(playerid),
            Float:x,
            Float:y,
            Float:z,
            Float:angle;

        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        x += 1.0 * floatsin(-angle, degrees);
        y += 1.0 * floatcos(-angle, degrees);

        if(id != -1 && House_IsOwner(playerid, id, false))
        {
            switch (listitem)
            {
                case 0:
                {
                    new furnitureid = PlayerData[playerid][pEditFurniture];

                    PlayerData[playerid][pEditingMode] = FURNITURE;

                    if(FurnitureData[furnitureid][furnitureUnused])
                    {
                        FurnitureData[furnitureid][furnitureUnused] = 0;
                        FurnitureData[furnitureid][furniturePos][0] = x;
                        FurnitureData[furnitureid][furniturePos][1] = y;
                        FurnitureData[furnitureid][furniturePos][2] = z;
                        FurnitureData[furnitureid][furnitureRot][0] = 0.0;
                        FurnitureData[furnitureid][furnitureRot][1] = 0.0;
                        FurnitureData[furnitureid][furnitureRot][2] = angle;

                        Furniture_Refresh(furnitureid);
                    }
                    EditDynamicObject(playerid, FurnitureData[furnitureid][furnitureObject]);
                    SendServerMessage(playerid, "You are now editing the position of item \"%s\".", FurnitureData[furnitureid][furnitureName]);
                }
                case 1:
                {
                    new furnitureid = PlayerData[playerid][pEditFurniture];

                    if(FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureUnused])
                        return SendErrorMessage(playerid, "Attach this furniture first by select option \"Editing Position\"");

                    FurnitureData[furnitureid][furnitureUnused] = 0;
                    FurnitureData[furnitureid][furniturePos][0] = x;
                    FurnitureData[furnitureid][furniturePos][1] = y;
                    FurnitureData[furnitureid][furniturePos][2] = z;
                    FurnitureData[furnitureid][furnitureRot][0] = 0.0;
                    FurnitureData[furnitureid][furnitureRot][1] = 0.0;
                    FurnitureData[furnitureid][furnitureRot][2] = angle;

                    Furniture_Update(furnitureid);
                    SendServerMessage(playerid, "Now this furniture is moved to in front you.");
                }
                case 2:
                {
                    if(Furniture_Delete(PlayerData[playerid][pEditFurniture]))
                    {
                        SendServerMessage(playerid, "You have destroyed furniture \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);   
                    }
                    else 
                    {
                        SendErrorMessage(playerid, "Gagal menghapus furniture");
                    }
                    CancelEdit(playerid);
                    PlayerData[playerid][pEditFurniture] = -1;
                }
            }
        }
        else {
            PlayerData[playerid][pEditFurniture] = -1;
        }
    }
    else {
        PlayerData[playerid][pEditFurniture] = -1;
    }
    return 1;
}
Dialog:eTransfer(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static
            userid;

        //if(PlayerData[playerid][pScore] < 2) return SendErrorMessage(playerid, "You must be level 2.");

        if(sscanf(inputtext, "u", userid))
            return Dialog_Show(playerid, eTransfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        if(userid == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, eTransfer, DIALOG_STYLE_INPUT, "Make a transfer", "Error: Invalid player specified.\n\nYour bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        if(userid == playerid)
            return Dialog_Show(playerid, eTransfer, DIALOG_STYLE_INPUT, "Make a transfer", "Error: You can't transfer funds to yourself.\n\nYour bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        PlayerData[playerid][pTransfer] = userid;
        Dialog_Show(playerid, eTransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));
    }
    return 1;
}

Dialog:eTransferCash(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new amount = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, eTransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

        if(amount < 1 || amount > PlayerData[playerid][pBankMoney])
            return Dialog_Show(playerid, eTransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Error: Insufficient funds!\n\nYour bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

        if(!strcmp(AccountData[playerid][pIP], AccountData[PlayerData[playerid][pTransfer]][pIP])) {
            SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s (%s) has transferred %s to %s (%s).", ReturnName(playerid, 0), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0), AccountData[playerid][pIP]);
        }
        PlayerData[playerid][pBankMoney] -= amount;
        PlayerData[PlayerData[playerid][pTransfer]][pBankMoney] += amount;

        SendServerMessage(playerid, "You have transferred %s to %s's bank account.", FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0));
        SendServerMessage(PlayerData[playerid][pTransfer], "%s has transferred %s into your bank account.", ReturnName(playerid, 0), FormatNumber(amount));

        Log_Save(E_LOG_TRANSFER, sprintf("[%s] %s (%s) has transferred %s to %s (%s).", ReturnDate(), ReturnName(playerid), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer]), AccountData[PlayerData[playerid][pTransfer]][pIP]));
        Discord_Log(TRANSFERLOG, sprintf("%s (%s) has transferred %s to %s (%s).", ReturnName(playerid), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer]), AccountData[PlayerData[playerid][pTransfer]][pIP]));
    }
    return 1;
}
Dialog:Transfer(playerid, response, listitem, inputtext[])
{
    if(!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
        return 0;

    if(response)
    {
        static
            userid;

        //if(PlayerData[playerid][pScore] < 2) return SendErrorMessage(playerid, "You must be level 2.");

        if(sscanf(inputtext, "u", userid))
            return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        if(userid == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Error: Invalid player specified.\n\nYour bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        if(userid == playerid)
            return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Error: You can't transfer funds to yourself.\n\nYour bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        PlayerData[playerid][pTransfer] = userid;
        Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));
    }
    return 1;
}

Dialog:TransferCash(playerid, response, listitem, inputtext[])
{
    if(!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
        return 0;

    if(response)
    {
        new amount = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

        if(amount < 1 || amount > PlayerData[playerid][pBankMoney])
            return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Error: Insufficient funds!\n\nYour bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

        if(!strcmp(AccountData[playerid][pIP], AccountData[PlayerData[playerid][pTransfer]][pIP])) {
            SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s (%s) has transferred %s to %s (%s).", ReturnName(playerid, 0), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0), AccountData[playerid][pIP]);
        }
        PlayerData[playerid][pBankMoney] -= amount;
        PlayerData[PlayerData[playerid][pTransfer]][pBankMoney] += amount;
        PlayerTextDrawSetString(playerid, BankMoneyVisual[playerid], sprintf("%s", FormatNumber(PlayerData[playerid][pBankMoney])));
        SendServerMessage(playerid, "You have transferred %s to %s's bank account.", FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0));
        SendServerMessage(PlayerData[playerid][pTransfer], "%s has transferred %s into your bank account.", ReturnName(playerid, 0), FormatNumber(amount));

        Log_Save(E_LOG_TRANSFER, sprintf("[%s] %s (%s) has transferred %s to %s (%s).", ReturnDate(), ReturnName(playerid), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer]), AccountData[PlayerData[playerid][pTransfer]][pIP]));
        Discord_Log(TRANSFERLOG, sprintf("%s (%s) has transferred %s to %s (%s).", ReturnName(playerid), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer]), AccountData[PlayerData[playerid][pTransfer]][pIP]));
    }
    return 1;
}

Dialog:Deposit(playerid, response, listitem, inputtext[])
{
    if(!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
        return 0;

    if(response)
    {
        new amount = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposit funds", "Your bank account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        if(amount < 1 || amount > GetMoney(playerid))
            return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposit funds", "Error: You don't have that much.\n\nYour bank account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        PlayerData[playerid][pBankMoney] += amount;
        GiveMoney(playerid, -amount);

        SendServerMessage(playerid, "You have deposited %s into your bank account.", FormatNumber(amount));

        Log_Save(E_LOG_DEPOSIT, sprintf("[%s] %s deposit for %s, current bank: %s.", ReturnDate(), ReturnName(playerid), FormatNumber(amount), FormatNumber(PlayerData[playerid][pBankMoney])));
        Discord_Log(DEPOSITLOG, sprintf("%s deposit for %s, current bank: %s.", ReturnName(playerid), FormatNumber(amount), FormatNumber(PlayerData[playerid][pBankMoney])));

        Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposit funds", "Your bank account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
    }
    return 1;
}

Dialog:FAQ1(playerid, response, listitem, inputtext[])
{
    if(!response)
        cmd_faq(playerid, "\1");

    return 1;
}

Dialog:FAQ(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch (listitem)
        {
            case 0: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda dapat akses "YELLOW"/gps"WHITE" untuk mengethaui lokasi yang harus anda kunjungi. Disarankan penuhi kebutuhan handphone, GPS dan SIMCard, lalu ke JOB.", "OK", "Back");
            case 1: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda bisa masuk ke dalam ruangan dengan menekan tombol "YELLOW"'F'"WHITE" di keyboard mu.", "OK", "Back");
            case 2: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Cukup menekan "YELLOW"'Y'"WHITE" di keyboard mu.\nAnda juga bisa menggunakan printah "YELLOW"/inventory"WHITE" untuk melihat inventory.", "OK", "Back");
            case 3: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda bisa mengambil item hanya dengan menekan "YELLOW"'N'"WHITE" di keyboarmu.\nAnda harus jongkok "YELLOW"'C'"WHITE" terlebih dahulu.", "OK", "Back");
            case 4: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Di screen anda terlihat ada gambar skin yang berarti skin yang karakter pakai saat ini\n"YELLOW"HUNGER Bar:"WHITE" Bar ini mempermudah untuk mengatur kesehatan dari karakter itu sendiri,\njika hunger lemah dan berwarna merah, berarti ada efek lain yang akan mempengaruhi.", "OK", "Back");
            case 5: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda bisa mengisi hunger dengan membeli makanan di bisnis "YELLOW"Fast Food"WHITE".\nUntuk memasak, anda cukup "YELLOW"/cook"WHITE" di rumah.\nAnda bisa membeli Froozen Food di bisnis "YELLOW"Retail Store"WHITE".", "OK", "Back");
            case 6: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda bisa mudah mencari lokasi yang tidak anda ketahui sebelumnya hanya dengan membeli "YELLOW"GPS System"WHITE".\nAnda bisa membeli GPS System di bisnis "YELLOW"Electronic Store"WHITE".", "OK", "Back");
            case 7: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Ketik perintah "YELLOW"/disablecp"WHITE" untuk menonaktivkan saat melakukan berbagai pekerjaan, seperti trucker, dll.\nJika anda membawa box, cukup "YELLOW"/stoploading"WHITE" untuk menyelesaikan\nJika ingin keluar dari pekerjaan cukup menggunakan printah "YELLOW"/quitjob.", "OK", "Back");
            case 8: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda harus mengambil item weapon dari inventory dengan meggunakan opsi "YELLOW"Use Item.\n"WHITE"Di saat anda memegang senjata, anda harus memiliki magazine untuk pelurunya..\n\nAnda bisa membelinya di "YELLOW"Weapon Shop.\n"WHITE"Anda juga bisa menekan "YELLOW"'N'"WHITE" untuk meletakkan kembali weapon yang di pegang.", "OK", "Back");
            case 9: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Berbagai furniture saat di beli akan di letakkan ke dalam inventory.\nTekan "YELLOW"'Y'"WHITE", pilih item furniture dan pilih "YELLOW"Use Item"WHITE" untuk meletakkan item.\n\nJika ingin melihat item furniture yang ada di rumah cukup menggunakan printah "YELLOW"/furniture"WHITE" di dalam rumah.\nPilih item yang tersedia, nantinya anda akan di perintahkan untuk mengedit posisi atau menghilangkan item furniture.", "OK", "Back");
        }
    }
    return 1;
}

Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
        SetPlayerPos(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
    }
    return 1;
}

Dialog:Inventory(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
            itemid = PlayerData[playerid][pInventoryItem],
            string[64];

        strunpack(string, InventoryData[playerid][itemid][invItem]);

        switch (listitem)
        {
            case 0:
            {
                CallLocalFunction("OnPlayerUseInvItem", "dds", playerid, itemid, string);
            }
            case 1:
            {
                if(!strcmp(string, "Kunci Gubuk"))
                    return 0;

                if(!strcmp(string, "Mask") && PlayerData[playerid][pMaskOn])
                    return SendErrorMessage(playerid, "Lepas terlebih dahulu masker yang anda gunakan.");

                PlayerData[playerid][pInventoryItem] = itemid;
                Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Please enter the name or the ID of the player:", "Submit", "Cancel");
            }
            case 2:
            {
                new id = -1;

                for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
                    if(g_aInventoryItems[i][e_InventoryDrop] == false) return SendErrorMessage(playerid, "You can't drop this item (%s).", string);
                }

                if(!strcmp(string, "Mask") && PlayerData[playerid][pMaskOn])
                    return SendErrorMessage(playerid, "Lepas terlebih dahulu masker yang anda gunakan.");

                if(IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid) || PlayerData[playerid][pJailTime])
                    return SendErrorMessage(playerid, "You can't drop items right now.");

                /*else if(!strcmp(string, "Backpack"))
                    return cmd_dropbackpack(playerid, "\1");*/

                else if((id = Garbage_Nearest(playerid)) != -1)
                {
                    if(GarbageData[id][garbageCapacity] >= 10)
                        return SendErrorMessage(playerid, "This garbage bin is full of trash.");

                    GarbageData[id][garbageCapacity]++;
                    Garbage_Save(id);

                    Inventory_Remove(playerid, string);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s throws a \"%s\" into the garbage bin.", ReturnName(playerid, 0), string);
                }
                else if(InventoryData[playerid][itemid][invQuantity] == 1) DropPlayerItem(playerid, itemid);
                else Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Item: %s - Quantity: %d\n\nPlease specify how much of this item you wish to drop:", "Drop", "Cancel", string, InventoryData[playerid][itemid][invQuantity]);
            }
        }
    }
    return 1;
}

Dialog:DropItem(playerid, response, listitem, inputtext[])
{
    new
        itemid = PlayerData[playerid][pInventoryItem],
        string[32];

    strunpack(string, InventoryData[playerid][itemid][invItem]);

    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Item: %s - Quantity: %d\n\nPlease specify how much of this item you wish to drop:", "Drop", "Cancel", string, InventoryData[playerid][itemid][invQuantity]);

        if(strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
            return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Error: Insufficient amount specified.\n\nItem: %s - Quantity: %d\n\nPlease specify how much of this item you wish to drop:", "Drop", "Cancel", string, InventoryData[playerid][itemid][invQuantity]);

        DropPlayerItem(playerid, itemid, strval(inputtext));
    }
    return 1;
}

Dialog:RandNumber(playerid, response, listitem, inputtext[])
{
    new string[128], number[150];

    if(response)
    {
        PlayerData[playerid][pPhone] = strval(inputtext);

        format(string, sizeof(string), "Your new number is ~p~%d.", PlayerData[playerid][pPhone]);
        ShowPlayerFooter(playerid, string);

        SendServerMessage(playerid, "Your new number is %d.", PlayerData[playerid][pPhone]);
    }
    else
    {
        for(new i; i != 10; i++)
        {
            format(number, sizeof(number), "%s{%s}%d\n", number, ((i+1) % 2 == 0) ? ("C0C0C0") : ("FFFFFF") , (random(90000)+10000));
        }
        Dialog_Show(playerid, RandNumber, DIALOG_STYLE_LIST, "Phone Number", number, "Select", "Refresh");
    }
    return 1;
}

Dialog:BusinessBuy(playerid, response, listitem, inputtext[])
{
    static
        bizid = -1,
        price;
    new playeroffer = GetPVarInt(playerid, "OfferedPlayerID");
    if((bizid = Business_Inside(playerid)) != -1 && response)
    {
        price = BusinessData[bizid][bizPrices][listitem];

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

        if(BusinessData[bizid][bizProducts] < 1)
            return SendErrorMessage(playerid, "This business is out of stock.");

        if(BusinessData[bizid][bizType] == 1)
        {
            switch (listitem)
            {
                case 0:
                {
                    if(Inventory_Add(playerid, "Spray Can", 365) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought spray can");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a can of spray paint.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 1:
                {
                    if(PlayerData[playerid][pLottery])
                        return SendErrorMessage(playerid, "You have a lottery ticket already.");

                    Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Please enter your desired lottery number below (from 1-60):", "Submit", "Cancel");
                }
                case 2:
                {
                    if(Inventory_Add(playerid, "First Aid", 1580) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought first aid");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a first aid kit.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 3:
                {
                    if(Inventory_Add(playerid, "Frozen Pizza", 2814) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought frozen pizza");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a box of frozen pizza.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 4:
                {
                    if(Inventory_HasItem(playerid, "Mask"))
                        return SendErrorMessage(playerid, "You have a mask already.");

                    if(Inventory_Add(playerid, "Mask", 19036) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought mask");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a mask.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }

                }
                case 5:
                {
                    if(Inventory_Add(playerid, "Water", 1484) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought water");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a water.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }

                }
                case 6:
                {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought phone credits");
                        PlayerData[playerid][pCredits] += 5000;
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a 5000 Phone Credits.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                }
                case 7:
                {
                    if(Inventory_Add(playerid, "Campfire", 19632) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought campfire");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a campfire!.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 8:
                {
                    if(Inventory_Add(playerid, "Cigarettes", 19896, 20) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought cigarettes");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a pack of cigarettes!.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
            }
        }
        else if(BusinessData[bizid][bizType] == 6)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(Inventory_Add(playerid, "Fuel Can", 1650) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought fuel can");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a can of fuel.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 1:
                {
                    if(Inventory_Add(playerid, "Snack", 2768) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought snack");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a snack.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }

                }
                case 2:
                {
                    if(Inventory_Add(playerid, "Frozen Burger", 2768) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought frozen burger");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a frozen burger.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 3:
                {
                    if(Inventory_Add(playerid, "Water", 1484) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought water");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a Water.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 4:
                {
                    if(Inventory_Add(playerid, "Cigarettes", 19896, 20) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought cigarettes");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a pack of cigarettes.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
            }
        }
        else if(BusinessData[bizid][bizType] == 8)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(Inventory_HasItem(playerid, "Cellphone"))
                        return SendErrorMessage(playerid, "You have a cellphone already.");

                    if(Inventory_Add(playerid, "Cellphone", 330) != -1)
                    {
                        PlayerData[playerid][pPhone] = 0;

                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought cellphone");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a cellphone.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 1:
                {
                    if(Inventory_HasItem(playerid, "GPS System"))
                        return SendErrorMessage(playerid, "You have a GPS system already.");

                    if(Inventory_Add(playerid, "GPS System", 18875) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought gps system");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a GPS System.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 2:
                {
                    if(Inventory_HasItem(playerid, "Portable Radio"))
                        return SendErrorMessage(playerid, "You have this item already.");

                    if(Inventory_Add(playerid, "Portable Radio", 18868) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought portable radio");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a portable radio.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 3:
                {
                    if(PlayerHasWeapon(playerid, 5))
                        return SendErrorMessage(playerid, "You have this item already.");

                    if(IsPlayerDuty(playerid))
                        return SendErrorMessage(playerid, "Off duty first to buy this baseball bat!");

                    if(PlayerHasWeaponInSlot(playerid, 5))
                        return SendErrorMessage(playerid, "You already have the weapon in the same slot.");

                    GivePlayerWeaponEx(playerid, 5, 1, _, "None");

                    GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought baseball bat");
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a baseball bat.", ReturnName(playerid, 0), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += price;
                    Business_Save(bizid);
                }
                case 4:
                {
                    if(PlayerHasWeapon(playerid, 43))
                        return SendErrorMessage(playerid, "You have this item already.");

                    if(IsPlayerDuty(playerid))
                        return SendErrorMessage(playerid, "Off duty first to buy this Camera!");

                    if(PlayerHasWeaponInSlot(playerid, 43))
                        return SendErrorMessage(playerid, "You already have the weapon in the same slot.");

                    GivePlayerWeaponEx(playerid, 43, 1, _, "None");

                    GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought camera");
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a Camera.", ReturnName(playerid, 0), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += price;
                    Business_Save(bizid);
                }
                case 5:
                {
                    if(!Inventory_HasItem(playerid, "Cellphone"))
                        return SendErrorMessage(playerid, "You don't have a cellphone.");

                    new number[150];

                    for(new i; i != 10; i++)
                    {
                        format(number, sizeof(number), "%s{%s}%d\n", number, ((i+1) % 2 == 0) ? ("C0C0C0") : ("FFFFFF"), (random(90000)+10000));
                    }
                    Dialog_Show(playerid, RandNumber, DIALOG_STYLE_LIST, "Phone Number", number, "Select", "Refresh");

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += price;

                    GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought phone number");
                    Business_Save(bizid);

                    SendServerMessage(playerid, "Select the number on dialog list, you can refresh newest number with click 'Refresh' or Press 'ESC' on keyboard.");
                }
                case 6:
                {
                    if(Inventory_HasItem(playerid, "Laptop"))
                        return SendErrorMessage(playerid, "You have this item already.");

                    if(Inventory_Add(playerid, "Laptop", 19893) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought laptop");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a Laptop.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
                case 7:
                {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought phone credit");
                        PlayerData[playerid][pCredits] += 5000;
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a 5000 Phone Credits.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                }
                case 8:
                {
                    if(Inventory_HasItem(playerid, "MP3 Player"))
                        return SendErrorMessage(playerid, "You have this item already.");

                    if(Inventory_Add(playerid, "MP3 Player", 18875) != -1)
                    {
                        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought mp3 player");
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a MP3 Player.", ReturnName(playerid, 0), FormatNumber(price));

                        BusinessData[bizid][bizProducts]--;
                        BusinessData[bizid][bizVault] += price;
                        Business_Save(bizid);
                    }
                }
            }
        }
        else if(BusinessData[bizid][bizType] == 2)
        {
            if(PlayerData[playerid][pFirearmLicenseExpired] < 1)
                return SendErrorMessage(playerid, "This store only sells to people with a firearm license.");

            new serial[64], weapon_name[32], str[64];
            format(serial, sizeof(serial), "%d%d%d", RandomEx(20, 90), RandomEx(15, 90), GetPlayerSQLID(playerid));
            
            switch (listitem)
            {
                case 0:
                {
                    if(Inventory_Count(playerid, "Armored Vest") >= 1)
                        return SendErrorMessage(playerid, "You have 1 armored vests, you can't buy anymore.");

                    format(weapon_name, sizeof(weapon_name), "Armored Vest");
                    Inventory_Add(playerid, "Armored Vest", 19142);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received an armored vest.", ReturnName(playerid, 0), FormatNumber(price));
                }
                case 1:
                {
                    if(PlayerData[playerid][pScore] < 2)
                        return SendErrorMessage(playerid, "You must level 2 to use this.");

                    if(PlayerHasWeaponInSlot(playerid, 24))
                        return SendErrorMessage(playerid, "You have a weapon in the same slot!");

                    format(weapon_name, sizeof(weapon_name), "Desert Eagle");
                    GivePlayerWeaponEx(playerid, 24, 50, 50, serial);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a Desert Eagle.", ReturnName(playerid, 0), FormatNumber(price));
                }
                case 2: // Silenced
                {
                    if(PlayerHasWeaponInSlot(playerid, 23))
                        return SendErrorMessage(playerid, "You have a weapon in the same slot!");

                    format(weapon_name, sizeof(weapon_name), "Silenced Pistol");
                    GivePlayerWeaponEx(playerid, 23, 50, 50, serial);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a Silenced Pistol.", ReturnName(playerid, 0), FormatNumber(price));
                }
                case 3: // 9mm
                {
                    if(PlayerData[playerid][pScore] < 2)
                        return SendErrorMessage(playerid, "You must level 2 to use this.");

                    if(PlayerHasWeaponInSlot(playerid, 22))
                        return SendErrorMessage(playerid, "You have a weapon in the same slot!");

                    format(weapon_name, sizeof(weapon_name), "9mm Pistol");
                    GivePlayerWeaponEx(playerid, 22, 50, 50, serial);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a 9mm Pistol.", ReturnName(playerid, 0), FormatNumber(price));
                }
                case 4:
                {
                    if(PlayerHasWeaponInSlot(playerid, 4))
                        return SendErrorMessage(playerid, "You have a weapon in the same slot!");

                    format(weapon_name, sizeof(weapon_name), "hunting knife");
                    GivePlayerWeaponEx(playerid, 4, 1, 1, serial);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a hunting knife.", ReturnName(playerid, 0), FormatNumber(price));
                }
            }

            format(str, sizeof(str), "bought %s", weapon_name);
            GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, str);
            BusinessData[bizid][bizProducts]--;
            BusinessData[bizid][bizVault] += price;
            Business_Save(bizid);
        }
        else if(BusinessData[bizid][bizType] == 3)
        {
            new models[50] = {-1, ... },
                count;

            switch (listitem)
            {
                case 0:
                {
                    PlayerData[playerid][pClothesType] = 1;
                    PlayerTemp[playerid][temp_realskin] = PlayerData[playerid][pSkin];
                    PlayerTemp[playerid][temp_selectskin] = 0;

                    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
                    SetPlayerVirtualWorld(playerid, playerid+MAX_PLAYERS);
                    TogglePlayerControllable(playerid, false);

                    ShowClothesTextdraw(playerid);

                    SetPlayerSkinEx(playerid, (PlayerData[playerid][pGender] == 1) ? g_aMaleSkins[PlayerTemp[playerid][temp_selectskin]] : g_aFemaleSkins[PlayerTemp[playerid][temp_selectskin]]);
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], sprintf("Skin:_%d/%d", PlayerTemp[playerid][temp_selectskin], ((PlayerData[playerid][pGender] == 1) ? sizeof(g_aMaleSkins) : sizeof(g_aFemaleSkins))));

                    SelectTextDrawEx(playerid, -1);

                    SendServerMessage(playerid, "Tekan "YELLOW"'ESCAPE' "WHITE"di keyboard untuk keluar dari menu ini.");
                }
                case 1:
                {
                    if(Aksesoris_GetCount(playerid) > MAX_ACC)
                        return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");

                    PlayerData[playerid][pClothesType] = 2;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 1) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Cap List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 2:
                {
                    if(Aksesoris_GetCount(playerid) > MAX_ACC)
                        return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");

                    PlayerData[playerid][pClothesType] = 3;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 2) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Bandana List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 3:
                {
                    if(Aksesoris_GetCount(playerid) > MAX_ACC)
                        return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");

                    PlayerData[playerid][pClothesType] = 4;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 3) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Mask List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 4:
                {
                    if(Aksesoris_GetCount(playerid) > MAX_ACC)
                        return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");

                    PlayerData[playerid][pClothesType] = 5;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 4) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Helmet List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 5:
                {
                    if(Aksesoris_GetCount(playerid) > MAX_ACC)
                        return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");

                    PlayerData[playerid][pClothesType] = 6;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 5) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Watch List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 6:
                {
                    if(Aksesoris_GetCount(playerid) > MAX_ACC)
                        return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");

                    PlayerData[playerid][pClothesType] = 7;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 6) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Glasses List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 7:
                {
                    if(Aksesoris_GetCount(playerid) > MAX_ACC)
                        return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");

                    PlayerData[playerid][pClothesType] = 8;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 7) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Misc List", MODEL_SELECTION_AKSESORIS, models, count);
                }
            }
        }
        else if(BusinessData[bizid][bizType] == 4)
        {
            // if(PlayerData[playerid][pHunger] > 90)
            //     return SendErrorMessage(playerid, "You are not hungry right now.");

            new str[64];

            switch (listitem)
            {
                case 0:
                {
                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+12);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received some french fries.", ReturnName(playerid, 0), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                    format(str, sizeof(str), "bought french fries");
                }
                case 1:
                {
                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+20);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a cheeseburger.", ReturnName(playerid, 0), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                    format(str, sizeof(str), "bought cheeseburger");
                }
                case 2:
                {
                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+26);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a chicken burger.", ReturnName(playerid, 0), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                    format(str, sizeof(str), "bought chicken burger");
                }
                case 3:
                {
                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+30);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received some chicken nuggets.", ReturnName(playerid, 0), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                    format(str, sizeof(str), "bought chicken nugget");
                }
                case 4:
                {
                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+35);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a salad.", ReturnName(playerid, 0), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                    format(str, sizeof(str), "bought salad");
                }
                case 5:
                {
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a sprunk.", ReturnName(playerid, 0), FormatNumber(price));                    
                    format(str, sizeof(str), "bought sprunk");
                }
            }
            new 
                rand = random(500);
            if(listitem < 5 && rand <= 10 && BusinessData[bizid][bizDurability] < 70)
            {
                SetBusinessOnFire(playerid, bizid);
            }
            GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, str);
            BusinessData[bizid][bizProducts]--;
            BusinessData[bizid][bizDurability]--;

            if(BusinessData[bizid][bizDurability] <= 0)
                BusinessData[bizid][bizDurability] = 0;

            BusinessData[bizid][bizVault] += price;
            Business_Save(bizid);
        }
        else if(BusinessData[bizid][bizType] == 9)
        {
            // if(PlayerData[playerid][pHunger] > 90)
            //     return SendErrorMessage(playerid, "You are not hungry right now.");

            new str[64];

            switch (listitem)
            {
                case 0:
                {//Beer Wine Sprunk French Fies Beef Steak
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a beer.", ReturnName(playerid, 0), FormatNumber(price)); 
                    format(str, sizeof(str), "bought beer");                   
                }
                case 1:
                {
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a wine.", ReturnName(playerid, 0), FormatNumber(price));                    
                    format(str, sizeof(str), "bought wine");
                }
                case 2:
                {
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a sprunk.", ReturnName(playerid, 0), FormatNumber(price));                    
                    format(str, sizeof(str), "bought sprunk");
                }
                case 3:
                {
                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+30);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received some french fries.", ReturnName(playerid, 0), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                    format(str, sizeof(str), "bought french fries");
                }
                case 4:
                {
                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+35);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a beef steak.", ReturnName(playerid, 0), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                    format(str, sizeof(str), "bought beef steak");
                }
            }
            GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, str);
            BusinessData[bizid][bizProducts]--;
            BusinessData[bizid][bizVault] += price;
            Business_Save(bizid);
        }
        else if(BusinessData[bizid][bizType] == 7)
        {
            new
                items[400] = {-1, ...},
                count;

            for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if(g_aFurnitureData[i][e_FurnitureType] == listitem + 1) {
                items[count++] = g_aFurnitureData[i][e_FurnitureModel];
            }
            PlayerData[playerid][pFurnitureType] = listitem;

            if(listitem == 3) {
                ShowModelSelectionMenu(playerid, "Furniture", MODEL_SELECTION_FURNITURE, items, count, -12.0, 0.0, 0.0);
            }
            else {
                ShowModelSelectionMenu(playerid, "Furniture", MODEL_SELECTION_FURNITURE, items, count);
            }
        }

        if(playeroffer != INVALID_PLAYER_ID)
        {
            GiveMoney(playeroffer, 20);
            GiveMoney(playerid, -20);
            SendClientMessageEx(playerid, COLOR_WHITE, "you give"GREEN" $20 "WHITE"as a tip to the employee after buying something from the business!", ReturnName(playerid));
            SendClientMessageEx(playeroffer, COLOR_WHITE, "%s give you "GREEN" $20 "WHITE"as a tip after buying something from the business!", ReturnName(playerid));
            PlayerData[playerid][pExp] += 5;
            PlayerData[playeroffer][pExp] += 5;
            if(PlayerData[playeroffer][pExp] >= 100)
            {
                PlayerData[playeroffer][pPlayingHours]++;
                PlayerData[playeroffer][pExp] = 0;
            }
            if(PlayerData[playerid][pExp] >= 100)
            {
                PlayerData[playerid][pPlayingHours]++;
                PlayerData[playerid][pExp] = 0;
            }
            SetPVarInt(playerid, "OfferedPlayerID", INVALID_PLAYER_ID);
        }
    }
    return 1;
}
Dialog:LotteryNumber(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new bizid = Business_Inside(playerid);

        if(bizid != -1)
        {
            if(isnull(inputtext) || (strval(inputtext) < 1 || strval(inputtext) > 60)) {
                return Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Please enter your desired lottery number below (from 1-60):", "Submit", "Cancel");
            }
            PlayerData[playerid][pLottery] = strval(inputtext);
            PlayerData[playerid][pLotteryB] = 1;

            GiveMoney(playerid, -BusinessData[bizid][bizPrices][6], ECONOMY_ADD_SUPPLY, "bought lottery ticket");
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid %s and received a lottery ticket.", ReturnName(playerid, 0), FormatNumber(BusinessData[bizid][bizPrices][6]));

            BusinessData[bizid][bizProducts]--;
            BusinessData[bizid][bizVault] += BusinessData[bizid][bizPrices][6];
            Business_Save(bizid);
        }
    }
    return 1;
}

Dialog:EditProduct(playerid, response, listitem, inputtext[])
{
    static
        bizid = -1;

    if((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
    {
        if(response)
        {
            static
                item[24];

            strmid(item, inputtext, 0, strfind(inputtext, "-") - 1);
            strpack(PlayerData[playerid][pEditingItem], item, 32 char);

            PlayerData[playerid][pProductModify] = listitem;
            Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\":", "Modify", "Back", item);
        }
        else
            return cmd_bm(playerid, "\0");
    }
    return 1;
}

Dialog:PriceSet(playerid, response, listitem, inputtext[])
{
    static
        bizid = -1,
        item[32];

    if((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
    {
        if(response)
        {
            strunpack(item, PlayerData[playerid][pEditingItem]);

            if(isnull(inputtext))
                return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\":", "Modify", "Back", item);

            if(strval(inputtext) < 1 || strval(inputtext) > 8000)
                return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\" ($1 to $8,000):", "Modify", "Back", item);

            if(BusinessData[bizid][bizType] == 6 && PlayerData[playerid][pProductModify] == 5 && strval(inputtext) > 10) //Bensin limiter price
                return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\" ($1 to $10):", "Modify", "Back", item);

            BusinessData[bizid][bizPrices][PlayerData[playerid][pProductModify]] = strval(inputtext);
            Business_Save(bizid);

            SendServerMessage(playerid, "You have adjusted the price of \"%s\" to: %s!", item, FormatNumber(strval(inputtext)));
            Business_ProductMenu(playerid, bizid);
        }
        else
        {
            Business_ProductMenu(playerid, bizid);
        }
    }
    return 1;
}

Dialog:HouseWeapons(playerid, response, listitem, inputtext[])
{
    new
        houseid;

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetAdminLevel(playerid) >= 5))
    {
        if(response)
        {
            if(HouseData[houseid][houseWeapons][listitem] != 0)
            {
                if(IsPlayerDuty(playerid))
                    return SendErrorMessage(playerid, "Duty faction tidak dapat mengambil senjata.");

                if(PlayerHasWeapon(playerid, HouseData[houseid][houseWeapons][listitem]))
                    return SendErrorMessage(playerid, "Kamu sudah memiliki senjata yang sama.");

                if(PlayerHasWeaponInSlot(playerid, HouseData[houseid][houseWeapons][listitem]))
                    return SendErrorMessage(playerid, "Senjata ini berada satu slot dengan senjata yang kamu punya.");

                new serial[64];
                valstr(serial, HouseData[houseid][houseSerial][listitem]);

                GivePlayerWeaponEx(playerid, HouseData[houseid][houseWeapons][listitem], HouseData[houseid][houseAmmo][listitem], HouseData[houseid][houseDurability][listitem], serial);
                mysql_tquery(g_iHandle, sprintf("DELETE FROM `weapon_houses` WHERE `houseid` = '%d' AND `ammo`='%d' AND `weaponid`='%d' AND `durability`='%d' AND `slot` = '%d';", HouseData[houseid][houseID], HouseData[houseid][houseAmmo][listitem], HouseData[houseid][houseWeapons][listitem], HouseData[houseid][houseDurability][listitem], HouseData[houseid][houseWeaponSlot][listitem]));


                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has taken a \"%s\" from their weapon storage.", ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]));

                Log_Save(E_LOG_HOUSE_ITEMS, sprintf("[%s] %s has taken (w: %s a: %d, d: %d) from house id: %d (owned: %s).", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]), HouseData[houseid][houseAmmo][listitem], HouseData[houseid][houseDurability][listitem], HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No")));
                Discord_Log(HOUSEITEMSLOG, sprintf("%s has taken (w: %s a: %d, d: %d) from house id: %d (owned: %s).", ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]), HouseData[houseid][houseAmmo][listitem], HouseData[houseid][houseDurability][listitem], HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No")));

                HouseData[houseid][houseWeapons][listitem]      = 0;
                HouseData[houseid][houseAmmo][listitem]         = 0;
                HouseData[houseid][houseDurability][listitem]   = 0;
                HouseData[houseid][houseWeaponSlot][listitem]   = -1;
                HouseData[houseid][houseSerial][listitem]       = 0;

                House_WeaponStorage(playerid, houseid);
            }
            else
            {
                new
                    weaponid = GetWeapon(playerid),
                    ammo = ReturnWeaponAmmo(playerid, weaponid),
                    durability = ReturnWeaponDurability(playerid, weaponid),
                    serialnumber = ReturnWeaponSerial(playerid, weaponid)
                ;

                if(!House_IsOwner(playerid, houseid))
                    return SendErrorMessage(playerid, "Hanya pemilik rumah yang dapat meletakkan senjata!");

                if(IsPlayerDuty(playerid))
                    return SendErrorMessage(playerid, "Duty faction tidak dapat menyimpan senjata.");

                if(!weaponid)
                    return SendErrorMessage(playerid, "You are not holding any weapon!");

                HouseData[houseid][houseWeapons][listitem] = weaponid;
                HouseData[houseid][houseAmmo][listitem] = ammo;
                HouseData[houseid][houseDurability][listitem] = durability;
                HouseData[houseid][houseWeaponSlot][listitem] = listitem;
                HouseData[houseid][houseSerial][listitem] = serialnumber;

                mysql_tquery(g_iHandle, sprintf("INSERT INTO `weapon_houses`(`houseid`, `weaponid`, `ammo`, `durability`, `slot`, `serial`) VALUES ('%d','%d','%d','%d', '%d', '%d');", HouseData[houseid][houseID], weaponid, ammo, durability, listitem, serialnumber));

                ResetWeaponID(playerid, weaponid);
                House_WeaponStorage(playerid, houseid);

                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has stored a \"%s\" into their weapon storage.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

                Log_Save(E_LOG_HOUSE_ITEMS, sprintf("[%s] %s has stored (w: %s a: %d, d: %d) from house id: %d (owned: %s).", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(weaponid), ammo, durability, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No")));
                Discord_Log(HOUSEITEMSLOG, sprintf("%s has stored (w: %s a: %d, d: %d) from house id: %d (owned: %s).", ReturnName(playerid, 0), ReturnWeaponName(weaponid), ammo, durability, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No")));
            }
        }
        else House_OpenStorage(playerid, houseid);
    }
    return 1;
}

Dialog:HouseDeposit(playerid, response, listitem, inputtext[])
{
    new
        houseid,
        string[32];

    if((houseid = House_Inside(playerid)) != -1)
    {
        if(!House_IsOwner(playerid, houseid))
            return SendErrorMessage(playerid, "Hanya pemilik rumah yang dapat menyimpan uang!");

        strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

        if(response)
        {
            new amount = strval(inputtext);

            if(amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
                return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

            House_AddItem(houseid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
            Inventory_Remove(playerid, string, amount);

            House_ShowItems(playerid, houseid);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has stored a \"%s\" into their house storage.", ReturnName(playerid, 0), string);

            Log_Save(E_LOG_HOUSE_ITEMS, sprintf("[%s] %s has stored %d \"%s\" from their house storage id: %d (owned: %s).", ReturnDate(), ReturnName(playerid, 0), amount, string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No")));
            Discord_Log(HOUSEITEMSLOG, sprintf("%s has stored %d \"%s\" from their house storage id: %d (owned: %s).", ReturnName(playerid, 0), amount, string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No")));
        }
        else House_OpenStorage(playerid, houseid);
    }
    return 1;
}

Dialog:HouseTake(playerid, response, listitem, inputtext[])
{
    new
        houseid,
        string[32];

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetAdminLevel(playerid) >= 5))
    {
        strunpack(string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemName]);

        if(response)
        {
            new amount = strval(inputtext);

            if(amount < 1 || amount > HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemQuantity])
                return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "House Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity]);

            for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
                if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+amount) > g_aInventoryItems[i][e_InventoryMax])
                    return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "House Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:\n(You can take %d %s now!)", "Take", "Back", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity], (g_aInventoryItems[i][e_InventoryMax]-Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])), string);
            }

            if(Inventory_Add(playerid, string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemModel], amount) != -1)
            {
                House_RemoveItem(houseid, string, amount);
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has taken a \"%s\" from their house storage.", ReturnName(playerid, 0), string);

                House_ShowItems(playerid, houseid);

                Log_Save(E_LOG_HOUSE_ITEMS, sprintf("[%s] %s has taken %d \"%s\" from their house storage id: %d (owned: %s).", ReturnDate(), ReturnName(playerid, 0), amount, string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No")));
                Discord_Log(HOUSEITEMSLOG, sprintf("%s has taken %d \"%s\" from their house storage id: %d (owned: %s).", ReturnName(playerid, 0), amount, string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No")));
            }
        }
        else House_OpenStorage(playerid, houseid);
    }
    return 1;
}

Dialog:HouseWithdrawCash(playerid, response, listitem, inputtext[])
{
    new
        houseid;

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetAdminLevel(playerid) >= 5))
    {
        if(response)
        {
            new amount = strval(inputtext);

            if(isnull(inputtext))
                return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw from safe", "Safe Balance: %s\n\nPlease enter how much money you wish to withdraw from the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

            if(amount < 1 || amount > HouseData[houseid][houseMoney])
                return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw from safe", "Error: Insufficient funds.\n\nSafe Balance: %s\n\nPlease enter how much money you wish to withdraw from the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

            HouseData[houseid][houseMoney] -= amount;
            GiveMoney(playerid, amount);

            House_Save(houseid);
            House_OpenStorage(playerid, houseid);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has withdrawn %s from their house safe.", ReturnName(playerid, 0), FormatNumber(amount));

            Log_Save(E_LOG_HOUSE_SAFE, sprintf("[%s] %s has withdrawn \"%s\" (current safe: %s) from their house id: %d.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount), FormatNumber(HouseData[houseid][houseMoney]), HouseData[houseid][houseID]));
            Discord_Log(HOUSESAFELOG, sprintf("%s has withdrawn \"%s\" (current safe: %s) from their house id: %d.", ReturnName(playerid, 0), FormatNumber(amount), FormatNumber(HouseData[houseid][houseMoney]), HouseData[houseid][houseID]));
        }
        else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw from safe\nDeposit into safe", "Select", "Back");
    }
    return 1;
}

Dialog:HouseDepositCash(playerid, response, listitem, inputtext[])
{
    new
        houseid;

    if((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
    {
        if(response)
        {
            new amount = strval(inputtext);

            if(isnull(inputtext))
                return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit into safe", "Safe Balance: %s\n\nPlease enter how much money you wish to deposit into the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

            if(amount < 1 || amount > GetMoney(playerid))
                return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit into safe", "Error: Insufficient funds.\n\nSafe Balance: %s\n\nPlease enter how much money you wish to deposit into the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

            HouseData[houseid][houseMoney] += amount;
            GiveMoney(playerid, -amount);

            House_Save(houseid);
            House_OpenStorage(playerid, houseid);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has deposited %s into their house safe.", ReturnName(playerid, 0), FormatNumber(amount));
            Log_Save(E_LOG_HOUSE_SAFE, sprintf("[%s] %s has deposited \"%s\" (current safe: %s) into their house id: %d.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount), FormatNumber(HouseData[houseid][houseMoney]), HouseData[houseid][houseID]));
            Discord_Log(HOUSESAFELOG, sprintf("%s has deposited \"%s\" (current safe: %s) into their house id: %d.", ReturnName(playerid, 0), FormatNumber(amount), FormatNumber(HouseData[houseid][houseMoney]), HouseData[houseid][houseID]));
        }
        else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw from safe\nDeposit into safe", "Select", "Back");
    }
    return 1;
}

Dialog:HouseMoney(playerid, response, listitem, inputtext[])
{
    new
        houseid;

    if((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid) || GetAdminLevel(playerid) >= 8)
    {
        if(response)
        {
            switch (listitem)
            {
                case 0: Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw from safe", "Safe Balance: %s\n\nPlease enter how much money you wish to withdraw from the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));
                case 1: Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit into safe", "Safe Balance: %s\n\nPlease enter how much money you wish to deposit into the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));
            }
        }
        else House_OpenStorage(playerid, houseid);
    }
    return 1;
}

Dialog:HouseItems(playerid, response, listitem, inputtext[])
{
    new
        houseid,
        string[64];

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetAdminLevel(playerid) >= 5))
    {
        if(response)
        {
            if(HouseStorage[houseid][listitem][hItemExists])
            {
                PlayerData[playerid][pStorageItem] = listitem;
                PlayerData[playerid][pInventoryItem] = listitem;

                strunpack(string, HouseStorage[houseid][listitem][hItemName]);

                format(string, sizeof(string), "%s (Quantity: %d)", string, HouseStorage[houseid][listitem][hItemQuantity]);
                Dialog_Show(playerid, StorageOptions, DIALOG_STYLE_LIST, string, "Take Item\nStore Item", "Select", "Back");
            }
            else
            {
                if(!House_IsOwner(playerid, houseid))
                    return SendErrorMessage(playerid, "Hanya pemilik rumah yang dapat meletakkan item!");

                OpenInventory(playerid);
                PlayerData[playerid][pStorageSelect] = 1;
            }
        }
        else House_OpenStorage(playerid, houseid);
    }
    return 1;
}

Dialog:HouseStorage(playerid, response, listitem, inputtext[])
{
    new
        houseid = -1;

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetAdminLevel(playerid) >= 5 || GetFactionType(playerid) == FACTION_POLICE))
    {
        if(response)
        {
            if(listitem == 0)
            {
                House_ShowItems(playerid, houseid);
            }
            else if(listitem == 1)
            {
                if(PlayerData[playerid][pScore] < 2)
                    return SendErrorMessage(playerid, "You're not allowed to accese this storage if you're not level 2.");

                House_WeaponStorage(playerid, houseid);
            }
            else if(listitem == 2)
            {
                Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw from safe\nDeposit into safe", "Select", "Back");
            }
        }
    }
    else SendServerMessage(playerid, "Hanya dapat melihat isi penyimpanan, tidak dapat mengoperasikan isi didalamnya!");

    return 1;
}

Dialog:StorageOptions(playerid, response, listitem, inputtext[])
{
    new
        houseid = -1,
        itemid = -1,
//        backpack = -1,
        string[32];

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetAdminLevel(playerid) >= 5))
    {
        itemid = PlayerData[playerid][pStorageItem];

        strunpack(string, HouseStorage[houseid][itemid][hItemName]);

        if(response)
        {
            switch (listitem)
            {
                case 0:
                {
                    if(HouseStorage[houseid][itemid][hItemQuantity] == 1)
                    {
                        if(!strcmp(string, "Backpack") && Inventory_HasItem(playerid, "Backpack"))
                            return SendErrorMessage(playerid, "You already have a backpack in your inventory.");

                        for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
                            if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+1) > g_aInventoryItems[i][e_InventoryMax])
                                return SendErrorMessage(playerid, "You're limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], string);
                        }

                        if(Inventory_Add(playerid, string, HouseStorage[houseid][itemid][hItemModel], 1) != -1)
                        {
                            House_RemoveItem(houseid, string);
                            SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has taken a \"%s\" from their house storage.", ReturnName(playerid, 0), string);

                            House_ShowItems(playerid, houseid);
                            Log_Save(E_LOG_STORAGE, sprintf("[%s] %s has taken \"%s\" from house ID: %d.", ReturnDate(), ReturnName(playerid, 0), string, houseid));
                        }
                    }
                    else
                    {
                        Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "House Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, HouseStorage[houseid][itemid][hItemQuantity]);
                    }
                }
                case 1:
                {
                    if(!House_IsOwner(playerid, houseid))
                        return SendErrorMessage(playerid, "Hanya pemilik rumah yang dapat meletakkan item!");

                    new id = Inventory_GetItemID(playerid, string);

                    if(id == -1) {
                        House_ShowItems(playerid, houseid);

                        return SendErrorMessage(playerid, "You don't have anymore of this item to store!");
                    }
                    else if(InventoryData[playerid][id][invQuantity] == 1)
                    {
                        House_AddItem(houseid, string, InventoryData[playerid][id][invModel]);
                        Inventory_Remove(playerid, string);

                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has stored a \"%s\" into their house storage.", ReturnName(playerid, 0), string);
                        Log_Save(E_LOG_STORAGE, sprintf("[%s] %s has stored \"%s\" into their house ID: %d.", ReturnDate(), ReturnName(playerid, 0), string, houseid));
                        House_ShowItems(playerid, houseid);
                    }
                    else if(InventoryData[playerid][id][invQuantity] > 1) {
                        PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][id][invQuantity]);
                    }
                }
            }
        }
        else
        {
            House_ShowItems(playerid, houseid);
        }
    }
    return 1;
}

Dialog:RegisterScreen(playerid, response, listitem, inputtext[])
{
    if(!response) {
        SendServerMessage(playerid, "Gagal melakukan registrasi, anda keluar dari server.");
        KickEx(playerid);
    }
    else {
        if(strlen(inputtext) < 8 || strlen(inputtext) > 32)
            return Dialog_Show(playerid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Register to Diversity World", "{FFFFFF}Welcome to {00FFFF}Diversity World\n\n{FFFF00}UCP Account: %s\n{FFFFFF}Your UCP is doesn't exists\n{FFFFFF}Please input your Password for Register:\n\n"COL_GREY"ERROR: Password terlalu singkat, masukkan dengan minimal 8 karakter.", "Daftarkan", "Keluar", ReturnName(playerid));

        for (new i; i < 64; i++)
            AccountData[playerid][pSalt][i] = random(79) + 47;

        SHA256_PassHash(inputtext, AccountData[playerid][pSalt], AccountData[playerid][pPassword], 64);
        Dialog_Show(playerid, KonfirmasiPassword, DIALOG_STYLE_PASSWORD, "Konfirmasi password anda", ""WHITE"Masukkan password yang anda masukkan di kolom sebelumnya:", "Konfirmasi", "Kembali");
    }
    return 1;
}

Dialog:KonfirmasiPassword(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new hash[65];
        SHA256_PassHash(inputtext, AccountData[playerid][pSalt], hash, sizeof(hash));

        if(strcmp(hash, AccountData[playerid][pPassword]))
            return Dialog_Show(playerid, KonfirmasiPassword, DIALOG_STYLE_PASSWORD, "Konfirmasi password anda salah", ""WHITE"Masukkan password yang anda masukkan di kolom sebelumnya:\n\n"COL_GREY"ERROR: Password tidak sesuai, masukkan ulang password atau anda dapat ...\n... mengubahnya dengan password baru dengan menekan opsi 'Kembali'", "Konfirmasi", "Kembali");

        AccountData[playerid][pRegisterDate] = gettime();

        GetPlayerIp(playerid, AccountData[playerid][pIP], 16);
        GetPlayerName(playerid, AccountData[playerid][pUsername], MAX_PLAYER_NAME + 1);

        new query[500];
        mysql_format(g_iHandle, query, sizeof(query), "UPDATE `accounts` SET `Username` = '%s', `Password` = '%s', `Salt` = '%s', `IP` = '%s', `RegisterDate` = '%i', `Registered` = '1' WHERE `Username` = '%s'", AccountData[playerid][pUsername], SQL_ReturnEscaped(AccountData[playerid][pPassword]), SQL_ReturnEscaped(AccountData[playerid][pSalt]), AccountData[playerid][pIP], AccountData[playerid][pRegisterDate], ReturnName(playerid));
        mysql_query(g_iHandle, query, false);

        format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' LIMIT %d;", ReturnName(playerid), MAX_CHARACTERS);
        mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LIST_CHARACTERS);
    }
    else Dialog_Show(playerid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Register to Diversity World", "{FFFFFF}Welcome to {00FFFF}Diversity World\n\n{FFFF00}UCP Account: %s\n{FFFFFF}Your UCP is doesn't exists\n{FFFFFF}Please input your Password for Register:", "Daftarkan", "Keluar", ReturnName(playerid));
    return 1;
}

Dialog:PutEmail(playerid, response, listitem, inputtext[])
{
    new
        email_query[128];

    if (!response)
        return KickEx(playerid);

    if (!IsValidEmail(inputtext)) {
        SendErrorMessage(playerid, "Email yang anda masukkan tidak valid.");
        return Dialog_Show(playerid, PutEmail, DIALOG_STYLE_INPUT, "Email", WHITE"Tolong masukkan email dibawah ini untuk melakukan konfirmasi akun\nCek folder INBOX/SPAM untuk melihat kode verifikasi\n\nEmail valid: "YELLOW"@gmail.com, @hotmail.com", "Enter", "Quit");
    }

    format(AccountData[playerid][pMail], 32, inputtext);
    format(email_query, sizeof(email_query), "SELECT * FROM `accounts` WHERE `Email` = '%s' LIMIT 1;", SQL_ReturnEscaped(inputtext));
    mysql_tquery(g_iHandle, email_query, "OnQueryFinished", "dd", playerid, THREAD_VERIFY_EMAIL);
    return 1;
}

Dialog:PutCode(playerid, response, listitem, inputtext[])
{
    if(strcmp(AccountData[playerid][pVerifyCode], inputtext))
    {
        SendErrorMessage(playerid, "Kode Verifikasi salah, mohon di cek kembali.");
        return Dialog_Show(playerid, PutCode, DIALOG_STYLE_INPUT, "Kode Verifikasi", WHITE"Isi kode disini untuk memverifikasi akun kamu\n(kode sudah dikirimkan ke Direct Message discord oleh BOT F:LRP):", "Verifikasi", "Kembali");
    }

    SendClientMessage(playerid, X11_LIGHTBLUE, "ACCOUNT: {FFFFFF}Your ACP successfully activated!");
    new query[128];
    mysql_format(g_iHandle, query, 128, "UPDATE `accounts` SET `Active` = 1 WHERE `Username` = '%e'", ReturnName(playerid));
    mysql_tquery(g_iHandle, query);
    SQL_CheckAccount(playerid);
    return 1;
}

Dialog:LoginScreen(playerid, response, listitem, inputtext[])
{
    if(!response)
        return KickEx(playerid);

    if(isnull(inputtext))
        return Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "Login to Diversity World", "{FFFFFF}Welcome back to {00FFFF}Diversity World\n\n{FFFF00}UCP Account: %s\n{FFFFFF}Please input your password to login:\n\nWARNING: Masukkan password dengan benar, anda baru saja tidak memasukkan password.", "Masuk", "Keluar", ReturnName(playerid,0));

    new hash[65];
    SHA256_PassHash(inputtext, AccountData[playerid][pSalt], hash, sizeof(hash));

    if(strcmp(hash, AccountData[playerid][pPassword]))
    {
        if(++AccountData[playerid][pLoginAttempts] >= 3) {
            AccountData[playerid][pLoginAttempts] = 0;
            SendClientMessage(playerid, X11_TOMATO_1, "Notice: Anda telah di kick karena kesalahan 3 kali memasukkan password.");
            KickEx(playerid);
        }
        else {
            Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "Login to Diversity World", "{FFFFFF}Welcome back to {00FFFF}Diversity World\n\n{FFFF00}UCP Account: %s\n{FFFFFF}Please input your password to login:\n\n"COL_LIGHTRED"SECURITY: "WHITE"Kesempatan login tersisa "YELLOW"%d"WHITE"/"COL_RED"3 "WHITE"kali lagi.", "Masuk", "Keluar", ReturnName(playerid,0), AccountData[playerid][pLoginAttempts]);
            ShowPlayerFooter(playerid, "Password salah, coba lagi.", 1000);
        }
        return 1;
    }

    // if (strcmp(AccountData[playerid][pVerifyCode], "0")) {
    //     SetPVarInt(playerid, "Verifikasi", 1);
    //     return Dialog_Show(playerid, PutCode, DIALOG_STYLE_INPUT, "Kode Verifikasi", WHITE"Isi kode disini untuk memverifikasi email kamu\n(kode sudah dikirim ke email kamu secara otomatis (INBOX / SPAM FOLDER)):", "Verifikasi", "Cancel");
    // }

    new
        query[128];

    AccountData[playerid][pLogged] = 1;

    format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' LIMIT %d;", AccountData[playerid][pUsername], MAX_CHARACTERS);
    mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LIST_CHARACTERS);

    stop AccountData[playerid][pLoginTimer];

    return 1;
}

Dialog:Personal(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, Gender, DIALOG_STYLE_LIST, "Jenis Kelamin", "Laki-laki\nPerempuan", "Select", "Cancel");
            case 1: Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Masukkan tanggal lahir dengan mengikuti format (DD/MM/YYYY):", "Submit", "Cancel");
            case 2: Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Asal Karakter", "Silahkan memasukkan asal geografi dari karakter anda:", "Submit", "Cancel");
            case 3:
            {
                if(!strlen(PlayerData[playerid][pBirthdate]))
                    return SendErrorMessage(playerid, "Tanggal lahir belum di isi!.");

                else if(!strlen(PlayerData[playerid][pOrigin]))
                    return SendErrorMessage(playerid, "Asal karakter belum di isi.");

                else
                {
                    for (new i = 0; i < 10; i ++) {
                        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_registrasi][i]);
                    }
                    switch (PlayerData[playerid][pGender])
                    {
                        case 1: ShowModelSelectionMenu(playerid, "Pilih Pakaian Karakter", MODEL_SELECTION_SKIN, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);
                        case 2: ShowModelSelectionMenu(playerid, "Pilih Pakaian Karakter", MODEL_SELECTION_SKIN, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
                    }
                }
            }
        }
    }
    else 
    {
        KickEx(playerid);
    }
    return 1;
}

Dialog:Gender(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PlayerData[playerid][pGender] = listitem + 1;
        Dialog_Show(playerid, Personal, DIALOG_STYLE_LIST, "Character Settings",""WHITE"Gender\n{C0C0C0}Birth Date\n"WHITE"Origin Character\n"GREEN"Deploy Character!","Select","Kembali");
        PlayerData[playerid][pSkin] = (listitem) ? (233) : (98);
        SetPlayerSkinEx(playerid,PlayerData[playerid][pSkin]);
        SetTimerEx("SelectTD", 200, false, "d", playerid);
    }
    else Dialog_Show(playerid, Personal, DIALOG_STYLE_LIST, "Character Settings",""WHITE"Gender\n{C0C0C0}Birth Date\n"WHITE"Origin Character\n"GREEN"Deploy Character!","Select","Kembali");
    return 1;
}

Dialog:DateBirth(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
            iDay,
            iMonth,
            iYear,
            day,
            month,
            year;

        getdate(year, month, day);

        static const
                arrMonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

        if(sscanf(inputtext, "p</>ddd", iDay, iMonth, iYear)) {
            Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Tidak sesuai format, gunakan / di setiap tanggal/bulan/tahun!\n\nMasukkan tanggal lahir dengan mengikuti format (DD/MM/YYYY):", "Submit", "Cancel");
        }
        else if(iYear < 1900 || iYear > year) {
            Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Takun tidak sesuai!\n\nMasukkan tanggal lahir dengan mengikuti format (DD/MM/YYYY):", "Submit", "Cancel");
        }
        else if(iMonth < 1 || iMonth > 12) {
            Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Bulan tidak sesuai!\n\nMasukkan tanggal lahir dengan mengikuti format (DD/MM/YYYY):", "Submit", "Cancel");
        }
        else if(iDay < 1 || iDay > arrMonthDays[iMonth - 1]) {
            Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Hari tidak sesuai!\n\nMasukkan tanggal lahir dengan mengikuti format (DD/MM/YYYY):", "Submit", "Cancel");
        }
        else {
            format(PlayerData[playerid][pBirthdate], 24, inputtext);
            Dialog_Show(playerid, Personal, DIALOG_STYLE_LIST, "Character Settings",""WHITE"Gender\n{C0C0C0}Birth Date\n"WHITE"Origin Character\n"GREEN"Deploy Character!","Select","Kembali");
        }
    }
    else Dialog_Show(playerid, Personal, DIALOG_STYLE_LIST, "Character Settings",""WHITE"Gender\n{C0C0C0}Birth Date\n"WHITE"Origin Character\n"GREEN"Deploy Character!","Select","Kembali");
    return 1;
}

Dialog:Origin(playerid, response, listitem, inputtext[])
{
    if(response)
    {

        if(isnull(inputtext) || strlen(inputtext) <= 3 || strlen(inputtext) > 32)
            return Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Asal Karakter", "Silahkan memasukkan asal geografi dari karakter anda:", "Submit", "Cancel");

        for (new i = 0, len = strlen(inputtext); i != len; i ++) {
            if((inputtext[i] >= 'A' && inputtext[i] <= 'Z') || (inputtext[i] >= 'a' && inputtext[i] <= 'z') || (inputtext[i] >= '0' && inputtext[i] <= '9') || (inputtext[i] == ' ') || (inputtext[i] == ',') || (inputtext[i] == '.'))
                continue;

            else return Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Asal Karakter", "Error: Tidak dapat memasukkan data selain huruf dan angka.\n\nSilahkan memasukkan asal geografi dari karakter anda:", "Submit", "Cancel");
        }

        format(PlayerData[playerid][pOrigin], 32, inputtext);
        Dialog_Show(playerid, Personal, DIALOG_STYLE_LIST, "Character Settings",""WHITE"Gender\n{C0C0C0}Birth Date\n"WHITE"Origin Character\n"GREEN"Deploy Character!","Select","Kembali");
    }
    else Dialog_Show(playerid, Personal, DIALOG_STYLE_LIST, "Character Settings",""WHITE"Gender\n{C0C0C0}Birth Date\n"WHITE"Origin Character\n"GREEN"Deploy Character!","Select","Kembali");
    return 1;
}

Dialog:ChangePassword(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return cmd_changepass(playerid, "\0");

        new hash[65];
        SHA256_PassHash(inputtext, AccountData[playerid][pSalt], hash, sizeof(hash));

        if(strcmp(hash, AccountData[playerid][pPassword])) {
            cmd_changepass(playerid, "\0");
            SendServerMessage(playerid, "Password tidak sesuai, coba lagi");
        }
        else Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Password Baru", WHITE"Masukkan password barumu!\n\nMasukkan password yang sulit untuk diketahui orang lain.", "Ganti", "Keluar");
    }
    return 1;
}

Dialog:NewPass(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Password Baru", WHITE"Masukkan password barumu!\n\nMasukkan password yang sulit untuk diketahui orang lain.", "Ganti", "Keluar");

        if(strlen(inputtext) < 8 || strlen(inputtext) > 32)
            return Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Password Baru", WHITE"Masukkan password barumu!\n\nMasukkan password yang sulit untuk diketahui orang lain\n\nPassword minimal 8 karakter hingga 32 karakter!.", "Ganti", "Keluar");

        SHA256_PassHash(inputtext, AccountData[playerid][pSalt], AccountData[playerid][pPassword], 65);

        new output[400];
        format(output, sizeof output, "UPDATE `accounts` SET `Password` = '%s' WHERE `ID` = '%d';", AccountData[playerid][pPassword], GetUCPSQLID(playerid));
        mysql_tquery(g_iHandle, output);

        for(new i = 0; i != strlen(inputtext); i++)
            inputtext[i] = '*';

        SendServerMessage(playerid, "Sukses mengganti password ACPmu. [P: %s]", inputtext);
    }
    return 1;
}

Dialog:Aksesoris(playerid, response, listitem, inputtext[])
{
    new string[24];
    for (new id = 0; id != MAX_ACC; id++)
    if(response)
    {
        PlayerData[playerid][pAksesoris] = ListedAcc[playerid][listitem];

        format(string,sizeof(string),"Edit Accessory (#%d)",PlayerData[playerid][pAksesoris]);
        Dialog_Show(playerid, AksesorisEdit, DIALOG_STYLE_LIST, string, "Place %s\nChange Bone\nChange Placement\nChange Color 1\nChange Color 2\nRemove from list\nGive Accesories", "Select", "Exit", IsPlayerAttachedObjectSlotUsed(playerid, PlayerData[playerid][pAksesoris]) ? ("Off") : ("On"));
    }
    return 1;
}

Dialog:AksesorisEdit(playerid, response, listitem, inputtext[])
{
    new id = PlayerData[playerid][pAksesoris];
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid, id))
                {
                    RemovePlayerAttachedObject(playerid, id);
                    AccData[playerid][id][accShow] = 0;
                    Aksesoris_Save(playerid, id);
                }
                else 
                {
                    Aksesoris_Attach(playerid, id);
                }
            }
            case 1:
            {
                new string[256+1];
                for(new i; i < sizeof(accBones); i++)
                {
                    format(string,sizeof(string),"%s%s\n",string,accBones[i]);
                }
                Dialog_Show(playerid, AksesorisBone, DIALOG_STYLE_LIST, "Edit Bone",string,"Select","Close");
            }
            case 2:
            {
                if (EditingWeapon[playerid])
                    return SendClientMessage(playerid, -1, "You are on editing mode.");

                if(IsPlayerAttachedObjectSlotUsed(playerid, id))
                {
                    SendServerMessage(playerid, "Use "YELLOW"~k~~PED_SPRINT~"WHITE" to look around.");
                    EditAttachedObject(playerid, id);
                }
                else return SendCustomMessage(playerid, "ACCESORY","This accessory is not attached.");
            }
            case 3:
            {
                if(!IsPlayerAttachedObjectSlotUsed(playerid, id))
                    return SendCustomMessage(playerid, "ACCESORY","This accessory is not attached.");

                Dialog_Show(playerid, WarnaAksesoris, DIALOG_STYLE_INPUT, "Accessory Color 1",color_string, "Choose","Close");
                SetPVarInt(playerid, "Color", 1);
            }
            case 4:
            {
                if(!IsPlayerAttachedObjectSlotUsed(playerid, id))
                    return SendCustomMessage(playerid, "ACCESORY","This accessory is not attached.");

                Dialog_Show(playerid, WarnaAksesoris, DIALOG_STYLE_INPUT, "Accessory Color 2",color_string, "Choose","Close");
                SetPVarInt(playerid, "Color", 2);
            }
            case 5:
            {
                new string[128];
                AccData[playerid][id][accExists] = 0;
                AccData[playerid][id][accModel] = 0;

                if(IsPlayerAttachedObjectSlotUsed(playerid, id))
                {
                    RemovePlayerAttachedObject(playerid, id);
                    AccData[playerid][id][accShow] = 0;
                    Aksesoris_Save(playerid, id);
                }
                format(string,sizeof(string),"DELETE FROM `aksesoris` WHERE `ID`='%d'", AccData[playerid][id][accID]);
                mysql_tquery(g_iHandle, string);

                SendCustomMessage(playerid, "ACCESORY","You have removed accessory index #%d.", id);
            }
            case 6://Give Accesories
            {
                SetPVarInt(playerid, "ACCESORIES_ID", id);
                Dialog_Show(playerid, ACC_GIVE, DIALOG_STYLE_INPUT, "Accesories Give", "Input the player id that you want to give the accesories", "Give", "Close");
            }
        }
    }
    return 1;
}
RemovePlayerAccesories(playerid, slot)
{
    new 
        string[128];

    AccData[playerid][slot][accExists] = 0;
    AccData[playerid][slot][accModel] = 0;

    if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
    {
        RemovePlayerAttachedObject(playerid, slot);
        AccData[playerid][slot][accShow] = 0;
        Aksesoris_Save(playerid, slot);
    }
    format(string,sizeof(string),"DELETE FROM `aksesoris` WHERE `ID`='%d'", AccData[playerid][slot][accID]);
    mysql_tquery(g_iHandle, string);

    SendCustomMessage(playerid, "ACCESORY","You have give accessory index #%d.", slot);
    return 1;
}
GiveAccesoriesToPlayer(playerid, userid, slot)
{
    if(Aksesoris_GetCount(userid) > MAX_ACC)
    {
        return SendErrorMessage(playerid, "Slot aksesoris player ini sudah penuh.");
    }

    new 
        query[255]
    ;

    for (new i = 0; i != MAX_ACC; i++)
    { 
        if(!AccData[userid][i][accExists]) 
        {
            AccData[userid][i][accExists] = 1;

            format(AccData[userid][i][accName], 32, AccData[playerid][slot][accName]);

            AccData[userid][i][accModel] = AccData[playerid][slot][accModel];

            AccData[userid][i][accBone] = 1;

            PlayerData[userid][pAksesoris] = i;
            AccData[userid][i][accColor1][0] = AccData[userid][i][accColor1][1] = AccData[userid][i][accColor1][2] = 255;
            AccData[userid][i][accColor2][0] = AccData[userid][i][accColor2][1] = AccData[userid][i][accColor2][2] = 255;

            AccData[userid][i][accScale][0] = AccData[userid][i][accScale][1] = AccData[userid][i][accScale][2] = 1.0;

            RemovePlayerAccesories(playerid, slot);

            format(query,sizeof(query),"INSERT INTO `aksesoris` (`accID`) VALUES (%d)", PlayerData[userid][pID]);
            mysql_tquery(g_iHandle, query, "OnAksesorisCreated", "dd", userid, i);
            return i;
        }
    }
    return 1;
}
Dialog:ACC_GIVE(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new 
            id = GetPVarInt(playerid, "ACCESORIES_ID"),
            userid = strval(inputtext),
            string[255]
        ;
        if(userid == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, ACC_GIVE, DIALOG_STYLE_INPUT, "Accesories Give", "ERROR : Invalid player id\n\nInput the player id that you want to give the accesories", "Give", "Close");

        if(IsPlayerNearPlayer(playerid, userid, 5.0))
        {
            SetPVarInt(userid, "OFFERED_ACC", playerid);
            SendServerMessage(playerid, "You offer %s for your %s", ReturnName(userid), AccData[playerid][id][accName]);
            format(string, sizeof(string), "%s want to give their %s to your inventory", ReturnName(playerid), AccData[playerid][id][accName]);
            Dialog_Show(userid, ACC_ACCEPT, DIALOG_STYLE_MSGBOX, "Give Accesories", string, "Accept", "Decline");
        }
        else SendErrorMessage(playerid, "This player is not near you!");
    }
    return 1;
}
Dialog:ACC_ACCEPT(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new 
            userid = GetPVarInt(playerid, "OFFERED_ACC"),
            id = GetPVarInt(userid, "ACCESORIES_ID");

        GiveAccesoriesToPlayer(userid, playerid, id);
    }
    return 1;
}
Dialog:WarnaAksesoris(playerid, response, listitem, inputtext[])
{
    new id = PlayerData[playerid][pAksesoris];
    if(response)
    {
        new color = strval(inputtext);

        if(!(0 <= color <= sizeof(ColorList)-1))
            return SendErrorMessage(playerid, "Invalid color ID.");

        switch(GetPVarInt(playerid, "Color"))
        {
            case 1: GetRGB(ColorList[color], AccData[playerid][id][accColor1][0], AccData[playerid][id][accColor1][1], AccData[playerid][id][accColor1][2]);
            case 2: GetRGB(ColorList[color], AccData[playerid][id][accColor2][0], AccData[playerid][id][accColor2][1], AccData[playerid][id][accColor2][2]);
        }
        Aksesoris_Attach(playerid, id);
    }
    return 1;
}

Dialog:AksesorisBone(playerid, response, listitem, inputtext[])
{
    new id = PlayerData[playerid][pAksesoris];
    if(response)
    {
        AccData[playerid][id][accBone] = listitem+1;
        if(IsPlayerAttachedObjectSlotUsed(playerid, id))
        {
            RemovePlayerAttachedObject(playerid, id);
            AccData[playerid][id][accScale][0] = AccData[playerid][id][accScale][1] = AccData[playerid][id][accScale][2] = 1.0;
            AccData[playerid][id][accOffset][0] = AccData[playerid][id][accOffset][1] = AccData[playerid][id][accOffset][2] = 0.0;
            AccData[playerid][id][accRot][0] = AccData[playerid][id][accRot][1] = AccData[playerid][id][accRot][2] = 0.0;

            Aksesoris_Attach(playerid, id);
            EditAttachedObject(playerid, id);
        }
        SendCustomMessage(playerid, "ACCESORY","You have been changed accessory bone index #%d to %s", id, accBones[listitem]);
    }
    return 1;
}
Dialog:LaptopMenu(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                GetWarehouseStatus(playerid);
            }
            case 1:
            {
                Dialog_Show(playerid, eBank, DIALOG_STYLE_LIST, "E-Banking", "Bank Status\nCheck Salary\nTransfer\nBuy Phone Credits", "Choose", "Close");
            }
            case 2:
            {
                ShowAds(playerid);
            }
            case 3:
            {
                new vehicleid = Vehicle_Nearest(playerid, 5);
                static index;
                if((index = Vehicle_ReturnID(vehicleid)) != -1 && Vehicle_IsOwned(playerid, index))
                {
                    if(VehicleData[index][vehTurbo] == 0)
                        return SendErrorMessage(playerid, "You don't have any turbo installed on this vehicle");

                    if(VehicleData[index][vehTurbo] == 3)
                    {
                        Dialog_Show(playerid, ChangeSpeed, DIALOG_STYLE_LIST, "V-Engine Tuning", "Disable Turbo\nChange to Level 1 Turbo\nChange to Level 2 Turbo\nChange to Level 3 Turbo", "Change", "Close");
                    }

                    if(VehicleData[index][vehTurbo] == 2)
                    {
                        Dialog_Show(playerid, ChangeSpeed, DIALOG_STYLE_LIST, "V-Engine Tuning", "Disable Turbo\nChange to Level 1 Turbo\nChange to Level 2 Turbo", "Change", "Close");
                    }

                    if(VehicleData[index][vehTurbo] == 1)
                    {
                        Dialog_Show(playerid, ChangeSpeed, DIALOG_STYLE_LIST, "V-Engine Tuning", "Disable Turbo\nChange to Level 1 Turbo", "Change", "Close");
                    }
                }
                else SendErrorMessage(playerid, "You're not near your vehicle!");
            }
            case 4:
            {
                SendClientMessage(playerid, COLOR_WHITE, "Disabled for temporary");
            }
            case 5:
            {
                SendClientMessage(playerid, COLOR_WHITE, "Disabled for temporary");
            }
            case 6:
            {
                if(GetFactionType(playerid) != FACTION_GANG)
                    return SendErrorMessage(playerid, "Kamu tidak bergabung dalam official family.");

                Dialog_Show(playerid, Laptop, DIALOG_STYLE_LIST, "Laptop", "Informasi Pengiriman\nImport Materials\nImport Drugs\nImport Guns", "Select", "Close");
            }
        }
    }
    return 1;
}
Dialog:ChangeSpeed(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new vehicleid = Vehicle_Nearest(playerid, 5);
        static index;
        switch(listitem)
        {
            case 0:
            {
                if((index = Vehicle_ReturnID(vehicleid)) != -1 && Vehicle_IsOwned(playerid, index))
                {
                    DisableTurbo[vehicleid] = true;
                    SendClientMessage(playerid, COLOR_WHITE, "You "RED"disabled "WHITE"your turbo charge!");
                }
                else SendErrorMessage(playerid, "You're not near your vehicle!");
            }    
            case 1:
            {
                if((index = Vehicle_ReturnID(vehicleid)) != -1 && Vehicle_IsOwned(playerid, index))
                {
                    DisableTurbo[vehicleid] = false;
                    ChangeTurboOne[vehicleid] = true;
                    ChangeTurboTwo[vehicleid] = false;
                    ChangeTurboThree[vehicleid] = false;
                    SendClientMessage(playerid, COLOR_WHITE, "[Turbo] You "GREEN"enabled "WHITE"level 1 turbo charge!");
                }
                else SendErrorMessage(playerid, "You're not near your vehicle!");
            } 
            case 2:
            {
                if((index = Vehicle_ReturnID(vehicleid)) != -1 && Vehicle_IsOwned(playerid, index))
                {
                    DisableTurbo[vehicleid] = false;
                    ChangeTurboOne[vehicleid] = true;
                    ChangeTurboTwo[vehicleid] = true;
                    ChangeTurboThree[vehicleid] = false;
                    SendClientMessage(playerid, COLOR_WHITE, "[Turbo] You "GREEN"enabled "WHITE"level 2 turbo charge!");
                }
                else SendErrorMessage(playerid, "You're not near your vehicle!");
            } 
            case 3:
            {
                if((index = Vehicle_ReturnID(vehicleid)) != -1 && Vehicle_IsOwned(playerid, index))
                {
                    DisableTurbo[vehicleid] = false;
                    ChangeTurboOne[vehicleid] = true;
                    ChangeTurboTwo[vehicleid] = true;
                    ChangeTurboThree[vehicleid] = true;
                    SendClientMessage(playerid, COLOR_WHITE, "[Turbo] You "GREEN"enabled "WHITE"level 3 turbo charge!");
                }
                else SendErrorMessage(playerid, "You're not near your vehicle!");
            } 
        }
    }
    return 1;

}
Dialog:eBank(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                new 
                    dialog_string[100],
                    bankmoney = PlayerData[playerid][pBankMoney],
                    interest = (PlayerData[playerid][pBankMoney]/1000)
                ;
                format(dialog_string, sizeof(dialog_string), "%s"WHITE"Account Balance: "GREEN"%s\n", dialog_string, FormatNumber(bankmoney));
                format(dialog_string, sizeof(dialog_string), "%s"WHITE"Bank Interest: "GREEN"%s\n", dialog_string, FormatNumber(interest));
                Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Bank Account", dialog_string, "Close", "");
            }
            case 1:
            {
                ShowPlayerSalary(playerid);
            }
            case 2:
            {
                Dialog_Show(playerid, eTransfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));    
            }
            case 3:
            {
                Dialog_Show(playerid, ePhoneCredits, DIALOG_STYLE_INPUT, "Phone Credits", "Your bank account's balance: %s\n\nIt will cost you $500 for 11000 Phone Credits\n\nPlease enter the phone number:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));    
            }
        }
    }
}
Dialog:ePhoneCredits(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static targetid;
        if((targetid = GetNumberOwner(strval(inputtext))) != INVALID_PLAYER_ID && PlayerData[playerid][pBankMoney] >= 1000)
        {
            PlayerData[targetid][pCredits] += 11000;
            PlayerData[playerid][pBankMoney] -= 500;
            SendClientMessageEx(targetid, COLOR_WHITE, "%s just send you "YELLOW"11000 "WHITE"Phone Credits", ReturnName(playerid));
            SendClientMessageEx(playerid, COLOR_WHITE, "You just send %d phone number 11000 Credits, your bank balance now : %d", strval(inputtext), PlayerData[playerid][pBankMoney]);
        }
    }
    return 1;
}
Dialog:Laptop(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new amount = strval(inputtext);
        switch(listitem)
        {
            case 0:
            {
                for (new i = 0; i < MAX_DROP; i ++)
                {
                    if(importData[i][importOrdered])
                    {
                        new string[1024];
                        format(string, COLOR_WHITE, "Nama Faction : %s\nNama : %s\nBarang : %s\nJumlah : %d\nEstimasi Drop : %d Menit\nLokasi Drop : %s\n", importData[i][importFactionName],importData[i][importUsername], importData[i][importTypeName], importData[i][importJumlah], (importData[i][importTime]/60), importData[i][importLocName]);
                        Dialog_Show(playerid, importInfo, DIALOG_STYLE_MSGBOX, "Order Information", string, "Close", "");
                        return 1;
                    }
                }
                SendErrorMessage(playerid, "Tidak ada family/gang yang sedang melakukan import");
                return 1;
            }
            case 1:
            {
                if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);
                for (new i = 0; i != MAX_DROP; i ++) if(importData[i][importOrdered]) {
                    return SendErrorMessage(playerid, "There's an import on progress currently.");
                }
	            if((Inventory_Count(playerid, "Materials")+amount) > 50000)
	    	    return SendErrorMessage(playerid, "Kamu hanya dapat mengorder %d material kosongkan tas kamu terlebih dahulu jika ingin lebih.", (50000-Inventory_Count(playerid, "Materials")));

                Dialog_Show(playerid, importMaterials, DIALOG_STYLE_INPUT, "Materials Order", "Jumlah Order $10/Materials : ", "Order", "Cancel");
                return 1;
            }
            case 2:
            {
                if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);
                for (new i = 0; i != MAX_DROP; i ++) if(importData[i][importOrdered]) {
                    return SendErrorMessage(playerid, "There's an import on progress currently.");
                }
                new output[255];
                strcat(output, ""WHITE"Drugs\tPrice/grams\tMinimal Buy\n");
                strcat(output, "Marijuana\t$25/grams\t25 grams\n");
                strcat(output, "Heroin\t$35/grams\t25 grams\n");
                strcat(output, "Cocaine\t$45/grams\t50 grams");

                Dialog_Show(playerid, BuyDrugs, DIALOG_STYLE_TABLIST_HEADERS, "Drugs Order", output, "Choose", "Close");
            }
            case 3:
            {
                if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);
                for (new i = 0; i != MAX_DROP; i ++) if(importData[i][importOrdered]) {
                    return SendErrorMessage(playerid, "There's an import on progress currently.");
                }
                new output[255];
                strcat(output, ""WHITE"Weapons\tDurability/Ammo\tPrice\n");
                strcat(output, "Micro SMG\t700/700\t$60.000\n");
                strcat(output, "Carbine Rifle\t1000/1000\t$85.000\n");
                strcat(output, "Combat Shotgun\t500/500\t$120.000\n");
                strcat(output, "Sniper Rifle\t100/100\t$450.000\n");
                strcat(output, "Kevlar Vest\t100/100\t$2.000\n");

                Dialog_Show(playerid, BuyGuns, DIALOG_STYLE_TABLIST_HEADERS, "Weapons Order", output, "Choose", "Close");
            }
        }
    }
    return 1;
}
Dialog:BuyGuns(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                for(new i=0; i < MAX_DROP; i++)
                {  
                    if(!importData[i][importOrdered])
                    {
                        if(PlayerData[playerid][pBankMoney] < MICRO_PRICE)
                            return SendErrorMessage(playerid, "Uang yang kamu miliki dibank kurang untuk membeli Micro SMG!.");

                        importData[i][importType] = 5;
                        importCreate(playerid, 1);
                        SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"[LAPTOP] "WHITE"kamu telah mengorder "YELLOW"Micro SMG "WHITE"data lengkap silahkan check laptop!");
                        SendServerMessage(playerid, "Berhasil mengorder "YELLOW"Micro SMG "WHITE"dengan total harga "GREEN"$60.000.");
                        PlayerData[playerid][pBankMoney] -= MICRO_PRICE;
                        return 1;
                    }
                }
                return SendErrorMessage(playerid, "There's an import on progress currently.");                                
            }
            case 1:
            {
                for(new i=0; i < MAX_DROP; i++)
                {  
                    if(!importData[i][importOrdered])
                    {
                        if(PlayerData[playerid][pBankMoney] < M4_PRICE)
                            return SendErrorMessage(playerid, "Uang yang kamu miliki dibank kurang untuk membeli Carbine Rifle!.");

                        importData[i][importType] = 6;
                        importCreate(playerid, 1);
                        SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"[LAPTOP] "WHITE"kamu telah mengorder "YELLOW"Carbine Rifle "WHITE"data lengkap silahkan check laptop!");
                        SendServerMessage(playerid, "Berhasil mengorder "YELLOW"Carbine Rifle "WHITE"dengan total harga "GREEN"$85.000.");
                        PlayerData[playerid][pBankMoney] -= M4_PRICE;
                        return 1;
                    }
                }
                return SendErrorMessage(playerid, "There's an import on progress currently.");                                
            }
            case 2:
            {
                for(new i=0; i < MAX_DROP; i++)
                {  
                    if(!importData[i][importOrdered])
                    {
                
                        if(PlayerData[playerid][pBankMoney] < COMBAT_PRICE)
                            return SendErrorMessage(playerid, "Uang yang kamu miliki dibank kurang untuk membeli Combat Shotgun!.");

                        importData[i][importType] = 7;
                        importCreate(playerid, 1);
                        SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"[LAPTOP] "WHITE"kamu telah mengorder "YELLOW"Combat Shotgun "WHITE"data lengkap silahkan check laptop!");
                        SendServerMessage(playerid, "Berhasil mengorder "YELLOW"Combat Shotgun "WHITE"dengan total harga "GREEN"$125.000.");
                        PlayerData[playerid][pBankMoney] -= COMBAT_PRICE;
                        return 1;
                    }
                }
                return SendErrorMessage(playerid, "There's an import on progress currently.");                                
            }
            case 3:
            {
                for(new i=0; i < MAX_DROP; i++)
                {  
                    if(!importData[i][importOrdered])
                    {
                        if(PlayerData[playerid][pBankMoney] < SNIPER_PRICE)
                            return SendErrorMessage(playerid, "Uang yang kamu miliki dibank kurang untuk membeli Sniper Rifle!.");

                        importData[i][importType] = 8;
                        importCreate(playerid, 1);
                        SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"[LAPTOP] "WHITE"kamu telah mengorder "YELLOW"Sniper Rifle "WHITE"data lengkap silahkan check laptop!");
                        SendServerMessage(playerid, "Berhasil mengorder "YELLOW"Sniper Rifle "WHITE"dengan total harga "GREEN"$450.000.");
                        PlayerData[playerid][pBankMoney] -= SNIPER_PRICE;
                        return 1;
                    }
                }
                return SendErrorMessage(playerid, "There's an import on progress currently.");                                
            }
            case 4:
            {
                new amount = strval(inputtext);
                if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);
                for (new i = 0; i != MAX_DROP; i ++) if(importData[i][importOrdered]) {
                    return SendErrorMessage(playerid, "There's an import on progress currently.");
                }
	            if((Inventory_Count(playerid, "Kevlar Vest")+amount) > 10)
	    	    return SendErrorMessage(playerid, "Kamu hanya dapat mengorder %d armour kosongkan tas kamu terlebih dahulu jika ingin lebih.", (10-Inventory_Count(playerid, "Kevlar Vest")));

                Dialog_Show(playerid, importArmour, DIALOG_STYLE_INPUT, "Armour Order", "Jumlah Order $2000/Armour\n\n Max 10 Armour : ", "Order", "Cancel");                            
            }
        }
    }
    return 1;    
}
Dialog:importArmour(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, importArmour, DIALOG_STYLE_INPUT, "Armour Order", "Jumlah Order $2000/Armour\n\n Max 10 Armored Vest : ", "Order", "Cancel");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, importArmour, DIALOG_STYLE_INPUT, "Armour Order", "Jumlah Order $2000/Armour\n\n Max 10 Armored Vest : ", "Order", "Cancel");
        if(strval(inputtext) < 1 || strval(inputtext) > 10) return SendErrorMessage(playerid, "Kamu hanya bisa mengorder minimal 1 - maximal 10 Armored Vest!");
        if(PlayerData[playerid][pBankMoney] < (ARMOUR_PRICE*strval(inputtext)))
            return SendErrorMessage(playerid, "Uang yang kamu miliki dibank kurang untuk membeli %d Armored vest (%s).", strval(inputtext), FormatNumber(ARMOUR_PRICE*strval(inputtext)));

        SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"[LAPTOP] "WHITE"kamu telah mengorder "YELLOW"%d Armored vest "WHITE"data lengkap silahkan check laptop!", strval(inputtext));
        
        for(new i=0; i < MAX_DROP; i++)
        {  
            if(!importData[i][importOrdered])
            {
                importData[i][importType] = 9;
                importCreate(playerid, strval(inputtext));
                SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"[LAPTOP] "WHITE"kamu telah mengorder "YELLOW"Armored Vest "WHITE"data lengkap silahkan check laptop!");
                SendServerMessage(playerid, "Berhasil mengorder "YELLOW"Armored Vest "WHITE"dengan total harga "GREEN"%s.", FormatNumber(ARMOUR_PRICE*strval(inputtext)));
                PlayerData[playerid][pBankMoney] -= (ARMOUR_PRICE*strval(inputtext));
                return 1;
            }
        }
        SendErrorMessage(playerid, "There's an import on progress currently.");
        return 1;    
    }
    return 1;
}
Dialog:importMaterials(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, importMaterials, DIALOG_STYLE_INPUT, "Laptop Order", "Jumlah Order harga $2/Materials : ","Order", "Cancel");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, importMaterials, DIALOG_STYLE_INPUT, "Laptop Order", "Jumlah Order $2/Materials: ","Order", "Cancel");
        if(strval(inputtext) < 100 || strval(inputtext) > 50000) return SendErrorMessage(playerid, "Kamu hanya bisa mengorder minimal 100 - maximal 50000 materials!");
        if(PlayerData[playerid][pBankMoney] < (MULTIPLE_MATERIAL*strval(inputtext)))
            return SendErrorMessage(playerid, "Uang yang kamu miliki dibank kurang untuk membeli %d material (%s).", strval(inputtext), FormatNumber(MULTIPLE_MATERIAL*strval(inputtext)));

        SendClientMessageEx(playerid, COLOR_WHITE, ""YELLOW"[LAPTOP] "WHITE"kamu telah mengorder "YELLOW"%d materials "WHITE"data lengkap silahkan check laptop!", strval(inputtext));

        for(new i=0; i < MAX_DROP; i++)
        {  
            if(!importData[i][importOrdered])
            {
                importData[i][importType] = 1;
                importCreate(playerid, strval(inputtext));
                SendServerMessage(playerid, "Berhasil mengorder "YELLOW"%d material "WHITE"dengan total harga "GREEN"%s.", strval(inputtext), FormatNumber((MULTIPLE_MATERIAL*strval(inputtext))));
                PlayerData[playerid][pBankMoney] -= (MULTIPLE_MATERIAL*strval(inputtext));
                return 1;
            }
        }
        SendErrorMessage(playerid, "There's an import on progress currently.");
        return 1;
    }
    return 1;
}
Dialog:Help(playerid, response, listitem, inputtext[]) {
    if(response) {
        new help[450];
        switch(listitem) {
            case 0:
            {
                strcat(help, "ACCOUNT: /changepass, /lastlogged, /properties, /showidcard, /levels.");
            }
            case 1:
            {
                strcat(help, "/balance : Memperlihatkan jumlah uang yang ada di bank.\n");
                strcat(help, "/deposit : Menyimpan uang di bank.\n");
                strcat(help, "/withdraw: Menarik uang yang ada di dalam sampanan bank.");
            }
            case 2:
            {
                strcat(help, "BUSINESSES: /buy, /abandon, /bm, /lock, /bshipment, /refillgas.\n");
                strcat(help, "BUSINESSES: /leavejob To leave your job as business employee after taking a job from yellow page.\n");
                strcat(help, "BUSINESSES: /offermenu to give a customer menu list of business if you're working inside the business.\n");
                strcat(help, "BUSINESSES: /dutyshift to start working as employee inside the business.\n\n");
    
                strcat(help, "SALARY     : Anda akan mendapatkan salary anda setiap jamnya $1500\n");
                strcat(help, "ROLEPLAY   : Utamakan Roleplay sebelum offermenu!\n");
                strcat(help, "EXP        : Anda akan mendapatkan Roleplay Experience di /stats ketika kalian /offermenu ke player!\n");
                strcat(help, "/dutyshift : Anda diharuskan untuk duty shift sebelum bekerja di dalam business\n");
                strcat(help, "/offermenu : ketika anda sudah dutyshift anda bisa /offermenu kepada player untuk memberi list menu\n");
                strcat(help, "/bm        : anda bisa melihat management bisnis\n");
            }
            case 3:
            {
                strcat(help, "CHAT: /s(hout), /l(ow), /me, /do, /ame, /ado, /o(oc), /live.\n");
                strcat(help, "CHAT: /me(low), /do(low), /pr(low).");
            }
            case 4: {
                if(PlayerData[playerid][pFactionMod])
                    strcat(help, "FACTION: /createfaction, /editfaction, /destroyfaction.\n");

                if(PlayerData[playerid][pFaction] != -1)
                {
                    strcat(help, "FACTION: /online, /(f)ac, /flocker, /fdivname\n");

                    if(PlayerData[playerid][pFactionRank] >= FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
                        strcat(help, "FACTION: /finvite, /fremove, /frank, /offlineremove, /fmotd, /setdiv, /fdivname, /frankname\n");

                    if(GetFactionType(playerid) == FACTION_POLICE) {
                        strcat(help, "FACTION: /tazer, /cuff, /uncuff, /drag, /detain, /mdc, /trace, /arrest, /dept, (/plant seize).\n");
                        strcat(help, "FACTION: /ticket, /spike, /roadblock, /fingerprint, /impound, /revokeweapon, /icp(installcustomplate).\n");
                        strcat(help, "FACTION: /take, /kickdoor, /togsiren, /callsign, /checkseatbelt, /grantweapon, /revokelumber, /grantlumber\n");
                        strcat(help, "FACTION: /board, /f(action)r(adio), /odept, /(o)database /charge, /togspeedtrap\n");
                    }
                    else if(GetFactionType(playerid) == FACTION_NEWS)
                        strcat(help, "FACTION: /broadcast, /bc, /inviteguest, /removeguest, /board, /f(action)r(adio), /odept, /setdiv.\n");

                    else if(GetFactionType(playerid) == FACTION_MEDIC) {
                        strcat(help, "FACTION: /dept, /bandage, /loadinjured, /dropinjured /r(adio), /odept, /cure, /database.\n");
                        strcat(help, "FACTION: /inspect, /takepills, /setdiv, /togsiren, /grantbls, /revokebls.\n");
                    }
                    else if(GetFactionType(playerid) == FACTION_GOV) {
                        strcat(help, "FACTION: /seal ,/unseal, /dept, /board, /f(action)r(adio), /odept, /database.\n");
                        strcat(help, "FACTION: /givelicenses, /givecarlic, /setdiv.\n");
                    }
                    else if(GetFactionType(playerid) == FACTION_SADOC)
                    {
                        strcat(help, "FACTION: /tazer, /cuff, /uncuff, /drag, /detain, /mdc, /dept\n");
                        strcat(help, "FACTION: /r, /or, /pr, /radio, /oocradio, /odept\n");
                    }
                }
                else SendClientMessageEx(playerid, X11_GREY_60,"You're not in any faction");
            }
            case 5:
            {
                strcat(help, "FISHING: /fish, /cancelfish, /myfish, /sellfish, /buyrod, /buybait\n");
                strcat(help, "HUNTING: Beli hunting knife di ammunation store dan beli senjata api untuk hunting\n");
                strcat(help, "HUNTING: Tembak 2x pada hewan ketika sudah mati /gut untuk mengambil dagingnya\n");
                strcat(help, "HUNTING: Jual dagingnya di butcher /gps!");
            }
            case 6:
            {
                strcat(help, "GENERAL: /stats, /report, /atalk, /acc, /inventory, /seatbelt, /helmet.\n");
                strcat(help, "GENERAL: /approve, /sell, /cook, /vest, /usekit, /phone, /tickets, /payticket, /vote.\n");
                strcat(help, "GENERAL: /id, /call, /hangup, /text, /factions, /crates, /fill, /pay, /gps, /usedrug.\n");
                strcat(help, "GENERAL: /animhelp, /boombox, /channel, /disablecp, /stopanim, /weapons, /weapon.\n");
                strcat(help, "GENERAL: /shakehand, /showlicense, /frisk, /givegun, /picklock, /listafk, /bansrecord.\n");
                strcat(help, "GENERAL: /usepills, /givepills, /damages, /examine, /buymaterials, /refuel, /renthelp\n");
                strcat(help, "GENERAL: /relationship, /laptop, /getitem, /time, /buymaterials, /refuel, /renthelp\n");
                strcat(help, "GENERAL: /setfq /switchfq /breakcuff");                     
            }
            case 7: {
                strcat(help, "HOUSES: /buy, /sell, /abandon, /lock, /storage\n");
                strcat(help, "HOUSES: /doorbell, /switch, /furniture\n");
                strcat(help, "HOUSES: /hpark /hunpark /sharehousekey /removehousekey");
            }
            case 8: {
                switch (PlayerData[playerid][pJob])
                {
                    case JOB_COURIER:
                    {
                        strcat(help, "Perintah pekerjaan yang tersedia:\n");
                        strcat(help,"/cargo: Membeli box, menjual, meletakkan, dan sebagainya dan dapat di gunakan dengan 1 perintah utama yaitu '/cargo'.\n");
                        strcat(help,"/shipments: Membantu melihat bisnis yang akan di restock (hanya dapat di lakukan dalam kendaraan kerja).\n");
                        strcat(help,"/cancelshipment: Menolak shipment yang telah di pilih sebelumnya.\n");
                    }
                    case JOB_MECHANIC:
                    {
                        strcat(help, "Perintah pekerjaan yang tersedia:\n");
                        strcat(help,"/jobduty:     : Memulai maupun berhenti melakukan pekerjaan. (hanya dapat di lakukan dalam mechanic center)\n");
                        strcat(help,"/mechanicmenu : Memperlihatkan menu mekanik yang akan di kerjakan seperti repair, fix body, repair tires dan lainnya.\n");
                        strcat(help,"/paintcar     : Mengganti warna kendaraan.\n");
                        strcat(help,"/acceptcall   : Melihat penelpon yang membutuhkan jasa mekanik (dapat di lakukan jika job-duty).\n\n");
                        strcat(help,"NOTE: Kendaraan tow dapat di sewa ataupun di beli, gunakan perintah '"YELLOW"/v tow"WHITE"' untuk menggunakannya.\n");
                        strcat(help,"NOTE: Jika Anda job-duty dan meninggalkan mechanic center akan otomatis off-duty.\n");
                    }
                    case JOB_TAXI:
                    {
                        strcat(help, "Perintah pekerjaan yang tersedia:\n");
                        strcat(help, "/jobduty    : Memulai maupun berhenti melakukan pekerjaan.\n");
                        strcat(help, "/acceptcall : Melihat penelpon yang membutuhkan jasa TAXI (dapat di lakukan jika job-duty).\n");
                    }
                    case JOB_UNLOADER: strcat(help, "JOBS: /loadcrate.\n");
                    case JOB_MINER: 
                    {
                        strcat(help, "JOBS: Ketik /mine di daerah mining area , anda akan di beri crowbar untuk menghancurkan stone.\n");
                        strcat(help, "JOBS: Klik kiri mouse kalian di daerah mining ketika kalian sudah /mine.\n");
                        strcat(help, "JOBS: Tekan N untuk menjatuhkan atau membuah batu yang sudah kalian tambang.\n");
                    }
                    case JOB_FOOD_VENDOR:
                    {
                        strcat(help, "Perintah pekerjaan yang tersedia:\n");
                        strcat(help, "/sellfood  : Menjual berbagai makanan, hanya dapat dilakukan dalam mobil truck makanan.\n");
                        strcat(help, "/buyfood   : Membeli stock makanan dan di letakkan dalam kendaraan.\n");
                        strcat(help, "/checkfood : Memeriksa stock yang tersedia dalam kendaraan.\n");
                    }
                    case JOB_ARMS_DEALER:
                    {
                        strcat(help, "Perintah pekerjaan yang tersedia:\n");
                        strcat(help, "/creategun  : Membuat senjata, dapat dilakukan di Blackmarket.\n");
                        strcat(help, "/createammo : Menambah amunisi dari senjata yang di miliki.\n");
                    }
                    case JOB_FARMER:
                    {
                        strcat(help, "Perintah pekerjaan yang tersedia:\n");
                        strcat(help, "FARMER: Kamu menanam, harvest dan memulai perawatan tanaman di ladang, apa bila kamu relog tanaman kamu hilang.\n");
                        strcat(help, "FARMER: Kamu wajib memiliki traktor untuk melakukan pekerjaan ini!.\n");
                        strcat(help, "/plantwheat    : Menanam padi di ladang.\n");
                        strcat(help, "/harvestwheat  : Mencabut padi yang sudah siap di harvest.\n");
                        strcat(help, "/startfarming  : Memulai perawatan plant di ladang.\n");
                    }
                    case JOB_SORTER: SendCustomMessage(playerid,"JOBS", "/sorting.");
                    case JOB_LUMBERJACK:
                    {
                        strcat(help, "Perintah pekerjaan yang tersedia:\n");
                        strcat(help,"/buychainsaw  : Anda diharuskan untuk membeli chainwas terlebih dahulu, belilah di job point lumberjack seharga "COL_GREEN"$50.\n");
                        strcat(help,"/loadtree     : Memasukkan pohon yang telah di tebang ke dalam mobil, mobil dapat di beli ataupun di sewa.\n");
                        strcat(help,"/unloadtree   : Menjual pohon hasil tebang pada job point lumberjack dan di hargai "COL_GREEN"$50 "WHITE"per batang pohon.\n");
                        strcat(help,"NOTE: Anda dapat dengan mudah mencari pohon yang tersebar dengan menggunakan perintah '/gps > Find Tree'.\n");
                        strcat(help,"NOTE: Dilarang menyalah gunakan chainsaw untuk berbuat yang melanggar rules, jika ketahuan akan di "COL_RED"BANNED "WHITE"selama "YELLOW"3 hari.\n");
                    }
                    case JOB_HAULER:
                    {
                        strcat(help, "Perintah pekerjaan yang tersedia:\n");
                        strcat(help, "/loadcomponent : Anda diharuskan untuk membeli truck terlebih dahulu, lalu pergi ke warehouse trucker\n");
                        strcat(help, "/loadwoods     : Anda diharuskan untuk membeli truck terlebih dahulu, lalu pergi ke warehouse lumberjack\n");
                        strcat(help, "/deliverstock  : Anda diharuskan untuk berada di dalam kendaraan, lalu antar ke check point, maximal kapasitas kendaraan 50 package\n");
                        strcat(help, "/checktruck    : Anda diharuskan untuk berada di luar kendaraan, lalu gunakan command ini untuk melihat isi kapasitas truck\n");
                        strcat(help, "HURUF Y        : Ketika anda membawa barang yang di ambil, tekan Y dekat truck kalian untuk memasukan ke dalam truck\n");
                        strcat(help, "HURUF N        : Ketika anda membawa barang yang di ambil, tekan N untuk membuang item yang kalian pegang\n");

                    }
                    case JOB_NONE: 
                    {
                        SendErrorMessage(playerid, "You are unemployed at the moment.");
                    }
                }
            }
            case 9:
            {
                strcat(help, "PROPERTY: /buy, /sell, /abandon, /lock, /housecmds, /bizcmds.\n");
            }
            case 10:
            {
                strcat(help,"VEHICLE: /v [engine] [lock] [lights] [hood] [trunk] [track] [list]\n");
                strcat(help,"VEHICLE: /v [checkstorage] [sell] [unmod] [registration] [speedometer] [tow]\n");
                strcat(help,"VEHICLE: /sharekey, /removekey, /removeallkeys, /dropkey, /lockpick, /handbrake\n");
                strcat(help,"VEHICLE: /buyvacc /vehacc\n");
                strcat(help,"VEHICLE: Tekan "COL_RED"[Y] "WHITE"didalam kendaraan untuk mengoperasikan (engine, lock, dll).\n\n");
                strcat(help,"RENTAL VEHICLE: /rentvehicle, /unrentvehicle, /rentinfo, /renthelp\n");
            }
            case 11:
            {
                strcat(help, "WORKSHOP: /workshopmenu (/wm), /abandon, /sell.");
            }
            case 12:
            {
                strcat(help, "KEYS: "YELLOW"Y (dalam kendaraan): "WHITE"Untuk membuka menu kendaraan.\n");
                strcat(help, "KEYS: "YELLOW"C Tahan: "WHITE"Untuk animasi duduk. "YELLOW"C + SPACE: "WHITE"Untuk animasi mengangkat tangan.\n");
                strcat(help, "KEYS: "YELLOW"H: "WHITE"Untuk masuk/keluar entrance/business/dan lainnya. "YELLOW"C (jongkok) + N: "WHITE"Untuk mengambil item yang ada di dekatmu.\n");
            }
            case 13: Dialog_Show(playerid, SidejobGuide, DIALOG_STYLE_LIST, "Select Sidejob", "Trashmaster\nSweeper\nBus", "Select", "Close");
            case 14: cmd_viphelp(playerid, "\0");
            case 15:
            {
                strcat(help, "APARTMENT: /buy, /sell, /abandon, /lock, /astorage\n");
                strcat(help, "APARTMENT: /doorbell, /switch\n");
                strcat(help, "APARTMENT: /apark /aunpark");
            }
            case 16:
            {
                strcat(help, "ANIMATIONS: /animlibs -> Pilih library animasi -> Pilih Animasi -> Save Animation -> Masukan Slot\n");
                strcat(help, "ANIMATIONS: /anim, /anim [slot] -> Masukan slot animasi yang sudah kamu simpan tadi!");
            }
        }
        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "General Commands", help, "Close", ""); 
    }
    return 1;
}

Dialog:SidejobGuide(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Trashmaster Sidejob", ""WHITE"Pekerjaan trashmaster bertujuan untuk membersikhan sampah yang ada dikota ini.\n\n\
                Anda bisa menemukan pekerjaan dengan menggunakan GPS (/gps).\n\n\
                "COL_LIGHTGREEN"Langkah-langkah:"WHITE"\n\
                * Pergi ke lokasi kerja.\n\
                * Baca dialog yang di berikan untuk melihat peraturan sebelum memulai pekerjaan.\n\
                * Jika setuju dengan aturan, kendarai mobil ke arah yang di tandai di radar map anda.\n\
                * Anda akan melihat tampilan di sebelah kiri layar, tampilan itu sebagai indikator (bantuan)-\n  \
                  untuk melihat jumlah sampah yang ada di mobil anda.\n\
                * Kumpul lah sampah sebanyak mungkin, setelah itu bawa kembali ke lokasi kerja untuk-\n  \
                  menukarkan dengan bonus.\n\n\
                "COL_LIGHTGREEN"Perintah:"WHITE"\n\
                * /collecttrash: mengambil sampah dan menaruhnya dimobil.\n\
                * /droptrash: menukarkan sampah untuk mendapatkan bonus.\n\n\
                "COL_LIGHTGREEN"Penting:"WHITE"\n\
                * Saat berada dalam mobil, jangan coba untuk turun sebelum anda menghentikan pekerjaan-\n  \
                  itu akan membuat anda gagal dan tidak mendapatkan bonus.\n\
                * Anda akan delay 15 menit setelah melakukan pekerjaan ini, termasuk gagal saat bekerja.", "Close", "");
        }
    }
    return 1;
}

Dialog:FurnitureHouse(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPlayerPosEx(playerid, arrHouseInteriors[listitem][eHouseX], arrHouseInteriors[listitem][eHouseY], arrHouseInteriors[listitem][eHouseZ]);
        SetPlayerFacingAngle(playerid, arrHouseInteriors[listitem][eHouseAngle]);
        SetPlayerInterior(playerid, arrHouseInteriors[listitem][eHouseInterior]);

        SendServerMessage(playerid,"You have teleport to %s", arrHouseInteriors[listitem][eHouseDesc]);
    }
    return 1;
}

Dialog:BM_WeaponMenu(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new index = -1;

        if((index = Return_CategoryID(inputtext)) != -1)
        {
            selectCategory[playerid] = index;
            ShowWeapons(playerid);
        }
        else SendErrorMessage(playerid, "Anda memilih kategori yang salah");
    }
    return 1;
}

Dialog:BM_Category(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, BM_Category, DIALOG_STYLE_INPUT, "Add Category", "Nama tidak boleh kosong\nMaksukkan nama kategory di bawah ini:", "Create", "Close");

        new Cache:check;
        check = mysql_query(g_iHandle, sprintf("SELECT `Name` FROM `category` WHERE `Name`='%s'", inputtext));

        if(!cache_num_rows())
        {
            mysql_tquery(g_iHandle, sprintf("INSERT INTO `category` (`ID`, `Name`) VALUES (NULL, '%s')", SQL_ReturnEscaped(inputtext)));
            SendServerMessage(playerid, "Sukses melakukan penambahan kategori pada marketplace (%s).", inputtext);
        }
        else SendErrorMessage(playerid, "Kategori sudah terdaftar dengan nama yang sama.");

        cache_delete(check);
    }
    return 1;
}

Dialog:BM_Weaplist(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new weaponid = listitem+1;
        if(weaponid >= 19 && weaponid < 22)
        {
            SendErrorMessage(playerid, "Invalid weapon.");
            ShowWeaponList(playerid);
            return 1;
        }

        SetPVarInt(playerid, "addingWeaponID", weaponid);
        Dialog_Show(playerid, BM_AddAmmo, DIALOG_STYLE_INPUT, "Add Weapon > Ammo", ""WHITE"Berapa banyak amunisi untuk senjata "YELLOW"%s"WHITE":", "Next", "Close", ReturnWeaponName(weaponid));
    }
    return 1;
}

Dialog:BM_AddAmmo(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, BM_AddAmmo, DIALOG_STYLE_INPUT, "Add Weapon > Ammo", ""WHITE"Amunisi harus di isi.\n\nBerapa banyak amunisi untuk senjata "YELLOW"%s"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")));
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, BM_AddAmmo, DIALOG_STYLE_INPUT, "Add Weapon > Ammo", ""WHITE"Masukkan angka tidak huruf maupun simbol.\n\nBerapa banyak amunisi untuk senjata "YELLOW"%s"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")));
        SetPVarInt(playerid, "addingWeaponAmmo", strval(inputtext));
        Dialog_Show(playerid, BM_Price, DIALOG_STYLE_INPUT, "Add Weapon > Price", ""WHITE"Harga untuk senjata "YELLOW"%s (%d)"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")), strval(inputtext));
    }
    else ShowWeaponList(playerid);
    return 1;
}

Dialog:BM_Price(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, BM_Price, DIALOG_STYLE_INPUT, "Add Weapon > Price", ""WHITE"Price can't be null\nHarga untuk senjata "YELLOW"%s (%d)"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")), GetPVarInt(playerid, "addingWeaponAmmo"));
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, BM_Price, DIALOG_STYLE_INPUT, "Add Weapon > Price", ""WHITE"Price must be numeric\nHarga untuk senjata "YELLOW"%s (%d)"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")), GetPVarInt(playerid, "addingWeaponAmmo"));
        SetPVarInt(playerid, "addingWeaponPrice", strval(inputtext));
        Dialog_Show(playerid, BM_Type, DIALOG_STYLE_LIST, "Add Weapon > Type", "Normal Player\nOfficial Family\nVerified Member", "Next", "Back");
    }
    else Dialog_Show(playerid, BM_AddAmmo, DIALOG_STYLE_INPUT, "Add Weapon > Ammo", ""WHITE"Berapa banyak amunisi untuk senjata "YELLOW"%s"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")));
    return 1;
}

Dialog:BM_Type(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "addingWeaponType", listitem);
        Dialog_Show(playerid, BM_Day, DIALOG_STYLE_LIST, "Add Weapon > Day", ""COL_RED"Minggu\n"WHITE"Senin\nSelasa\nRabu\nKamis\nJum'at\nSabtu", "Next", "Back");
    }
    else Dialog_Show(playerid, BM_Price, DIALOG_STYLE_INPUT, "Add Weapon > Price", ""WHITE"Harga untuk senjata "YELLOW"%s (%d)"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")), GetPVarInt(playerid, "addingWeaponAmmo"));
    return 1;
}

Dialog:BM_Day(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "addingWeaponDay", listitem+1);
        ShowCategories(playerid, 3);
    }
    else Dialog_Show(playerid, BM_Type, DIALOG_STYLE_LIST, "Add Weapon > Type", "Normal Player\nOfficial Family\nVarified Member", "Next", "Back");
    return 1;
}

Dialog:BM_ChooseCategory(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new index = -1;

        if((index = Return_CategoryID(inputtext)) != -1)
        {
            new
                weapon = GetPVarInt(playerid, "addingWeaponID"),
                ammo = GetPVarInt(playerid, "addingWeaponAmmo"),
                price = GetPVarInt(playerid, "addingWeaponPrice"),
                type = GetPVarInt(playerid, "addingWeaponType"),
                day = GetPVarInt(playerid, "addingWeaponDay"),
                query[255];

            format(query, sizeof(query), "INSERT INTO `weapons` (`WeaponID`, `Ammo`, `Price`, `Authority`, `Day`, `Category`, `Enable`) VALUES ('%d', '%d', '%d', '%d', '%d', '%d', '0')",
                weapon,
                ammo,
                price,
                type,
                day,
                index
            );
            mysql_tquery(g_iHandle, query);

            SendServerMessage(playerid, "Sukses meletakkan senjata ke dalam kategori.");
        }
    }
    else Dialog_Show(playerid, BM_Price, DIALOG_STYLE_INPUT, "Add Weapon > Price", ""WHITE"Harga untuk senjata "YELLOW"%s (%d)"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")), GetPVarInt(playerid, "addingWeaponAmmo"));
    return 1;
}

Dialog:BM_RemoveCategory(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new index = -1;

        if((index = Return_CategoryID(inputtext)) != -1)
        {
            mysql_tquery(g_iHandle, sprintf("DELETE FROM `category` WHERE ID = '%d'", index));
            mysql_tquery(g_iHandle, sprintf("DELETE FROM `weapons` WHERE `Category` = '%d'", index));

            SendServerMessage(playerid, "Sukses melakukan penghapusan kategory \"%s\".", inputtext);
        }
        else SendErrorMessage(playerid, "Anda memilih kategori yang salah");
    }
    return 1;
}

Dialog:BM_RenameCategory(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new index = -1;

        if((index = Return_CategoryID(inputtext)) != -1)
        {
            SetPVarInt(playerid, "renameCategory", index);
            Dialog_Show(playerid, "BM_RenameCategory1", DIALOG_STYLE_INPUT, "Rename Category",""WHITE"Category: %s\nMasukkan nama baru:", "Rename", "Close", inputtext);
        }
        else SendErrorMessage(playerid, "Anda memilih kategori yang salah");
    }
    return 1;
}

Dialog:BM_RenameCategory1(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) Dialog_Show(playerid, "BM_RenameCategory1", DIALOG_STYLE_INPUT, "Rename Category",""WHITE"Nama harus di isi\nMasukkan nama baru:", "Rename", "Close");
        mysql_tquery(g_iHandle, sprintf("UPDATE `category` SET Name='%s' WHERE ID=%d", inputtext, GetPVarInt(playerid, "renameCategory")));
        DeletePVar(playerid, "renameCategory");

        SendServerMessage(playerid, "Sukses menamai kategori dengan nama baru.");
    }
    return 1;
}

Dialog:BM_RemoveWeapon(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new index = -1;

        if((index = Return_CategoryID(inputtext)) != -1)
        {
            selectCategory[playerid] = index;

            ShowWeapons(playerid, 1, 1);
        }
        else SendErrorMessage(playerid, "Anda memilih kategori yang salah");
    }
    return 1;
}

Dialog:BM_RemoveFinal(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new weapon, price, ammo, authority;
        if(Category_GetWeaponData(selectCategory[playerid], listitem, weapon, ammo, price, authority))
        {
            mysql_tquery(g_iHandle, sprintf("DELETE FROM weapons WHERE WeaponID='%d' AND Ammo='%d' AND Price='%d' AND Authority='%d' AND Category='%d'", weapon, ammo, price, authority, selectCategory[playerid]));
            selectCategory[playerid] = -1;
            SendServerMessage(playerid, "Weapon removed!");
        }
        else SendErrorMessage(playerid, "Tidak ada senjata dalam kategori ini.");
    }
    return 1;
}

Dialog:BM_BuyWeapon(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        selectIndex[playerid] = listitem;

        new weapon, ammo, price, authority;
        if(Category_GetWeaponData(selectCategory[playerid], selectIndex[playerid], weapon, ammo, price, authority)) {
            if(price > GetMoney(playerid)) return SendErrorMessage(playerid, "Uang anda tidak cukup.");
            switch(authority)
            {
                case 1:
                {
                    if(GetFactionType(playerid) != FACTION_GANG)
                        return SendErrorMessage(playerid, "This weapon authority for official member.");
                }
                case 2:
                {
                    if(!PlayerData[playerid][pGunAuthority])
                        return SendErrorMessage(playerid, "This weapon authority for verified member.");
                }
            }

            switch(weapon)
            {
                case 1 .. 18, 46:
                {
                    new str[96];
                    format(str, sizeof(str), "bought %s from black market", ReturnWeaponName(weapon));

                    GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, str);
                    GivePlayerWeaponEx(playerid, weapon, ammo);

                    SendCustomMessage(playerid, "Black Market", "Pembelian selesai");
                    SendCustomMessage(playerid, "Black Market", "%s "WHITE"bayaran untuk {F1C40F}%s "WHITE"dengan {F1C40F}%d "WHITE"amunisi", FormatNumber(price), ReturnWeaponName(weapon), ammo);

                    mysql_tquery(g_iHandle, sprintf("UPDATE weapons SET Enable=1 WHERE WeaponID='%d' AND Ammo='%d' AND Price='%d' AND Category='%d'", weapon, ammo, price, selectCategory[playerid]));
                }
                default: Dialog_Show(playerid, BM_BuyFinal, DIALOG_STYLE_INPUT, "Marketplace > Buy Weapon", ""WHITE"Anda akan membeli sebuah {F1C40F}%s "WHITE"dengan {F1C40F}%d "WHITE"amunisi.\n\nHarga: {2ECC71}%s\n\n"WHITE"Berapa banyak kelipatan yang akan anda beli dengan item ini?", "Buy", "Close", ReturnWeaponName(weapon), ammo, FormatNumber(price));
            }
        }
        else SendErrorMessage(playerid, "Tidak ada senjata dalam kategori ini.");
    }
    return 1;
}
//Dialog Fightstyle
//KickPunch Style $250\nBoxing Style $350\nKungfu Style $450\nKneehead Style $650\n Grabkick Style $850\n Elbow Style $1500
Dialog:fightStyle(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: {
                if(PlayerData[playerid][pMoney] < 250) return SendCustomMessage(playerid, "Gym Center", "Kamu tidak punya cukup uang untuk training ini!");
                SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);//0
                SendCustomMessage(playerid, "Gym Center", "Training selesai, kamu telah mempelajari bela diri kick and punch");
				PlayerData[playerid][pFightStyle] = 0;
				GiveMoney(playerid, -250, ECONOMY_ADD_SUPPLY, "training gym");
			}
            case 1: {
                if(PlayerData[playerid][pMoney] < 350) return SendCustomMessage(playerid, "Gym Center", "Kamu tidak punya cukup uang untuk training ini!");
                SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);//1
                SendCustomMessage(playerid, "Gym Center", "Training selesai, kamu telah mempelajari bela diri boxing");
                PlayerData[playerid][pFightStyle] = 1;
                GiveMoney(playerid, -350, ECONOMY_ADD_SUPPLY, "training gym");
			}
            case 2: {
                if(PlayerData[playerid][pMoney] < 450) return SendCustomMessage(playerid, "Gym Center", "Kamu tidak punya cukup uang untuk training ini!");
                SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);//2
                SendCustomMessage(playerid, "Gym Center", "Training selesai, kamu telah mempelajari bela diri kungfu");
                PlayerData[playerid][pFightStyle] = 2;
                GiveMoney(playerid, -450, ECONOMY_ADD_SUPPLY, "training gym");
			}
            case 3: {
                if(PlayerData[playerid][pMoney] < 650) return SendCustomMessage(playerid, "Gym Center", "Kamu tidak punya cukup uang untuk training ini!");
                SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);//3
                SendCustomMessage(playerid, "Gym Center", "Training selesai, kamu telah mempelajari bela diri kneehead");
                PlayerData[playerid][pFightStyle] = 3;
                GiveMoney(playerid, -650, ECONOMY_ADD_SUPPLY, "training gym");
			}
            case 4: {
                if(PlayerData[playerid][pMoney] < 850) return SendCustomMessage(playerid, "Gym Center", "Kamu tidak punya cukup uang untuk training ini!");
                SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);//4
                SendCustomMessage(playerid, "Gym Center", "Training selesai, kamu telah mempelajari bela diri grab and kick");
                PlayerData[playerid][pFightStyle] = 4;
                GiveMoney(playerid, -850, ECONOMY_ADD_SUPPLY, "training gym");
			}
        }
    }
    return 1;
}
Dialog:BM_BuyFinal(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new times = strval(inputtext);
        if(!(0 < times <= 5)) return SendErrorMessage(playerid, "Anda hanya bisa membeli antara 0 sampai dengan 5.");

        new weapon, ammo, price, type;
        if(Category_GetWeaponData(selectCategory[playerid], selectIndex[playerid], weapon, ammo, price, type)) {
            price = (price * times);
            ammo = (ammo * times);
            if(price > GetMoney(playerid)) return SendErrorMessage(playerid, "Uang anda tidak cukup.");

            new str[64];
            format(str, sizeof(str), "bought %s ammo from black market", ReturnWeaponName(weapon));

            GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, str);
            GivePlayerWeaponEx(playerid, weapon, ammo);

            SendCustomMessage(playerid, "Black Market", "Pembelian selesai");
            SendCustomMessage(playerid, "Black Market", "%s "WHITE"bayaran untuk {F1C40F}%s "WHITE"dengan {F1C40F}%d "WHITE"amunisi", FormatNumber(price), ReturnWeaponName(weapon), ammo);

            mysql_tquery(g_iHandle, sprintf("UPDATE weapons SET Enable=1 WHERE WeaponID='%d' AND Ammo='%d' AND Price='%d' AND Category='%d'", weapon, ammo, price, selectCategory[playerid]));
        }
        else SendErrorMessage(playerid, "Tidak ada senjata dalam kategori ini.");
    }
    return 1;
}

//--------------------------
Dialog:BuyCrate(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static
            id = -1;

        switch(listitem)
        {
            case 0: {
                GiveMoney(playerid, -300, ECONOMY_ADD_SUPPLY, "bought crate");
                id = Crate_Create(playerid,(listitem+1), -2157.2009,-246.4058,36.5156,182.1140);
                if(id == -1) return SendErrorMessage(playerid, "The server has reached the limit for crates.");
                SendServerMessage(playerid, "You have successfully order a crate, now the crate in near table in back you.");
                SetPlayerWaypoint(playerid, "Crate Spawn", -2157.2009,-246.4058,36.5156);
            }
            case 1: {
                GiveMoney(playerid, -700, ECONOMY_ADD_SUPPLY, "bought crate");
                id = Crate_Create(playerid,(listitem+1), -2160.7009,-246.4058,36.5156,182.1140);
                if(id == -1) return SendErrorMessage(playerid, "The server has reached the limit for crates.");
                SendServerMessage(playerid, "You have successfully order a crate, now the crate in near table in back you.");
                SetPlayerWaypoint(playerid, "Crate Spawn", -2160.7009,-246.4058,36.5156);
            }
            case 2: {
                GiveMoney(playerid, -1200, ECONOMY_ADD_SUPPLY, "bought crate");
                id = Crate_Create(playerid,(listitem+1), -2164.2009,-246.4058,36.5156,182.1140);
                if(id == -1) return SendErrorMessage(playerid, "The server has reached the limit for crates.");
                SendServerMessage(playerid, "You have successfully order a crate, now the crate in near table in back you.");
                SetPlayerWaypoint(playerid, "Crate Spawn", -2164.2009,-246.4058,36.5156);
            }
            case 3: {
                GiveMoney(playerid, -800, ECONOMY_ADD_SUPPLY, "bought crate");
                id = Crate_Create(playerid,(listitem+1), -2174.7009,-246.6339,36.5156,182.1140);
                if(id == -1) return SendErrorMessage(playerid, "The server has reached the limit for crates.");
                SendServerMessage(playerid, "You have successfully order a crate, now the crate in near table in back you.");
                SetPlayerWaypoint(playerid, "Crate Spawn", -2174.7009,-246.6339,36.5156);
            }
            case 4: {
                GiveMoney(playerid, -1500, ECONOMY_ADD_SUPPLY, "bought crate");
                id = Crate_Create(playerid,(listitem+1), -2171.2009,-246.6339,36.5156,182.1140);
                if(id == -1) return SendErrorMessage(playerid, "The server has reached the limit for crates.");
                SendServerMessage(playerid, "You have successfully order a crate, now the crate in near table in back you.");
                SetPlayerWaypoint(playerid, "Crate Spawn", -2171.2009,-246.6339,36.5156);
            }
            case 5: Dialog_Show(playerid, BuySeeds, DIALOG_STYLE_LIST, "Buy Seeds", "Marijuana Seeds\nCocaine Seeds\nHeroin Opium Seeds", "Buy", "Close");
        }
    }
    return 1;
}
Dialog:FoodCourt(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                if(Inventory_Count(playerid, "Stamps") < 15)
        	        return SendErrorMessage(playerid, "You don't have enough stamps.");

                SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+35);
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid 15 and received a bread.", ReturnName(playerid, 0));
                ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                Inventory_Remove(playerid, "Stamps", 15);
            }
            case 1:
            {
                if(Inventory_Count(playerid, "Stamps") < 20)
        	        return SendErrorMessage(playerid, "You don't have enough stamps.");

                SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+50);
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid 20 and received a vegetables soup.", ReturnName(playerid, 0));
                ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                Inventory_Remove(playerid, "Stamps", 20);
                
            }
            case 2:
            {
                if(Inventory_Count(playerid, "Stamps") < 10)
        	        return SendErrorMessage(playerid, "You don't have enough stamps.");

                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "** %s has paid 10 and received a sprunk.", ReturnName(playerid, 0));
                Inventory_Remove(playerid, "Stamps", 10);                    
            }
        }
    }
    return 1;
}
Dialog:BuySeeds(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "BuySeedsType", listitem);
        SetPVarString(playerid, "BuySeedsName", inputtext);
        Dialog_Show(playerid, BuySeedsValue, DIALOG_STYLE_INPUT, "Amount of Seeds", WHITE"Berapa banyak bibit yang akan kamu beli? "YELLOW"(minimal 50 bibit):", "Beli", "Tolak");
    }
    return 1;
}

Dialog:BuySeedsValue(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new plantName[20];

        if(!(50 <= strval(inputtext) <= 200))
            return Dialog_Show(playerid, BuySeedsValue, DIALOG_STYLE_INPUT, "Amount of Seeds", WHITE"(error): jumlah hanya dibatasi 50 sampai 200!\n\nBerapa banyak bibit yang akan kamu beli? "YELLOW"(minimal 50 bibit)", "Beli", "Tolak");

        if(GetMoney(playerid) < (strval(inputtext) * 10))
            return SendErrorMessage(playerid, "Uang tidak mencukupi untuk sebanyak itu!");

        switch(GetPVarInt(playerid, "BuySeedsType"))
        {
            case 0:
            {
                if(Inventory_Add(playerid, "Marijuana Seeds", 1578, strval(inputtext)) == -1)
                    return 1;
            }
            case 1:
            {
                if(Inventory_Add(playerid, "Cocaine Seeds", 1575, strval(inputtext)) == -1)
                    return 1;
            }
            case 2:
            {
                if(Inventory_Add(playerid, "Heroin Opium Seeds", 1577, strval(inputtext)) == -1)
                    return 1;
            }
        }

        GiveMoney(playerid, -(strval(inputtext) * 10), ECONOMY_ADD_SUPPLY, "bought plant seed");

        GetPVarString(playerid, "BuySeedsName", plantName, sizeof(plantName));
        SendServerMessage(playerid, "Sukses membeli "YELLOW"%s "GREEN"(%s)"WHITE". (gunakan perintah '/plant' untuk menanam)", plantName, FormatNumber(strval(inputtext) * 10));
    }
    return 1;
}

Dialog:BuyDrugs(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "BuyDrugsType", listitem);
        SetPVarString(playerid, "BuyDrugsName", inputtext);
        Dialog_Show(playerid, BuyDrugsValue, DIALOG_STYLE_INPUT, "Import Order", WHITE"Berapa banyak yang akan kamu import untuk "YELLOW"%s:", "Order", "Cancel", inputtext);

    }
    return 1;
}


Dialog:BuyDrugsValue(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new drugType, drugName[20], minBuy[] = {25, 25, 50}, drugPrice[] = {25, 35, 45};

        GetPVarString(playerid, "BuyDrugsName", drugName, sizeof(drugName));
        drugType = GetPVarInt(playerid, "BuyDrugsType");

        if(!(minBuy[drugType] <= strval(inputtext) <= 1000))
            return Dialog_Show(playerid, BuyDrugsValue, DIALOG_STYLE_INPUT, "Amount of Drugs", WHITE"(error): jumlah hanya dibatasi %d sampai 1000!\n\nBerapa banyak yang akan kamu import untuk "YELLOW"%s:", "Beli", "Tolak", minBuy[drugType], drugName);

        if(PlayerData[playerid][pBankMoney] < (strval(inputtext) * drugPrice[drugType]))
            return SendErrorMessage(playerid, "Uang dibank tidak mencukupi untuk sebanyak itu (%s)!", FormatNumber(strval(inputtext) * drugPrice[drugType]));
        for(new i=0; i < MAX_DROP; i++) 
        {
            if(!importData[i][importOrdered])
            {
                switch(drugType)
                {
                    case 0:
                    {
                        importData[i][importType] = 2; //Marijuana
                        importCreate(playerid, strval(inputtext));
                    }
                    case 1:
                    {
                        importData[i][importType] = 3; //Heroin
                        importCreate(playerid, strval(inputtext));
                    }
                    case 2:
                    {
                        importData[i][importType] = 4; //Cocaine
                        importCreate(playerid, strval(inputtext));
                    }
                }
                PlayerData[playerid][pBankMoney] -= (strval(inputtext) * drugPrice[drugType]);
                SendServerMessage(playerid, "Sukses mengorder "YELLOW"%s "WHITE"seharga "GREEN"%s", drugName, FormatNumber((strval(inputtext) * drugPrice[drugType])));
                return 1;
            }
        }
        SendErrorMessage(playerid, "There's an import on progress currently.");       
    }
    return 1;
}

Dialog:AtmWithdraw(playerid, response, listitem, inputtext[])
{
    new id = GetPVarInt(playerid, "ATMID");
    if(response)
    {
        switch(listitem)
        {
            case 0: 
            {
                if(PlayerData[playerid][pBankMoney] < 100)
                {
                    SendServerMessage(playerid, "You don't have enough money to take $100");
                    return cmd_atm(playerid, "");
                }
                // if(AtmData[id][atmCapacity] < 100)
                // {
                //     SendServerMessage(playerid, "This atm only have %s you can't take money from inside this ATM!", FormatNumber(AtmData[id][atmCapacity]));
                //     return cmd_atm(playerid, "");
                // }
                PlayerData[playerid][pBankMoney] -= 100;

                AtmData[id][atmCapacity] -= 100;

                if (AtmData[id][atmCapacity] < 0)
                {
                    AtmData[id][atmCapacity] = 1;
                }

                GiveMoney(playerid, 100);
                Log_Save(E_LOG_WITHDRAW, sprintf("[%s] %s has withdraws %s from ATM ID \"%d\", current bank: %s.", ReturnDate(), ReturnName(playerid), FormatNumber(100), id, FormatNumber(PlayerData[playerid][pBankMoney])));
                PlayerTextDrawSetString(playerid, BankMoneyVisual[playerid], sprintf("%s", FormatNumber(PlayerData[playerid][pBankMoney])));
                SendServerMessage(playerid, "You've withdraw $100 from atm.");
            }
            case 1: {
                if(PlayerData[playerid][pBankMoney] < 200)
                {
                    SendServerMessage(playerid, "You don't have enough money to take $200");
                    return cmd_atm(playerid, "");
                }
                // if(AtmData[id][atmCapacity] < 200)
                // {
                //     SendServerMessage(playerid, "This atm only have %s you can't take money from inside this ATM!", FormatNumber(AtmData[id][atmCapacity]));
                //     return cmd_atm(playerid, "");
                // }
                PlayerData[playerid][pBankMoney] -= 200;

                AtmData[id][atmCapacity] -= 200;

                if (AtmData[id][atmCapacity] < 0)
                {
                    AtmData[id][atmCapacity] = 1;
                }

                GiveMoney(playerid, 200);
                Log_Save(E_LOG_WITHDRAW, sprintf("[%s] %s has withdraws %s from ATM ID \"%d\", current bank: %s.", ReturnDate(), ReturnName(playerid), FormatNumber(200), id, FormatNumber(PlayerData[playerid][pBankMoney])));
                PlayerTextDrawSetString(playerid, BankMoneyVisual[playerid], sprintf("%s", FormatNumber(PlayerData[playerid][pBankMoney])));
                SendServerMessage(playerid, "You've withdraw $200 from atm.");
            }
            case 2: {
                if(PlayerData[playerid][pBankMoney] < 500)
                {
                    SendServerMessage(playerid, "You don't have enough money to take $500");
                    return cmd_atm(playerid, "");
                }
                // if(AtmData[id][atmCapacity] < 500)
                // {
                //     SendServerMessage(playerid, "This atm only have %s you can't take money from inside this ATM!", FormatNumber(AtmData[id][atmCapacity]));
                //     return cmd_atm(playerid, "");
                // }                
                PlayerData[playerid][pBankMoney] -= 500;

                AtmData[id][atmCapacity] -= 500;

                if (AtmData[id][atmCapacity] < 0)
                {
                    AtmData[id][atmCapacity] = 1;
                }

                GiveMoney(playerid, 500);
                Log_Save(E_LOG_WITHDRAW, sprintf("[%s] %s has withdraws %s from ATM ID \"%d\", current bank: %s.", ReturnDate(), ReturnName(playerid), FormatNumber(500), id, FormatNumber(PlayerData[playerid][pBankMoney])));
                PlayerTextDrawSetString(playerid, BankMoneyVisual[playerid], sprintf("%s", FormatNumber(PlayerData[playerid][pBankMoney])));
                SendServerMessage(playerid, "You've withdraw $500 from atm.");
            }
            case 3: {
                if(PlayerData[playerid][pBankMoney] < 1000)
                {
                    SendServerMessage(playerid, "You don't have enough money to take $1000");
                    return cmd_atm(playerid, "");
                }
                // if(AtmData[id][atmCapacity] < 1000)
                // {
                //     SendServerMessage(playerid, "This atm only have %s you can't take money from inside this ATM!", FormatNumber(AtmData[id][atmCapacity]));
                //     return cmd_atm(playerid, "");
                // }
                PlayerData[playerid][pBankMoney] -= 1000;

                AtmData[id][atmCapacity] -= 1000;

                if (AtmData[id][atmCapacity] < 0)
                {
                    AtmData[id][atmCapacity] = 1;
                }

                GiveMoney(playerid, 1000);
                Log_Save(E_LOG_WITHDRAW, sprintf("[%s] %s has withdraws %s from ATM ID \"%d\", current bank: %s.", ReturnDate(), ReturnName(playerid), FormatNumber(1000), id, FormatNumber(PlayerData[playerid][pBankMoney])));
                PlayerTextDrawSetString(playerid, BankMoneyVisual[playerid], sprintf("%s", FormatNumber(PlayerData[playerid][pBankMoney])));
                SendServerMessage(playerid, "You've withdraw $1000 from atm.");
            }
            case 4: {
                if(PlayerData[playerid][pBankMoney] < 5000)
                {
                    SendServerMessage(playerid, "You don't have enough money to take $5000");
                    return cmd_atm(playerid, "");
                }
                // if(AtmData[id][atmCapacity] < 5000)
                // {
                //     SendServerMessage(playerid, "This atm only have %s you can't take money from inside this ATM!", FormatNumber(AtmData[id][atmCapacity]));
                //     return cmd_atm(playerid, "");
                // }
                PlayerData[playerid][pBankMoney] -= 5000;

                AtmData[id][atmCapacity] -= 5000;

                if (AtmData[id][atmCapacity] < 0)
                {
                    AtmData[id][atmCapacity] = 1;
                }

                GiveMoney(playerid, 5000);
                Log_Save(E_LOG_WITHDRAW, sprintf("[%s] %s has withdraws %s from ATM ID \"%d\", current bank: %s.", ReturnDate(), ReturnName(playerid), FormatNumber(5000), id, FormatNumber(PlayerData[playerid][pBankMoney])));
                PlayerTextDrawSetString(playerid, BankMoneyVisual[playerid], sprintf("%s", FormatNumber(PlayerData[playerid][pBankMoney])));
                SendServerMessage(playerid, "You've withdraw $5000 from atm.");
            }
            case 5: {
                if(PlayerData[playerid][pBankMoney] < 10000)
                {
                    SendServerMessage(playerid, "You don't have enough money to take $10000");
                    return cmd_atm(playerid, "");
                }
                // if(AtmData[id][atmCapacity] < 10000)
                // {
                //     SendServerMessage(playerid, "This atm only have %s you can't take money from inside this ATM!", FormatNumber(AtmData[id][atmCapacity]));
                //     return cmd_atm(playerid, "");
                // }
                PlayerData[playerid][pBankMoney] -= 10000;

                AtmData[id][atmCapacity] -= 10000;

                if (AtmData[id][atmCapacity] < 0)
                {
                    AtmData[id][atmCapacity] = 1;
                }

                GiveMoney(playerid, 10000);
                Log_Save(E_LOG_WITHDRAW, sprintf("[%s] %s has withdraws %s from ATM ID \"%d\", current bank: %s.", ReturnDate(), ReturnName(playerid), FormatNumber(10000), id, FormatNumber(PlayerData[playerid][pBankMoney])));
                PlayerTextDrawSetString(playerid, BankMoneyVisual[playerid], sprintf("%s", FormatNumber(PlayerData[playerid][pBankMoney])));
                SendServerMessage(playerid, "You've withdraw $10000 from atm.");
            }
        }
    }
    return 1;
}

Dialog:Atm(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, AtmWithdraw, DIALOG_STYLE_LIST, "ATM Account","$100\n$200\n$500\n$1000\n$5000\n$10000","Take","Close");
            case 1:
            {
                if(PlayerData[playerid][pHour] < 2) return SendErrorMessage(playerid, "You must play 2 hours to transfer.");
                Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
            }
            case 2: Paycheck(playerid);
        }
    }
    return 1;
}

Dialog:DialogBusiness(playerid, response, listitem, inputtext[])
{
    new
        string[225],
        id = GetPVarInt(playerid,"BM"),
        kitchen[255]
    ;

    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                format(string,sizeof(string),"Business ID %d", GetPVarInt(playerid,"BM"));
                Dialog_Show(playerid, BusinessInfo, DIALOG_STYLE_TABLIST,string,""COL_GREY"You can look business information here:\t \n\n \t \n"WHITE"Business name:\t%s\nMessage:\t%s\nBusiness product:\t%d/100\nBusiness Vault:\t%s","Back","Close",BusinessData[id][bizName],BusinessData[id][bizMessage], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
            }
            case 1: if(!Business_IsEmployee(playerid, id)) Dialog_Show(playerid, BusinessName, DIALOG_STYLE_INPUT,"Business Name",""WHITE"Nama sebelumnya: %s\n\n"WHITE"Masukkan nama bisnis yang anda inginkan\nMaksimal 32 karakter untuk nama bisnis","Done","Back",BusinessData[id][bizName]);
            case 2: if(!Business_IsEmployee(playerid, id)) Dialog_Show(playerid, BusinessMessage, DIALOG_STYLE_INPUT,"Business Message",""COL_LIGHTBLUE"BUSINESS: "WHITE"%s\n\nInput: \"none\" to disable business message\n\nInput your business message below:", "Next", "Close",BusinessData[id][bizMessage]);
            case 3: if(!Business_IsEmployee(playerid, id)) Dialog_Show(playerid, BusinessVault, DIALOG_STYLE_LIST,"Business Vault","Deposit\nWithdraw","Next","Back");
            case 4: if(!Business_IsEmployee(playerid, id)) Business_ProductMenu(playerid, id);
            case 5: if(!Business_IsEmployee(playerid, id)) Dialog_Show(playerid, BusinessCargo, DIALOG_STYLE_INPUT,"Product Price For Sale", WHITE"Harga yang kamu pasang: "GREEN"%s\n"WHITE"Harga minimal: "GREEN"%s\n"WHITE"Berapa harga yang akan anda tawarkan untuk 1 kargo? (1 kargo bisa sampai 5 - 15 pcs)", "Set", "Back", FormatNumber(BusinessData[id][bizCargo]), FormatNumber(Marketplace_Price(id)));
            case 6: Dialog_Show(playerid, BusinessMusic, DIALOG_STYLE_INPUT,"Business Music",""COL_LIGHTBLUE"BUSINESS: "WHITE"\nInput: \"none\" to disable business music\n\nInput your business musick link below:", "Next", "Close");
            case 7: 
            {
                format(kitchen, sizeof(kitchen), ""COL_LIGHTBLUE"BUSINESS : "WHITE"Current Kitchen Durability %d\n\nDo You want to repair your business's kitchen ?\n\n$1000/Service", BusinessData[id][bizDurability]);
                Dialog_Show(playerid, BusinessKitchen, DIALOG_STYLE_MSGBOX,"Kitchen Durability", kitchen , "Yes", "Close");
            }
            case 8: Dialog_Show(playerid, BusinessManagement, DIALOG_STYLE_LIST, "Business Management", "Employee List\nInvite Employee\nRemove All Employee\nReset Employee Hours", "Select", "Close");
        }
    }
    return 1;
}
Dialog:BusinessManagement(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new bizid = GetPVarInt(playerid,"BM");
        switch(listitem)
        {
            case 0: Business_ShowEmploye(playerid, bizid);
            case 1: if(!Business_IsEmployee(playerid, bizid)) Dialog_Show(playerid, BusinessEmployee, DIALOG_STYLE_INPUT,"Business Employee", "Input Nama pegawai yang ingin di jadikan employee atau masukan idnya :" , "Invite", "Close");
            case 2: 
            {
                if(!Business_IsEmployee(playerid, bizid)) 
                {
                    Business_RemoveAllEmploye(bizid);
                    SendServerMessage(playerid, "You removed all your employee!");
                }
            }
            case 3: 
            {
                if(!Business_IsEmployee(playerid, bizid))
                {
                    Business_ResetHours(bizid);
                    SendServerMessage(playerid, "You reset all employee duty hour!");
                }
            }
        }
    }
    return 1;
}
Dialog:BizEmployeeManagement(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new bizid = GetPVarInt(playerid,"BM"),
            id = strval(inputtext)
        ;     
        SetPVarInt(playerid, "BizEmployeeID", id);
        Business_ShowEmployeDetails(playerid, bizid, id);
    }
    return 1;
}
Dialog:BusinessEmployeeDetails(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new bizid = GetPVarInt(playerid,"BM"),
            id = GetPVarInt(playerid, "BizEmployeeID")
        ;
        switch(listitem)
        {
            case 0: Business_ShowEmployeDetails(playerid, bizid, id);
            case 1: Business_ShowEmployeDetails(playerid, bizid, id);
            case 2:
            {              
                if(!Business_IsEmployee(playerid, bizid)) Business_RemoveEmploye(id);
            }
        }        
    }
    return 1;
}
Dialog:BusinessEmployee(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		new userid,
			bizid = GetPVarInt(playerid,"BM")
        ;

		if (Business_EmployeGetCount(bizid) > MAX_BUSINESS_EMPLOYEE) return SendErrorMessage(playerid, "This business is limited 3 employee.");
		if (sscanf(inputtext, "u", userid)) return Dialog_Show(playerid, BusinessEmployee, DIALOG_STYLE_INPUT,"Business Employee", "Input Nama pegawai yang ingin di jadikan employee atau masukan idnya :" , "Invite", "Close");
		if (!IsPlayerConnected(userid)) return SendErrorMessage(playerid, "That player is not connected into the game!.");
        if (Business_IsEmployee(userid, bizid)) return Dialog_Show(playerid, BusinessEmployee, DIALOG_STYLE_INPUT, "Business Employee", "Player tersebut sudah masuk dalam list employe\nMasukkan nama ataupun id player untuk kamu masukkan sebagai -\npekerja di business ini.", "Add", "Close");
        if (userid == INVALID_PLAYER_ID || userid == playerid) return SendErrorMessage(playerid, "Invalid player id / Tidak bisa masukan diri sendiri!.");

		Business_AddEmploye(userid, bizid);
		SendServerMessage(playerid, "Kamu memasukkan %s ke dalam list pekerja bisnis mu.", NormalName(userid));
		SendServerMessage(userid, "%s mempekerjakan kamu di bisnis miliknya %s.", NormalName(playerid), BusinessData[bizid][bizName]);
    }
    return 1;
}
Dialog:BusinessKitchen(playerid, response, listitem, inputtext[])
{
    new id = GetPVarInt(playerid,"BM");
    if(response)
    {
        if(BusinessData[id][bizVault] >= 1000)
        {
            BusinessData[id][bizDurability] = 100;
            SendServerMessage(playerid, "You just hire a repairman and service your kitchen, current kitchen durability is %d", BusinessData[id][bizDurability]);
            BusinessData[id][bizVault] -= 1000;
        }
        else SendServerMessage(playerid, "Your business don't have enough vault to repair the kitchen!");
    }
    else cmd_bm(playerid, "\0");
    return 1;
}
Dialog:BusinessCargo(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid, "BM");

        if(strval(inputtext) < Marketplace_Price(GetPVarInt(playerid, "BM")) || strval(inputtext) > 500)
            return Dialog_Show(playerid, BusinessCargo, DIALOG_STYLE_INPUT,"Product Price For Sale", WHITE"error: harga minimal "GREEN"%s "WHITE"sampai "GREEN"$500\n\n"WHITE"Harga yang kamu pasang: "GREEN"%s\n"WHITE"Harga minimal: "GREEN"%s\n"WHITE"Berapa harga yang akan anda tawarkan untuk 1 kargo? (1 kargo bisa sampai 5 - 15 pcs)", "Set", "Back", FormatNumber(Marketplace_Price(id)), FormatNumber(BusinessData[id][bizCargo]), FormatNumber(Marketplace_Price(id)));

        BusinessData[id][bizCargo] = strval(inputtext);
        SendServerMessage(playerid, "Anda menawarkan "GREEN"%s per "YELLOW"kargo "WHITE"sekarang.", FormatNumber(strval(inputtext)));
    }
    else cmd_bm(playerid, "\0");
    return 1;
}

Dialog:BusinessInfo(playerid, response, listitem, inputtext[])
{
    if(response)
        return cmd_bm(playerid, "\0");

    return 1;
}

Dialog:BusinessVault(playerid, response, listitem, inputtext[])
{
    if(response) {
        switch(listitem) {
            case 0: Dialog_Show(playerid, BusinessDeposit, DIALOG_STYLE_INPUT, "Deposit", "Uang anda: %s.\n\nMasukkan berapa banyak uang yang akan anda simpan di dalam bisnis ini", "Deposit", "Back", FormatNumber(GetMoney(playerid)));
            case 1: Dialog_Show(playerid, BusinessWithdraw, DIALOG_STYLE_INPUT,"Withdraw","Business Vault: %s\n\nMasukkan berapa banyak uang yang akan anda ambil di dalam bisnis ini","Withdraw","Back", FormatNumber(BusinessData[GetPVarInt(playerid,"BM")][bizVault]));
        }
    }
    return 1;
}

Dialog:BusinessWithdraw(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid,"BM");

        if(strval(inputtext) < 1 || strval(inputtext) > BusinessData[id][bizVault])
            return SendErrorMessage(playerid, "Invalid amount specified!");

        BusinessData[id][bizVault] -= strval(inputtext);
        Business_Save(id);

        GiveMoney(playerid, strval(inputtext));
        SendClientMessageEx(playerid, X11_TURQUOISE_1,"BUSINESS: "WHITE"You have withdrawn "YELLOW"%s "WHITE"from the business vault.", FormatNumber(strval(inputtext)));
        Log_Save(E_LOG_BUSINESS, sprintf("[%s] %s has withdrawn \"%s\" from business ID: %d.", ReturnDate(), NormalName(playerid), FormatNumber(strval(inputtext)), id));
    }
    else Dialog_Show(playerid, BusinessVault, DIALOG_STYLE_LIST,"Business Vault","Deposit\nWithdraw","Next","Back");

    return 1;
}

Dialog:BusinessDeposit(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid,"BM");

        if(strval(inputtext) < 1 || strval(inputtext) > GetMoney(playerid))
            return SendErrorMessage(playerid, "Invalid amount specified!");

        BusinessData[id][bizVault] += strval(inputtext);
        Business_Save(id);

        GiveMoney(playerid, -strval(inputtext));
        SendClientMessageEx(playerid, X11_TURQUOISE_1,"BUSINESS: "WHITE"You have deposit "YELLOW"%s "WHITE"into the business vault.", FormatNumber(strval(inputtext)));
        Log_Save(E_LOG_BUSINESS, sprintf("[%s] %s has deposit \"%s\" to business ID: %d.", ReturnDate(), NormalName(playerid), FormatNumber(strval(inputtext)), id));
    }
    else Dialog_Show(playerid, BusinessVault, DIALOG_STYLE_LIST,"Business Vault","Deposit\nWithdraw","Next","Back");

    return 1;
}

Dialog:BusinessName(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid,"BM");

        if(!Business_IsOwner(playerid, id))
            return SendErrorMessage(playerid, "This is not on your business.");

        if(isnull(inputtext))
            return Dialog_Show(playerid, BusinessName, DIALOG_STYLE_INPUT,"Business Name",""COL_LIGHTRED"NOTE: "WHITE"Nama bisnis tidak di perbolehkan kosong!\n\n"WHITE"Nama sebelumnya: %s\n\n"WHITE"Masukkan nama bisnis yang anda inginkan\nMaksimal 32 karakter untuk nama bisnis","Done","Back",BusinessData[id][bizName]);

        if(strlen(inputtext) > 32 || strlen(inputtext) < 5)
            return Dialog_Show(playerid, BusinessName, DIALOG_STYLE_INPUT,"Business Name",""COL_LIGHTRED"NOTE: "WHITE"Nama bisnis harus 5 sampai 32 karakter.\n\n"WHITE"Nama sebelumnya: %s\n\n"WHITE"Masukkan nama bisnis yang anda inginkan\nMaksimal 32 karakter untuk nama bisnis","Done","Back",BusinessData[id][bizName]);

        format(BusinessData[id][bizName], 32, ColouredText(inputtext));

        Business_Refresh(id);
        Business_Save(id);

        SendServerMessage(playerid, "Business name set to: \"%s\".", BusinessData[id][bizName]);
    }
    else
        return cmd_bm(playerid, "\0");
    return 1;
}
Dialog:BusinessMusic(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid,"BM");
        if(strlen(inputtext) > 128 || strlen(inputtext) < 5)
            return SendErrorMessage(playerid, "Maksimal dan minimal untuk business name yaitu 5-128 karakter.");

        if(!strcmp(inputtext, "none", true))
        {
            BusinessData[id][bizLink][0] = '\0';

            Business_Save(id);
            SendServerMessage(playerid, "You have removed the business message.");
        }
        else
        {
            format(BusinessData[id][bizLink], 128, inputtext);

            Business_Save(id);
            SendServerMessage(playerid, "Business music set to: \"%s\".", inputtext);
        }
    }
    else
        return cmd_bm(playerid, "\0");
    return 1;
}
Dialog:BusinessMessage(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid,"BM");
        if(strlen(inputtext) > 128 || strlen(inputtext) < 5)
            return SendErrorMessage(playerid, "Maksimal dan minimal untuk business name yaitu 5-128 karakter.");

        if(!strcmp(inputtext, "none", true))
        {
            BusinessData[id][bizMessage][0] = '\0';

            Business_Save(id);
            SendServerMessage(playerid, "You have removed the business message.");
        }
        else
        {
            format(BusinessData[id][bizMessage], 128, inputtext);

            Business_Save(id);
            SendServerMessage(playerid, "Business message set to: \"%s\".", inputtext);
        }
    }
    else
        return cmd_bm(playerid, "\0");
    return 1;
}

Dialog:RemoveMember(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        foreach(new id : Player) if(!strcmp(inputtext, ReturnName(id))) {
            SendErrorMessage(playerid, "That player is online, (/fremove) to remove him.");
            return 1;
        }
        SetPVarString(playerid, "MemberName", inputtext);
        Dialog_Show(playerid, RemoveAccept, DIALOG_STYLE_MSGBOX, "Remove Agreement", "Are you sure want remove %s from %s member?.", "Yes", "No", inputtext, FactionData[PlayerData[playerid][pFaction]][factionName]);
    }
    return 1;
}

Dialog:RemoveAccept(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static
            query[200],
            name[MAX_PLAYER_NAME];

        GetPVarString(playerid, "MemberName", name, sizeof(name));

        format(query, sizeof(query), "UPDATE `characters` SET `Faction`='-1', `FactionRank`='0', `FactionDuty`='0', `SkinFaction`='0' WHERE `Character`='%q'", name); //`Character` LIKE '%q'
        mysql_tquery(g_iHandle, query);

        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "FACTION NOTICE: "WHITE"%s remove %s from %s member.", ReturnName2(playerid, 0), name, FactionData[PlayerData[playerid][pFaction]][factionName]);
        SetPVarString(playerid, "MemberName", "");
    }
    else
        SetPVarString(playerid, "MemberName", "");

    return 1;
}

Dialog:Trace(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem == 1) Dialog_Show(playerid, TracePhone, DIALOG_STYLE_INPUT, "Trace Phone Number", "Insert phone number to track the player:", "Track", "Close");
    }
    return 1;
}

Dialog:TracePlate(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, TracePlate, DIALOG_STYLE_INPUT, "Trace Number Plate", "Insert plate number to track the vehicle:", "Track", "Close");
        if(!strcmp(inputtext, "NONE", true)) return Dialog_Show(playerid, TracePlate, DIALOG_STYLE_INPUT, "Trace Number Plate", "Unable to find this plate\nInsert plate number to track the vehicle:", "Track", "Close");
        if(!strcmp(inputtext, "STATIC", true)) return Dialog_Show(playerid, TracePlate, DIALOG_STYLE_INPUT, "Trace Number Plate", "Unable to find this plate\nInsert plate number to track the vehicle:", "Track", "Close");

        for(new i=0, j = GetVehiclePoolSize(); i <= j; i++) if(IsValidVehicle(i) && !strcmp(GetVehicleNumberPlate(i), inputtext, true))
        {
            new Float:x, Float:y, Float:z;
            GetVehiclePos(i, x, y, z);

            SetPlayerWaypoint(playerid, sprintf("Track Plate Number '%s'", GetVehicleNumberPlate(i)), x,y,z);
            SendServerMessage(playerid, "You have been successfull track vehicle number plate "YELLOW"%s.", inputtext);
            return 1;
        }
        SendErrorMessage(playerid, "There are no one vehicle with that plate.");
    }
    return 1;
}

Dialog:TracePhone(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, TracePhone, DIALOG_STYLE_INPUT, "Trace Phone Number", "Insert phone number to track the player:", "Track", "Close");
        if(strval(inputtext) == 0) return Dialog_Show(playerid, TracePhone, DIALOG_STYLE_INPUT, "Trace Phone Number", "Insert phone number to track the player:", "Track", "Close");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, TracePhone, DIALOG_STYLE_INPUT, "Trace Phone Number", "Insert phone number to track the player:", "Track", "Close");

        foreach(new i : Player) if(PlayerData[i][pPhone] == strval(inputtext))
        {
            if(PlayerData[i][pPhoneOff]) return SendErrorMessage(playerid, "Unable to find this number.");

            new Float:x, Float:y, Float:z;
            GetPlayerPos(i, x, y, z);

            SetPlayerWaypoint(playerid, sprintf("Track Phone Number '%d'", strval(inputtext)), x,y,z);
            SendServerMessage(playerid, "You have been successfull track phone number "YELLOW"%d.", strval(inputtext));
            return 1;
        }
        SendErrorMessage(playerid, "There are no one phone number with that.");
    }
    return 1;
}

Dialog:TakePills(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, coughPills, DIALOG_STYLE_INPUT, "Pharmacy Locker", "Jumlah Neladrly Acetate : ", "Take", "Close");
            case 1: Dialog_Show(playerid, migrainPills, DIALOG_STYLE_INPUT, "Pharmacy Locker", "Jumlah Kratotamax Plus 1.0 : ", "Take", "Close");
            case 2: Dialog_Show(playerid, fiverPills, DIALOG_STYLE_INPUT, "Pharmacy Locker", "Jumlah Lazattavitus Extra : ", "Take", "Close");
        }
    }
    return 1;
}
Dialog:coughPills(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new amount = strval(inputtext);
        if(isnull(inputtext)) return Dialog_Show(playerid, coughPills, DIALOG_STYLE_INPUT, "Pharmacy Locker", "Jumlah Neladrly Acetate : ", "Take", "Close");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, coughPills, DIALOG_STYLE_INPUT, "Pharmacy Locker", "Jumlah Neladrly Acetate : ", "Take", "Close");
        if(amount < 3 || amount > 10) return SendErrorMessage(playerid, "Kamu hanya bisa mengambil minimal 3 - maximal 10 obat!");

        if(Inventory_Add(playerid, "Neladryl Acetate", 2709, amount) != -1)
        {
            SendServerMessage(playerid, "Anda sudah mengambil obat"YELLOW"Neladrly Acetate dengan jumlah %d", amount);
        }
    }
    return 1;
}
Dialog:undercoverSkin(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new amount = strval(inputtext);
        if(FactionData[PlayerData[playerid][pFaction]][factionType] != FACTION_POLICE) return SendErrorMessage(playerid, "You're not a police officer!");
        if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 7) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 7);
        if(isnull(inputtext)) return Dialog_Show(playerid, undercoverSkin, DIALOG_STYLE_INPUT, "Undercover Skin","Input Skin ID Number :", "Take", "Close");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, undercoverSkin, DIALOG_STYLE_INPUT, "Undercover Skin","Input Skin ID Number :", "Take", "Close");
        if(amount == 0 || amount == 51 || amount == 52 || amount == 92) return Dialog_Show(playerid, undercoverSkin, DIALOG_STYLE_INPUT, "Undercover Skin","Input Skin ID Number :", "Take", "Close");

        PlayerData[playerid][pSkinFaction] = amount;
        PlayerData[playerid][pUndercoverDuty] = true;
        SetPlayerSkinEx(playerid, amount, 1);
        SetPlayerColor(playerid, DEFAULT_COLOR);

    }
    return 1;
}
Dialog:customSkin(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new amount = strval(inputtext);
        if(FactionData[PlayerData[playerid][pFaction]][factionType] != FACTION_POLICE) return SendErrorMessage(playerid, "You're not a police officer!");
        if(isnull(inputtext)) return Dialog_Show(playerid, customSkin, DIALOG_STYLE_INPUT, "Custom Skin","ID 20022 - 20056, 20070 - 20074\n\nInput Skin ID Number :", "Take", "Close");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, customSkin, DIALOG_STYLE_INPUT, "Custom Skin","Custom Skin","ID 20022 - 20056, 20070 - 20074\n\nInput Skin ID Number :", "Take", "Close");
        if(!IsCustomSkin(amount)) return Dialog_Show(playerid, customSkin, DIALOG_STYLE_INPUT, "Custom Skin","ID 20022 - 20056, 20070 - 20074\n\nInput Skin ID Number :", "Take", "Close");

        PlayerData[playerid][pSkinFaction] = amount;
        SetPlayerSkinEx(playerid, amount, 1);
    }
    return 1;
}
Dialog:migrainPills(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new amount = strval(inputtext);
        if(isnull(inputtext)) return Dialog_Show(playerid, migrainPills, DIALOG_STYLE_INPUT, "Pharmacy Locker", "Jumlah Kratotamax Plus 1.0 : ", "Take", "Close");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, migrainPills, DIALOG_STYLE_INPUT, "Pharmacy Locker", "Jumlah Kratotamax Plus 1.0 : ", "Take", "Close");
        if(amount < 3 || amount > 10) return SendErrorMessage(playerid, "Kamu hanya bisa mengambil minimal 3 - maximal 10 obat!");

        if(Inventory_Add(playerid, "Kratotamax Plus 1.0", 2709, amount) != -1)
        {
            SendServerMessage(playerid, "Anda sudah mengambil obat"YELLOW"Kratotamax Plus 1.0 dengan jumlah %d", amount);
        } 
    }
    return 1;
}
Dialog:fiverPills(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new amount = strval(inputtext);
        if(isnull(inputtext)) return Dialog_Show(playerid, feverPills, DIALOG_STYLE_INPUT, "Pharmacy Locker", "Jumlah Lazattavitus Extra : ", "Take", "Close");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, feverPills, DIALOG_STYLE_INPUT, "Pharmacy Locker", "Jumlah Lazattavitus Extra : ", "Take", "Close");
        if(amount < 3 || amount > 10) return SendErrorMessage(playerid, "Kamu hanya bisa mengambil minimal 3 - maximal 10 obat!");

        if(Inventory_Add(playerid, "Lazattavitus Extra", 2709, amount) != -1)
        {
            SendServerMessage(playerid, "Anda sudah mengambil obat"YELLOW"Lazattavitus Extra dengan jumlah %d", amount);
        }
    }
    return 1;
}


Dialog:ToggleMenu(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                PlayerData[playerid][pDisableOOC] = (PlayerData[playerid][pDisableOOC]) ? (false) : (true);
                SendServerMessage(playerid, "You have %s OOC chat.", PlayerData[playerid][pDisableOOC] ? ("disable") : ("enable"));
            }
            case 1:
            {
                PlayerData[playerid][pDisablePM] = (PlayerData[playerid][pDisablePM]) ? (false) : (true);
                SendServerMessage(playerid, "You have %s private messages.", PlayerData[playerid][pDisablePM] ? ("disable") : ("enable"));
            }
            case 2:
            {
                PlayerData[playerid][pDisableBC] = (PlayerData[playerid][pDisableBC]) ? (false) : (true);
                SendServerMessage(playerid, "You have %s news broadcasts.", PlayerData[playerid][pDisableBC] ? ("disable") : ("enable"));
            }
            case 3:
            {
                if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "You are not part of any faction.");

                PlayerData[playerid][pDisableFaction] = (PlayerData[playerid][pDisableFaction]) ? (false) : (true);
                SendServerMessage(playerid, "You have %s faction chat.", PlayerData[playerid][pDisableFaction] ? ("disable") : ("enable"));
            }
            case 4:
            {
                PlayerData[playerid][pDisableLogin] = (PlayerData[playerid][pDisableLogin]) ? (false) : (true);
                SendServerMessage(playerid, "You have %s login message.", PlayerData[playerid][pDisableLogin] ? ("disable") : ("enable"));
            }
            case 5:
            {
                ToggleGUIDisplay(playerid, PlayerData[playerid][pTogHud]);
                SendServerMessage(playerid, "You have %s hud display.", PlayerData[playerid][pTogHud] ? ("disable") : ("enable"));
            }
            case 6:
            {
                if(!IsPlayerVIP(playerid)) return SendErrorMessage(playerid, "You are not part of vip members.");

                SetToggleVIPMessage(playerid, IsToggleVIPMessage(playerid) ? (false) : (true));
                SendServerMessage(playerid, "You have %s vip message.", IsToggleVIPMessage(playerid) ? ("disable") : ("enable"));
            }
            case 7:
            {
                PlayerData[playerid][pDisableAnim] = (PlayerData[playerid][pDisableAnim]) ? (false) : (true);
                SendServerMessage(playerid, "You have %s chat animation.", PlayerData[playerid][pDisableAnim] ? ("disable") : ("enable"));
            }
            // case 8:
            // {
            //     ToggleRelationDisplay(playerid, PlayerData[playerid][pTogRelation]);
            //     SendServerMessage(playerid, "You have %s relationship display.", PlayerData[playerid][pTogRelation] ? ("disable") : ("enable"));
            // }
            case 8:
            {
                PlayerData[playerid][pDisableAdmin] = (PlayerData[playerid][pDisableAdmin]) ? (false) : (true);
                SendServerMessage(playerid, "You have %s admin chat.", PlayerData[playerid][pDisableAdmin] ? ("disable") : ("enable"));
            }
            case 9:
            {
                PlayerData[playerid][pDisableAPM] = (PlayerData[playerid][pDisableAPM]) ? (false) : (true);
                SendServerMessage(playerid, "You have %s Player PM.", PlayerData[playerid][pDisableAPM] ? ("disable") : ("enable"));
            }
            case 10:
            {
                PlayerData[playerid][pDisableLDO] = (PlayerData[playerid][pDisableLDO]) ? (false) : (true);
                SendServerMessage(playerid, "You have %s Player /ldo.", PlayerData[playerid][pDisableLDO] ? ("disable") : ("enable"));
            }
            case 11:
            {
                PlayerData[playerid][pDisableRADIO] = (PlayerData[playerid][pDisableRADIO]) ? (false) : (true);
                SendServerMessage(playerid, "You have %s Player Radio.", PlayerData[playerid][pDisableRADIO] ? ("disable") : ("enable"));
            }
        }
        SaveToggle(playerid);
    }
    return 1;
}

Dialog:CheckTicket(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new i = ListedTickets[playerid][listitem];
        Dialog_Show(playerid, TicketDetail, DIALOG_STYLE_MSGBOX, "Ticket Detail", ""WHITE"Ticket detail {C0C0C0}#%03d\n\n"WHITE"Ticket issuer: {C0C0C0}%s\n"WHITE"Reason: {C0C0C0}%s\n"WHITE"Amout: {C0C0C0}%s\n"WHITE"Date: {C0C0C0}%s", "<< Back", "", TicketData[playerid][i][ticketID], TicketData[playerid][i][ticketIssuer], TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
    }
    return 1;
}

Dialog:TicketDetail(playerid, response, listitem, inputtext[])
{
    if(response) return cmd_tickets(playerid, "\1");
    return 1;
}

Dialog:PayTicket(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new i = ListedTickets[playerid][listitem];
        Dialog_Show(playerid, PayToPolice, DIALOG_STYLE_MSGBOX, "Ticket Detail", ""WHITE"Ticket detail {C0C0C0}#%03d\n\n"WHITE"Ticket issuer: {C0C0C0}%s\n"WHITE"Reason: {C0C0C0}%s\n"WHITE"Amout: {C0C0C0}%s\n"WHITE"Date: {C0C0C0}%s\n\n"WHITE"Do you want to pay this ticket?.", "Pay Now", "Close", TicketData[playerid][i][ticketID], TicketData[playerid][i][ticketIssuer], TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
        SetPVarInt(playerid, "TicketIndex", i);
    }
    return 1;
}

Dialog:PayToPolice(playerid, response, listitem, inputtext[])
{
    if(response) {
        new i = GetPVarInt(playerid, "TicketIndex");
        if(GetMoney(playerid) < TicketData[playerid][i][ticketFee]) return SendErrorMessage(playerid, "You don't have enough money to pay this ticket.");
        GiveMoney(playerid, -TicketData[playerid][i][ticketFee], ECONOMY_ADD_SUPPLY, "paid ticket fine");
        SendServerMessage(playerid, "Thanks for pay your ticket for "COL_GREEN"%s.", FormatNumber(TicketData[playerid][i][ticketFee]));

        for(new fac = 0; fac != MAX_FACTIONS; fac++) if(FactionData[fac][factionExists] && FactionData[fac][factionType] == FACTION_POLICE) {
            FactionData[fac][factionMoney] += TicketData[playerid][i][ticketFee];
            FactionData[fac][factionDepositMoney] = TicketData[playerid][i][ticketFee];
            format(FactionData[fac][factionDeposit], MAX_PLAYER_NAME, "Ticket Pay");
        }
        Ticket_Remove(playerid, i);
        DeletePVar(playerid, "TicketIndex");
    }
    else cmd_payticket(playerid, "\1");
    return 1;
}

Dialog:BackupSystem(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                new Float:x, Float:y, Float:z;
                GetPlayerPos(playerid, x, y, z);
                SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "BACKUP: %s needs backup %s {8D8DFF}unit at %s.", ReturnName(playerid, 0), inputtext, GetLocation(x,y,z));
                foreach (new i : Player) if(i != playerid && GetFactionType(i) == FACTION_POLICE && PlayerData[i][pOnDuty]) 
                {
                    BackupCheckPoint[i] = 1;
                    DisablePlayerRaceCheckpoint(i);
                    SetPlayerRaceCheckpoint(i, 1, x, y, z, 0, 0, 0, 2.0);
                }
            }
            case 1:
            {
                new Float:x, Float:y, Float:z;
                GetPlayerPos(playerid, x, y, z);
                SendFactionMessageEx(FACTION_MEDIC, COLOR_RADIO, "BACKUP: %s needs %s {8D8DFF}unit at %s.", ReturnName(playerid, 0), inputtext, GetLocation(x,y,z));
                foreach (new i : Player) if(i != playerid && GetFactionType(i) == FACTION_MEDIC && PlayerData[i][pOnDuty]) 
                {
                    BackupCheckPoint[i] = 1;
                    DisablePlayerRaceCheckpoint(i);
                    SetPlayerRaceCheckpoint(i, 1, x, y, z, 0, 0, 0, 2.0);
                }
            }
        }
        cmd_ame(playerid, "reaches his panic button as he pressing it and sends a signal!");
    }
    return 1;
}

Dialog:PilihWarna(playerid, response, listitem, inputtext[])
{
    new id = GetPVarInt(playerid, "BackColor");

    if(response)
    {
        ObjectData[id][oBackColor] = AvailableColor[listitem][0];
        ObjectText_Refresh(id);
        SendClientMessageEx(playerid, X11_TURQUOISE_1,"SERVER: "WHITE"You've update backcolor this object to %s",AvailableColor[listitem][1]);
    }
    return 1;
}

Dialog:MasukkanWarna(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid, "BackColor"),
            hax;

        if(sscanf(inputtext,"h", hax))
            return SendErrorMessage(playerid, "Invalid hax color");

        ObjectData[id][oBackColor] = hax;
        ObjectText_Refresh(id);
        SendClientMessageEx(playerid, X11_TURQUOISE_1,"SERVER: "WHITE"You've update backcolor this object.");
    }
    return 1;
}

Dialog:WarnaBelakang(playerid, response, listitem, inputtext[])
{
    new id = GetPVarInt(playerid, "BackColor"),
        string[128];

    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, MasukkanWarna, DIALOG_STYLE_INPUT,"Custom Backcolor","Enter a hex value for the font color (ARGB)\nFormat example: 0xFFFFFFFF for white","Submit","Close");
            case 1:
            {
                for (new i = 0, j = sizeof(AvailableColor); i < j; i++)
                {
                        format(string,sizeof(string),"%s%s\n",string, AvailableColor[i][1]);
                }
                Dialog_Show(playerid, PilihWarna, DIALOG_STYLE_LIST,"Available Color",string,"Select","Close");
            }
            case 2:
            {
                ObjectData[id][oBackColor] = 0x00000000;
                ObjectText_Refresh(id);
                SendClientMessageEx(playerid, X11_TURQUOISE_1,"SERVER: "WHITE"You've update backcolor this object to transparant");
            }
        }
    }
    return 1;
}

Dialog:FontSizes(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid, "FontSizes");

        ObjectData[id][oFontSize] = FontSizes[listitem][0];
        ObjectText_Refresh(id);
        SendClientMessageEx(playerid, X11_TURQUOISE_1,"SERVER: "WHITE"You've update fontsize this object (%s).",FontSizes[listitem][1]);
    }
    return 1;
}

Dialog:FontNames(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid, "FontNames");

        format(ObjectData[id][oFontNames], 24, inputtext);

        ObjectText_Refresh(id);
        SendClientMessageEx(playerid, X11_TURQUOISE_1,"SERVER: "WHITE"You've update font name to (%s).", inputtext);
    }
    return 1;
}

Dialog:ObjectList(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid, "ObjectList");

        ObjectData[id][oModel] = ObjectList[listitem][0];

        ObjectText_Refresh(id);
        SendClientMessageEx(playerid, X11_TURQUOISE_1,"SERVER: "WHITE"You've update object to id %d.", ObjectList[listitem][0]);
    }
    return 1;
}

Dialog:SelectHouse(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = -1,
            business = GetPVarInt(playerid, "InsideBusiness"),
            price = GetPVarInt(playerid, "FurniturePrice"),
            model = GetPVarInt(playerid, "FurnitureModel"),
            houseid = ListedHouse[playerid][listitem];

        // SendServerMessage(playerid, "Furniture Count: %d | houseid: %d", Furniture_GetCount(houseid), houseid);

        if(Furniture_GetCount(houseid) > MAX_HOUSE_FURNITURE)
            return SendErrorMessage(playerid, "You can only have %d furniture items in your house.", MAX_HOUSE_FURNITURE);

        id = Furniture_Add(houseid, GetFurnitureNameByModel(model), model, 0.0, 0.0, 0.0);

        if(id == -1)
            return SendErrorMessage(playerid, "You don't have any house furniture slots left.");

        GiveMoney(playerid, -price, ECONOMY_ADD_SUPPLY, "bought furniture");
        SendServerMessage(playerid, "You have purchased a \"%s\" for %s.", GetFurnitureNameByModel(model), FormatNumber(price));

        BusinessData[business][bizProducts]--;
        BusinessData[business][bizVault] += price;
        Business_Save(business);
    }
    else cmd_buy(playerid, "\0");
    return 1;
}
AddPlayerSmoking(playerid)
{
    PlayerSmoking[playerid]++;
    return 1;
}
timer ResetDrinking[3000](playerid)
{
    PlayerDrinking[playerid] = 0;
    AddPlayerSmoking(playerid);
    return 1;
}
IkanDiTarik(playerid, status)
{
    if(!SQL_IsCharacterLogged(playerid) || !PlayerData[playerid][pFishing])
        return 0;

    new
        rand = random(8)
    ;

    SetFishingSkill(playerid, 1.0);

    switch(status)
    {
        case 1: {
            switch(rand)
            {
                case 0: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(5.0,15.0));
                case 1: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(10.0,20.0));
                case 2: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(10.0,20.0));
                case 3: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(5.0,15.0));
                case 4: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(5.0,15.0));
                case 5: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(10.0,20.0));
                case 6: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(5.0,15.0));
                case 7: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(10.0,20.0));
            }
        }
        case 2: {
            switch(rand)
            {
                case 0: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(5.0,15.0));
                case 1: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(20.0,30.0));
                case 2: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(15.0,25.0));
                case 3: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(15.0,25.0));
                case 4: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(15.0,25.0));
                case 5: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(20.0,30.0));
                case 6: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(15.0,25.0));
                case 7: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(15.0,30.0));
            }
        }
        case 3: {
            switch(rand)
            {
                case 0: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(5.0,15.0));
                case 1: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(30.0,40.0));
                case 2: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(30.0,40.0));
                case 3: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(25.0,35.0));
                case 4: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(30.0,40.0));
                case 5: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(25.0,35.0));
                case 6: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(30.0,40.0));
                case 7: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(25.0,35.0)); 
            }
        }
    }

    if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid, 4);

    ClearAnimations(playerid);
    PlayerData[playerid][pFishing] = 0;
    BaitEaten[playerid] = false;
    FishClicked[playerid] = 0;
    stop MancingTimer[playerid];
    StopFishing(playerid);
    return 1;
}
timer getFish[30000](playerid)
{
    if(!SQL_IsCharacterLogged(playerid) || !PlayerData[playerid][pFishing])
        return 0;

    BaitEaten[playerid] = true;
    MancingTimer[playerid] = defer MancingGagal(playerid);
    Fishing(playerid);
    SendServerMessage(playerid, "Umpan di tarik tahan tombol "YELLOW"SPRINT "WHITE"untuk menarik ikan dan lepas ketika hijau.");
    ShowPlayerFooter(playerid, "Umpan di tarik tahan tombol ~y~SPRINT ~w~untuk menarik ikan dan lepas ketika hijau.");
    return 1;
}

timer refuseLogin[300000](playerid)
{
    if(IsPlayerConnected(playerid))
    {
        SendServerMessage(playerid, "Anda di keluarkan dari server dikarenakan terlalu lama login ke dalam server.");

        Dialog_Close(playerid);
        KickEx(playerid);
    }
    return 1;
}

timer refuseEmail[300000](playerid) {
    if (IsPlayerConnected(playerid)) {
        SendServerMessage(playerid, "Anda di keluarkan dari server dikarenakan terlalu lama memasukkan email.");

        Dialog_Close(playerid);
        KickEx(playerid);
    }
    return 1;
}

timer refuseVCode[600000](playerid) {
    if (IsPlayerConnected(playerid)) {
        SendServerMessage(playerid, "Anda di keluarkan dari server dikarenakan terlalu lama memasukkan verifikasi kode.");

        Dialog_Close(playerid);
        KickEx(playerid);
    }
    return 1;
}

timer SetPlayerToUnfreeze[2000](playerid)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        PlayerData[playerid][pFreeze] = 0;
        Streamer_ToggleIdleUpdate(playerid,0);
        TogglePlayerControllable(playerid, 1);
    }
    return 1;
}

Dialog:RefillGasPump(playerid, response, listitem, inputtext[])
{
    static pump_id;

    if((pump_id = Pump_Nearest(playerid)) != -1)
    {
        new business_id = Pump_BusinessID(pump_id);

        if(!Business_IsOwner(playerid, business_id))
            return SendErrorMessage(playerid, "Ini bukan pompa bahan bakar milik bisnis mu!");

        if(BusinessData[business_id][bizProducts] < 10)
            return SendErrorMessage(playerid, "Minimal 10 produk untuk mengisi pompa bahan bakar!");

        BusinessData[business_id][bizProducts] -= 10;
        PumpData[pump_id][pumpFuel] += 200;

        if(PumpData[pump_id][pumpFuel] > 1000)
            PumpData[pump_id][pumpFuel] = 1000;

        Pump_Save(pump_id, false);
        Pump_Sync(pump_id);

        SendServerMessage(playerid, "Sukses menambahkan persediaan bahan bakar menjadi "YELLOW"%d liter", PumpData[pump_id][pumpFuel]);
    }
    else SendErrorMessage(playerid, "Kamu tidak berada didekat pompa bahan bakar!");
    return 1;
}

timer UpdateJobInfo[1000](job_id)
{
    Job_Refresh(job_id);
    return 1;
}

timer UpdateTreatmentPrice[1000]()
{
    UpdateDynamic3DTextLabelText(gTreatmentText3D, COLOR_CLIENT, sprintf("[Medical Treatment]\n"WHITE"Type "YELLOW"/treatment "WHITE"to get medical treatment\n"GREEN"%s", FormatNumber(Economy_GetTreatmentPrice())));
    return 1;
}

hook OnEconomyLoaded()
{
    for (new i = 0; i < MAX_DYNAMIC_JOBS; i++)
    {
        if(JobData[i][jobExists])
        {
            if (JobData[i][jobType] == JOB_MECHANIC)
            {
                defer UpdateJobInfo(i);
            }
        }
    }

    UpdateTreatmentPrice();
    return 1;
}

hook OnUpdateComponentPrice(old_price, new_price)
{
    #pragma unused old_price, new_price

    for (new i = 0; i < MAX_DYNAMIC_JOBS; i++)
    {
        if(JobData[i][jobExists])
        {
            if (JobData[i][jobType] == JOB_MECHANIC)
            {
                UpdateJobInfo(i);
            }
        }
    }

    return 1;
}

hook OnUpdateMaterialPrice(old_price, new_price)
{
    #pragma unused old_price, new_price

    for (new i = 0; i < MAX_DYNAMIC_JOBS; i++)
    {
        if(JobData[i][jobExists])
        {
            if (JobData[i][jobType] == JOB_ARMS_DEALER)
            {
                UpdateJobInfo(i);
            }
        }
    }

    return 1;
}

hook OnUpdateTreatmentPrice(old_price, new_price)
{
    #pragma unused old_price, new_price

    UpdateTreatmentPrice();
    return 1;
}

forward DCC_OnMessageCreate(DCC_Message:message);

public DCC_OnMessageCreate(DCC_Message:message)
{
	new realMsg[100];
    DCC_GetMessageContent(message, realMsg, 100);
    new bool:IsBot;
    new DCC_Channel:channel;
 	DCC_GetMessageChannel(message, channel);
    new DCC_User:author;
	DCC_GetMessageAuthor(message, author);
    DCC_IsUserBot(author, IsBot);
    if(channel == g_Discord_Chat && !IsBot) //!IsBot will block BOT's message in game
    {
        new user_name[32 + 1], str[152];
       	DCC_GetUserName(author, user_name, 32);
        format(str,sizeof(str), "{8a6cd1}[DISCORD] {aa1bb5}%s: {ffffff}%s",user_name, realMsg);
        SendClientMessageToAll(-1, str);
    }

    return 1;
}

/*SaveStarterpack(playerid)
{
    if(!PlayerData[playerid][pLogged])
        return 0;

    new
        query[7154];
    format(query, sizeof(query), "UPDATE `characters` SET `Starterpack` = 1 WHERE `ID` = '%d'",
        PlayerData[playerid][pStarterpackSystem]
    );
    mysql_tquery(g_iHandle, query);
    return 1;
}*/



/*CMD:claim(playerid, params[])
{
	if(PlayerData[playerid][pStaterpackSystem] == 0) //jika player tersebut belom menerima staterpack
	{
		new Amount_money = 10000, //jumlah uang staterpack
			strings[128];

		GiveMoney(playerid, Amount_money);
        SaveStarterpack(playerid);
		PlayerData[playerid][pMoney] += Amount_money;

		PlayerData[playerid][pStaterpackSystem] = 1; //staterpack sudah diambil
		SendClientMessage(playerid, 0xFF00FF, "Anda Mendapatkan Staterpack");

		format(strings, sizeof(strings), "{37CD00}Uang: {FFFFFF}+%d", Amount_money);
		SendClientMessage(playerid, 0xFF00FF, strings);

	} else { //jika player tersebut sudah menerima staterpack
		SendClientMessage(playerid, COLOR_WHITE, "{FF0000}ERROR: {FFFFFF}Anda Sudah Menerima Staterpack");
	}
	return 1;
}*/

CMD:cam1(playerid, params[])
{
    InterpolateCameraPos(playerid, 1485.420288, -1677.946289, 54.545982, 1495.827392, -1047.616943, 51.008617, 2000);
	InterpolateCameraLookAt(playerid, 1489.987548, -1677.918579, 52.511463, 1491.996704, -1045.214477, 48.874679, 2000);
    return 1;
}

CMD:cam2(playerid, params[])
{
  	InterpolateCameraPos(playerid, 1474.141357, -1657.624023, 93.588981, 1483.662353, -1675.891967, 56.222351, 2000);
	InterpolateCameraLookAt(playerid, 1474.197021, -1661.968994, 91.115432, 1488.123535, -1675.960693, 53.965579, 2000);
    return 1;
}

CMD:cam3(playerid, params[])
{
  	InterpolateCameraPos(playerid, 1485.420288, -1677.946289, 54.545982, 1495.827392, -1047.616943, 51.008617, 2000);
	InterpolateCameraLookAt(playerid, 1489.987548, -1677.918579, 52.511463, 1491.996704, -1045.214477, 48.874679, 2000);
    return 1;
}

CMD:cam4(playerid, params[])
{
  	InterpolateCameraPos(playerid, 1495.896728, -1054.219970, 42.066879, 1216.954711, -1321.030883, 29.771400, 2000);
	InterpolateCameraLookAt(playerid, 1492.540161, -1050.927001, 40.367076, 1212.237670, -1321.213134, 28.123128, 2000);
    return 1;
}

CMD:cam5(playerid, params[])
{
    InterpolateCameraPos(playerid, 1475.772338, -1589.562988, 82.926986, 1475.661132, -1734.046508, 19.775634, 25000);
	InterpolateCameraLookAt(playerid, 1475.711669, -1594.124145, 80.879623, 1479.744628, -1731.166015, 19.607698, 15000);
    return 1;
}

CMD:cam6(playerid, params[])
{
    InterpolateCameraPos(playerid, -99.0662, -2481.1160, 51.1377, -135.7914, -2506.1101, 51.1377, 20000);
	InterpolateCameraLookAt(playerid, -98.5001, -2481.9478, 51.1388, -135.2253, -2506.9419, 51.1388, 30000);
    return 1;
}